
lab_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08009d68  08009d68  00019d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a264  0800a264  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a264  0800a264  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a264  0800a264  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a264  0800a264  0001a264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000138  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010744  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002268  00000000  00000000  0003095c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00032bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d08  00000000  00000000  000339a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211c3  00000000  00000000  000346b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fb3  00000000  00000000  00055873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4a01  00000000  00000000  00066826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b227  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f9c  00000000  00000000  0012b278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d50 	.word	0x08009d50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009d50 	.word	0x08009d50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0c      	blt.n	8000d20 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <__NVIC_ClearPendingIRQ+0x38>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	3360      	adds	r3, #96	; 0x60
 8000d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0c2      	sub	sp, #264	; 0x108
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f000 fccf 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 f891 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f000 f971 	bl	8001024 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d42:	f000 f93f 	bl	8000fc4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d46:	f000 f8e9 	bl	8000f1c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ring_init(&uart_ring, buff, sizeof(buff) / sizeof(buff[0]) ); // Initialize UART receiver ring buffer.
 8000d4a:	2220      	movs	r2, #32
 8000d4c:	493b      	ldr	r1, [pc, #236]	; (8000e3c <main+0x10c>)
 8000d4e:	483c      	ldr	r0, [pc, #240]	; (8000e40 <main+0x110>)
 8000d50:	f000 fa5c 	bl	800120c <ring_init>
  sprintf((char*)tstring,"UART IT Enter command 'F = ' \r\n");
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	493a      	ldr	r1, [pc, #232]	; (8000e44 <main+0x114>)
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f005 fa08 	bl	8006170 <siprintf>
  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fa33 	bl	80001d0 <strlen>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4619      	mov	r1, r3
 8000d74:	4834      	ldr	r0, [pc, #208]	; (8000e48 <main+0x118>)
 8000d76:	f003 f937 	bl	8003fe8 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2,uart_ring.buffer,1);						 // Start UART receiver in the non blocking mode
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <main+0x110>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4619      	mov	r1, r3
 8000d82:	4831      	ldr	r0, [pc, #196]	; (8000e48 <main+0x118>)
 8000d84:	f003 f99e 	bl	80040c4 <HAL_UART_Receive_IT>
//		  }
//		  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
//	  }


  Delay = (float)1000/Freq;//T = 1c/F ; період.
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <main+0x11c>)
 8000d8a:	ed93 7a00 	vldr	s14, [r3]
 8000d8e:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000e50 <main+0x120>
 8000d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d9a:	ee17 3a90 	vmov	r3, s15
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <main+0x124>)
 8000da2:	801a      	strh	r2, [r3, #0]
  //Delay = (uint16_t)delay;

  if(btn_state == 0)
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <main+0x128>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d11e      	bne.n	8000dea <main+0xba>
      {
        HAL_GPIO_WritePin(GPIOC, Led1_Pin, 1);//
 8000dac:	2201      	movs	r2, #1
 8000dae:	2101      	movs	r1, #1
 8000db0:	482a      	ldr	r0, [pc, #168]	; (8000e5c <main+0x12c>)
 8000db2:	f001 f85f 	bl	8001e74 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <main+0x124>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fcf2 	bl	80017a4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, Led1_Pin, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4825      	ldr	r0, [pc, #148]	; (8000e5c <main+0x12c>)
 8000dc6:	f001 f855 	bl	8001e74 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, Led2_Pin, 1);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4823      	ldr	r0, [pc, #140]	; (8000e5c <main+0x12c>)
 8000dd0:	f001 f850 	bl	8001e74 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <main+0x124>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fce3 	bl	80017a4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, Led2_Pin, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2102      	movs	r1, #2
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <main+0x12c>)
 8000de4:	f001 f846 	bl	8001e74 <HAL_GPIO_WritePin>
 8000de8:	e7ce      	b.n	8000d88 <main+0x58>
      }
      else
      {
        HAL_GPIO_WritePin(GPIOC, Led1_Pin, 1);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2101      	movs	r1, #1
 8000dee:	481b      	ldr	r0, [pc, #108]	; (8000e5c <main+0x12c>)
 8000df0:	f001 f840 	bl	8001e74 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <main+0x124>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fcd3 	bl	80017a4 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOC, Led2_Pin, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2102      	movs	r1, #2
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <main+0x12c>)
 8000e04:	f001 f836 	bl	8001e74 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <main+0x124>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fcc9 	bl	80017a4 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOC, Led1_Pin, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2101      	movs	r1, #1
 8000e16:	4811      	ldr	r0, [pc, #68]	; (8000e5c <main+0x12c>)
 8000e18:	f001 f82c 	bl	8001e74 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <main+0x124>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fcbf 	bl	80017a4 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOC, Led2_Pin, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2102      	movs	r1, #2
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <main+0x12c>)
 8000e2c:	f001 f822 	bl	8001e74 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <main+0x124>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fcb5 	bl	80017a4 <HAL_Delay>
  Delay = (float)1000/Freq;//T = 1c/F ; період.
 8000e3a:	e7a5      	b.n	8000d88 <main+0x58>
 8000e3c:	200002d8 	.word	0x200002d8
 8000e40:	200002f8 	.word	0x200002f8
 8000e44:	08009d68 	.word	0x08009d68
 8000e48:	20000250 	.word	0x20000250
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	447a0000 	.word	0x447a0000
 8000e54:	20000000 	.word	0x20000000
 8000e58:	200002d4 	.word	0x200002d4
 8000e5c:	48000800 	.word	0x48000800

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b096      	sub	sp, #88	; 0x58
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e6a:	2228      	movs	r2, #40	; 0x28
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 faf6 	bl	8005460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e9a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000eb2:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000eb6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f001 f809 	bl	8001ed4 <HAL_RCC_OscConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000ec8:	f000 f9ee 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ecc:	230f      	movs	r3, #15
 8000ece:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 f831 	bl	8002f50 <HAL_RCC_ClockConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ef4:	f000 f9d8 	bl	80012a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fa59 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f10:	f000 f9ca 	bl	80012a8 <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3758      	adds	r7, #88	; 0x58
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <MX_TIM1_Init+0xa4>)
 8000f3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000f42:	f240 123f 	movw	r2, #319	; 0x13f
 8000f46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000f50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f68:	4814      	ldr	r0, [pc, #80]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000f6a:	f002 fb5d 	bl	8003628 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000f74:	f000 f998 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4619      	mov	r1, r3
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000f86:	f002 fd51 	bl	8003a2c <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f90:	f000 f98a 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_TIM1_Init+0xa0>)
 8000fa6:	f002 ff45 	bl	8003e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fb0:	f000 f97a 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3720      	adds	r7, #32
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000204 	.word	0x20000204
 8000fc0:	40012c00 	.word	0x40012c00

08000fc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_USART2_UART_Init+0x58>)
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <MX_USART2_UART_Init+0x5c>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <MX_USART2_UART_Init+0x58>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_USART2_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_USART2_UART_Init+0x58>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_USART2_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_USART2_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_USART2_UART_Init+0x58>)
 8001008:	f002 ffa0 	bl	8003f4c <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001012:	f000 f949 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000250 	.word	0x20000250
 8001020:	40004400 	.word	0x40004400

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_GPIO_Init+0xb8>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a27      	ldr	r2, [pc, #156]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001040:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a21      	ldr	r2, [pc, #132]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_GPIO_Init+0xb8>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a1b      	ldr	r2, [pc, #108]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MX_GPIO_Init+0xb8>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2103      	movs	r1, #3
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <MX_GPIO_Init+0xbc>)
 8001088:	f000 fef4 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800108c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001092:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	480f      	ldr	r0, [pc, #60]	; (80010e0 <MX_GPIO_Init+0xbc>)
 80010a4:	f000 fd5c 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin;
 80010a8:	2303      	movs	r3, #3
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	4808      	ldr	r0, [pc, #32]	; (80010e0 <MX_GPIO_Init+0xbc>)
 80010c0:	f000 fd4e 	bl	8001b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2028      	movs	r0, #40	; 0x28
 80010ca:	f000 fc8e 	bl	80019ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ce:	2028      	movs	r0, #40	; 0x28
 80010d0:	f000 fca7 	bl	8001a22 <HAL_NVIC_EnableIRQ>

}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000800 	.word	0x48000800

080010e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010f4:	d105      	bne.n	8001102 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // сразу же отключаем прерывания на этом пине
 80010f6:	2028      	movs	r0, #40	; 0x28
 80010f8:	f000 fca1 	bl	8001a3e <HAL_NVIC_DisableIRQ>
		// либо выполняем какое-то действие прямо тут, либо поднимаем флажок
		HAL_TIM_Base_Start_IT(&htim1); // запускаем таймер
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <HAL_GPIO_EXTI_Callback+0x28>)
 80010fe:	f002 faeb 	bl	80036d8 <HAL_TIM_Base_Start_IT>
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000204 	.word	0x20000204

08001110 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a13      	ldr	r2, [pc, #76]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d11f      	bne.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		HAL_TIM_Base_Stop_IT(&htim1); // останавливаем таймер
 8001122:	4813      	ldr	r0, [pc, #76]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001124:	f002 fb34 	bl	8003790 <HAL_TIM_Base_Stop_IT>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);  // очищаем бит EXTI_PR (бит прерывания)
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800112a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112e:	615a      	str	r2, [r3, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 8001130:	2028      	movs	r0, #40	; 0x28
 8001132:	f7ff fddf 	bl	8000cf4 <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 8001136:	2028      	movs	r0, #40	; 0x28
 8001138:	f000 fc73 	bl	8001a22 <HAL_NVIC_EnableIRQ>
		//btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 800113c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001142:	f000 fe7f 	bl	8001e44 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10a      	bne.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if(btn_state == 0)
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				btn_state = 1;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
		}
		/*if((btn_prev == 0) && (btn_cur != 0))
		{
		}*/
	}
}
 800115a:	e002      	b.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x52>
			else btn_state = 0;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40012c00 	.word	0x40012c00
 8001170:	20000204 	.word	0x20000204
 8001174:	40010400 	.word	0x40010400
 8001178:	48000800 	.word	0x48000800
 800117c:	200002d4 	.word	0x200002d4

08001180 <HAL_UART_RxCpltCallback>:
//////////////////////////////////////////////////////////UART_IT////////////////////////////////////////////////////////////////
// UART receive interrupt callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	// Check that interrupt caused by UART1
	if (huart == &huart2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <HAL_UART_RxCpltCallback+0x84>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d134      	bne.n	80011fa <HAL_UART_RxCpltCallback+0x7a>
		{
			// Put new character from the UART receiver data register (RDR) to the ring buffer
			ring_putchar(&uart_ring,huart->Instance->RDR);              //питання RDR чи DR?
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4619      	mov	r1, r3
 800119c:	481a      	ldr	r0, [pc, #104]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 800119e:	f000 f863 	bl	8001268 <ring_putchar>
			// Set the overrun flag if the message is longer than ring buffer can hold
			if (uart_ring.end == uart_ring.start) uart_ring.flag.BufferOverrun = 1;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011a4:	88da      	ldrh	r2, [r3, #6]
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d104      	bne.n	80011b8 <HAL_UART_RxCpltCallback+0x38>
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011b0:	7b13      	ldrb	r3, [r2, #12]
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	7313      	strb	r3, [r2, #12]
			// Set the message ready flag if the end of line character has been received
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011be:	88db      	ldrh	r3, [r3, #6]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b0d      	cmp	r3, #13
 80011c8:	d008      	beq.n	80011dc <HAL_UART_RxCpltCallback+0x5c>
					(uart_ring.buffer[uart_ring.end -1] == '\n'))
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011d0:	88db      	ldrh	r3, [r3, #6]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 80011d8:	2b0a      	cmp	r3, #10
 80011da:	d104      	bne.n	80011e6 <HAL_UART_RxCpltCallback+0x66>
				uart_ring.flag.MessageReady = 1;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011de:	7b13      	ldrb	r3, [r2, #12]
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	7313      	strb	r3, [r2, #12]
			// Receive the next character from UART in non blocking mode
			HAL_UART_Receive_IT(&huart2,&uart_ring.buffer[uart_ring.end],1);
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011ec:	88d2      	ldrh	r2, [r2, #6]
 80011ee:	4413      	add	r3, r2
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <HAL_UART_RxCpltCallback+0x84>)
 80011f6:	f002 ff65 	bl	80040c4 <HAL_UART_Receive_IT>
		}
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000250 	.word	0x20000250
 8001208:	200002f8 	.word	0x200002f8

0800120c <ring_init>:
// Initializes the ring buffer
void ring_init(uart_ring_buff_t * uart_ring, uint8_t * buff, uint16_t buff_size)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	4613      	mov	r3, r2
 8001218:	80fb      	strh	r3, [r7, #6]
	uart_ring->buffer = buff;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	601a      	str	r2, [r3, #0]
	uart_ring->size = buff_size;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	811a      	strh	r2, [r3, #8]
	ring_clear(uart_ring);
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 f804 	bl	8001234 <ring_clear>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <ring_clear>:
// Clears the ring buffer
void ring_clear(uart_ring_buff_t * uart_ring)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	uart_ring->start = 0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	809a      	strh	r2, [r3, #4]
	uart_ring->end = 0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	80da      	strh	r2, [r3, #6]
	uart_ring->flag.BufferOverrun = 0;
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	7b13      	ldrb	r3, [r2, #12]
 800124c:	f36f 0341 	bfc	r3, #1, #1
 8001250:	7313      	strb	r3, [r2, #12]
	uart_ring->flag.MessageReady = 0;
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	7b13      	ldrb	r3, [r2, #12]
 8001256:	f36f 0300 	bfc	r3, #0, #1
 800125a:	7313      	strb	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <ring_putchar>:
// Puts a new character to the ring buffer
void ring_putchar(uart_ring_buff_t * uart_ring, uint8_t ch)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	70fb      	strb	r3, [r7, #3]
	uart_ring->buffer[uart_ring->end++] = ch;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	88db      	ldrh	r3, [r3, #6]
 800127c:	1c59      	adds	r1, r3, #1
 800127e:	b288      	uxth	r0, r1
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	80c8      	strh	r0, [r1, #6]
 8001284:	4413      	add	r3, r2
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	701a      	strb	r2, [r3, #0]
	if (uart_ring->end >= uart_ring->size) uart_ring->end = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	88da      	ldrh	r2, [r3, #6]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	891b      	ldrh	r3, [r3, #8]
 8001292:	429a      	cmp	r2, r3
 8001294:	d302      	bcc.n	800129c <ring_putchar+0x34>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	80da      	strh	r2, [r3, #6]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <Error_Handler+0x8>
	...

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_MspInit+0x44>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_MspInit+0x44>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6193      	str	r3, [r2, #24]
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_MspInit+0x44>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_MspInit+0x44>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_MspInit+0x44>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x44>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ea:	2007      	movs	r0, #7
 80012ec:	f000 fb72 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_TIM_Base_MspInit+0x74>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12b      	bne.n	8001366 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_TIM_Base_MspInit+0x78>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <HAL_TIM_Base_MspInit+0x78>)
 8001314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_TIM_Base_MspInit+0x78>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2018      	movs	r0, #24
 800132c:	f000 fb5d 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001330:	2018      	movs	r0, #24
 8001332:	f000 fb76 	bl	8001a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2019      	movs	r0, #25
 800133c:	f000 fb55 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001340:	2019      	movs	r0, #25
 8001342:	f000 fb6e 	bl	8001a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	201a      	movs	r0, #26
 800134c:	f000 fb4d 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001350:	201a      	movs	r0, #26
 8001352:	f000 fb66 	bl	8001a22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	201b      	movs	r0, #27
 800135c:	f000 fb45 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001360:	201b      	movs	r0, #27
 8001362:	f000 fb5e 	bl	8001a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40012c00 	.word	0x40012c00
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <HAL_UART_MspInit+0x8c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d130      	bne.n	80013fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_UART_MspInit+0x90>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	6153      	str	r3, [r2, #20]
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ca:	230c      	movs	r3, #12
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013da:	2307      	movs	r3, #7
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f000 fbba 	bl	8001b60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2026      	movs	r0, #38	; 0x26
 80013f2:	f000 fafa 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013f6:	2026      	movs	r0, #38	; 0x26
 80013f8:	f000 fb13 	bl	8001a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004400 	.word	0x40004400
 8001408:	40021000 	.word	0x40021000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 f984 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001466:	f002 f9c2 	bl	80037ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000204 	.word	0x20000204

08001474 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800147a:	f002 f9b8 	bl	80037ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000204 	.word	0x20000204

08001488 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800148e:	f002 f9ae 	bl	80037ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000204 	.word	0x20000204

0800149c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM1_CC_IRQHandler+0x10>)
 80014a2:	f002 f9a4 	bl	80037ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000204 	.word	0x20000204

080014b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <USART2_IRQHandler+0x10>)
 80014b6:	f002 fe53 	bl	8004160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000250 	.word	0x20000250

080014c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014cc:	f000 fcea 	bl	8001ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
	return 1;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_kill>:

int _kill(int pid, int sig)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014ee:	f003 ff8d 	bl	800540c <__errno>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2216      	movs	r2, #22
 80014f6:	601a      	str	r2, [r3, #0]
	return -1;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <_exit>:

void _exit (int status)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800150c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ffe7 	bl	80014e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001516:	e7fe      	b.n	8001516 <_exit+0x12>

08001518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800152a:	f3af 8000 	nop.w
 800152e:	4601      	mov	r1, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf0      	blt.n	800152a <_read+0x12>
	}

return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e009      	b.n	8001578 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf1      	blt.n	8001564 <_write+0x12>
	}
	return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_close>:

int _close(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
	return -1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b2:	605a      	str	r2, [r3, #4]
	return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <_isatty>:

int _isatty(int file)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	return 1;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
	return 0;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f003 fef2 	bl	800540c <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20003000 	.word	0x20003000
 8001654:	00000400 	.word	0x00000400
 8001658:	20000308 	.word	0x20000308
 800165c:	20000320 	.word	0x20000320

08001660 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800168a:	490e      	ldr	r1, [pc, #56]	; (80016c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <LoopForever+0xe>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a0:	4c0b      	ldr	r4, [pc, #44]	; (80016d0 <LoopForever+0x16>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ae:	f7ff ffd7 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f003 feb1 	bl	8005418 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016b6:	f7ff fb3b 	bl	8000d30 <main>

080016ba <LoopForever>:

LoopForever:
    b LoopForever
 80016ba:	e7fe      	b.n	80016ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016bc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80016c8:	0800a26c 	.word	0x0800a26c
  ldr r2, =_sbss
 80016cc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80016d0:	20000320 	.word	0x20000320

080016d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_2_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_Init+0x28>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_Init+0x28>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f973 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fdde 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40022000 	.word	0x40022000

08001704 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f999 	bl	8001a5a <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001740:	f000 f953 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000008 	.word	0x20000008
 800175c:	20000010 	.word	0x20000010
 8001760:	2000000c 	.word	0x2000000c

08001764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000010 	.word	0x20000010
 8001788:	2000030c 	.word	0x2000030c

0800178c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2000030c 	.word	0x2000030c

080017a4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000010 	.word	0x20000010

080017ec <__NVIC_SetPriorityGrouping>:
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_DisableIRQ>:
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db12      	blt.n	80018c4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	490a      	ldr	r1, [pc, #40]	; (80018d0 <__NVIC_DisableIRQ+0x44>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	3320      	adds	r3, #32
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018b8:	f3bf 8f4f 	dsb	sy
}
 80018bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018be:	f3bf 8f6f 	isb	sy
}
 80018c2:	bf00      	nop
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff05 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff1a 	bl	8001834 <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff8e 	bl	8001928 <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5d 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff0d 	bl	8001850 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff1d 	bl	800188c <__NVIC_DisableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff94 	bl	8001990 <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2204      	movs	r2, #4
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e020      	b.n	8001ad8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 020e 	bic.w	r2, r2, #14
 8001aa4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	2101      	movs	r1, #1
 8001ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d005      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e027      	b.n	8001b56 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 020e 	bic.w	r2, r2, #14
 8001b14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
    } 
  }
  return status;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	e14e      	b.n	8001e0e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8140 	beq.w	8001e08 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d005      	beq.n	8001ba0 <HAL_GPIO_Init+0x40>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d017      	beq.n	8001c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d123      	bne.n	8001c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	6939      	ldr	r1, [r7, #16]
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0203 	and.w	r2, r3, #3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 809a 	beq.w	8001e08 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd4:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <HAL_GPIO_Init+0x2cc>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a54      	ldr	r2, [pc, #336]	; (8001e2c <HAL_GPIO_Init+0x2cc>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b52      	ldr	r3, [pc, #328]	; (8001e2c <HAL_GPIO_Init+0x2cc>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cec:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d16:	d013      	beq.n	8001d40 <HAL_GPIO_Init+0x1e0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_GPIO_Init+0x2d4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00d      	beq.n	8001d3c <HAL_GPIO_Init+0x1dc>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a45      	ldr	r2, [pc, #276]	; (8001e38 <HAL_GPIO_Init+0x2d8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d007      	beq.n	8001d38 <HAL_GPIO_Init+0x1d8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a44      	ldr	r2, [pc, #272]	; (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_GPIO_Init+0x1d4>
 8001d30:	2303      	movs	r3, #3
 8001d32:	e006      	b.n	8001d42 <HAL_GPIO_Init+0x1e2>
 8001d34:	2305      	movs	r3, #5
 8001d36:	e004      	b.n	8001d42 <HAL_GPIO_Init+0x1e2>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e002      	b.n	8001d42 <HAL_GPIO_Init+0x1e2>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_GPIO_Init+0x1e2>
 8001d40:	2300      	movs	r3, #0
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	f002 0203 	and.w	r2, r2, #3
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d52:	4937      	ldr	r1, [pc, #220]	; (8001e30 <HAL_GPIO_Init+0x2d0>)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d84:	4a2e      	ldr	r2, [pc, #184]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dae:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dd8:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e02:	4a0f      	ldr	r2, [pc, #60]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f aea9 	bne.w	8001b70 <HAL_GPIO_Init+0x10>
  }
}
 8001e1e:	bf00      	nop
 8001e20:	bf00      	nop
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	48000400 	.word	0x48000400
 8001e38:	48000800 	.word	0x48000800
 8001e3c:	48000c00 	.word	0x48000c00
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e001      	b.n	8001e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f90e 	bl	80010e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f001 b823 	b.w	8002f40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 817d 	beq.w	800220a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f10:	4bbc      	ldr	r3, [pc, #752]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d00c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f1c:	4bb9      	ldr	r3, [pc, #740]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d15c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x10e>
 8001f28:	4bb6      	ldr	r3, [pc, #728]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d155      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x10e>
 8001f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_RCC_OscConfig+0x94>
 8001f62:	4ba8      	ldr	r3, [pc, #672]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	e015      	b.n	8001f94 <HAL_RCC_OscConfig+0xc0>
 8001f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f90:	4b9c      	ldr	r3, [pc, #624]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fa0:	fa92 f2a2 	rbit	r2, r2
 8001fa4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001fa8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001fac:	fab2 f282 	clz	r2, r2
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f042 0220 	orr.w	r2, r2, #32
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f002 021f 	and.w	r2, r2, #31
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 811f 	beq.w	8002208 <HAL_RCC_OscConfig+0x334>
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 8116 	bne.w	8002208 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f000 bfaf 	b.w	8002f40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_OscConfig+0x12e>
 8001ff4:	4b83      	ldr	r3, [pc, #524]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a82      	ldr	r2, [pc, #520]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8001ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e036      	b.n	8002070 <HAL_RCC_OscConfig+0x19c>
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x158>
 8002012:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7b      	ldr	r2, [pc, #492]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b79      	ldr	r3, [pc, #484]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a78      	ldr	r2, [pc, #480]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e021      	b.n	8002070 <HAL_RCC_OscConfig+0x19c>
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x184>
 800203e:	4b71      	ldr	r3, [pc, #452]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a70      	ldr	r2, [pc, #448]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a6d      	ldr	r2, [pc, #436]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0x19c>
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a69      	ldr	r2, [pc, #420]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800205e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b67      	ldr	r3, [pc, #412]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a66      	ldr	r2, [pc, #408]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800206a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002070:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	f023 020f 	bic.w	r2, r3, #15
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	495f      	ldr	r1, [pc, #380]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002086:	4313      	orrs	r3, r2
 8002088:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d059      	beq.n	800214e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fb77 	bl	800178c <HAL_GetTick>
 800209e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff fb72 	bl	800178c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b64      	cmp	r3, #100	; 0x64
 80020b2:	d902      	bls.n	80020ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	f000 bf43 	b.w	8002f40 <HAL_RCC_OscConfig+0x106c>
 80020ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020be:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80020ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_OscConfig+0x218>
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e015      	b.n	8002118 <HAL_RCC_OscConfig+0x244>
 80020ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002104:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002108:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002114:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800211c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002120:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800212c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ab      	beq.n	80020a4 <HAL_RCC_OscConfig+0x1d0>
 800214c:	e05d      	b.n	800220a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7ff fb1d 	bl	800178c <HAL_GetTick>
 8002152:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff fb18 	bl	800178c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b64      	cmp	r3, #100	; 0x64
 8002166:	d902      	bls.n	800216e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	f000 bee9 	b.w	8002f40 <HAL_RCC_OscConfig+0x106c>
 800216e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002172:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002182:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d102      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2cc>
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	e015      	b.n	80021cc <HAL_RCC_OscConfig+0x2f8>
 80021a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_RCC_OscConfig+0x330>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021d0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80021d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021d8:	fa92 f2a2 	rbit	r2, r2
 80021dc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80021e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	f042 0220 	orr.w	r2, r2, #32
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f002 021f 	and.w	r2, r2, #31
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f202 	lsl.w	r2, r1, r2
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ab      	bne.n	8002158 <HAL_RCC_OscConfig+0x284>
 8002200:	e003      	b.n	800220a <HAL_RCC_OscConfig+0x336>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 817d 	beq.w	800251a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002220:	4ba6      	ldr	r3, [pc, #664]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800222c:	4ba3      	ldr	r3, [pc, #652]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d172      	bne.n	800231e <HAL_RCC_OscConfig+0x44a>
 8002238:	4ba0      	ldr	r3, [pc, #640]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d16c      	bne.n	800231e <HAL_RCC_OscConfig+0x44a>
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002256:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_RCC_OscConfig+0x3a0>
 800226e:	4b93      	ldr	r3, [pc, #588]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e013      	b.n	800229c <HAL_RCC_OscConfig+0x3c8>
 8002274:	2302      	movs	r3, #2
 8002276:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800228c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002298:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2202      	movs	r2, #2
 800229e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80022a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022a6:	fa92 f2a2 	rbit	r2, r2
 80022aa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80022ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80022b2:	fab2 f282 	clz	r2, r2
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f042 0220 	orr.w	r2, r2, #32
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f002 021f 	and.w	r2, r2, #31
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f202 	lsl.w	r2, r1, r2
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCC_OscConfig+0x410>
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	f000 be2e 	b.w	8002f40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	4b75      	ldr	r3, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	21f8      	movs	r1, #248	; 0xf8
 80022fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002302:	fa91 f1a1 	rbit	r1, r1
 8002306:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800230a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800230e:	fab1 f181 	clz	r1, r1
 8002312:	b2c9      	uxtb	r1, r1
 8002314:	408b      	lsls	r3, r1
 8002316:	4969      	ldr	r1, [pc, #420]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231c:	e0fd      	b.n	800251a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8088 	beq.w	8002440 <HAL_RCC_OscConfig+0x56c>
 8002330:	2301      	movs	r3, #1
 8002332:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002342:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002350:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	461a      	mov	r2, r3
 8002358:	2301      	movs	r3, #1
 800235a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fa16 	bl	800178c <HAL_GetTick>
 8002360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002366:	f7ff fa11 	bl	800178c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d902      	bls.n	800237c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	f000 bde2 	b.w	8002f40 <HAL_RCC_OscConfig+0x106c>
 800237c:	2302      	movs	r3, #2
 800237e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800238e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d102      	bne.n	80023ac <HAL_RCC_OscConfig+0x4d8>
 80023a6:	4b45      	ldr	r3, [pc, #276]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	e013      	b.n	80023d4 <HAL_RCC_OscConfig+0x500>
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023d0:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2202      	movs	r2, #2
 80023d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80023da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023de:	fa92 f2a2 	rbit	r2, r2
 80023e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80023e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80023ea:	fab2 f282 	clz	r2, r2
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f042 0220 	orr.w	r2, r2, #32
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f002 021f 	and.w	r2, r2, #31
 80023fa:	2101      	movs	r1, #1
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0af      	beq.n	8002366 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	21f8      	movs	r1, #248	; 0xf8
 800241c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002424:	fa91 f1a1 	rbit	r1, r1
 8002428:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800242c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002430:	fab1 f181 	clz	r1, r1
 8002434:	b2c9      	uxtb	r1, r1
 8002436:	408b      	lsls	r3, r1
 8002438:	4920      	ldr	r1, [pc, #128]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
 800243e:	e06c      	b.n	800251a <HAL_RCC_OscConfig+0x646>
 8002440:	2301      	movs	r3, #1
 8002442:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002452:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	461a      	mov	r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7ff f98e 	bl	800178c <HAL_GetTick>
 8002470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002476:	f7ff f989 	bl	800178c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d902      	bls.n	800248c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	f000 bd5a 	b.w	8002f40 <HAL_RCC_OscConfig+0x106c>
 800248c:	2302      	movs	r3, #2
 800248e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800249e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	095b      	lsrs	r3, r3, #5
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d104      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5ec>
 80024b6:	4b01      	ldr	r3, [pc, #4]	; (80024bc <HAL_RCC_OscConfig+0x5e8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	e015      	b.n	80024e8 <HAL_RCC_OscConfig+0x614>
 80024bc:	40021000 	.word	0x40021000
 80024c0:	2302      	movs	r3, #2
 80024c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80024e4:	4bc8      	ldr	r3, [pc, #800]	; (8002808 <HAL_RCC_OscConfig+0x934>)
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2202      	movs	r2, #2
 80024ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80024ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024f2:	fa92 f2a2 	rbit	r2, r2
 80024f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80024fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ad      	bne.n	8002476 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8110 	beq.w	8002750 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d079      	beq.n	8002634 <HAL_RCC_OscConfig+0x760>
 8002540:	2301      	movs	r3, #1
 8002542:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	4bab      	ldr	r3, [pc, #684]	; (800280c <HAL_RCC_OscConfig+0x938>)
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	461a      	mov	r2, r3
 8002566:	2301      	movs	r3, #1
 8002568:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256a:	f7ff f90f 	bl	800178c <HAL_GetTick>
 800256e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	e00a      	b.n	800258a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002574:	f7ff f90a 	bl	800178c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d902      	bls.n	800258a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	f000 bcdb 	b.w	8002f40 <HAL_RCC_OscConfig+0x106c>
 800258a:	2302      	movs	r3, #2
 800258c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025a4:	2202      	movs	r2, #2
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025c8:	2202      	movs	r2, #2
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e4:	4b88      	ldr	r3, [pc, #544]	; (8002808 <HAL_RCC_OscConfig+0x934>)
 80025e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025f0:	2102      	movs	r1, #2
 80025f2:	6019      	str	r1, [r3, #0]
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f1a3 	rbit	r1, r3
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800260a:	6019      	str	r1, [r3, #0]
  return result;
 800260c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002610:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0a0      	beq.n	8002574 <HAL_RCC_OscConfig+0x6a0>
 8002632:	e08d      	b.n	8002750 <HAL_RCC_OscConfig+0x87c>
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	fa93 f2a3 	rbit	r2, r3
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002656:	601a      	str	r2, [r3, #0]
  return result;
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002660:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_OscConfig+0x938>)
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	461a      	mov	r2, r3
 8002672:	2300      	movs	r3, #0
 8002674:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff f889 	bl	800178c <HAL_GetTick>
 800267a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267e:	e00a      	b.n	8002696 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff f884 	bl	800178c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d902      	bls.n	8002696 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	f000 bc55 	b.w	8002f40 <HAL_RCC_OscConfig+0x106c>
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800269e:	2202      	movs	r2, #2
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026c2:	2202      	movs	r2, #2
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	fa93 f2a3 	rbit	r2, r3
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026e6:	2202      	movs	r2, #2
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	fa93 f2a3 	rbit	r2, r3
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002700:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002702:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCC_OscConfig+0x934>)
 8002704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800270e:	2102      	movs	r1, #2
 8002710:	6019      	str	r1, [r3, #0]
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f1a3 	rbit	r1, r3
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002728:	6019      	str	r1, [r3, #0]
  return result;
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d197      	bne.n	8002680 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 81a1 	beq.w	8002aa8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <HAL_RCC_OscConfig+0x934>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d116      	bne.n	80027a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_RCC_OscConfig+0x934>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	4a22      	ldr	r2, [pc, #136]	; (8002808 <HAL_RCC_OscConfig+0x934>)
 800277e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002782:	61d3      	str	r3, [r2, #28]
 8002784:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_OscConfig+0x934>)
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800279e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027a0:	2301      	movs	r3, #1
 80027a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_RCC_OscConfig+0x93c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11a      	bne.n	80027e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_RCC_OscConfig+0x93c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a16      	ldr	r2, [pc, #88]	; (8002810 <HAL_RCC_OscConfig+0x93c>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7fe ffe5 	bl	800178c <HAL_GetTick>
 80027c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	e009      	b.n	80027dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe ffe0 	bl	800178c <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b64      	cmp	r3, #100	; 0x64
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e3b1      	b.n	8002f40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCC_OscConfig+0x93c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10d      	bne.n	8002814 <HAL_RCC_OscConfig+0x940>
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_OscConfig+0x934>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4a02      	ldr	r2, [pc, #8]	; (8002808 <HAL_RCC_OscConfig+0x934>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6213      	str	r3, [r2, #32]
 8002804:	e03c      	b.n	8002880 <HAL_RCC_OscConfig+0x9ac>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	10908120 	.word	0x10908120
 8002810:	40007000 	.word	0x40007000
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10c      	bne.n	800283e <HAL_RCC_OscConfig+0x96a>
 8002824:	4bc1      	ldr	r3, [pc, #772]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4ac0      	ldr	r2, [pc, #768]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	4bbe      	ldr	r3, [pc, #760]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4abd      	ldr	r2, [pc, #756]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002836:	f023 0304 	bic.w	r3, r3, #4
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e020      	b.n	8002880 <HAL_RCC_OscConfig+0x9ac>
 800283e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002842:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b05      	cmp	r3, #5
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x994>
 800284e:	4bb7      	ldr	r3, [pc, #732]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	4ab6      	ldr	r2, [pc, #728]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6213      	str	r3, [r2, #32]
 800285a:	4bb4      	ldr	r3, [pc, #720]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4ab3      	ldr	r2, [pc, #716]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6213      	str	r3, [r2, #32]
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0x9ac>
 8002868:	4bb0      	ldr	r3, [pc, #704]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4aaf      	ldr	r2, [pc, #700]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6213      	str	r3, [r2, #32]
 8002874:	4bad      	ldr	r3, [pc, #692]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4aac      	ldr	r2, [pc, #688]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8081 	beq.w	8002994 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7fe ff7b 	bl	800178c <HAL_GetTick>
 8002896:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7fe ff76 	bl	800178c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e345      	b.n	8002f40 <HAL_RCC_OscConfig+0x106c>
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028bc:	2202      	movs	r2, #2
 80028be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa93 f2a3 	rbit	r2, r3
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028e0:	2202      	movs	r2, #2
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028fa:	601a      	str	r2, [r3, #0]
  return result;
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002904:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d102      	bne.n	8002920 <HAL_RCC_OscConfig+0xa4c>
 800291a:	4b84      	ldr	r3, [pc, #528]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	e013      	b.n	8002948 <HAL_RCC_OscConfig+0xa74>
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002928:	2202      	movs	r2, #2
 800292a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fa93 f2a3 	rbit	r2, r3
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800294c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002950:	2102      	movs	r1, #2
 8002952:	6011      	str	r1, [r2, #0]
 8002954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002958:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	fa92 f1a2 	rbit	r1, r2
 8002962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002966:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800296a:	6011      	str	r1, [r2, #0]
  return result;
 800296c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002970:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	fab2 f282 	clz	r2, r2
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	f002 021f 	and.w	r2, r2, #31
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f202 	lsl.w	r2, r1, r2
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d084      	beq.n	800289c <HAL_RCC_OscConfig+0x9c8>
 8002992:	e07f      	b.n	8002a94 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7fe fefa 	bl	800178c <HAL_GetTick>
 8002998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	e00b      	b.n	80029b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe fef5 	bl	800178c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e2c4      	b.n	8002f40 <HAL_RCC_OscConfig+0x106c>
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029be:	2202      	movs	r2, #2
 80029c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	fa93 f2a3 	rbit	r2, r3
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029e2:	2202      	movs	r2, #2
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029fc:	601a      	str	r2, [r3, #0]
  return result;
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f043 0302 	orr.w	r3, r3, #2
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d102      	bne.n	8002a22 <HAL_RCC_OscConfig+0xb4e>
 8002a1c:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	e013      	b.n	8002a4a <HAL_RCC_OscConfig+0xb76>
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a4e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a52:	2102      	movs	r1, #2
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	fa92 f1a2 	rbit	r1, r2
 8002a64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a68:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a6c:	6011      	str	r1, [r2, #0]
  return result;
 8002a6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a72:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f002 021f 	and.w	r2, r2, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d184      	bne.n	800299e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a94:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8242 	beq.w	8002f3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aba:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <HAL_RCC_OscConfig+0xc58>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b08      	cmp	r3, #8
 8002ac4:	f000 8213 	beq.w	8002eee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	f040 8162 	bne.w	8002d9e <HAL_RCC_OscConfig+0xeca>
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ae2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002afe:	601a      	str	r2, [r3, #0]
  return result;
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe fe34 	bl	800178c <HAL_GetTick>
 8002b24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b28:	e00c      	b.n	8002b44 <HAL_RCC_OscConfig+0xc70>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe fe2c 	bl	800178c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e1fd      	b.n	8002f40 <HAL_RCC_OscConfig+0x106c>
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	fa93 f2a3 	rbit	r2, r3
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b68:	601a      	str	r2, [r3, #0]
  return result;
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <HAL_RCC_OscConfig+0xcba>
 8002b88:	4bb0      	ldr	r3, [pc, #704]	; (8002e4c <HAL_RCC_OscConfig+0xf78>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	e027      	b.n	8002bde <HAL_RCC_OscConfig+0xd0a>
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	4b9c      	ldr	r3, [pc, #624]	; (8002e4c <HAL_RCC_OscConfig+0xf78>)
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002be6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bea:	6011      	str	r1, [r2, #0]
 8002bec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	fa92 f1a2 	rbit	r1, r2
 8002bfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bfe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c02:	6011      	str	r1, [r2, #0]
  return result;
 8002c04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c08:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	fab2 f282 	clz	r2, r2
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	f042 0220 	orr.w	r2, r2, #32
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	f002 021f 	and.w	r2, r2, #31
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d182      	bne.n	8002b30 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2a:	4b88      	ldr	r3, [pc, #544]	; (8002e4c <HAL_RCC_OscConfig+0xf78>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	497f      	ldr	r1, [pc, #508]	; (8002e4c <HAL_RCC_OscConfig+0xf78>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c76:	601a      	str	r2, [r3, #0]
  return result;
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c80:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	461a      	mov	r2, r3
 8002c94:	2301      	movs	r3, #1
 8002c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fd78 	bl	800178c <HAL_GetTick>
 8002c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca0:	e009      	b.n	8002cb6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe fd73 	bl	800178c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e144      	b.n	8002f40 <HAL_RCC_OscConfig+0x106c>
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002cda:	601a      	str	r2, [r3, #0]
  return result;
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ce4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_RCC_OscConfig+0xe2c>
 8002cfa:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <HAL_RCC_OscConfig+0xf78>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	e027      	b.n	8002d50 <HAL_RCC_OscConfig+0xe7c>
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	fa93 f2a3 	rbit	r2, r3
 8002d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_RCC_OscConfig+0xf78>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d54:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d62:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	fa92 f1a2 	rbit	r1, r2
 8002d6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d70:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d74:	6011      	str	r1, [r2, #0]
  return result;
 8002d76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d7a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	fab2 f282 	clz	r2, r2
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f042 0220 	orr.w	r2, r2, #32
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f002 021f 	and.w	r2, r2, #31
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f202 	lsl.w	r2, r1, r2
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d082      	beq.n	8002ca2 <HAL_RCC_OscConfig+0xdce>
 8002d9c:	e0cf      	b.n	8002f3e <HAL_RCC_OscConfig+0x106a>
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002da6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002daa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fa93 f2a3 	rbit	r2, r3
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dc2:	601a      	str	r2, [r3, #0]
  return result;
 8002dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dcc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	461a      	mov	r2, r3
 8002de0:	2300      	movs	r3, #0
 8002de2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe fcd2 	bl	800178c <HAL_GetTick>
 8002de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dec:	e009      	b.n	8002e02 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe fccd 	bl	800178c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e09e      	b.n	8002f40 <HAL_RCC_OscConfig+0x106c>
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e14:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	fa93 f2a3 	rbit	r2, r3
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e26:	601a      	str	r2, [r3, #0]
  return result;
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d104      	bne.n	8002e50 <HAL_RCC_OscConfig+0xf7c>
 8002e46:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <HAL_RCC_OscConfig+0xf78>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	e029      	b.n	8002ea0 <HAL_RCC_OscConfig+0xfcc>
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_RCC_OscConfig+0x1078>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ea8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eac:	6011      	str	r1, [r2, #0]
 8002eae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eb2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	fa92 f1a2 	rbit	r1, r2
 8002ebc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ec4:	6011      	str	r1, [r2, #0]
  return result;
 8002ec6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	fab2 f282 	clz	r2, r2
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f042 0220 	orr.w	r2, r2, #32
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	f002 021f 	and.w	r2, r2, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d180      	bne.n	8002dee <HAL_RCC_OscConfig+0xf1a>
 8002eec:	e027      	b.n	8002f3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e01e      	b.n	8002f40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_OscConfig+0x1078>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d10b      	bne.n	8002f3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b09e      	sub	sp, #120	; 0x78
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e162      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b90      	ldr	r3, [pc, #576]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b8d      	ldr	r3, [pc, #564]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	498b      	ldr	r1, [pc, #556]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e14a      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b82      	ldr	r3, [pc, #520]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	497f      	ldr	r1, [pc, #508]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80dc 	beq.w	800317c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d13c      	bne.n	8003046 <HAL_RCC_ClockConfig+0xf6>
 8002fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d102      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xa6>
 8002ff0:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e00f      	b.n	8003016 <HAL_RCC_ClockConfig+0xc6>
 8002ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ffa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	667b      	str	r3, [r7, #100]	; 0x64
 8003004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003008:	663b      	str	r3, [r7, #96]	; 0x60
 800300a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003012:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800301a:	65ba      	str	r2, [r7, #88]	; 0x58
 800301c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800301e:	fa92 f2a2 	rbit	r2, r2
 8003022:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003024:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003026:	fab2 f282 	clz	r2, r2
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	f042 0220 	orr.w	r2, r2, #32
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	f002 021f 	and.w	r2, r2, #31
 8003036:	2101      	movs	r1, #1
 8003038:	fa01 f202 	lsl.w	r2, r1, r2
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d17b      	bne.n	800313a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0f3      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d13c      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x178>
 800304e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003052:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003056:	fa93 f3a3 	rbit	r3, r3
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800305c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d102      	bne.n	8003078 <HAL_RCC_ClockConfig+0x128>
 8003072:	4b4f      	ldr	r3, [pc, #316]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	e00f      	b.n	8003098 <HAL_RCC_ClockConfig+0x148>
 8003078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800307c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
 8003086:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
 800308c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003094:	4b46      	ldr	r3, [pc, #280]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309c:	63ba      	str	r2, [r7, #56]	; 0x38
 800309e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80030a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	f042 0220 	orr.w	r2, r2, #32
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	f002 021f 	and.w	r2, r2, #31
 80030b8:	2101      	movs	r1, #1
 80030ba:	fa01 f202 	lsl.w	r2, r1, r2
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d13a      	bne.n	800313a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b2      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
 80030c8:	2302      	movs	r3, #2
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d102      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	e00d      	b.n	800310c <HAL_RCC_ClockConfig+0x1bc>
 80030f0:	2302      	movs	r3, #2
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
 80030fc:	2302      	movs	r3, #2
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	2202      	movs	r2, #2
 800310e:	61ba      	str	r2, [r7, #24]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	fa92 f2a2 	rbit	r2, r2
 8003116:	617a      	str	r2, [r7, #20]
  return result;
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	fab2 f282 	clz	r2, r2
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f042 0220 	orr.w	r2, r2, #32
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	f002 021f 	and.w	r2, r2, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f202 	lsl.w	r2, r1, r2
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e079      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	491a      	ldr	r1, [pc, #104]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800314c:	f7fe fb1e 	bl	800178c <HAL_GetTick>
 8003150:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe fb1a 	bl	800178c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e061      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_ClockConfig+0x260>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d214      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 0207 	bic.w	r2, r3, #7
 8003192:	4906      	ldr	r1, [pc, #24]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <HAL_RCC_ClockConfig+0x25c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e040      	b.n	800322e <HAL_RCC_ClockConfig+0x2de>
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	491a      	ldr	r1, [pc, #104]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4912      	ldr	r1, [pc, #72]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031f2:	f000 f829 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 80031f6:	4601      	mov	r1, r0
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_ClockConfig+0x2e8>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003200:	22f0      	movs	r2, #240	; 0xf0
 8003202:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	fa92 f2a2 	rbit	r2, r2
 800320a:	60fa      	str	r2, [r7, #12]
  return result;
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	fab2 f282 	clz	r2, r2
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	40d3      	lsrs	r3, r2
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x2ec>)
 8003218:	5cd3      	ldrb	r3, [r2, r3]
 800321a:	fa21 f303 	lsr.w	r3, r1, r3
 800321e:	4a08      	ldr	r2, [pc, #32]	; (8003240 <HAL_RCC_ClockConfig+0x2f0>)
 8003220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_RCC_ClockConfig+0x2f4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fa6c 	bl	8001704 <HAL_InitTick>
  
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3778      	adds	r7, #120	; 0x78
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	08009d88 	.word	0x08009d88
 8003240:	20000008 	.word	0x20000008
 8003244:	2000000c 	.word	0x2000000c

08003248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	b480      	push	{r7}
 800324a:	b08b      	sub	sp, #44	; 0x2c
 800324c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003262:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b04      	cmp	r3, #4
 8003270:	d002      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x30>
 8003272:	2b08      	cmp	r3, #8
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x36>
 8003276:	e03c      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_GetSysClockFreq+0xc4>)
 800327a:	623b      	str	r3, [r7, #32]
      break;
 800327c:	e03c      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003284:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003288:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	607a      	str	r2, [r7, #4]
  return result;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	40d3      	lsrs	r3, r2
 800329c:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <HAL_RCC_GetSysClockFreq+0xc8>)
 800329e:	5cd3      	ldrb	r3, [r2, r3]
 80032a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032a2:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	220f      	movs	r2, #15
 80032ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	fa92 f2a2 	rbit	r2, r2
 80032b4:	60fa      	str	r2, [r7, #12]
  return result;
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	40d3      	lsrs	r3, r2
 80032c0:	4a14      	ldr	r2, [pc, #80]	; (8003314 <HAL_RCC_GetSysClockFreq+0xcc>)
 80032c2:	5cd3      	ldrb	r3, [r2, r3]
 80032c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032d0:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_RCC_GetSysClockFreq+0xc4>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
 80032e0:	e004      	b.n	80032ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <HAL_RCC_GetSysClockFreq+0xd0>)
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	623b      	str	r3, [r7, #32]
      break;
 80032f0:	e002      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_RCC_GetSysClockFreq+0xc4>)
 80032f4:	623b      	str	r3, [r7, #32]
      break;
 80032f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f8:	6a3b      	ldr	r3, [r7, #32]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	372c      	adds	r7, #44	; 0x2c
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	007a1200 	.word	0x007a1200
 8003310:	08009da0 	.word	0x08009da0
 8003314:	08009db0 	.word	0x08009db0
 8003318:	003d0900 	.word	0x003d0900

0800331c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b03      	ldr	r3, [pc, #12]	; (8003330 <HAL_RCC_GetHCLKFreq+0x14>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000008 	.word	0x20000008

08003334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800333a:	f7ff ffef 	bl	800331c <HAL_RCC_GetHCLKFreq>
 800333e:	4601      	mov	r1, r0
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003348:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800334c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	fa92 f2a2 	rbit	r2, r2
 8003354:	603a      	str	r2, [r7, #0]
  return result;
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	fab2 f282 	clz	r2, r2
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	40d3      	lsrs	r3, r2
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000
 8003374:	08009d98 	.word	0x08009d98

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800337e:	f7ff ffcd 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003382:	4601      	mov	r1, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800338c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003390:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	fa92 f2a2 	rbit	r2, r2
 8003398:	603a      	str	r2, [r7, #0]
  return result;
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	40d3      	lsrs	r3, r2
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80033a6:	5cd3      	ldrb	r3, [r2, r3]
 80033a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08009d98 	.word	0x08009d98

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b092      	sub	sp, #72	; 0x48
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80cd 	beq.w	800357a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e0:	4b8e      	ldr	r3, [pc, #568]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ec:	4b8b      	ldr	r3, [pc, #556]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a8a      	ldr	r2, [pc, #552]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	61d3      	str	r3, [r2, #28]
 80033f8:	4b88      	ldr	r3, [pc, #544]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b85      	ldr	r3, [pc, #532]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b82      	ldr	r3, [pc, #520]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a81      	ldr	r2, [pc, #516]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe f9b3 	bl	800178c <HAL_GetTick>
 8003426:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe f9af 	bl	800178c <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b64      	cmp	r3, #100	; 0x64
 8003436:	d901      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e0ea      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	4b78      	ldr	r3, [pc, #480]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003448:	4b74      	ldr	r3, [pc, #464]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d07d      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003462:	429a      	cmp	r2, r3
 8003464:	d076      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003466:	4b6d      	ldr	r3, [pc, #436]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	461a      	mov	r2, r3
 8003490:	2301      	movs	r3, #1
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	461a      	mov	r2, r3
 80034b4:	2300      	movs	r3, #0
 80034b6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034bc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d045      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fe f960 	bl	800178c <HAL_GetTick>
 80034cc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fe f95c 	bl	800178c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	; 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e095      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80034e6:	2302      	movs	r3, #2
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
 80034f2:	2302      	movs	r3, #2
 80034f4:	623b      	str	r3, [r7, #32]
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	61fb      	str	r3, [r7, #28]
  return result;
 80034fe:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d102      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003514:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	e007      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800351a:	2302      	movs	r3, #2
 800351c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2202      	movs	r2, #2
 800352c:	613a      	str	r2, [r7, #16]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	fa92 f2a2 	rbit	r2, r2
 8003534:	60fa      	str	r2, [r7, #12]
  return result;
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	fab2 f282 	clz	r2, r2
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	f002 021f 	and.w	r2, r2, #31
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f202 	lsl.w	r2, r1, r2
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0bd      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003554:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	492e      	ldr	r1, [pc, #184]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003562:	4313      	orrs	r3, r2
 8003564:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003566:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800356a:	2b01      	cmp	r3, #1
 800356c:	d105      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800356e:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4a2a      	ldr	r2, [pc, #168]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003578:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d008      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003586:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f023 0203 	bic.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4922      	ldr	r1, [pc, #136]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003594:	4313      	orrs	r3, r2
 8003596:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	f023 0210 	bic.w	r2, r3, #16
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	491a      	ldr	r1, [pc, #104]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	4913      	ldr	r1, [pc, #76]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	490b      	ldr	r1, [pc, #44]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d008      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035fe:	4b07      	ldr	r3, [pc, #28]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	4904      	ldr	r1, [pc, #16]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360c:	4313      	orrs	r3, r2
 800360e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3748      	adds	r7, #72	; 0x48
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	40007000 	.word	0x40007000
 8003624:	10908100 	.word	0x10908100

08003628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e049      	b.n	80036ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fe54 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 fad2 	bl	8003c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d001      	beq.n	80036f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e040      	b.n	8003772 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_TIM_Base_Start_IT+0xa8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x58>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d009      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x58>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a18      	ldr	r2, [pc, #96]	; (8003784 <HAL_TIM_Base_Start_IT+0xac>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x58>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a17      	ldr	r2, [pc, #92]	; (8003788 <HAL_TIM_Base_Start_IT+0xb0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d115      	bne.n	800375c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <HAL_TIM_Base_Start_IT+0xb4>)
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d015      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x96>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d011      	beq.n	800376e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375a:	e008      	b.n	800376e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e000      	b.n	8003770 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40014000 	.word	0x40014000
 800378c:	00010007 	.word	0x00010007

08003790 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10f      	bne.n	80037d8 <HAL_TIM_Base_Stop_IT+0x48>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	f240 4344 	movw	r3, #1092	; 0x444
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <HAL_TIM_Base_Stop_IT+0x48>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d122      	bne.n	800384a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d11b      	bne.n	800384a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f06f 0202 	mvn.w	r2, #2
 800381a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f9ce 	bl	8003bd2 <HAL_TIM_IC_CaptureCallback>
 8003836:	e005      	b.n	8003844 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f9c0 	bl	8003bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f9d1 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b04      	cmp	r3, #4
 8003856:	d122      	bne.n	800389e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b04      	cmp	r3, #4
 8003864:	d11b      	bne.n	800389e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f06f 0204 	mvn.w	r2, #4
 800386e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f9a4 	bl	8003bd2 <HAL_TIM_IC_CaptureCallback>
 800388a:	e005      	b.n	8003898 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f996 	bl	8003bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f9a7 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d122      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d11b      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0208 	mvn.w	r2, #8
 80038c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2204      	movs	r2, #4
 80038c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f97a 	bl	8003bd2 <HAL_TIM_IC_CaptureCallback>
 80038de:	e005      	b.n	80038ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f96c 	bl	8003bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f97d 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d122      	bne.n	8003946 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b10      	cmp	r3, #16
 800390c:	d11b      	bne.n	8003946 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f06f 0210 	mvn.w	r2, #16
 8003916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2208      	movs	r2, #8
 800391c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f950 	bl	8003bd2 <HAL_TIM_IC_CaptureCallback>
 8003932:	e005      	b.n	8003940 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f942 	bl	8003bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f953 	bl	8003be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	d10e      	bne.n	8003972 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0201 	mvn.w	r2, #1
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fd fbcf 	bl	8001110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b80      	cmp	r3, #128	; 0x80
 800397e:	d10e      	bne.n	800399e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398a:	2b80      	cmp	r3, #128	; 0x80
 800398c:	d107      	bne.n	800399e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fac3 	bl	8003f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ac:	d10e      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b8:	2b80      	cmp	r3, #128	; 0x80
 80039ba:	d107      	bne.n	80039cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fab6 	bl	8003f38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b40      	cmp	r3, #64	; 0x40
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f901 	bl	8003bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0220 	mvn.w	r2, #32
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fa76 	bl	8003f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_TIM_ConfigClockSource+0x1c>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0b6      	b.n	8003bb6 <HAL_TIM_ConfigClockSource+0x18a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a84:	d03e      	beq.n	8003b04 <HAL_TIM_ConfigClockSource+0xd8>
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8a:	f200 8087 	bhi.w	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	f000 8086 	beq.w	8003ba2 <HAL_TIM_ConfigClockSource+0x176>
 8003a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9a:	d87f      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003a9c:	2b70      	cmp	r3, #112	; 0x70
 8003a9e:	d01a      	beq.n	8003ad6 <HAL_TIM_ConfigClockSource+0xaa>
 8003aa0:	2b70      	cmp	r3, #112	; 0x70
 8003aa2:	d87b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003aa4:	2b60      	cmp	r3, #96	; 0x60
 8003aa6:	d050      	beq.n	8003b4a <HAL_TIM_ConfigClockSource+0x11e>
 8003aa8:	2b60      	cmp	r3, #96	; 0x60
 8003aaa:	d877      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003aac:	2b50      	cmp	r3, #80	; 0x50
 8003aae:	d03c      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0xfe>
 8003ab0:	2b50      	cmp	r3, #80	; 0x50
 8003ab2:	d873      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d058      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0x13e>
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d86f      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003abc:	2b30      	cmp	r3, #48	; 0x30
 8003abe:	d064      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15e>
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d86b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d060      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15e>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d867      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d05c      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15e>
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d05a      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x15e>
 8003ad4:	e062      	b.n	8003b9c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	6899      	ldr	r1, [r3, #8]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f000 f985 	bl	8003df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	609a      	str	r2, [r3, #8]
      break;
 8003b02:	e04f      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f000 f96e 	bl	8003df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b26:	609a      	str	r2, [r3, #8]
      break;
 8003b28:	e03c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f000 f8e2 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2150      	movs	r1, #80	; 0x50
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f93b 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003b48:	e02c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6859      	ldr	r1, [r3, #4]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f000 f901 	bl	8003d5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2160      	movs	r1, #96	; 0x60
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f92b 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003b68:	e01c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f000 f8c2 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f91b 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003b88:	e00c      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f000 f912 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003b9a:	e003      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba0:	e000      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a32      	ldr	r2, [pc, #200]	; (8003cec <TIM_Base_SetConfig+0xdc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <TIM_Base_SetConfig+0x28>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0x28>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a2f      	ldr	r2, [pc, #188]	; (8003cf0 <TIM_Base_SetConfig+0xe0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a27      	ldr	r2, [pc, #156]	; (8003cec <TIM_Base_SetConfig+0xdc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d00f      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <TIM_Base_SetConfig+0xe0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a23      	ldr	r2, [pc, #140]	; (8003cf4 <TIM_Base_SetConfig+0xe4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a22      	ldr	r2, [pc, #136]	; (8003cf8 <TIM_Base_SetConfig+0xe8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_Base_SetConfig+0x6a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a21      	ldr	r2, [pc, #132]	; (8003cfc <TIM_Base_SetConfig+0xec>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d108      	bne.n	8003c8c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <TIM_Base_SetConfig+0xdc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0xc0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <TIM_Base_SetConfig+0xe4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0xc0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0d      	ldr	r2, [pc, #52]	; (8003cf8 <TIM_Base_SetConfig+0xe8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0xc0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0c      	ldr	r2, [pc, #48]	; (8003cfc <TIM_Base_SetConfig+0xec>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d103      	bne.n	8003cd8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	615a      	str	r2, [r3, #20]
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f023 030a 	bic.w	r3, r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b087      	sub	sp, #28
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	f023 0210 	bic.w	r2, r3, #16
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f043 0307 	orr.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	609a      	str	r2, [r3, #8]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e054      	b.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a17      	ldr	r2, [pc, #92]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00e      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d009      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40000400 	.word	0x40000400
 8003f0c:	40014000 	.word	0x40014000

08003f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e040      	b.n	8003fe0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd fa02 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	; 0x24
 8003f78:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fbe6 	bl	800475c <UART_SetConfig>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e022      	b.n	8003fe0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fd10 	bl	80049c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fd97 	bl	8004b0c <UART_CheckIdleState>
 8003fde:	4603      	mov	r3, r0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b08b      	sub	sp, #44	; 0x2c
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d156      	bne.n	80040ac <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_UART_Transmit_IT+0x22>
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e04f      	b.n	80040ae <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_UART_Transmit_IT+0x34>
 8004018:	2302      	movs	r3, #2
 800401a:	e048      	b.n	80040ae <HAL_UART_Transmit_IT+0xc6>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	88fa      	ldrh	r2, [r7, #6]
 800402e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2221      	movs	r2, #33	; 0x21
 800404c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d107      	bne.n	8004068 <HAL_UART_Transmit_IT+0x80>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a16      	ldr	r2, [pc, #88]	; (80040bc <HAL_UART_Transmit_IT+0xd4>)
 8004064:	669a      	str	r2, [r3, #104]	; 0x68
 8004066:	e002      	b.n	800406e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <HAL_UART_Transmit_IT+0xd8>)
 800406c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	613b      	str	r3, [r7, #16]
   return(result);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	6a3a      	ldr	r2, [r7, #32]
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e6      	bne.n	8004076 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	372c      	adds	r7, #44	; 0x2c
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	0800502b 	.word	0x0800502b
 80040c0:	08004f73 	.word	0x08004f73

080040c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	; 0x28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d13d      	bne.n	8004156 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_UART_Receive_IT+0x22>
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e036      	b.n	8004158 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Receive_IT+0x34>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e02f      	b.n	8004158 <HAL_UART_Receive_IT+0x94>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d018      	beq.n	8004146 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	613b      	str	r3, [r7, #16]
   return(result);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	69f9      	ldr	r1, [r7, #28]
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e6      	bne.n	8004114 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	461a      	mov	r2, r3
 800414a:	68b9      	ldr	r1, [r7, #8]
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fdeb 	bl	8004d28 <UART_Start_Receive_IT>
 8004152:	4603      	mov	r3, r0
 8004154:	e000      	b.n	8004158 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b0ba      	sub	sp, #232	; 0xe8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004186:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800418a:	f640 030f 	movw	r3, #2063	; 0x80f
 800418e:	4013      	ands	r3, r2
 8004190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d115      	bne.n	80041c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00f      	beq.n	80041c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 82a3 	beq.w	8004704 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
      }
      return;
 80041c6:	e29d      	b.n	8004704 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8117 	beq.w	8004400 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041e2:	4b85      	ldr	r3, [pc, #532]	; (80043f8 <HAL_UART_IRQHandler+0x298>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 810a 	beq.w	8004400 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d011      	beq.n	800421c <HAL_UART_IRQHandler+0xbc>
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d011      	beq.n	800424c <HAL_UART_IRQHandler+0xec>
 8004228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2202      	movs	r2, #2
 800423a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d011      	beq.n	800427c <HAL_UART_IRQHandler+0x11c>
 8004258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2204      	movs	r2, #4
 800426a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004272:	f043 0202 	orr.w	r2, r3, #2
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d017      	beq.n	80042b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004298:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2208      	movs	r2, #8
 80042a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ae:	f043 0208 	orr.w	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d012      	beq.n	80042ea <HAL_UART_IRQHandler+0x18a>
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8209 	beq.w	8004708 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d005      	beq.n	8004342 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800433a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800433e:	2b00      	cmp	r3, #0
 8004340:	d04f      	beq.n	80043e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fd9c 	bl	8004e80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d141      	bne.n	80043da <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3308      	adds	r3, #8
 800435c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800436c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004382:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800438e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800439a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1d9      	bne.n	8004356 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d013      	beq.n	80043d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a13      	ldr	r2, [pc, #76]	; (80043fc <HAL_UART_IRQHandler+0x29c>)
 80043b0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd fb94 	bl	8001ae4 <HAL_DMA_Abort_IT>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d017      	beq.n	80043f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80043cc:	4610      	mov	r0, r2
 80043ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	e00f      	b.n	80043f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9ac 	bl	8004730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	e00b      	b.n	80043f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9a8 	bl	8004730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e0:	e007      	b.n	80043f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9a4 	bl	8004730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043f0:	e18a      	b.n	8004708 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f2:	bf00      	nop
    return;
 80043f4:	e188      	b.n	8004708 <HAL_UART_IRQHandler+0x5a8>
 80043f6:	bf00      	nop
 80043f8:	04000120 	.word	0x04000120
 80043fc:	08004f47 	.word	0x08004f47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004404:	2b01      	cmp	r3, #1
 8004406:	f040 8143 	bne.w	8004690 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800440a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 813c 	beq.w	8004690 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8135 	beq.w	8004690 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2210      	movs	r2, #16
 800442c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	f040 80b1 	bne.w	80045a0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800444a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 815c 	beq.w	800470c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800445a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800445e:	429a      	cmp	r2, r3
 8004460:	f080 8154 	bcs.w	800470c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800446a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b20      	cmp	r3, #32
 8004476:	f000 8085 	beq.w	8004584 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800448e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1da      	bne.n	800447a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e1      	bne.n	80044c4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3308      	adds	r3, #8
 8004520:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004524:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004526:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800452a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e3      	bne.n	8004500 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004566:	65bb      	str	r3, [r7, #88]	; 0x58
 8004568:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800456c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e4      	bne.n	8004544 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fa77 	bl	8001a72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004590:	b29b      	uxth	r3, r3
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	b29b      	uxth	r3, r3
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8d3 	bl	8004744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800459e:	e0b5      	b.n	800470c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80a7 	beq.w	8004710 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80045c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80a2 	beq.w	8004710 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045ee:	647b      	str	r3, [r7, #68]	; 0x44
 80045f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e4      	bne.n	80045cc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3308      	adds	r3, #8
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	623b      	str	r3, [r7, #32]
   return(result);
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004626:	633a      	str	r2, [r7, #48]	; 0x30
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800462c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e3      	bne.n	8004602 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	60fb      	str	r3, [r7, #12]
   return(result);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	69b9      	ldr	r1, [r7, #24]
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	617b      	str	r3, [r7, #20]
   return(result);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e4      	bne.n	800464c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004686:	4619      	mov	r1, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f85b 	bl	8004744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800468e:	e03f      	b.n	8004710 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <HAL_UART_IRQHandler+0x55a>
 800469c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fe9f 	bl	80053f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046b8:	e02d      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00e      	beq.n	80046e4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01c      	beq.n	8004714 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
    }
    return;
 80046e2:	e017      	b.n	8004714 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d012      	beq.n	8004716 <HAL_UART_IRQHandler+0x5b6>
 80046f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00c      	beq.n	8004716 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fcf4 	bl	80050ea <UART_EndTransmit_IT>
    return;
 8004702:	e008      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004704:	bf00      	nop
 8004706:	e006      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004708:	bf00      	nop
 800470a:	e004      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
      return;
 800470c:	bf00      	nop
 800470e:	e002      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004714:	bf00      	nop
  }

}
 8004716:	37e8      	adds	r7, #232	; 0xe8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b8a      	ldr	r3, [pc, #552]	; (80049b0 <UART_SetConfig+0x254>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	6979      	ldr	r1, [r7, #20]
 8004790:	430b      	orrs	r3, r1
 8004792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a78      	ldr	r2, [pc, #480]	; (80049b4 <UART_SetConfig+0x258>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d120      	bne.n	800481a <UART_SetConfig+0xbe>
 80047d8:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <UART_SetConfig+0x25c>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d817      	bhi.n	8004814 <UART_SetConfig+0xb8>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x90>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	080047fd 	.word	0x080047fd
 80047f0:	08004809 	.word	0x08004809
 80047f4:	0800480f 	.word	0x0800480f
 80047f8:	08004803 	.word	0x08004803
 80047fc:	2300      	movs	r3, #0
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e01d      	b.n	800483e <UART_SetConfig+0xe2>
 8004802:	2302      	movs	r3, #2
 8004804:	77fb      	strb	r3, [r7, #31]
 8004806:	e01a      	b.n	800483e <UART_SetConfig+0xe2>
 8004808:	2304      	movs	r3, #4
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e017      	b.n	800483e <UART_SetConfig+0xe2>
 800480e:	2308      	movs	r3, #8
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	e014      	b.n	800483e <UART_SetConfig+0xe2>
 8004814:	2310      	movs	r3, #16
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e011      	b.n	800483e <UART_SetConfig+0xe2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a67      	ldr	r2, [pc, #412]	; (80049bc <UART_SetConfig+0x260>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d102      	bne.n	800482a <UART_SetConfig+0xce>
 8004824:	2300      	movs	r3, #0
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e009      	b.n	800483e <UART_SetConfig+0xe2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a64      	ldr	r2, [pc, #400]	; (80049c0 <UART_SetConfig+0x264>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d102      	bne.n	800483a <UART_SetConfig+0xde>
 8004834:	2300      	movs	r3, #0
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e001      	b.n	800483e <UART_SetConfig+0xe2>
 800483a:	2310      	movs	r3, #16
 800483c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004846:	d15b      	bne.n	8004900 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004848:	7ffb      	ldrb	r3, [r7, #31]
 800484a:	2b08      	cmp	r3, #8
 800484c:	d827      	bhi.n	800489e <UART_SetConfig+0x142>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0xf8>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004879 	.word	0x08004879
 8004858:	08004881 	.word	0x08004881
 800485c:	08004889 	.word	0x08004889
 8004860:	0800489f 	.word	0x0800489f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800489f 	.word	0x0800489f
 800486c:	0800489f 	.word	0x0800489f
 8004870:	0800489f 	.word	0x0800489f
 8004874:	08004897 	.word	0x08004897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe fd5c 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 800487c:	61b8      	str	r0, [r7, #24]
        break;
 800487e:	e013      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004880:	f7fe fd7a 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8004884:	61b8      	str	r0, [r7, #24]
        break;
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004888:	4b4e      	ldr	r3, [pc, #312]	; (80049c4 <UART_SetConfig+0x268>)
 800488a:	61bb      	str	r3, [r7, #24]
        break;
 800488c:	e00c      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488e:	f7fe fcdb 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8004892:	61b8      	str	r0, [r7, #24]
        break;
 8004894:	e008      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489a:	61bb      	str	r3, [r7, #24]
        break;
 800489c:	e004      	b.n	80048a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	77bb      	strb	r3, [r7, #30]
        break;
 80048a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d074      	beq.n	8004998 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	005a      	lsls	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	441a      	add	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b0f      	cmp	r3, #15
 80048ca:	d916      	bls.n	80048fa <UART_SetConfig+0x19e>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d2:	d212      	bcs.n	80048fa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f023 030f 	bic.w	r3, r3, #15
 80048dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	89fb      	ldrh	r3, [r7, #14]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	89fa      	ldrh	r2, [r7, #14]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	e04e      	b.n	8004998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	77bb      	strb	r3, [r7, #30]
 80048fe:	e04b      	b.n	8004998 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004900:	7ffb      	ldrb	r3, [r7, #31]
 8004902:	2b08      	cmp	r3, #8
 8004904:	d827      	bhi.n	8004956 <UART_SetConfig+0x1fa>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <UART_SetConfig+0x1b0>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	08004957 	.word	0x08004957
 800491c:	08004947 	.word	0x08004947
 8004920:	08004957 	.word	0x08004957
 8004924:	08004957 	.word	0x08004957
 8004928:	08004957 	.word	0x08004957
 800492c:	0800494f 	.word	0x0800494f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004930:	f7fe fd00 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e013      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004938:	f7fe fd1e 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 800493c:	61b8      	str	r0, [r7, #24]
        break;
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004940:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <UART_SetConfig+0x268>)
 8004942:	61bb      	str	r3, [r7, #24]
        break;
 8004944:	e00c      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004946:	f7fe fc7f 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 800494a:	61b8      	str	r0, [r7, #24]
        break;
 800494c:	e008      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004952:	61bb      	str	r3, [r7, #24]
        break;
 8004954:	e004      	b.n	8004960 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	77bb      	strb	r3, [r7, #30]
        break;
 800495e:	bf00      	nop
    }

    if (pclk != 0U)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	085a      	lsrs	r2, r3, #1
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	441a      	add	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	b29b      	uxth	r3, r3
 800497a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b0f      	cmp	r3, #15
 8004980:	d908      	bls.n	8004994 <UART_SetConfig+0x238>
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004988:	d204      	bcs.n	8004994 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	e001      	b.n	8004998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	efff69f3 	.word	0xefff69f3
 80049b4:	40013800 	.word	0x40013800
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40004400 	.word	0x40004400
 80049c0:	40004800 	.word	0x40004800
 80049c4:	007a1200 	.word	0x007a1200

080049c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01a      	beq.n	8004ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d10a      	bne.n	8004ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b1c:	f7fc fe36 	bl	800178c <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d10e      	bne.n	8004b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f82d 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e023      	b.n	8004b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d10e      	bne.n	8004b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f817 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00d      	b.n	8004b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b09c      	sub	sp, #112	; 0x70
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bae:	e0a5      	b.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb6:	f000 80a1 	beq.w	8004cfc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bba:	f7fc fde7 	bl	800178c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d13e      	bne.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be4:	667b      	str	r3, [r7, #100]	; 0x64
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e6      	bne.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3308      	adds	r3, #8
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	663b      	str	r3, [r7, #96]	; 0x60
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c22:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e5      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e067      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d04f      	beq.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6a:	d147      	bne.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
 8004c96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e6      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cc8:	623a      	str	r2, [r7, #32]
 8004cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69f9      	ldr	r1, [r7, #28]
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e010      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	f43f af4a 	beq.w	8004bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3770      	adds	r7, #112	; 0x70
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b091      	sub	sp, #68	; 0x44
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	d10e      	bne.n	8004d7a <UART_Start_Receive_IT+0x52>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <UART_Start_Receive_IT+0x48>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d6e:	e02d      	b.n	8004dcc <UART_Start_Receive_IT+0xa4>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	22ff      	movs	r2, #255	; 0xff
 8004d74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d78:	e028      	b.n	8004dcc <UART_Start_Receive_IT+0xa4>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10d      	bne.n	8004d9e <UART_Start_Receive_IT+0x76>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <UART_Start_Receive_IT+0x6c>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	22ff      	movs	r2, #255	; 0xff
 8004d8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d92:	e01b      	b.n	8004dcc <UART_Start_Receive_IT+0xa4>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	227f      	movs	r2, #127	; 0x7f
 8004d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d9c:	e016      	b.n	8004dcc <UART_Start_Receive_IT+0xa4>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da6:	d10d      	bne.n	8004dc4 <UART_Start_Receive_IT+0x9c>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <UART_Start_Receive_IT+0x92>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	227f      	movs	r2, #127	; 0x7f
 8004db4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004db8:	e008      	b.n	8004dcc <UART_Start_Receive_IT+0xa4>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	223f      	movs	r2, #63	; 0x3f
 8004dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc2:	e003      	b.n	8004dcc <UART_Start_Receive_IT+0xa4>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2222      	movs	r2, #34	; 0x22
 8004dd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3308      	adds	r3, #8
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3308      	adds	r3, #8
 8004df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dfa:	637a      	str	r2, [r7, #52]	; 0x34
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e5      	bne.n	8004dda <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d107      	bne.n	8004e28 <UART_Start_Receive_IT+0x100>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d103      	bne.n	8004e28 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <UART_Start_Receive_IT+0x150>)
 8004e24:	665a      	str	r2, [r3, #100]	; 0x64
 8004e26:	e002      	b.n	8004e2e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <UART_Start_Receive_IT+0x154>)
 8004e2c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	613b      	str	r3, [r7, #16]
   return(result);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	623b      	str	r3, [r7, #32]
 8004e56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	69f9      	ldr	r1, [r7, #28]
 8004e5a:	6a3a      	ldr	r2, [r7, #32]
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e6      	bne.n	8004e36 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3744      	adds	r7, #68	; 0x44
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	0800529b 	.word	0x0800529b
 8004e7c:	0800513f 	.word	0x0800513f

08004e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b095      	sub	sp, #84	; 0x54
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e6      	bne.n	8004e88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d118      	bne.n	8004f28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0310 	bic.w	r3, r3, #16
 8004f0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	613b      	str	r3, [r7, #16]
   return(result);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e6      	bne.n	8004ef6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f3a:	bf00      	nop
 8004f3c:	3754      	adds	r7, #84	; 0x54
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff fbe3 	bl	8004730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b08f      	sub	sp, #60	; 0x3c
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f7e:	2b21      	cmp	r3, #33	; 0x21
 8004f80:	d14d      	bne.n	800501e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d132      	bne.n	8004ff4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e6      	bne.n	8004f8e <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6979      	ldr	r1, [r7, #20]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	613b      	str	r3, [r7, #16]
   return(result);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e6      	bne.n	8004fc0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004ff2:	e014      	b.n	800501e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	b292      	uxth	r2, r2
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800501e:	bf00      	nop
 8005020:	373c      	adds	r7, #60	; 0x3c
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800502a:	b480      	push	{r7}
 800502c:	b091      	sub	sp, #68	; 0x44
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005036:	2b21      	cmp	r3, #33	; 0x21
 8005038:	d151      	bne.n	80050de <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d132      	bne.n	80050ac <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	623b      	str	r3, [r7, #32]
   return(result);
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505a:	63bb      	str	r3, [r7, #56]	; 0x38
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	633b      	str	r3, [r7, #48]	; 0x30
 8005066:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800506a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	60fb      	str	r3, [r7, #12]
   return(result);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800508c:	637b      	str	r3, [r7, #52]	; 0x34
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	69b9      	ldr	r1, [r7, #24]
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	617b      	str	r3, [r7, #20]
   return(result);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e6      	bne.n	8005078 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80050aa:	e018      	b.n	80050de <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	881a      	ldrh	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050be:	b292      	uxth	r2, r2
 80050c0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c6:	1c9a      	adds	r2, r3, #2
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80050de:	bf00      	nop
 80050e0:	3744      	adds	r7, #68	; 0x44
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b088      	sub	sp, #32
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005106:	61fb      	str	r3, [r7, #28]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6979      	ldr	r1, [r7, #20]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	613b      	str	r3, [r7, #16]
   return(result);
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e6      	bne.n	80050f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff faf3 	bl	800471c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b096      	sub	sp, #88	; 0x58
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800514c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005154:	2b22      	cmp	r3, #34	; 0x22
 8005156:	f040 8094 	bne.w	8005282 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005160:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005164:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005168:	b2d9      	uxtb	r1, r3
 800516a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800516e:	b2da      	uxtb	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	400a      	ands	r2, r1
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d177      	bne.n	8005292 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051b6:	653b      	str	r3, [r7, #80]	; 0x50
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051c0:	647b      	str	r3, [r7, #68]	; 0x44
 80051c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e6      	bne.n	80051a2 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	623b      	str	r3, [r7, #32]
   return(result);
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051f4:	633a      	str	r2, [r7, #48]	; 0x30
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e5      	bne.n	80051d4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005218:	2b01      	cmp	r3, #1
 800521a:	d12e      	bne.n	800527a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0310 	bic.w	r3, r3, #16
 8005236:	64bb      	str	r3, [r7, #72]	; 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	69b9      	ldr	r1, [r7, #24]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	617b      	str	r3, [r7, #20]
   return(result);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e6      	bne.n	8005222 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b10      	cmp	r3, #16
 8005260:	d103      	bne.n	800526a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2210      	movs	r2, #16
 8005268:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff fa66 	bl	8004744 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005278:	e00b      	b.n	8005292 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fb ff80 	bl	8001180 <HAL_UART_RxCpltCallback>
}
 8005280:	e007      	b.n	8005292 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0208 	orr.w	r2, r2, #8
 8005290:	619a      	str	r2, [r3, #24]
}
 8005292:	bf00      	nop
 8005294:	3758      	adds	r7, #88	; 0x58
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b096      	sub	sp, #88	; 0x58
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b0:	2b22      	cmp	r3, #34	; 0x22
 80052b2:	f040 8094 	bne.w	80053de <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80052c6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80052ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052ce:	4013      	ands	r3, r2
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	1c9a      	adds	r2, r3, #2
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d177      	bne.n	80053ee <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531c:	643b      	str	r3, [r7, #64]	; 0x40
 800531e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e6      	bne.n	80052fe <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	64bb      	str	r3, [r7, #72]	; 0x48
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e5      	bne.n	8005330 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005374:	2b01      	cmp	r3, #1
 8005376:	d12e      	bne.n	80053d6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	60bb      	str	r3, [r7, #8]
   return(result);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0310 	bic.w	r3, r3, #16
 8005392:	647b      	str	r3, [r7, #68]	; 0x44
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6979      	ldr	r1, [r7, #20]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	613b      	str	r3, [r7, #16]
   return(result);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e6      	bne.n	800537e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d103      	bne.n	80053c6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2210      	movs	r2, #16
 80053c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff f9b8 	bl	8004744 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053d4:	e00b      	b.n	80053ee <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fb fed2 	bl	8001180 <HAL_UART_RxCpltCallback>
}
 80053dc:	e007      	b.n	80053ee <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0208 	orr.w	r2, r2, #8
 80053ec:	619a      	str	r2, [r3, #24]
}
 80053ee:	bf00      	nop
 80053f0:	3758      	adds	r7, #88	; 0x58
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <__errno>:
 800540c:	4b01      	ldr	r3, [pc, #4]	; (8005414 <__errno+0x8>)
 800540e:	6818      	ldr	r0, [r3, #0]
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000014 	.word	0x20000014

08005418 <__libc_init_array>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4d0d      	ldr	r5, [pc, #52]	; (8005450 <__libc_init_array+0x38>)
 800541c:	4c0d      	ldr	r4, [pc, #52]	; (8005454 <__libc_init_array+0x3c>)
 800541e:	1b64      	subs	r4, r4, r5
 8005420:	10a4      	asrs	r4, r4, #2
 8005422:	2600      	movs	r6, #0
 8005424:	42a6      	cmp	r6, r4
 8005426:	d109      	bne.n	800543c <__libc_init_array+0x24>
 8005428:	4d0b      	ldr	r5, [pc, #44]	; (8005458 <__libc_init_array+0x40>)
 800542a:	4c0c      	ldr	r4, [pc, #48]	; (800545c <__libc_init_array+0x44>)
 800542c:	f004 fc90 	bl	8009d50 <_init>
 8005430:	1b64      	subs	r4, r4, r5
 8005432:	10a4      	asrs	r4, r4, #2
 8005434:	2600      	movs	r6, #0
 8005436:	42a6      	cmp	r6, r4
 8005438:	d105      	bne.n	8005446 <__libc_init_array+0x2e>
 800543a:	bd70      	pop	{r4, r5, r6, pc}
 800543c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005440:	4798      	blx	r3
 8005442:	3601      	adds	r6, #1
 8005444:	e7ee      	b.n	8005424 <__libc_init_array+0xc>
 8005446:	f855 3b04 	ldr.w	r3, [r5], #4
 800544a:	4798      	blx	r3
 800544c:	3601      	adds	r6, #1
 800544e:	e7f2      	b.n	8005436 <__libc_init_array+0x1e>
 8005450:	0800a264 	.word	0x0800a264
 8005454:	0800a264 	.word	0x0800a264
 8005458:	0800a264 	.word	0x0800a264
 800545c:	0800a268 	.word	0x0800a268

08005460 <memset>:
 8005460:	4402      	add	r2, r0
 8005462:	4603      	mov	r3, r0
 8005464:	4293      	cmp	r3, r2
 8005466:	d100      	bne.n	800546a <memset+0xa>
 8005468:	4770      	bx	lr
 800546a:	f803 1b01 	strb.w	r1, [r3], #1
 800546e:	e7f9      	b.n	8005464 <memset+0x4>

08005470 <__cvt>:
 8005470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	ec55 4b10 	vmov	r4, r5, d0
 8005478:	2d00      	cmp	r5, #0
 800547a:	460e      	mov	r6, r1
 800547c:	4619      	mov	r1, r3
 800547e:	462b      	mov	r3, r5
 8005480:	bfbb      	ittet	lt
 8005482:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005486:	461d      	movlt	r5, r3
 8005488:	2300      	movge	r3, #0
 800548a:	232d      	movlt	r3, #45	; 0x2d
 800548c:	700b      	strb	r3, [r1, #0]
 800548e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005490:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005494:	4691      	mov	r9, r2
 8005496:	f023 0820 	bic.w	r8, r3, #32
 800549a:	bfbc      	itt	lt
 800549c:	4622      	movlt	r2, r4
 800549e:	4614      	movlt	r4, r2
 80054a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054a4:	d005      	beq.n	80054b2 <__cvt+0x42>
 80054a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054aa:	d100      	bne.n	80054ae <__cvt+0x3e>
 80054ac:	3601      	adds	r6, #1
 80054ae:	2102      	movs	r1, #2
 80054b0:	e000      	b.n	80054b4 <__cvt+0x44>
 80054b2:	2103      	movs	r1, #3
 80054b4:	ab03      	add	r3, sp, #12
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	ab02      	add	r3, sp, #8
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	ec45 4b10 	vmov	d0, r4, r5
 80054c0:	4653      	mov	r3, sl
 80054c2:	4632      	mov	r2, r6
 80054c4:	f001 fdac 	bl	8007020 <_dtoa_r>
 80054c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054cc:	4607      	mov	r7, r0
 80054ce:	d102      	bne.n	80054d6 <__cvt+0x66>
 80054d0:	f019 0f01 	tst.w	r9, #1
 80054d4:	d022      	beq.n	800551c <__cvt+0xac>
 80054d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054da:	eb07 0906 	add.w	r9, r7, r6
 80054de:	d110      	bne.n	8005502 <__cvt+0x92>
 80054e0:	783b      	ldrb	r3, [r7, #0]
 80054e2:	2b30      	cmp	r3, #48	; 0x30
 80054e4:	d10a      	bne.n	80054fc <__cvt+0x8c>
 80054e6:	2200      	movs	r2, #0
 80054e8:	2300      	movs	r3, #0
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fb faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80054f2:	b918      	cbnz	r0, 80054fc <__cvt+0x8c>
 80054f4:	f1c6 0601 	rsb	r6, r6, #1
 80054f8:	f8ca 6000 	str.w	r6, [sl]
 80054fc:	f8da 3000 	ldr.w	r3, [sl]
 8005500:	4499      	add	r9, r3
 8005502:	2200      	movs	r2, #0
 8005504:	2300      	movs	r3, #0
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	f7fb fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800550e:	b108      	cbz	r0, 8005514 <__cvt+0xa4>
 8005510:	f8cd 900c 	str.w	r9, [sp, #12]
 8005514:	2230      	movs	r2, #48	; 0x30
 8005516:	9b03      	ldr	r3, [sp, #12]
 8005518:	454b      	cmp	r3, r9
 800551a:	d307      	bcc.n	800552c <__cvt+0xbc>
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005520:	1bdb      	subs	r3, r3, r7
 8005522:	4638      	mov	r0, r7
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	b004      	add	sp, #16
 8005528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	9103      	str	r1, [sp, #12]
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e7f0      	b.n	8005516 <__cvt+0xa6>

08005534 <__exponent>:
 8005534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005536:	4603      	mov	r3, r0
 8005538:	2900      	cmp	r1, #0
 800553a:	bfb8      	it	lt
 800553c:	4249      	neglt	r1, r1
 800553e:	f803 2b02 	strb.w	r2, [r3], #2
 8005542:	bfb4      	ite	lt
 8005544:	222d      	movlt	r2, #45	; 0x2d
 8005546:	222b      	movge	r2, #43	; 0x2b
 8005548:	2909      	cmp	r1, #9
 800554a:	7042      	strb	r2, [r0, #1]
 800554c:	dd2a      	ble.n	80055a4 <__exponent+0x70>
 800554e:	f10d 0407 	add.w	r4, sp, #7
 8005552:	46a4      	mov	ip, r4
 8005554:	270a      	movs	r7, #10
 8005556:	46a6      	mov	lr, r4
 8005558:	460a      	mov	r2, r1
 800555a:	fb91 f6f7 	sdiv	r6, r1, r7
 800555e:	fb07 1516 	mls	r5, r7, r6, r1
 8005562:	3530      	adds	r5, #48	; 0x30
 8005564:	2a63      	cmp	r2, #99	; 0x63
 8005566:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800556a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800556e:	4631      	mov	r1, r6
 8005570:	dcf1      	bgt.n	8005556 <__exponent+0x22>
 8005572:	3130      	adds	r1, #48	; 0x30
 8005574:	f1ae 0502 	sub.w	r5, lr, #2
 8005578:	f804 1c01 	strb.w	r1, [r4, #-1]
 800557c:	1c44      	adds	r4, r0, #1
 800557e:	4629      	mov	r1, r5
 8005580:	4561      	cmp	r1, ip
 8005582:	d30a      	bcc.n	800559a <__exponent+0x66>
 8005584:	f10d 0209 	add.w	r2, sp, #9
 8005588:	eba2 020e 	sub.w	r2, r2, lr
 800558c:	4565      	cmp	r5, ip
 800558e:	bf88      	it	hi
 8005590:	2200      	movhi	r2, #0
 8005592:	4413      	add	r3, r2
 8005594:	1a18      	subs	r0, r3, r0
 8005596:	b003      	add	sp, #12
 8005598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800559e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055a2:	e7ed      	b.n	8005580 <__exponent+0x4c>
 80055a4:	2330      	movs	r3, #48	; 0x30
 80055a6:	3130      	adds	r1, #48	; 0x30
 80055a8:	7083      	strb	r3, [r0, #2]
 80055aa:	70c1      	strb	r1, [r0, #3]
 80055ac:	1d03      	adds	r3, r0, #4
 80055ae:	e7f1      	b.n	8005594 <__exponent+0x60>

080055b0 <_printf_float>:
 80055b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b4:	ed2d 8b02 	vpush	{d8}
 80055b8:	b08d      	sub	sp, #52	; 0x34
 80055ba:	460c      	mov	r4, r1
 80055bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055c0:	4616      	mov	r6, r2
 80055c2:	461f      	mov	r7, r3
 80055c4:	4605      	mov	r5, r0
 80055c6:	f002 fe89 	bl	80082dc <_localeconv_r>
 80055ca:	f8d0 a000 	ldr.w	sl, [r0]
 80055ce:	4650      	mov	r0, sl
 80055d0:	f7fa fdfe 	bl	80001d0 <strlen>
 80055d4:	2300      	movs	r3, #0
 80055d6:	930a      	str	r3, [sp, #40]	; 0x28
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	9305      	str	r3, [sp, #20]
 80055dc:	f8d8 3000 	ldr.w	r3, [r8]
 80055e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055e4:	3307      	adds	r3, #7
 80055e6:	f023 0307 	bic.w	r3, r3, #7
 80055ea:	f103 0208 	add.w	r2, r3, #8
 80055ee:	f8c8 2000 	str.w	r2, [r8]
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005602:	9307      	str	r3, [sp, #28]
 8005604:	f8cd 8018 	str.w	r8, [sp, #24]
 8005608:	ee08 0a10 	vmov	s16, r0
 800560c:	4b9f      	ldr	r3, [pc, #636]	; (800588c <_printf_float+0x2dc>)
 800560e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005616:	f7fb fa89 	bl	8000b2c <__aeabi_dcmpun>
 800561a:	bb88      	cbnz	r0, 8005680 <_printf_float+0xd0>
 800561c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005620:	4b9a      	ldr	r3, [pc, #616]	; (800588c <_printf_float+0x2dc>)
 8005622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005626:	f7fb fa63 	bl	8000af0 <__aeabi_dcmple>
 800562a:	bb48      	cbnz	r0, 8005680 <_printf_float+0xd0>
 800562c:	2200      	movs	r2, #0
 800562e:	2300      	movs	r3, #0
 8005630:	4640      	mov	r0, r8
 8005632:	4649      	mov	r1, r9
 8005634:	f7fb fa52 	bl	8000adc <__aeabi_dcmplt>
 8005638:	b110      	cbz	r0, 8005640 <_printf_float+0x90>
 800563a:	232d      	movs	r3, #45	; 0x2d
 800563c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005640:	4b93      	ldr	r3, [pc, #588]	; (8005890 <_printf_float+0x2e0>)
 8005642:	4894      	ldr	r0, [pc, #592]	; (8005894 <_printf_float+0x2e4>)
 8005644:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005648:	bf94      	ite	ls
 800564a:	4698      	movls	r8, r3
 800564c:	4680      	movhi	r8, r0
 800564e:	2303      	movs	r3, #3
 8005650:	6123      	str	r3, [r4, #16]
 8005652:	9b05      	ldr	r3, [sp, #20]
 8005654:	f023 0204 	bic.w	r2, r3, #4
 8005658:	6022      	str	r2, [r4, #0]
 800565a:	f04f 0900 	mov.w	r9, #0
 800565e:	9700      	str	r7, [sp, #0]
 8005660:	4633      	mov	r3, r6
 8005662:	aa0b      	add	r2, sp, #44	; 0x2c
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f9d8 	bl	8005a1c <_printf_common>
 800566c:	3001      	adds	r0, #1
 800566e:	f040 8090 	bne.w	8005792 <_printf_float+0x1e2>
 8005672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005676:	b00d      	add	sp, #52	; 0x34
 8005678:	ecbd 8b02 	vpop	{d8}
 800567c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005680:	4642      	mov	r2, r8
 8005682:	464b      	mov	r3, r9
 8005684:	4640      	mov	r0, r8
 8005686:	4649      	mov	r1, r9
 8005688:	f7fb fa50 	bl	8000b2c <__aeabi_dcmpun>
 800568c:	b140      	cbz	r0, 80056a0 <_printf_float+0xf0>
 800568e:	464b      	mov	r3, r9
 8005690:	2b00      	cmp	r3, #0
 8005692:	bfbc      	itt	lt
 8005694:	232d      	movlt	r3, #45	; 0x2d
 8005696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800569a:	487f      	ldr	r0, [pc, #508]	; (8005898 <_printf_float+0x2e8>)
 800569c:	4b7f      	ldr	r3, [pc, #508]	; (800589c <_printf_float+0x2ec>)
 800569e:	e7d1      	b.n	8005644 <_printf_float+0x94>
 80056a0:	6863      	ldr	r3, [r4, #4]
 80056a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056a6:	9206      	str	r2, [sp, #24]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	d13f      	bne.n	800572c <_printf_float+0x17c>
 80056ac:	2306      	movs	r3, #6
 80056ae:	6063      	str	r3, [r4, #4]
 80056b0:	9b05      	ldr	r3, [sp, #20]
 80056b2:	6861      	ldr	r1, [r4, #4]
 80056b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056b8:	2300      	movs	r3, #0
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	ab0a      	add	r3, sp, #40	; 0x28
 80056be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056c2:	ab09      	add	r3, sp, #36	; 0x24
 80056c4:	ec49 8b10 	vmov	d0, r8, r9
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056d0:	4628      	mov	r0, r5
 80056d2:	f7ff fecd 	bl	8005470 <__cvt>
 80056d6:	9b06      	ldr	r3, [sp, #24]
 80056d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056da:	2b47      	cmp	r3, #71	; 0x47
 80056dc:	4680      	mov	r8, r0
 80056de:	d108      	bne.n	80056f2 <_printf_float+0x142>
 80056e0:	1cc8      	adds	r0, r1, #3
 80056e2:	db02      	blt.n	80056ea <_printf_float+0x13a>
 80056e4:	6863      	ldr	r3, [r4, #4]
 80056e6:	4299      	cmp	r1, r3
 80056e8:	dd41      	ble.n	800576e <_printf_float+0x1be>
 80056ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80056ee:	fa5f fb8b 	uxtb.w	fp, fp
 80056f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056f6:	d820      	bhi.n	800573a <_printf_float+0x18a>
 80056f8:	3901      	subs	r1, #1
 80056fa:	465a      	mov	r2, fp
 80056fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005700:	9109      	str	r1, [sp, #36]	; 0x24
 8005702:	f7ff ff17 	bl	8005534 <__exponent>
 8005706:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005708:	1813      	adds	r3, r2, r0
 800570a:	2a01      	cmp	r2, #1
 800570c:	4681      	mov	r9, r0
 800570e:	6123      	str	r3, [r4, #16]
 8005710:	dc02      	bgt.n	8005718 <_printf_float+0x168>
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	07d2      	lsls	r2, r2, #31
 8005716:	d501      	bpl.n	800571c <_printf_float+0x16c>
 8005718:	3301      	adds	r3, #1
 800571a:	6123      	str	r3, [r4, #16]
 800571c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005720:	2b00      	cmp	r3, #0
 8005722:	d09c      	beq.n	800565e <_printf_float+0xae>
 8005724:	232d      	movs	r3, #45	; 0x2d
 8005726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800572a:	e798      	b.n	800565e <_printf_float+0xae>
 800572c:	9a06      	ldr	r2, [sp, #24]
 800572e:	2a47      	cmp	r2, #71	; 0x47
 8005730:	d1be      	bne.n	80056b0 <_printf_float+0x100>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1bc      	bne.n	80056b0 <_printf_float+0x100>
 8005736:	2301      	movs	r3, #1
 8005738:	e7b9      	b.n	80056ae <_printf_float+0xfe>
 800573a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800573e:	d118      	bne.n	8005772 <_printf_float+0x1c2>
 8005740:	2900      	cmp	r1, #0
 8005742:	6863      	ldr	r3, [r4, #4]
 8005744:	dd0b      	ble.n	800575e <_printf_float+0x1ae>
 8005746:	6121      	str	r1, [r4, #16]
 8005748:	b913      	cbnz	r3, 8005750 <_printf_float+0x1a0>
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	07d0      	lsls	r0, r2, #31
 800574e:	d502      	bpl.n	8005756 <_printf_float+0x1a6>
 8005750:	3301      	adds	r3, #1
 8005752:	440b      	add	r3, r1
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	65a1      	str	r1, [r4, #88]	; 0x58
 8005758:	f04f 0900 	mov.w	r9, #0
 800575c:	e7de      	b.n	800571c <_printf_float+0x16c>
 800575e:	b913      	cbnz	r3, 8005766 <_printf_float+0x1b6>
 8005760:	6822      	ldr	r2, [r4, #0]
 8005762:	07d2      	lsls	r2, r2, #31
 8005764:	d501      	bpl.n	800576a <_printf_float+0x1ba>
 8005766:	3302      	adds	r3, #2
 8005768:	e7f4      	b.n	8005754 <_printf_float+0x1a4>
 800576a:	2301      	movs	r3, #1
 800576c:	e7f2      	b.n	8005754 <_printf_float+0x1a4>
 800576e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005774:	4299      	cmp	r1, r3
 8005776:	db05      	blt.n	8005784 <_printf_float+0x1d4>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	6121      	str	r1, [r4, #16]
 800577c:	07d8      	lsls	r0, r3, #31
 800577e:	d5ea      	bpl.n	8005756 <_printf_float+0x1a6>
 8005780:	1c4b      	adds	r3, r1, #1
 8005782:	e7e7      	b.n	8005754 <_printf_float+0x1a4>
 8005784:	2900      	cmp	r1, #0
 8005786:	bfd4      	ite	le
 8005788:	f1c1 0202 	rsble	r2, r1, #2
 800578c:	2201      	movgt	r2, #1
 800578e:	4413      	add	r3, r2
 8005790:	e7e0      	b.n	8005754 <_printf_float+0x1a4>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	055a      	lsls	r2, r3, #21
 8005796:	d407      	bmi.n	80057a8 <_printf_float+0x1f8>
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	4642      	mov	r2, r8
 800579c:	4631      	mov	r1, r6
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	d12c      	bne.n	8005800 <_printf_float+0x250>
 80057a6:	e764      	b.n	8005672 <_printf_float+0xc2>
 80057a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057ac:	f240 80e0 	bls.w	8005970 <_printf_float+0x3c0>
 80057b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057b4:	2200      	movs	r2, #0
 80057b6:	2300      	movs	r3, #0
 80057b8:	f7fb f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d034      	beq.n	800582a <_printf_float+0x27a>
 80057c0:	4a37      	ldr	r2, [pc, #220]	; (80058a0 <_printf_float+0x2f0>)
 80057c2:	2301      	movs	r3, #1
 80057c4:	4631      	mov	r1, r6
 80057c6:	4628      	mov	r0, r5
 80057c8:	47b8      	blx	r7
 80057ca:	3001      	adds	r0, #1
 80057cc:	f43f af51 	beq.w	8005672 <_printf_float+0xc2>
 80057d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057d4:	429a      	cmp	r2, r3
 80057d6:	db02      	blt.n	80057de <_printf_float+0x22e>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	07d8      	lsls	r0, r3, #31
 80057dc:	d510      	bpl.n	8005800 <_printf_float+0x250>
 80057de:	ee18 3a10 	vmov	r3, s16
 80057e2:	4652      	mov	r2, sl
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f af41 	beq.w	8005672 <_printf_float+0xc2>
 80057f0:	f04f 0800 	mov.w	r8, #0
 80057f4:	f104 091a 	add.w	r9, r4, #26
 80057f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	4543      	cmp	r3, r8
 80057fe:	dc09      	bgt.n	8005814 <_printf_float+0x264>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	079b      	lsls	r3, r3, #30
 8005804:	f100 8105 	bmi.w	8005a12 <_printf_float+0x462>
 8005808:	68e0      	ldr	r0, [r4, #12]
 800580a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800580c:	4298      	cmp	r0, r3
 800580e:	bfb8      	it	lt
 8005810:	4618      	movlt	r0, r3
 8005812:	e730      	b.n	8005676 <_printf_float+0xc6>
 8005814:	2301      	movs	r3, #1
 8005816:	464a      	mov	r2, r9
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	f43f af27 	beq.w	8005672 <_printf_float+0xc2>
 8005824:	f108 0801 	add.w	r8, r8, #1
 8005828:	e7e6      	b.n	80057f8 <_printf_float+0x248>
 800582a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	dc39      	bgt.n	80058a4 <_printf_float+0x2f4>
 8005830:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <_printf_float+0x2f0>)
 8005832:	2301      	movs	r3, #1
 8005834:	4631      	mov	r1, r6
 8005836:	4628      	mov	r0, r5
 8005838:	47b8      	blx	r7
 800583a:	3001      	adds	r0, #1
 800583c:	f43f af19 	beq.w	8005672 <_printf_float+0xc2>
 8005840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005844:	4313      	orrs	r3, r2
 8005846:	d102      	bne.n	800584e <_printf_float+0x29e>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	07d9      	lsls	r1, r3, #31
 800584c:	d5d8      	bpl.n	8005800 <_printf_float+0x250>
 800584e:	ee18 3a10 	vmov	r3, s16
 8005852:	4652      	mov	r2, sl
 8005854:	4631      	mov	r1, r6
 8005856:	4628      	mov	r0, r5
 8005858:	47b8      	blx	r7
 800585a:	3001      	adds	r0, #1
 800585c:	f43f af09 	beq.w	8005672 <_printf_float+0xc2>
 8005860:	f04f 0900 	mov.w	r9, #0
 8005864:	f104 0a1a 	add.w	sl, r4, #26
 8005868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586a:	425b      	negs	r3, r3
 800586c:	454b      	cmp	r3, r9
 800586e:	dc01      	bgt.n	8005874 <_printf_float+0x2c4>
 8005870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005872:	e792      	b.n	800579a <_printf_float+0x1ea>
 8005874:	2301      	movs	r3, #1
 8005876:	4652      	mov	r2, sl
 8005878:	4631      	mov	r1, r6
 800587a:	4628      	mov	r0, r5
 800587c:	47b8      	blx	r7
 800587e:	3001      	adds	r0, #1
 8005880:	f43f aef7 	beq.w	8005672 <_printf_float+0xc2>
 8005884:	f109 0901 	add.w	r9, r9, #1
 8005888:	e7ee      	b.n	8005868 <_printf_float+0x2b8>
 800588a:	bf00      	nop
 800588c:	7fefffff 	.word	0x7fefffff
 8005890:	08009dc4 	.word	0x08009dc4
 8005894:	08009dc8 	.word	0x08009dc8
 8005898:	08009dd0 	.word	0x08009dd0
 800589c:	08009dcc 	.word	0x08009dcc
 80058a0:	08009dd4 	.word	0x08009dd4
 80058a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058a8:	429a      	cmp	r2, r3
 80058aa:	bfa8      	it	ge
 80058ac:	461a      	movge	r2, r3
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	4691      	mov	r9, r2
 80058b2:	dc37      	bgt.n	8005924 <_printf_float+0x374>
 80058b4:	f04f 0b00 	mov.w	fp, #0
 80058b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058bc:	f104 021a 	add.w	r2, r4, #26
 80058c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058c2:	9305      	str	r3, [sp, #20]
 80058c4:	eba3 0309 	sub.w	r3, r3, r9
 80058c8:	455b      	cmp	r3, fp
 80058ca:	dc33      	bgt.n	8005934 <_printf_float+0x384>
 80058cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d0:	429a      	cmp	r2, r3
 80058d2:	db3b      	blt.n	800594c <_printf_float+0x39c>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	07da      	lsls	r2, r3, #31
 80058d8:	d438      	bmi.n	800594c <_printf_float+0x39c>
 80058da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058dc:	9a05      	ldr	r2, [sp, #20]
 80058de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058e0:	1a9a      	subs	r2, r3, r2
 80058e2:	eba3 0901 	sub.w	r9, r3, r1
 80058e6:	4591      	cmp	r9, r2
 80058e8:	bfa8      	it	ge
 80058ea:	4691      	movge	r9, r2
 80058ec:	f1b9 0f00 	cmp.w	r9, #0
 80058f0:	dc35      	bgt.n	800595e <_printf_float+0x3ae>
 80058f2:	f04f 0800 	mov.w	r8, #0
 80058f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058fa:	f104 0a1a 	add.w	sl, r4, #26
 80058fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	eba3 0309 	sub.w	r3, r3, r9
 8005908:	4543      	cmp	r3, r8
 800590a:	f77f af79 	ble.w	8005800 <_printf_float+0x250>
 800590e:	2301      	movs	r3, #1
 8005910:	4652      	mov	r2, sl
 8005912:	4631      	mov	r1, r6
 8005914:	4628      	mov	r0, r5
 8005916:	47b8      	blx	r7
 8005918:	3001      	adds	r0, #1
 800591a:	f43f aeaa 	beq.w	8005672 <_printf_float+0xc2>
 800591e:	f108 0801 	add.w	r8, r8, #1
 8005922:	e7ec      	b.n	80058fe <_printf_float+0x34e>
 8005924:	4613      	mov	r3, r2
 8005926:	4631      	mov	r1, r6
 8005928:	4642      	mov	r2, r8
 800592a:	4628      	mov	r0, r5
 800592c:	47b8      	blx	r7
 800592e:	3001      	adds	r0, #1
 8005930:	d1c0      	bne.n	80058b4 <_printf_float+0x304>
 8005932:	e69e      	b.n	8005672 <_printf_float+0xc2>
 8005934:	2301      	movs	r3, #1
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	9205      	str	r2, [sp, #20]
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f ae97 	beq.w	8005672 <_printf_float+0xc2>
 8005944:	9a05      	ldr	r2, [sp, #20]
 8005946:	f10b 0b01 	add.w	fp, fp, #1
 800594a:	e7b9      	b.n	80058c0 <_printf_float+0x310>
 800594c:	ee18 3a10 	vmov	r3, s16
 8005950:	4652      	mov	r2, sl
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	d1be      	bne.n	80058da <_printf_float+0x32a>
 800595c:	e689      	b.n	8005672 <_printf_float+0xc2>
 800595e:	9a05      	ldr	r2, [sp, #20]
 8005960:	464b      	mov	r3, r9
 8005962:	4442      	add	r2, r8
 8005964:	4631      	mov	r1, r6
 8005966:	4628      	mov	r0, r5
 8005968:	47b8      	blx	r7
 800596a:	3001      	adds	r0, #1
 800596c:	d1c1      	bne.n	80058f2 <_printf_float+0x342>
 800596e:	e680      	b.n	8005672 <_printf_float+0xc2>
 8005970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005972:	2a01      	cmp	r2, #1
 8005974:	dc01      	bgt.n	800597a <_printf_float+0x3ca>
 8005976:	07db      	lsls	r3, r3, #31
 8005978:	d538      	bpl.n	80059ec <_printf_float+0x43c>
 800597a:	2301      	movs	r3, #1
 800597c:	4642      	mov	r2, r8
 800597e:	4631      	mov	r1, r6
 8005980:	4628      	mov	r0, r5
 8005982:	47b8      	blx	r7
 8005984:	3001      	adds	r0, #1
 8005986:	f43f ae74 	beq.w	8005672 <_printf_float+0xc2>
 800598a:	ee18 3a10 	vmov	r3, s16
 800598e:	4652      	mov	r2, sl
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f ae6b 	beq.w	8005672 <_printf_float+0xc2>
 800599c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059a0:	2200      	movs	r2, #0
 80059a2:	2300      	movs	r3, #0
 80059a4:	f7fb f890 	bl	8000ac8 <__aeabi_dcmpeq>
 80059a8:	b9d8      	cbnz	r0, 80059e2 <_printf_float+0x432>
 80059aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ac:	f108 0201 	add.w	r2, r8, #1
 80059b0:	3b01      	subs	r3, #1
 80059b2:	4631      	mov	r1, r6
 80059b4:	4628      	mov	r0, r5
 80059b6:	47b8      	blx	r7
 80059b8:	3001      	adds	r0, #1
 80059ba:	d10e      	bne.n	80059da <_printf_float+0x42a>
 80059bc:	e659      	b.n	8005672 <_printf_float+0xc2>
 80059be:	2301      	movs	r3, #1
 80059c0:	4652      	mov	r2, sl
 80059c2:	4631      	mov	r1, r6
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	f43f ae52 	beq.w	8005672 <_printf_float+0xc2>
 80059ce:	f108 0801 	add.w	r8, r8, #1
 80059d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d4:	3b01      	subs	r3, #1
 80059d6:	4543      	cmp	r3, r8
 80059d8:	dcf1      	bgt.n	80059be <_printf_float+0x40e>
 80059da:	464b      	mov	r3, r9
 80059dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059e0:	e6dc      	b.n	800579c <_printf_float+0x1ec>
 80059e2:	f04f 0800 	mov.w	r8, #0
 80059e6:	f104 0a1a 	add.w	sl, r4, #26
 80059ea:	e7f2      	b.n	80059d2 <_printf_float+0x422>
 80059ec:	2301      	movs	r3, #1
 80059ee:	4642      	mov	r2, r8
 80059f0:	e7df      	b.n	80059b2 <_printf_float+0x402>
 80059f2:	2301      	movs	r3, #1
 80059f4:	464a      	mov	r2, r9
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	f43f ae38 	beq.w	8005672 <_printf_float+0xc2>
 8005a02:	f108 0801 	add.w	r8, r8, #1
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a0a:	1a5b      	subs	r3, r3, r1
 8005a0c:	4543      	cmp	r3, r8
 8005a0e:	dcf0      	bgt.n	80059f2 <_printf_float+0x442>
 8005a10:	e6fa      	b.n	8005808 <_printf_float+0x258>
 8005a12:	f04f 0800 	mov.w	r8, #0
 8005a16:	f104 0919 	add.w	r9, r4, #25
 8005a1a:	e7f4      	b.n	8005a06 <_printf_float+0x456>

08005a1c <_printf_common>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	4616      	mov	r6, r2
 8005a22:	4699      	mov	r9, r3
 8005a24:	688a      	ldr	r2, [r1, #8]
 8005a26:	690b      	ldr	r3, [r1, #16]
 8005a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bfb8      	it	lt
 8005a30:	4613      	movlt	r3, r2
 8005a32:	6033      	str	r3, [r6, #0]
 8005a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a38:	4607      	mov	r7, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	b10a      	cbz	r2, 8005a42 <_printf_common+0x26>
 8005a3e:	3301      	adds	r3, #1
 8005a40:	6033      	str	r3, [r6, #0]
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	0699      	lsls	r1, r3, #26
 8005a46:	bf42      	ittt	mi
 8005a48:	6833      	ldrmi	r3, [r6, #0]
 8005a4a:	3302      	addmi	r3, #2
 8005a4c:	6033      	strmi	r3, [r6, #0]
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	f015 0506 	ands.w	r5, r5, #6
 8005a54:	d106      	bne.n	8005a64 <_printf_common+0x48>
 8005a56:	f104 0a19 	add.w	sl, r4, #25
 8005a5a:	68e3      	ldr	r3, [r4, #12]
 8005a5c:	6832      	ldr	r2, [r6, #0]
 8005a5e:	1a9b      	subs	r3, r3, r2
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	dc26      	bgt.n	8005ab2 <_printf_common+0x96>
 8005a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a68:	1e13      	subs	r3, r2, #0
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	bf18      	it	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	0692      	lsls	r2, r2, #26
 8005a72:	d42b      	bmi.n	8005acc <_printf_common+0xb0>
 8005a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c0      	blx	r8
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d01e      	beq.n	8005ac0 <_printf_common+0xa4>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	68e5      	ldr	r5, [r4, #12]
 8005a86:	6832      	ldr	r2, [r6, #0]
 8005a88:	f003 0306 	and.w	r3, r3, #6
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	bf08      	it	eq
 8005a90:	1aad      	subeq	r5, r5, r2
 8005a92:	68a3      	ldr	r3, [r4, #8]
 8005a94:	6922      	ldr	r2, [r4, #16]
 8005a96:	bf0c      	ite	eq
 8005a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a9c:	2500      	movne	r5, #0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	bfc4      	itt	gt
 8005aa2:	1a9b      	subgt	r3, r3, r2
 8005aa4:	18ed      	addgt	r5, r5, r3
 8005aa6:	2600      	movs	r6, #0
 8005aa8:	341a      	adds	r4, #26
 8005aaa:	42b5      	cmp	r5, r6
 8005aac:	d11a      	bne.n	8005ae4 <_printf_common+0xc8>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e008      	b.n	8005ac4 <_printf_common+0xa8>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4652      	mov	r2, sl
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4638      	mov	r0, r7
 8005aba:	47c0      	blx	r8
 8005abc:	3001      	adds	r0, #1
 8005abe:	d103      	bne.n	8005ac8 <_printf_common+0xac>
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	3501      	adds	r5, #1
 8005aca:	e7c6      	b.n	8005a5a <_printf_common+0x3e>
 8005acc:	18e1      	adds	r1, r4, r3
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	2030      	movs	r0, #48	; 0x30
 8005ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ad6:	4422      	add	r2, r4
 8005ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	e7c7      	b.n	8005a74 <_printf_common+0x58>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4649      	mov	r1, r9
 8005aea:	4638      	mov	r0, r7
 8005aec:	47c0      	blx	r8
 8005aee:	3001      	adds	r0, #1
 8005af0:	d0e6      	beq.n	8005ac0 <_printf_common+0xa4>
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7d9      	b.n	8005aaa <_printf_common+0x8e>
	...

08005af8 <_printf_i>:
 8005af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005afc:	7e0f      	ldrb	r7, [r1, #24]
 8005afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b00:	2f78      	cmp	r7, #120	; 0x78
 8005b02:	4691      	mov	r9, r2
 8005b04:	4680      	mov	r8, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b0e:	d807      	bhi.n	8005b20 <_printf_i+0x28>
 8005b10:	2f62      	cmp	r7, #98	; 0x62
 8005b12:	d80a      	bhi.n	8005b2a <_printf_i+0x32>
 8005b14:	2f00      	cmp	r7, #0
 8005b16:	f000 80d8 	beq.w	8005cca <_printf_i+0x1d2>
 8005b1a:	2f58      	cmp	r7, #88	; 0x58
 8005b1c:	f000 80a3 	beq.w	8005c66 <_printf_i+0x16e>
 8005b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b28:	e03a      	b.n	8005ba0 <_printf_i+0xa8>
 8005b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b2e:	2b15      	cmp	r3, #21
 8005b30:	d8f6      	bhi.n	8005b20 <_printf_i+0x28>
 8005b32:	a101      	add	r1, pc, #4	; (adr r1, 8005b38 <_printf_i+0x40>)
 8005b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b38:	08005b91 	.word	0x08005b91
 8005b3c:	08005ba5 	.word	0x08005ba5
 8005b40:	08005b21 	.word	0x08005b21
 8005b44:	08005b21 	.word	0x08005b21
 8005b48:	08005b21 	.word	0x08005b21
 8005b4c:	08005b21 	.word	0x08005b21
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005b21 	.word	0x08005b21
 8005b58:	08005b21 	.word	0x08005b21
 8005b5c:	08005b21 	.word	0x08005b21
 8005b60:	08005b21 	.word	0x08005b21
 8005b64:	08005cb1 	.word	0x08005cb1
 8005b68:	08005bd5 	.word	0x08005bd5
 8005b6c:	08005c93 	.word	0x08005c93
 8005b70:	08005b21 	.word	0x08005b21
 8005b74:	08005b21 	.word	0x08005b21
 8005b78:	08005cd3 	.word	0x08005cd3
 8005b7c:	08005b21 	.word	0x08005b21
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005b21 	.word	0x08005b21
 8005b88:	08005b21 	.word	0x08005b21
 8005b8c:	08005c9b 	.word	0x08005c9b
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	602a      	str	r2, [r5, #0]
 8005b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0a3      	b.n	8005cec <_printf_i+0x1f4>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	6829      	ldr	r1, [r5, #0]
 8005ba8:	0606      	lsls	r6, r0, #24
 8005baa:	f101 0304 	add.w	r3, r1, #4
 8005bae:	d50a      	bpl.n	8005bc6 <_printf_i+0xce>
 8005bb0:	680e      	ldr	r6, [r1, #0]
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	2e00      	cmp	r6, #0
 8005bb6:	da03      	bge.n	8005bc0 <_printf_i+0xc8>
 8005bb8:	232d      	movs	r3, #45	; 0x2d
 8005bba:	4276      	negs	r6, r6
 8005bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc0:	485e      	ldr	r0, [pc, #376]	; (8005d3c <_printf_i+0x244>)
 8005bc2:	230a      	movs	r3, #10
 8005bc4:	e019      	b.n	8005bfa <_printf_i+0x102>
 8005bc6:	680e      	ldr	r6, [r1, #0]
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bce:	bf18      	it	ne
 8005bd0:	b236      	sxthne	r6, r6
 8005bd2:	e7ef      	b.n	8005bb4 <_printf_i+0xbc>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	1d19      	adds	r1, r3, #4
 8005bda:	6029      	str	r1, [r5, #0]
 8005bdc:	0601      	lsls	r1, r0, #24
 8005bde:	d501      	bpl.n	8005be4 <_printf_i+0xec>
 8005be0:	681e      	ldr	r6, [r3, #0]
 8005be2:	e002      	b.n	8005bea <_printf_i+0xf2>
 8005be4:	0646      	lsls	r6, r0, #25
 8005be6:	d5fb      	bpl.n	8005be0 <_printf_i+0xe8>
 8005be8:	881e      	ldrh	r6, [r3, #0]
 8005bea:	4854      	ldr	r0, [pc, #336]	; (8005d3c <_printf_i+0x244>)
 8005bec:	2f6f      	cmp	r7, #111	; 0x6f
 8005bee:	bf0c      	ite	eq
 8005bf0:	2308      	moveq	r3, #8
 8005bf2:	230a      	movne	r3, #10
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bfa:	6865      	ldr	r5, [r4, #4]
 8005bfc:	60a5      	str	r5, [r4, #8]
 8005bfe:	2d00      	cmp	r5, #0
 8005c00:	bfa2      	ittt	ge
 8005c02:	6821      	ldrge	r1, [r4, #0]
 8005c04:	f021 0104 	bicge.w	r1, r1, #4
 8005c08:	6021      	strge	r1, [r4, #0]
 8005c0a:	b90e      	cbnz	r6, 8005c10 <_printf_i+0x118>
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	d04d      	beq.n	8005cac <_printf_i+0x1b4>
 8005c10:	4615      	mov	r5, r2
 8005c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c16:	fb03 6711 	mls	r7, r3, r1, r6
 8005c1a:	5dc7      	ldrb	r7, [r0, r7]
 8005c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c20:	4637      	mov	r7, r6
 8005c22:	42bb      	cmp	r3, r7
 8005c24:	460e      	mov	r6, r1
 8005c26:	d9f4      	bls.n	8005c12 <_printf_i+0x11a>
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d10b      	bne.n	8005c44 <_printf_i+0x14c>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	07de      	lsls	r6, r3, #31
 8005c30:	d508      	bpl.n	8005c44 <_printf_i+0x14c>
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	6861      	ldr	r1, [r4, #4]
 8005c36:	4299      	cmp	r1, r3
 8005c38:	bfde      	ittt	le
 8005c3a:	2330      	movle	r3, #48	; 0x30
 8005c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c44:	1b52      	subs	r2, r2, r5
 8005c46:	6122      	str	r2, [r4, #16]
 8005c48:	f8cd a000 	str.w	sl, [sp]
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	aa03      	add	r2, sp, #12
 8005c50:	4621      	mov	r1, r4
 8005c52:	4640      	mov	r0, r8
 8005c54:	f7ff fee2 	bl	8005a1c <_printf_common>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d14c      	bne.n	8005cf6 <_printf_i+0x1fe>
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c60:	b004      	add	sp, #16
 8005c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c66:	4835      	ldr	r0, [pc, #212]	; (8005d3c <_printf_i+0x244>)
 8005c68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c6c:	6829      	ldr	r1, [r5, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c74:	6029      	str	r1, [r5, #0]
 8005c76:	061d      	lsls	r5, r3, #24
 8005c78:	d514      	bpl.n	8005ca4 <_printf_i+0x1ac>
 8005c7a:	07df      	lsls	r7, r3, #31
 8005c7c:	bf44      	itt	mi
 8005c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c82:	6023      	strmi	r3, [r4, #0]
 8005c84:	b91e      	cbnz	r6, 8005c8e <_printf_i+0x196>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	f023 0320 	bic.w	r3, r3, #32
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	2310      	movs	r3, #16
 8005c90:	e7b0      	b.n	8005bf4 <_printf_i+0xfc>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	f043 0320 	orr.w	r3, r3, #32
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	2378      	movs	r3, #120	; 0x78
 8005c9c:	4828      	ldr	r0, [pc, #160]	; (8005d40 <_printf_i+0x248>)
 8005c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ca2:	e7e3      	b.n	8005c6c <_printf_i+0x174>
 8005ca4:	0659      	lsls	r1, r3, #25
 8005ca6:	bf48      	it	mi
 8005ca8:	b2b6      	uxthmi	r6, r6
 8005caa:	e7e6      	b.n	8005c7a <_printf_i+0x182>
 8005cac:	4615      	mov	r5, r2
 8005cae:	e7bb      	b.n	8005c28 <_printf_i+0x130>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	6826      	ldr	r6, [r4, #0]
 8005cb4:	6961      	ldr	r1, [r4, #20]
 8005cb6:	1d18      	adds	r0, r3, #4
 8005cb8:	6028      	str	r0, [r5, #0]
 8005cba:	0635      	lsls	r5, r6, #24
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	d501      	bpl.n	8005cc4 <_printf_i+0x1cc>
 8005cc0:	6019      	str	r1, [r3, #0]
 8005cc2:	e002      	b.n	8005cca <_printf_i+0x1d2>
 8005cc4:	0670      	lsls	r0, r6, #25
 8005cc6:	d5fb      	bpl.n	8005cc0 <_printf_i+0x1c8>
 8005cc8:	8019      	strh	r1, [r3, #0]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6123      	str	r3, [r4, #16]
 8005cce:	4615      	mov	r5, r2
 8005cd0:	e7ba      	b.n	8005c48 <_printf_i+0x150>
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	1d1a      	adds	r2, r3, #4
 8005cd6:	602a      	str	r2, [r5, #0]
 8005cd8:	681d      	ldr	r5, [r3, #0]
 8005cda:	6862      	ldr	r2, [r4, #4]
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f7fa fa7e 	bl	80001e0 <memchr>
 8005ce4:	b108      	cbz	r0, 8005cea <_printf_i+0x1f2>
 8005ce6:	1b40      	subs	r0, r0, r5
 8005ce8:	6060      	str	r0, [r4, #4]
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	6123      	str	r3, [r4, #16]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf4:	e7a8      	b.n	8005c48 <_printf_i+0x150>
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	47d0      	blx	sl
 8005d00:	3001      	adds	r0, #1
 8005d02:	d0ab      	beq.n	8005c5c <_printf_i+0x164>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	079b      	lsls	r3, r3, #30
 8005d08:	d413      	bmi.n	8005d32 <_printf_i+0x23a>
 8005d0a:	68e0      	ldr	r0, [r4, #12]
 8005d0c:	9b03      	ldr	r3, [sp, #12]
 8005d0e:	4298      	cmp	r0, r3
 8005d10:	bfb8      	it	lt
 8005d12:	4618      	movlt	r0, r3
 8005d14:	e7a4      	b.n	8005c60 <_printf_i+0x168>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4632      	mov	r2, r6
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	47d0      	blx	sl
 8005d20:	3001      	adds	r0, #1
 8005d22:	d09b      	beq.n	8005c5c <_printf_i+0x164>
 8005d24:	3501      	adds	r5, #1
 8005d26:	68e3      	ldr	r3, [r4, #12]
 8005d28:	9903      	ldr	r1, [sp, #12]
 8005d2a:	1a5b      	subs	r3, r3, r1
 8005d2c:	42ab      	cmp	r3, r5
 8005d2e:	dcf2      	bgt.n	8005d16 <_printf_i+0x21e>
 8005d30:	e7eb      	b.n	8005d0a <_printf_i+0x212>
 8005d32:	2500      	movs	r5, #0
 8005d34:	f104 0619 	add.w	r6, r4, #25
 8005d38:	e7f5      	b.n	8005d26 <_printf_i+0x22e>
 8005d3a:	bf00      	nop
 8005d3c:	08009dd6 	.word	0x08009dd6
 8005d40:	08009de7 	.word	0x08009de7

08005d44 <_scanf_float>:
 8005d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d48:	b087      	sub	sp, #28
 8005d4a:	4617      	mov	r7, r2
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	688b      	ldr	r3, [r1, #8]
 8005d50:	1e5a      	subs	r2, r3, #1
 8005d52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005d56:	bf83      	ittte	hi
 8005d58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d5c:	195b      	addhi	r3, r3, r5
 8005d5e:	9302      	strhi	r3, [sp, #8]
 8005d60:	2300      	movls	r3, #0
 8005d62:	bf86      	itte	hi
 8005d64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d68:	608b      	strhi	r3, [r1, #8]
 8005d6a:	9302      	strls	r3, [sp, #8]
 8005d6c:	680b      	ldr	r3, [r1, #0]
 8005d6e:	468b      	mov	fp, r1
 8005d70:	2500      	movs	r5, #0
 8005d72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d76:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d7e:	4680      	mov	r8, r0
 8005d80:	460c      	mov	r4, r1
 8005d82:	465e      	mov	r6, fp
 8005d84:	46aa      	mov	sl, r5
 8005d86:	46a9      	mov	r9, r5
 8005d88:	9501      	str	r5, [sp, #4]
 8005d8a:	68a2      	ldr	r2, [r4, #8]
 8005d8c:	b152      	cbz	r2, 8005da4 <_scanf_float+0x60>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b4e      	cmp	r3, #78	; 0x4e
 8005d94:	d864      	bhi.n	8005e60 <_scanf_float+0x11c>
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d83c      	bhi.n	8005e14 <_scanf_float+0xd0>
 8005d9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d9e:	b2c8      	uxtb	r0, r1
 8005da0:	280e      	cmp	r0, #14
 8005da2:	d93a      	bls.n	8005e1a <_scanf_float+0xd6>
 8005da4:	f1b9 0f00 	cmp.w	r9, #0
 8005da8:	d003      	beq.n	8005db2 <_scanf_float+0x6e>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005db6:	f1ba 0f01 	cmp.w	sl, #1
 8005dba:	f200 8113 	bhi.w	8005fe4 <_scanf_float+0x2a0>
 8005dbe:	455e      	cmp	r6, fp
 8005dc0:	f200 8105 	bhi.w	8005fce <_scanf_float+0x28a>
 8005dc4:	2501      	movs	r5, #1
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	b007      	add	sp, #28
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005dd2:	2a0d      	cmp	r2, #13
 8005dd4:	d8e6      	bhi.n	8005da4 <_scanf_float+0x60>
 8005dd6:	a101      	add	r1, pc, #4	; (adr r1, 8005ddc <_scanf_float+0x98>)
 8005dd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ddc:	08005f1b 	.word	0x08005f1b
 8005de0:	08005da5 	.word	0x08005da5
 8005de4:	08005da5 	.word	0x08005da5
 8005de8:	08005da5 	.word	0x08005da5
 8005dec:	08005f7b 	.word	0x08005f7b
 8005df0:	08005f53 	.word	0x08005f53
 8005df4:	08005da5 	.word	0x08005da5
 8005df8:	08005da5 	.word	0x08005da5
 8005dfc:	08005f29 	.word	0x08005f29
 8005e00:	08005da5 	.word	0x08005da5
 8005e04:	08005da5 	.word	0x08005da5
 8005e08:	08005da5 	.word	0x08005da5
 8005e0c:	08005da5 	.word	0x08005da5
 8005e10:	08005ee1 	.word	0x08005ee1
 8005e14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005e18:	e7db      	b.n	8005dd2 <_scanf_float+0x8e>
 8005e1a:	290e      	cmp	r1, #14
 8005e1c:	d8c2      	bhi.n	8005da4 <_scanf_float+0x60>
 8005e1e:	a001      	add	r0, pc, #4	; (adr r0, 8005e24 <_scanf_float+0xe0>)
 8005e20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e24:	08005ed3 	.word	0x08005ed3
 8005e28:	08005da5 	.word	0x08005da5
 8005e2c:	08005ed3 	.word	0x08005ed3
 8005e30:	08005f67 	.word	0x08005f67
 8005e34:	08005da5 	.word	0x08005da5
 8005e38:	08005e81 	.word	0x08005e81
 8005e3c:	08005ebd 	.word	0x08005ebd
 8005e40:	08005ebd 	.word	0x08005ebd
 8005e44:	08005ebd 	.word	0x08005ebd
 8005e48:	08005ebd 	.word	0x08005ebd
 8005e4c:	08005ebd 	.word	0x08005ebd
 8005e50:	08005ebd 	.word	0x08005ebd
 8005e54:	08005ebd 	.word	0x08005ebd
 8005e58:	08005ebd 	.word	0x08005ebd
 8005e5c:	08005ebd 	.word	0x08005ebd
 8005e60:	2b6e      	cmp	r3, #110	; 0x6e
 8005e62:	d809      	bhi.n	8005e78 <_scanf_float+0x134>
 8005e64:	2b60      	cmp	r3, #96	; 0x60
 8005e66:	d8b2      	bhi.n	8005dce <_scanf_float+0x8a>
 8005e68:	2b54      	cmp	r3, #84	; 0x54
 8005e6a:	d077      	beq.n	8005f5c <_scanf_float+0x218>
 8005e6c:	2b59      	cmp	r3, #89	; 0x59
 8005e6e:	d199      	bne.n	8005da4 <_scanf_float+0x60>
 8005e70:	2d07      	cmp	r5, #7
 8005e72:	d197      	bne.n	8005da4 <_scanf_float+0x60>
 8005e74:	2508      	movs	r5, #8
 8005e76:	e029      	b.n	8005ecc <_scanf_float+0x188>
 8005e78:	2b74      	cmp	r3, #116	; 0x74
 8005e7a:	d06f      	beq.n	8005f5c <_scanf_float+0x218>
 8005e7c:	2b79      	cmp	r3, #121	; 0x79
 8005e7e:	e7f6      	b.n	8005e6e <_scanf_float+0x12a>
 8005e80:	6821      	ldr	r1, [r4, #0]
 8005e82:	05c8      	lsls	r0, r1, #23
 8005e84:	d51a      	bpl.n	8005ebc <_scanf_float+0x178>
 8005e86:	9b02      	ldr	r3, [sp, #8]
 8005e88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e8c:	6021      	str	r1, [r4, #0]
 8005e8e:	f109 0901 	add.w	r9, r9, #1
 8005e92:	b11b      	cbz	r3, 8005e9c <_scanf_float+0x158>
 8005e94:	3b01      	subs	r3, #1
 8005e96:	3201      	adds	r2, #1
 8005e98:	9302      	str	r3, [sp, #8]
 8005e9a:	60a2      	str	r2, [r4, #8]
 8005e9c:	68a3      	ldr	r3, [r4, #8]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	60a3      	str	r3, [r4, #8]
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	f340 8084 	ble.w	8005fbc <_scanf_float+0x278>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	603b      	str	r3, [r7, #0]
 8005eba:	e766      	b.n	8005d8a <_scanf_float+0x46>
 8005ebc:	eb1a 0f05 	cmn.w	sl, r5
 8005ec0:	f47f af70 	bne.w	8005da4 <_scanf_float+0x60>
 8005ec4:	6822      	ldr	r2, [r4, #0]
 8005ec6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005eca:	6022      	str	r2, [r4, #0]
 8005ecc:	f806 3b01 	strb.w	r3, [r6], #1
 8005ed0:	e7e4      	b.n	8005e9c <_scanf_float+0x158>
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	0610      	lsls	r0, r2, #24
 8005ed6:	f57f af65 	bpl.w	8005da4 <_scanf_float+0x60>
 8005eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ede:	e7f4      	b.n	8005eca <_scanf_float+0x186>
 8005ee0:	f1ba 0f00 	cmp.w	sl, #0
 8005ee4:	d10e      	bne.n	8005f04 <_scanf_float+0x1c0>
 8005ee6:	f1b9 0f00 	cmp.w	r9, #0
 8005eea:	d10e      	bne.n	8005f0a <_scanf_float+0x1c6>
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ef2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ef6:	d108      	bne.n	8005f0a <_scanf_float+0x1c6>
 8005ef8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005efc:	6022      	str	r2, [r4, #0]
 8005efe:	f04f 0a01 	mov.w	sl, #1
 8005f02:	e7e3      	b.n	8005ecc <_scanf_float+0x188>
 8005f04:	f1ba 0f02 	cmp.w	sl, #2
 8005f08:	d055      	beq.n	8005fb6 <_scanf_float+0x272>
 8005f0a:	2d01      	cmp	r5, #1
 8005f0c:	d002      	beq.n	8005f14 <_scanf_float+0x1d0>
 8005f0e:	2d04      	cmp	r5, #4
 8005f10:	f47f af48 	bne.w	8005da4 <_scanf_float+0x60>
 8005f14:	3501      	adds	r5, #1
 8005f16:	b2ed      	uxtb	r5, r5
 8005f18:	e7d8      	b.n	8005ecc <_scanf_float+0x188>
 8005f1a:	f1ba 0f01 	cmp.w	sl, #1
 8005f1e:	f47f af41 	bne.w	8005da4 <_scanf_float+0x60>
 8005f22:	f04f 0a02 	mov.w	sl, #2
 8005f26:	e7d1      	b.n	8005ecc <_scanf_float+0x188>
 8005f28:	b97d      	cbnz	r5, 8005f4a <_scanf_float+0x206>
 8005f2a:	f1b9 0f00 	cmp.w	r9, #0
 8005f2e:	f47f af3c 	bne.w	8005daa <_scanf_float+0x66>
 8005f32:	6822      	ldr	r2, [r4, #0]
 8005f34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f3c:	f47f af39 	bne.w	8005db2 <_scanf_float+0x6e>
 8005f40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	2501      	movs	r5, #1
 8005f48:	e7c0      	b.n	8005ecc <_scanf_float+0x188>
 8005f4a:	2d03      	cmp	r5, #3
 8005f4c:	d0e2      	beq.n	8005f14 <_scanf_float+0x1d0>
 8005f4e:	2d05      	cmp	r5, #5
 8005f50:	e7de      	b.n	8005f10 <_scanf_float+0x1cc>
 8005f52:	2d02      	cmp	r5, #2
 8005f54:	f47f af26 	bne.w	8005da4 <_scanf_float+0x60>
 8005f58:	2503      	movs	r5, #3
 8005f5a:	e7b7      	b.n	8005ecc <_scanf_float+0x188>
 8005f5c:	2d06      	cmp	r5, #6
 8005f5e:	f47f af21 	bne.w	8005da4 <_scanf_float+0x60>
 8005f62:	2507      	movs	r5, #7
 8005f64:	e7b2      	b.n	8005ecc <_scanf_float+0x188>
 8005f66:	6822      	ldr	r2, [r4, #0]
 8005f68:	0591      	lsls	r1, r2, #22
 8005f6a:	f57f af1b 	bpl.w	8005da4 <_scanf_float+0x60>
 8005f6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f72:	6022      	str	r2, [r4, #0]
 8005f74:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f78:	e7a8      	b.n	8005ecc <_scanf_float+0x188>
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f84:	d006      	beq.n	8005f94 <_scanf_float+0x250>
 8005f86:	0550      	lsls	r0, r2, #21
 8005f88:	f57f af0c 	bpl.w	8005da4 <_scanf_float+0x60>
 8005f8c:	f1b9 0f00 	cmp.w	r9, #0
 8005f90:	f43f af0f 	beq.w	8005db2 <_scanf_float+0x6e>
 8005f94:	0591      	lsls	r1, r2, #22
 8005f96:	bf58      	it	pl
 8005f98:	9901      	ldrpl	r1, [sp, #4]
 8005f9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f9e:	bf58      	it	pl
 8005fa0:	eba9 0101 	subpl.w	r1, r9, r1
 8005fa4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005fa8:	bf58      	it	pl
 8005faa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005fae:	6022      	str	r2, [r4, #0]
 8005fb0:	f04f 0900 	mov.w	r9, #0
 8005fb4:	e78a      	b.n	8005ecc <_scanf_float+0x188>
 8005fb6:	f04f 0a03 	mov.w	sl, #3
 8005fba:	e787      	b.n	8005ecc <_scanf_float+0x188>
 8005fbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	4798      	blx	r3
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f43f aedf 	beq.w	8005d8a <_scanf_float+0x46>
 8005fcc:	e6ea      	b.n	8005da4 <_scanf_float+0x60>
 8005fce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fd6:	463a      	mov	r2, r7
 8005fd8:	4640      	mov	r0, r8
 8005fda:	4798      	blx	r3
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	6123      	str	r3, [r4, #16]
 8005fe2:	e6ec      	b.n	8005dbe <_scanf_float+0x7a>
 8005fe4:	1e6b      	subs	r3, r5, #1
 8005fe6:	2b06      	cmp	r3, #6
 8005fe8:	d825      	bhi.n	8006036 <_scanf_float+0x2f2>
 8005fea:	2d02      	cmp	r5, #2
 8005fec:	d836      	bhi.n	800605c <_scanf_float+0x318>
 8005fee:	455e      	cmp	r6, fp
 8005ff0:	f67f aee8 	bls.w	8005dc4 <_scanf_float+0x80>
 8005ff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ff8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ffc:	463a      	mov	r2, r7
 8005ffe:	4640      	mov	r0, r8
 8006000:	4798      	blx	r3
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	3b01      	subs	r3, #1
 8006006:	6123      	str	r3, [r4, #16]
 8006008:	e7f1      	b.n	8005fee <_scanf_float+0x2aa>
 800600a:	9802      	ldr	r0, [sp, #8]
 800600c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006010:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006014:	9002      	str	r0, [sp, #8]
 8006016:	463a      	mov	r2, r7
 8006018:	4640      	mov	r0, r8
 800601a:	4798      	blx	r3
 800601c:	6923      	ldr	r3, [r4, #16]
 800601e:	3b01      	subs	r3, #1
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006026:	fa5f fa8a 	uxtb.w	sl, sl
 800602a:	f1ba 0f02 	cmp.w	sl, #2
 800602e:	d1ec      	bne.n	800600a <_scanf_float+0x2c6>
 8006030:	3d03      	subs	r5, #3
 8006032:	b2ed      	uxtb	r5, r5
 8006034:	1b76      	subs	r6, r6, r5
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	05da      	lsls	r2, r3, #23
 800603a:	d52f      	bpl.n	800609c <_scanf_float+0x358>
 800603c:	055b      	lsls	r3, r3, #21
 800603e:	d510      	bpl.n	8006062 <_scanf_float+0x31e>
 8006040:	455e      	cmp	r6, fp
 8006042:	f67f aebf 	bls.w	8005dc4 <_scanf_float+0x80>
 8006046:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800604a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800604e:	463a      	mov	r2, r7
 8006050:	4640      	mov	r0, r8
 8006052:	4798      	blx	r3
 8006054:	6923      	ldr	r3, [r4, #16]
 8006056:	3b01      	subs	r3, #1
 8006058:	6123      	str	r3, [r4, #16]
 800605a:	e7f1      	b.n	8006040 <_scanf_float+0x2fc>
 800605c:	46aa      	mov	sl, r5
 800605e:	9602      	str	r6, [sp, #8]
 8006060:	e7df      	b.n	8006022 <_scanf_float+0x2de>
 8006062:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	2965      	cmp	r1, #101	; 0x65
 800606a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800606e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	d00c      	beq.n	8006090 <_scanf_float+0x34c>
 8006076:	2945      	cmp	r1, #69	; 0x45
 8006078:	d00a      	beq.n	8006090 <_scanf_float+0x34c>
 800607a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800607e:	463a      	mov	r2, r7
 8006080:	4640      	mov	r0, r8
 8006082:	4798      	blx	r3
 8006084:	6923      	ldr	r3, [r4, #16]
 8006086:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800608a:	3b01      	subs	r3, #1
 800608c:	1eb5      	subs	r5, r6, #2
 800608e:	6123      	str	r3, [r4, #16]
 8006090:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006094:	463a      	mov	r2, r7
 8006096:	4640      	mov	r0, r8
 8006098:	4798      	blx	r3
 800609a:	462e      	mov	r6, r5
 800609c:	6825      	ldr	r5, [r4, #0]
 800609e:	f015 0510 	ands.w	r5, r5, #16
 80060a2:	d159      	bne.n	8006158 <_scanf_float+0x414>
 80060a4:	7035      	strb	r5, [r6, #0]
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b0:	d11b      	bne.n	80060ea <_scanf_float+0x3a6>
 80060b2:	9b01      	ldr	r3, [sp, #4]
 80060b4:	454b      	cmp	r3, r9
 80060b6:	eba3 0209 	sub.w	r2, r3, r9
 80060ba:	d123      	bne.n	8006104 <_scanf_float+0x3c0>
 80060bc:	2200      	movs	r2, #0
 80060be:	4659      	mov	r1, fp
 80060c0:	4640      	mov	r0, r8
 80060c2:	f000 fe97 	bl	8006df4 <_strtod_r>
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	9b03      	ldr	r3, [sp, #12]
 80060ca:	f012 0f02 	tst.w	r2, #2
 80060ce:	ec57 6b10 	vmov	r6, r7, d0
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	d021      	beq.n	800611a <_scanf_float+0x3d6>
 80060d6:	9903      	ldr	r1, [sp, #12]
 80060d8:	1d1a      	adds	r2, r3, #4
 80060da:	600a      	str	r2, [r1, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	e9c3 6700 	strd	r6, r7, [r3]
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	3301      	adds	r3, #1
 80060e6:	60e3      	str	r3, [r4, #12]
 80060e8:	e66d      	b.n	8005dc6 <_scanf_float+0x82>
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0e5      	beq.n	80060bc <_scanf_float+0x378>
 80060f0:	9905      	ldr	r1, [sp, #20]
 80060f2:	230a      	movs	r3, #10
 80060f4:	462a      	mov	r2, r5
 80060f6:	3101      	adds	r1, #1
 80060f8:	4640      	mov	r0, r8
 80060fa:	f000 ff03 	bl	8006f04 <_strtol_r>
 80060fe:	9b04      	ldr	r3, [sp, #16]
 8006100:	9e05      	ldr	r6, [sp, #20]
 8006102:	1ac2      	subs	r2, r0, r3
 8006104:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006108:	429e      	cmp	r6, r3
 800610a:	bf28      	it	cs
 800610c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006110:	4912      	ldr	r1, [pc, #72]	; (800615c <_scanf_float+0x418>)
 8006112:	4630      	mov	r0, r6
 8006114:	f000 f82c 	bl	8006170 <siprintf>
 8006118:	e7d0      	b.n	80060bc <_scanf_float+0x378>
 800611a:	9903      	ldr	r1, [sp, #12]
 800611c:	f012 0f04 	tst.w	r2, #4
 8006120:	f103 0204 	add.w	r2, r3, #4
 8006124:	600a      	str	r2, [r1, #0]
 8006126:	d1d9      	bne.n	80060dc <_scanf_float+0x398>
 8006128:	f8d3 8000 	ldr.w	r8, [r3]
 800612c:	ee10 2a10 	vmov	r2, s0
 8006130:	ee10 0a10 	vmov	r0, s0
 8006134:	463b      	mov	r3, r7
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa fcf8 	bl	8000b2c <__aeabi_dcmpun>
 800613c:	b128      	cbz	r0, 800614a <_scanf_float+0x406>
 800613e:	4808      	ldr	r0, [pc, #32]	; (8006160 <_scanf_float+0x41c>)
 8006140:	f000 f810 	bl	8006164 <nanf>
 8006144:	ed88 0a00 	vstr	s0, [r8]
 8006148:	e7cb      	b.n	80060e2 <_scanf_float+0x39e>
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	f7fa fd4b 	bl	8000be8 <__aeabi_d2f>
 8006152:	f8c8 0000 	str.w	r0, [r8]
 8006156:	e7c4      	b.n	80060e2 <_scanf_float+0x39e>
 8006158:	2500      	movs	r5, #0
 800615a:	e634      	b.n	8005dc6 <_scanf_float+0x82>
 800615c:	08009df8 	.word	0x08009df8
 8006160:	0800a200 	.word	0x0800a200

08006164 <nanf>:
 8006164:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800616c <nanf+0x8>
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	7fc00000 	.word	0x7fc00000

08006170 <siprintf>:
 8006170:	b40e      	push	{r1, r2, r3}
 8006172:	b500      	push	{lr}
 8006174:	b09c      	sub	sp, #112	; 0x70
 8006176:	ab1d      	add	r3, sp, #116	; 0x74
 8006178:	9002      	str	r0, [sp, #8]
 800617a:	9006      	str	r0, [sp, #24]
 800617c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006180:	4809      	ldr	r0, [pc, #36]	; (80061a8 <siprintf+0x38>)
 8006182:	9107      	str	r1, [sp, #28]
 8006184:	9104      	str	r1, [sp, #16]
 8006186:	4909      	ldr	r1, [pc, #36]	; (80061ac <siprintf+0x3c>)
 8006188:	f853 2b04 	ldr.w	r2, [r3], #4
 800618c:	9105      	str	r1, [sp, #20]
 800618e:	6800      	ldr	r0, [r0, #0]
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	a902      	add	r1, sp, #8
 8006194:	f002 fee2 	bl	8008f5c <_svfiprintf_r>
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	b01c      	add	sp, #112	; 0x70
 80061a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a4:	b003      	add	sp, #12
 80061a6:	4770      	bx	lr
 80061a8:	20000014 	.word	0x20000014
 80061ac:	ffff0208 	.word	0xffff0208

080061b0 <sulp>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	4604      	mov	r4, r0
 80061b4:	460d      	mov	r5, r1
 80061b6:	ec45 4b10 	vmov	d0, r4, r5
 80061ba:	4616      	mov	r6, r2
 80061bc:	f002 fc2c 	bl	8008a18 <__ulp>
 80061c0:	ec51 0b10 	vmov	r0, r1, d0
 80061c4:	b17e      	cbz	r6, 80061e6 <sulp+0x36>
 80061c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80061ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd09      	ble.n	80061e6 <sulp+0x36>
 80061d2:	051b      	lsls	r3, r3, #20
 80061d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80061d8:	2400      	movs	r4, #0
 80061da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80061de:	4622      	mov	r2, r4
 80061e0:	462b      	mov	r3, r5
 80061e2:	f7fa fa09 	bl	80005f8 <__aeabi_dmul>
 80061e6:	bd70      	pop	{r4, r5, r6, pc}

080061e8 <_strtod_l>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	ed2d 8b02 	vpush	{d8}
 80061f0:	b09d      	sub	sp, #116	; 0x74
 80061f2:	461f      	mov	r7, r3
 80061f4:	2300      	movs	r3, #0
 80061f6:	9318      	str	r3, [sp, #96]	; 0x60
 80061f8:	4ba2      	ldr	r3, [pc, #648]	; (8006484 <_strtod_l+0x29c>)
 80061fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	9305      	str	r3, [sp, #20]
 8006200:	4604      	mov	r4, r0
 8006202:	4618      	mov	r0, r3
 8006204:	4688      	mov	r8, r1
 8006206:	f7f9 ffe3 	bl	80001d0 <strlen>
 800620a:	f04f 0a00 	mov.w	sl, #0
 800620e:	4605      	mov	r5, r0
 8006210:	f04f 0b00 	mov.w	fp, #0
 8006214:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800621a:	781a      	ldrb	r2, [r3, #0]
 800621c:	2a2b      	cmp	r2, #43	; 0x2b
 800621e:	d04e      	beq.n	80062be <_strtod_l+0xd6>
 8006220:	d83b      	bhi.n	800629a <_strtod_l+0xb2>
 8006222:	2a0d      	cmp	r2, #13
 8006224:	d834      	bhi.n	8006290 <_strtod_l+0xa8>
 8006226:	2a08      	cmp	r2, #8
 8006228:	d834      	bhi.n	8006294 <_strtod_l+0xac>
 800622a:	2a00      	cmp	r2, #0
 800622c:	d03e      	beq.n	80062ac <_strtod_l+0xc4>
 800622e:	2300      	movs	r3, #0
 8006230:	930a      	str	r3, [sp, #40]	; 0x28
 8006232:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006234:	7833      	ldrb	r3, [r6, #0]
 8006236:	2b30      	cmp	r3, #48	; 0x30
 8006238:	f040 80b0 	bne.w	800639c <_strtod_l+0x1b4>
 800623c:	7873      	ldrb	r3, [r6, #1]
 800623e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006242:	2b58      	cmp	r3, #88	; 0x58
 8006244:	d168      	bne.n	8006318 <_strtod_l+0x130>
 8006246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	ab18      	add	r3, sp, #96	; 0x60
 800624c:	9702      	str	r7, [sp, #8]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	4a8d      	ldr	r2, [pc, #564]	; (8006488 <_strtod_l+0x2a0>)
 8006252:	ab19      	add	r3, sp, #100	; 0x64
 8006254:	a917      	add	r1, sp, #92	; 0x5c
 8006256:	4620      	mov	r0, r4
 8006258:	f001 fd38 	bl	8007ccc <__gethex>
 800625c:	f010 0707 	ands.w	r7, r0, #7
 8006260:	4605      	mov	r5, r0
 8006262:	d005      	beq.n	8006270 <_strtod_l+0x88>
 8006264:	2f06      	cmp	r7, #6
 8006266:	d12c      	bne.n	80062c2 <_strtod_l+0xda>
 8006268:	3601      	adds	r6, #1
 800626a:	2300      	movs	r3, #0
 800626c:	9617      	str	r6, [sp, #92]	; 0x5c
 800626e:	930a      	str	r3, [sp, #40]	; 0x28
 8006270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 8590 	bne.w	8006d98 <_strtod_l+0xbb0>
 8006278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627a:	b1eb      	cbz	r3, 80062b8 <_strtod_l+0xd0>
 800627c:	4652      	mov	r2, sl
 800627e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006282:	ec43 2b10 	vmov	d0, r2, r3
 8006286:	b01d      	add	sp, #116	; 0x74
 8006288:	ecbd 8b02 	vpop	{d8}
 800628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006290:	2a20      	cmp	r2, #32
 8006292:	d1cc      	bne.n	800622e <_strtod_l+0x46>
 8006294:	3301      	adds	r3, #1
 8006296:	9317      	str	r3, [sp, #92]	; 0x5c
 8006298:	e7be      	b.n	8006218 <_strtod_l+0x30>
 800629a:	2a2d      	cmp	r2, #45	; 0x2d
 800629c:	d1c7      	bne.n	800622e <_strtod_l+0x46>
 800629e:	2201      	movs	r2, #1
 80062a0:	920a      	str	r2, [sp, #40]	; 0x28
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1c2      	bne.n	8006232 <_strtod_l+0x4a>
 80062ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 856e 	bne.w	8006d94 <_strtod_l+0xbac>
 80062b8:	4652      	mov	r2, sl
 80062ba:	465b      	mov	r3, fp
 80062bc:	e7e1      	b.n	8006282 <_strtod_l+0x9a>
 80062be:	2200      	movs	r2, #0
 80062c0:	e7ee      	b.n	80062a0 <_strtod_l+0xb8>
 80062c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80062c4:	b13a      	cbz	r2, 80062d6 <_strtod_l+0xee>
 80062c6:	2135      	movs	r1, #53	; 0x35
 80062c8:	a81a      	add	r0, sp, #104	; 0x68
 80062ca:	f002 fcb0 	bl	8008c2e <__copybits>
 80062ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062d0:	4620      	mov	r0, r4
 80062d2:	f002 f86f 	bl	80083b4 <_Bfree>
 80062d6:	3f01      	subs	r7, #1
 80062d8:	2f04      	cmp	r7, #4
 80062da:	d806      	bhi.n	80062ea <_strtod_l+0x102>
 80062dc:	e8df f007 	tbb	[pc, r7]
 80062e0:	1714030a 	.word	0x1714030a
 80062e4:	0a          	.byte	0x0a
 80062e5:	00          	.byte	0x00
 80062e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80062ea:	0728      	lsls	r0, r5, #28
 80062ec:	d5c0      	bpl.n	8006270 <_strtod_l+0x88>
 80062ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80062f2:	e7bd      	b.n	8006270 <_strtod_l+0x88>
 80062f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80062f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80062fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80062fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006302:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006306:	e7f0      	b.n	80062ea <_strtod_l+0x102>
 8006308:	f8df b180 	ldr.w	fp, [pc, #384]	; 800648c <_strtod_l+0x2a4>
 800630c:	e7ed      	b.n	80062ea <_strtod_l+0x102>
 800630e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006312:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006316:	e7e8      	b.n	80062ea <_strtod_l+0x102>
 8006318:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	9217      	str	r2, [sp, #92]	; 0x5c
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	2b30      	cmp	r3, #48	; 0x30
 8006322:	d0f9      	beq.n	8006318 <_strtod_l+0x130>
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0a3      	beq.n	8006270 <_strtod_l+0x88>
 8006328:	2301      	movs	r3, #1
 800632a:	f04f 0900 	mov.w	r9, #0
 800632e:	9304      	str	r3, [sp, #16]
 8006330:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006332:	9308      	str	r3, [sp, #32]
 8006334:	f8cd 901c 	str.w	r9, [sp, #28]
 8006338:	464f      	mov	r7, r9
 800633a:	220a      	movs	r2, #10
 800633c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800633e:	7806      	ldrb	r6, [r0, #0]
 8006340:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006344:	b2d9      	uxtb	r1, r3
 8006346:	2909      	cmp	r1, #9
 8006348:	d92a      	bls.n	80063a0 <_strtod_l+0x1b8>
 800634a:	9905      	ldr	r1, [sp, #20]
 800634c:	462a      	mov	r2, r5
 800634e:	f002 ff1f 	bl	8009190 <strncmp>
 8006352:	b398      	cbz	r0, 80063bc <_strtod_l+0x1d4>
 8006354:	2000      	movs	r0, #0
 8006356:	4632      	mov	r2, r6
 8006358:	463d      	mov	r5, r7
 800635a:	9005      	str	r0, [sp, #20]
 800635c:	4603      	mov	r3, r0
 800635e:	2a65      	cmp	r2, #101	; 0x65
 8006360:	d001      	beq.n	8006366 <_strtod_l+0x17e>
 8006362:	2a45      	cmp	r2, #69	; 0x45
 8006364:	d118      	bne.n	8006398 <_strtod_l+0x1b0>
 8006366:	b91d      	cbnz	r5, 8006370 <_strtod_l+0x188>
 8006368:	9a04      	ldr	r2, [sp, #16]
 800636a:	4302      	orrs	r2, r0
 800636c:	d09e      	beq.n	80062ac <_strtod_l+0xc4>
 800636e:	2500      	movs	r5, #0
 8006370:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006374:	f108 0201 	add.w	r2, r8, #1
 8006378:	9217      	str	r2, [sp, #92]	; 0x5c
 800637a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800637e:	2a2b      	cmp	r2, #43	; 0x2b
 8006380:	d075      	beq.n	800646e <_strtod_l+0x286>
 8006382:	2a2d      	cmp	r2, #45	; 0x2d
 8006384:	d07b      	beq.n	800647e <_strtod_l+0x296>
 8006386:	f04f 0c00 	mov.w	ip, #0
 800638a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800638e:	2909      	cmp	r1, #9
 8006390:	f240 8082 	bls.w	8006498 <_strtod_l+0x2b0>
 8006394:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006398:	2600      	movs	r6, #0
 800639a:	e09d      	b.n	80064d8 <_strtod_l+0x2f0>
 800639c:	2300      	movs	r3, #0
 800639e:	e7c4      	b.n	800632a <_strtod_l+0x142>
 80063a0:	2f08      	cmp	r7, #8
 80063a2:	bfd8      	it	le
 80063a4:	9907      	ldrle	r1, [sp, #28]
 80063a6:	f100 0001 	add.w	r0, r0, #1
 80063aa:	bfda      	itte	le
 80063ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80063b0:	9307      	strle	r3, [sp, #28]
 80063b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80063b6:	3701      	adds	r7, #1
 80063b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80063ba:	e7bf      	b.n	800633c <_strtod_l+0x154>
 80063bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063be:	195a      	adds	r2, r3, r5
 80063c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80063c2:	5d5a      	ldrb	r2, [r3, r5]
 80063c4:	2f00      	cmp	r7, #0
 80063c6:	d037      	beq.n	8006438 <_strtod_l+0x250>
 80063c8:	9005      	str	r0, [sp, #20]
 80063ca:	463d      	mov	r5, r7
 80063cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80063d0:	2b09      	cmp	r3, #9
 80063d2:	d912      	bls.n	80063fa <_strtod_l+0x212>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e7c2      	b.n	800635e <_strtod_l+0x176>
 80063d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80063de:	785a      	ldrb	r2, [r3, #1]
 80063e0:	3001      	adds	r0, #1
 80063e2:	2a30      	cmp	r2, #48	; 0x30
 80063e4:	d0f8      	beq.n	80063d8 <_strtod_l+0x1f0>
 80063e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	f200 84d9 	bhi.w	8006da2 <_strtod_l+0xbba>
 80063f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063f2:	9005      	str	r0, [sp, #20]
 80063f4:	2000      	movs	r0, #0
 80063f6:	9308      	str	r3, [sp, #32]
 80063f8:	4605      	mov	r5, r0
 80063fa:	3a30      	subs	r2, #48	; 0x30
 80063fc:	f100 0301 	add.w	r3, r0, #1
 8006400:	d014      	beq.n	800642c <_strtod_l+0x244>
 8006402:	9905      	ldr	r1, [sp, #20]
 8006404:	4419      	add	r1, r3
 8006406:	9105      	str	r1, [sp, #20]
 8006408:	462b      	mov	r3, r5
 800640a:	eb00 0e05 	add.w	lr, r0, r5
 800640e:	210a      	movs	r1, #10
 8006410:	4573      	cmp	r3, lr
 8006412:	d113      	bne.n	800643c <_strtod_l+0x254>
 8006414:	182b      	adds	r3, r5, r0
 8006416:	2b08      	cmp	r3, #8
 8006418:	f105 0501 	add.w	r5, r5, #1
 800641c:	4405      	add	r5, r0
 800641e:	dc1c      	bgt.n	800645a <_strtod_l+0x272>
 8006420:	9907      	ldr	r1, [sp, #28]
 8006422:	230a      	movs	r3, #10
 8006424:	fb03 2301 	mla	r3, r3, r1, r2
 8006428:	9307      	str	r3, [sp, #28]
 800642a:	2300      	movs	r3, #0
 800642c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800642e:	1c51      	adds	r1, r2, #1
 8006430:	9117      	str	r1, [sp, #92]	; 0x5c
 8006432:	7852      	ldrb	r2, [r2, #1]
 8006434:	4618      	mov	r0, r3
 8006436:	e7c9      	b.n	80063cc <_strtod_l+0x1e4>
 8006438:	4638      	mov	r0, r7
 800643a:	e7d2      	b.n	80063e2 <_strtod_l+0x1fa>
 800643c:	2b08      	cmp	r3, #8
 800643e:	dc04      	bgt.n	800644a <_strtod_l+0x262>
 8006440:	9e07      	ldr	r6, [sp, #28]
 8006442:	434e      	muls	r6, r1
 8006444:	9607      	str	r6, [sp, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	e7e2      	b.n	8006410 <_strtod_l+0x228>
 800644a:	f103 0c01 	add.w	ip, r3, #1
 800644e:	f1bc 0f10 	cmp.w	ip, #16
 8006452:	bfd8      	it	le
 8006454:	fb01 f909 	mulle.w	r9, r1, r9
 8006458:	e7f5      	b.n	8006446 <_strtod_l+0x25e>
 800645a:	2d10      	cmp	r5, #16
 800645c:	bfdc      	itt	le
 800645e:	230a      	movle	r3, #10
 8006460:	fb03 2909 	mlale	r9, r3, r9, r2
 8006464:	e7e1      	b.n	800642a <_strtod_l+0x242>
 8006466:	2300      	movs	r3, #0
 8006468:	9305      	str	r3, [sp, #20]
 800646a:	2301      	movs	r3, #1
 800646c:	e77c      	b.n	8006368 <_strtod_l+0x180>
 800646e:	f04f 0c00 	mov.w	ip, #0
 8006472:	f108 0202 	add.w	r2, r8, #2
 8006476:	9217      	str	r2, [sp, #92]	; 0x5c
 8006478:	f898 2002 	ldrb.w	r2, [r8, #2]
 800647c:	e785      	b.n	800638a <_strtod_l+0x1a2>
 800647e:	f04f 0c01 	mov.w	ip, #1
 8006482:	e7f6      	b.n	8006472 <_strtod_l+0x28a>
 8006484:	0800a048 	.word	0x0800a048
 8006488:	08009e00 	.word	0x08009e00
 800648c:	7ff00000 	.word	0x7ff00000
 8006490:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006492:	1c51      	adds	r1, r2, #1
 8006494:	9117      	str	r1, [sp, #92]	; 0x5c
 8006496:	7852      	ldrb	r2, [r2, #1]
 8006498:	2a30      	cmp	r2, #48	; 0x30
 800649a:	d0f9      	beq.n	8006490 <_strtod_l+0x2a8>
 800649c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80064a0:	2908      	cmp	r1, #8
 80064a2:	f63f af79 	bhi.w	8006398 <_strtod_l+0x1b0>
 80064a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80064aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064ac:	9206      	str	r2, [sp, #24]
 80064ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064b0:	1c51      	adds	r1, r2, #1
 80064b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80064b4:	7852      	ldrb	r2, [r2, #1]
 80064b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80064ba:	2e09      	cmp	r6, #9
 80064bc:	d937      	bls.n	800652e <_strtod_l+0x346>
 80064be:	9e06      	ldr	r6, [sp, #24]
 80064c0:	1b89      	subs	r1, r1, r6
 80064c2:	2908      	cmp	r1, #8
 80064c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80064c8:	dc02      	bgt.n	80064d0 <_strtod_l+0x2e8>
 80064ca:	4576      	cmp	r6, lr
 80064cc:	bfa8      	it	ge
 80064ce:	4676      	movge	r6, lr
 80064d0:	f1bc 0f00 	cmp.w	ip, #0
 80064d4:	d000      	beq.n	80064d8 <_strtod_l+0x2f0>
 80064d6:	4276      	negs	r6, r6
 80064d8:	2d00      	cmp	r5, #0
 80064da:	d14d      	bne.n	8006578 <_strtod_l+0x390>
 80064dc:	9904      	ldr	r1, [sp, #16]
 80064de:	4301      	orrs	r1, r0
 80064e0:	f47f aec6 	bne.w	8006270 <_strtod_l+0x88>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f aee1 	bne.w	80062ac <_strtod_l+0xc4>
 80064ea:	2a69      	cmp	r2, #105	; 0x69
 80064ec:	d027      	beq.n	800653e <_strtod_l+0x356>
 80064ee:	dc24      	bgt.n	800653a <_strtod_l+0x352>
 80064f0:	2a49      	cmp	r2, #73	; 0x49
 80064f2:	d024      	beq.n	800653e <_strtod_l+0x356>
 80064f4:	2a4e      	cmp	r2, #78	; 0x4e
 80064f6:	f47f aed9 	bne.w	80062ac <_strtod_l+0xc4>
 80064fa:	499f      	ldr	r1, [pc, #636]	; (8006778 <_strtod_l+0x590>)
 80064fc:	a817      	add	r0, sp, #92	; 0x5c
 80064fe:	f001 fe3d 	bl	800817c <__match>
 8006502:	2800      	cmp	r0, #0
 8006504:	f43f aed2 	beq.w	80062ac <_strtod_l+0xc4>
 8006508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b28      	cmp	r3, #40	; 0x28
 800650e:	d12d      	bne.n	800656c <_strtod_l+0x384>
 8006510:	499a      	ldr	r1, [pc, #616]	; (800677c <_strtod_l+0x594>)
 8006512:	aa1a      	add	r2, sp, #104	; 0x68
 8006514:	a817      	add	r0, sp, #92	; 0x5c
 8006516:	f001 fe45 	bl	80081a4 <__hexnan>
 800651a:	2805      	cmp	r0, #5
 800651c:	d126      	bne.n	800656c <_strtod_l+0x384>
 800651e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006520:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006524:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006528:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800652c:	e6a0      	b.n	8006270 <_strtod_l+0x88>
 800652e:	210a      	movs	r1, #10
 8006530:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006534:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006538:	e7b9      	b.n	80064ae <_strtod_l+0x2c6>
 800653a:	2a6e      	cmp	r2, #110	; 0x6e
 800653c:	e7db      	b.n	80064f6 <_strtod_l+0x30e>
 800653e:	4990      	ldr	r1, [pc, #576]	; (8006780 <_strtod_l+0x598>)
 8006540:	a817      	add	r0, sp, #92	; 0x5c
 8006542:	f001 fe1b 	bl	800817c <__match>
 8006546:	2800      	cmp	r0, #0
 8006548:	f43f aeb0 	beq.w	80062ac <_strtod_l+0xc4>
 800654c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800654e:	498d      	ldr	r1, [pc, #564]	; (8006784 <_strtod_l+0x59c>)
 8006550:	3b01      	subs	r3, #1
 8006552:	a817      	add	r0, sp, #92	; 0x5c
 8006554:	9317      	str	r3, [sp, #92]	; 0x5c
 8006556:	f001 fe11 	bl	800817c <__match>
 800655a:	b910      	cbnz	r0, 8006562 <_strtod_l+0x37a>
 800655c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800655e:	3301      	adds	r3, #1
 8006560:	9317      	str	r3, [sp, #92]	; 0x5c
 8006562:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006794 <_strtod_l+0x5ac>
 8006566:	f04f 0a00 	mov.w	sl, #0
 800656a:	e681      	b.n	8006270 <_strtod_l+0x88>
 800656c:	4886      	ldr	r0, [pc, #536]	; (8006788 <_strtod_l+0x5a0>)
 800656e:	f002 fdf7 	bl	8009160 <nan>
 8006572:	ec5b ab10 	vmov	sl, fp, d0
 8006576:	e67b      	b.n	8006270 <_strtod_l+0x88>
 8006578:	9b05      	ldr	r3, [sp, #20]
 800657a:	9807      	ldr	r0, [sp, #28]
 800657c:	1af3      	subs	r3, r6, r3
 800657e:	2f00      	cmp	r7, #0
 8006580:	bf08      	it	eq
 8006582:	462f      	moveq	r7, r5
 8006584:	2d10      	cmp	r5, #16
 8006586:	9306      	str	r3, [sp, #24]
 8006588:	46a8      	mov	r8, r5
 800658a:	bfa8      	it	ge
 800658c:	f04f 0810 	movge.w	r8, #16
 8006590:	f7f9 ffb8 	bl	8000504 <__aeabi_ui2d>
 8006594:	2d09      	cmp	r5, #9
 8006596:	4682      	mov	sl, r0
 8006598:	468b      	mov	fp, r1
 800659a:	dd13      	ble.n	80065c4 <_strtod_l+0x3dc>
 800659c:	4b7b      	ldr	r3, [pc, #492]	; (800678c <_strtod_l+0x5a4>)
 800659e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80065a2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80065a6:	f7fa f827 	bl	80005f8 <__aeabi_dmul>
 80065aa:	4682      	mov	sl, r0
 80065ac:	4648      	mov	r0, r9
 80065ae:	468b      	mov	fp, r1
 80065b0:	f7f9 ffa8 	bl	8000504 <__aeabi_ui2d>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4650      	mov	r0, sl
 80065ba:	4659      	mov	r1, fp
 80065bc:	f7f9 fe66 	bl	800028c <__adddf3>
 80065c0:	4682      	mov	sl, r0
 80065c2:	468b      	mov	fp, r1
 80065c4:	2d0f      	cmp	r5, #15
 80065c6:	dc38      	bgt.n	800663a <_strtod_l+0x452>
 80065c8:	9b06      	ldr	r3, [sp, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f43f ae50 	beq.w	8006270 <_strtod_l+0x88>
 80065d0:	dd24      	ble.n	800661c <_strtod_l+0x434>
 80065d2:	2b16      	cmp	r3, #22
 80065d4:	dc0b      	bgt.n	80065ee <_strtod_l+0x406>
 80065d6:	496d      	ldr	r1, [pc, #436]	; (800678c <_strtod_l+0x5a4>)
 80065d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065e0:	4652      	mov	r2, sl
 80065e2:	465b      	mov	r3, fp
 80065e4:	f7fa f808 	bl	80005f8 <__aeabi_dmul>
 80065e8:	4682      	mov	sl, r0
 80065ea:	468b      	mov	fp, r1
 80065ec:	e640      	b.n	8006270 <_strtod_l+0x88>
 80065ee:	9a06      	ldr	r2, [sp, #24]
 80065f0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80065f4:	4293      	cmp	r3, r2
 80065f6:	db20      	blt.n	800663a <_strtod_l+0x452>
 80065f8:	4c64      	ldr	r4, [pc, #400]	; (800678c <_strtod_l+0x5a4>)
 80065fa:	f1c5 050f 	rsb	r5, r5, #15
 80065fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006602:	4652      	mov	r2, sl
 8006604:	465b      	mov	r3, fp
 8006606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800660a:	f7f9 fff5 	bl	80005f8 <__aeabi_dmul>
 800660e:	9b06      	ldr	r3, [sp, #24]
 8006610:	1b5d      	subs	r5, r3, r5
 8006612:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006616:	e9d4 2300 	ldrd	r2, r3, [r4]
 800661a:	e7e3      	b.n	80065e4 <_strtod_l+0x3fc>
 800661c:	9b06      	ldr	r3, [sp, #24]
 800661e:	3316      	adds	r3, #22
 8006620:	db0b      	blt.n	800663a <_strtod_l+0x452>
 8006622:	9b05      	ldr	r3, [sp, #20]
 8006624:	1b9e      	subs	r6, r3, r6
 8006626:	4b59      	ldr	r3, [pc, #356]	; (800678c <_strtod_l+0x5a4>)
 8006628:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800662c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006630:	4650      	mov	r0, sl
 8006632:	4659      	mov	r1, fp
 8006634:	f7fa f90a 	bl	800084c <__aeabi_ddiv>
 8006638:	e7d6      	b.n	80065e8 <_strtod_l+0x400>
 800663a:	9b06      	ldr	r3, [sp, #24]
 800663c:	eba5 0808 	sub.w	r8, r5, r8
 8006640:	4498      	add	r8, r3
 8006642:	f1b8 0f00 	cmp.w	r8, #0
 8006646:	dd74      	ble.n	8006732 <_strtod_l+0x54a>
 8006648:	f018 030f 	ands.w	r3, r8, #15
 800664c:	d00a      	beq.n	8006664 <_strtod_l+0x47c>
 800664e:	494f      	ldr	r1, [pc, #316]	; (800678c <_strtod_l+0x5a4>)
 8006650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006654:	4652      	mov	r2, sl
 8006656:	465b      	mov	r3, fp
 8006658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800665c:	f7f9 ffcc 	bl	80005f8 <__aeabi_dmul>
 8006660:	4682      	mov	sl, r0
 8006662:	468b      	mov	fp, r1
 8006664:	f038 080f 	bics.w	r8, r8, #15
 8006668:	d04f      	beq.n	800670a <_strtod_l+0x522>
 800666a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800666e:	dd22      	ble.n	80066b6 <_strtod_l+0x4ce>
 8006670:	2500      	movs	r5, #0
 8006672:	462e      	mov	r6, r5
 8006674:	9507      	str	r5, [sp, #28]
 8006676:	9505      	str	r5, [sp, #20]
 8006678:	2322      	movs	r3, #34	; 0x22
 800667a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006794 <_strtod_l+0x5ac>
 800667e:	6023      	str	r3, [r4, #0]
 8006680:	f04f 0a00 	mov.w	sl, #0
 8006684:	9b07      	ldr	r3, [sp, #28]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f43f adf2 	beq.w	8006270 <_strtod_l+0x88>
 800668c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800668e:	4620      	mov	r0, r4
 8006690:	f001 fe90 	bl	80083b4 <_Bfree>
 8006694:	9905      	ldr	r1, [sp, #20]
 8006696:	4620      	mov	r0, r4
 8006698:	f001 fe8c 	bl	80083b4 <_Bfree>
 800669c:	4631      	mov	r1, r6
 800669e:	4620      	mov	r0, r4
 80066a0:	f001 fe88 	bl	80083b4 <_Bfree>
 80066a4:	9907      	ldr	r1, [sp, #28]
 80066a6:	4620      	mov	r0, r4
 80066a8:	f001 fe84 	bl	80083b4 <_Bfree>
 80066ac:	4629      	mov	r1, r5
 80066ae:	4620      	mov	r0, r4
 80066b0:	f001 fe80 	bl	80083b4 <_Bfree>
 80066b4:	e5dc      	b.n	8006270 <_strtod_l+0x88>
 80066b6:	4b36      	ldr	r3, [pc, #216]	; (8006790 <_strtod_l+0x5a8>)
 80066b8:	9304      	str	r3, [sp, #16]
 80066ba:	2300      	movs	r3, #0
 80066bc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80066c0:	4650      	mov	r0, sl
 80066c2:	4659      	mov	r1, fp
 80066c4:	4699      	mov	r9, r3
 80066c6:	f1b8 0f01 	cmp.w	r8, #1
 80066ca:	dc21      	bgt.n	8006710 <_strtod_l+0x528>
 80066cc:	b10b      	cbz	r3, 80066d2 <_strtod_l+0x4ea>
 80066ce:	4682      	mov	sl, r0
 80066d0:	468b      	mov	fp, r1
 80066d2:	4b2f      	ldr	r3, [pc, #188]	; (8006790 <_strtod_l+0x5a8>)
 80066d4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80066d8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80066dc:	4652      	mov	r2, sl
 80066de:	465b      	mov	r3, fp
 80066e0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80066e4:	f7f9 ff88 	bl	80005f8 <__aeabi_dmul>
 80066e8:	4b2a      	ldr	r3, [pc, #168]	; (8006794 <_strtod_l+0x5ac>)
 80066ea:	460a      	mov	r2, r1
 80066ec:	400b      	ands	r3, r1
 80066ee:	492a      	ldr	r1, [pc, #168]	; (8006798 <_strtod_l+0x5b0>)
 80066f0:	428b      	cmp	r3, r1
 80066f2:	4682      	mov	sl, r0
 80066f4:	d8bc      	bhi.n	8006670 <_strtod_l+0x488>
 80066f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80066fa:	428b      	cmp	r3, r1
 80066fc:	bf86      	itte	hi
 80066fe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800679c <_strtod_l+0x5b4>
 8006702:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006706:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800670a:	2300      	movs	r3, #0
 800670c:	9304      	str	r3, [sp, #16]
 800670e:	e084      	b.n	800681a <_strtod_l+0x632>
 8006710:	f018 0f01 	tst.w	r8, #1
 8006714:	d005      	beq.n	8006722 <_strtod_l+0x53a>
 8006716:	9b04      	ldr	r3, [sp, #16]
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f7f9 ff6c 	bl	80005f8 <__aeabi_dmul>
 8006720:	2301      	movs	r3, #1
 8006722:	9a04      	ldr	r2, [sp, #16]
 8006724:	3208      	adds	r2, #8
 8006726:	f109 0901 	add.w	r9, r9, #1
 800672a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800672e:	9204      	str	r2, [sp, #16]
 8006730:	e7c9      	b.n	80066c6 <_strtod_l+0x4de>
 8006732:	d0ea      	beq.n	800670a <_strtod_l+0x522>
 8006734:	f1c8 0800 	rsb	r8, r8, #0
 8006738:	f018 020f 	ands.w	r2, r8, #15
 800673c:	d00a      	beq.n	8006754 <_strtod_l+0x56c>
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <_strtod_l+0x5a4>)
 8006740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006744:	4650      	mov	r0, sl
 8006746:	4659      	mov	r1, fp
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7fa f87e 	bl	800084c <__aeabi_ddiv>
 8006750:	4682      	mov	sl, r0
 8006752:	468b      	mov	fp, r1
 8006754:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006758:	d0d7      	beq.n	800670a <_strtod_l+0x522>
 800675a:	f1b8 0f1f 	cmp.w	r8, #31
 800675e:	dd1f      	ble.n	80067a0 <_strtod_l+0x5b8>
 8006760:	2500      	movs	r5, #0
 8006762:	462e      	mov	r6, r5
 8006764:	9507      	str	r5, [sp, #28]
 8006766:	9505      	str	r5, [sp, #20]
 8006768:	2322      	movs	r3, #34	; 0x22
 800676a:	f04f 0a00 	mov.w	sl, #0
 800676e:	f04f 0b00 	mov.w	fp, #0
 8006772:	6023      	str	r3, [r4, #0]
 8006774:	e786      	b.n	8006684 <_strtod_l+0x49c>
 8006776:	bf00      	nop
 8006778:	08009dd1 	.word	0x08009dd1
 800677c:	08009e14 	.word	0x08009e14
 8006780:	08009dc9 	.word	0x08009dc9
 8006784:	08009f54 	.word	0x08009f54
 8006788:	0800a200 	.word	0x0800a200
 800678c:	0800a0e0 	.word	0x0800a0e0
 8006790:	0800a0b8 	.word	0x0800a0b8
 8006794:	7ff00000 	.word	0x7ff00000
 8006798:	7ca00000 	.word	0x7ca00000
 800679c:	7fefffff 	.word	0x7fefffff
 80067a0:	f018 0310 	ands.w	r3, r8, #16
 80067a4:	bf18      	it	ne
 80067a6:	236a      	movne	r3, #106	; 0x6a
 80067a8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006b58 <_strtod_l+0x970>
 80067ac:	9304      	str	r3, [sp, #16]
 80067ae:	4650      	mov	r0, sl
 80067b0:	4659      	mov	r1, fp
 80067b2:	2300      	movs	r3, #0
 80067b4:	f018 0f01 	tst.w	r8, #1
 80067b8:	d004      	beq.n	80067c4 <_strtod_l+0x5dc>
 80067ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80067be:	f7f9 ff1b 	bl	80005f8 <__aeabi_dmul>
 80067c2:	2301      	movs	r3, #1
 80067c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80067c8:	f109 0908 	add.w	r9, r9, #8
 80067cc:	d1f2      	bne.n	80067b4 <_strtod_l+0x5cc>
 80067ce:	b10b      	cbz	r3, 80067d4 <_strtod_l+0x5ec>
 80067d0:	4682      	mov	sl, r0
 80067d2:	468b      	mov	fp, r1
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	b1c3      	cbz	r3, 800680a <_strtod_l+0x622>
 80067d8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80067dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	4659      	mov	r1, fp
 80067e4:	dd11      	ble.n	800680a <_strtod_l+0x622>
 80067e6:	2b1f      	cmp	r3, #31
 80067e8:	f340 8124 	ble.w	8006a34 <_strtod_l+0x84c>
 80067ec:	2b34      	cmp	r3, #52	; 0x34
 80067ee:	bfde      	ittt	le
 80067f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80067f4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80067f8:	fa03 f202 	lslle.w	r2, r3, r2
 80067fc:	f04f 0a00 	mov.w	sl, #0
 8006800:	bfcc      	ite	gt
 8006802:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006806:	ea02 0b01 	andle.w	fp, r2, r1
 800680a:	2200      	movs	r2, #0
 800680c:	2300      	movs	r3, #0
 800680e:	4650      	mov	r0, sl
 8006810:	4659      	mov	r1, fp
 8006812:	f7fa f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8006816:	2800      	cmp	r0, #0
 8006818:	d1a2      	bne.n	8006760 <_strtod_l+0x578>
 800681a:	9b07      	ldr	r3, [sp, #28]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	9908      	ldr	r1, [sp, #32]
 8006820:	462b      	mov	r3, r5
 8006822:	463a      	mov	r2, r7
 8006824:	4620      	mov	r0, r4
 8006826:	f001 fe2d 	bl	8008484 <__s2b>
 800682a:	9007      	str	r0, [sp, #28]
 800682c:	2800      	cmp	r0, #0
 800682e:	f43f af1f 	beq.w	8006670 <_strtod_l+0x488>
 8006832:	9b05      	ldr	r3, [sp, #20]
 8006834:	1b9e      	subs	r6, r3, r6
 8006836:	9b06      	ldr	r3, [sp, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	bfb4      	ite	lt
 800683c:	4633      	movlt	r3, r6
 800683e:	2300      	movge	r3, #0
 8006840:	930c      	str	r3, [sp, #48]	; 0x30
 8006842:	9b06      	ldr	r3, [sp, #24]
 8006844:	2500      	movs	r5, #0
 8006846:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800684a:	9312      	str	r3, [sp, #72]	; 0x48
 800684c:	462e      	mov	r6, r5
 800684e:	9b07      	ldr	r3, [sp, #28]
 8006850:	4620      	mov	r0, r4
 8006852:	6859      	ldr	r1, [r3, #4]
 8006854:	f001 fd6e 	bl	8008334 <_Balloc>
 8006858:	9005      	str	r0, [sp, #20]
 800685a:	2800      	cmp	r0, #0
 800685c:	f43f af0c 	beq.w	8006678 <_strtod_l+0x490>
 8006860:	9b07      	ldr	r3, [sp, #28]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	3202      	adds	r2, #2
 8006866:	f103 010c 	add.w	r1, r3, #12
 800686a:	0092      	lsls	r2, r2, #2
 800686c:	300c      	adds	r0, #12
 800686e:	f001 fd53 	bl	8008318 <memcpy>
 8006872:	ec4b ab10 	vmov	d0, sl, fp
 8006876:	aa1a      	add	r2, sp, #104	; 0x68
 8006878:	a919      	add	r1, sp, #100	; 0x64
 800687a:	4620      	mov	r0, r4
 800687c:	f002 f948 	bl	8008b10 <__d2b>
 8006880:	ec4b ab18 	vmov	d8, sl, fp
 8006884:	9018      	str	r0, [sp, #96]	; 0x60
 8006886:	2800      	cmp	r0, #0
 8006888:	f43f aef6 	beq.w	8006678 <_strtod_l+0x490>
 800688c:	2101      	movs	r1, #1
 800688e:	4620      	mov	r0, r4
 8006890:	f001 fe92 	bl	80085b8 <__i2b>
 8006894:	4606      	mov	r6, r0
 8006896:	2800      	cmp	r0, #0
 8006898:	f43f aeee 	beq.w	8006678 <_strtod_l+0x490>
 800689c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800689e:	9904      	ldr	r1, [sp, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bfab      	itete	ge
 80068a4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80068a6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80068a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80068aa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80068ae:	bfac      	ite	ge
 80068b0:	eb03 0902 	addge.w	r9, r3, r2
 80068b4:	1ad7      	sublt	r7, r2, r3
 80068b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80068b8:	eba3 0801 	sub.w	r8, r3, r1
 80068bc:	4490      	add	r8, r2
 80068be:	4ba1      	ldr	r3, [pc, #644]	; (8006b44 <_strtod_l+0x95c>)
 80068c0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80068c4:	4598      	cmp	r8, r3
 80068c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80068ca:	f280 80c7 	bge.w	8006a5c <_strtod_l+0x874>
 80068ce:	eba3 0308 	sub.w	r3, r3, r8
 80068d2:	2b1f      	cmp	r3, #31
 80068d4:	eba2 0203 	sub.w	r2, r2, r3
 80068d8:	f04f 0101 	mov.w	r1, #1
 80068dc:	f300 80b1 	bgt.w	8006a42 <_strtod_l+0x85a>
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	930d      	str	r3, [sp, #52]	; 0x34
 80068e6:	2300      	movs	r3, #0
 80068e8:	9308      	str	r3, [sp, #32]
 80068ea:	eb09 0802 	add.w	r8, r9, r2
 80068ee:	9b04      	ldr	r3, [sp, #16]
 80068f0:	45c1      	cmp	r9, r8
 80068f2:	4417      	add	r7, r2
 80068f4:	441f      	add	r7, r3
 80068f6:	464b      	mov	r3, r9
 80068f8:	bfa8      	it	ge
 80068fa:	4643      	movge	r3, r8
 80068fc:	42bb      	cmp	r3, r7
 80068fe:	bfa8      	it	ge
 8006900:	463b      	movge	r3, r7
 8006902:	2b00      	cmp	r3, #0
 8006904:	bfc2      	ittt	gt
 8006906:	eba8 0803 	subgt.w	r8, r8, r3
 800690a:	1aff      	subgt	r7, r7, r3
 800690c:	eba9 0903 	subgt.w	r9, r9, r3
 8006910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006912:	2b00      	cmp	r3, #0
 8006914:	dd17      	ble.n	8006946 <_strtod_l+0x75e>
 8006916:	4631      	mov	r1, r6
 8006918:	461a      	mov	r2, r3
 800691a:	4620      	mov	r0, r4
 800691c:	f001 ff0c 	bl	8008738 <__pow5mult>
 8006920:	4606      	mov	r6, r0
 8006922:	2800      	cmp	r0, #0
 8006924:	f43f aea8 	beq.w	8006678 <_strtod_l+0x490>
 8006928:	4601      	mov	r1, r0
 800692a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800692c:	4620      	mov	r0, r4
 800692e:	f001 fe59 	bl	80085e4 <__multiply>
 8006932:	900b      	str	r0, [sp, #44]	; 0x2c
 8006934:	2800      	cmp	r0, #0
 8006936:	f43f ae9f 	beq.w	8006678 <_strtod_l+0x490>
 800693a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800693c:	4620      	mov	r0, r4
 800693e:	f001 fd39 	bl	80083b4 <_Bfree>
 8006942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006944:	9318      	str	r3, [sp, #96]	; 0x60
 8006946:	f1b8 0f00 	cmp.w	r8, #0
 800694a:	f300 808c 	bgt.w	8006a66 <_strtod_l+0x87e>
 800694e:	9b06      	ldr	r3, [sp, #24]
 8006950:	2b00      	cmp	r3, #0
 8006952:	dd08      	ble.n	8006966 <_strtod_l+0x77e>
 8006954:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006956:	9905      	ldr	r1, [sp, #20]
 8006958:	4620      	mov	r0, r4
 800695a:	f001 feed 	bl	8008738 <__pow5mult>
 800695e:	9005      	str	r0, [sp, #20]
 8006960:	2800      	cmp	r0, #0
 8006962:	f43f ae89 	beq.w	8006678 <_strtod_l+0x490>
 8006966:	2f00      	cmp	r7, #0
 8006968:	dd08      	ble.n	800697c <_strtod_l+0x794>
 800696a:	9905      	ldr	r1, [sp, #20]
 800696c:	463a      	mov	r2, r7
 800696e:	4620      	mov	r0, r4
 8006970:	f001 ff3c 	bl	80087ec <__lshift>
 8006974:	9005      	str	r0, [sp, #20]
 8006976:	2800      	cmp	r0, #0
 8006978:	f43f ae7e 	beq.w	8006678 <_strtod_l+0x490>
 800697c:	f1b9 0f00 	cmp.w	r9, #0
 8006980:	dd08      	ble.n	8006994 <_strtod_l+0x7ac>
 8006982:	4631      	mov	r1, r6
 8006984:	464a      	mov	r2, r9
 8006986:	4620      	mov	r0, r4
 8006988:	f001 ff30 	bl	80087ec <__lshift>
 800698c:	4606      	mov	r6, r0
 800698e:	2800      	cmp	r0, #0
 8006990:	f43f ae72 	beq.w	8006678 <_strtod_l+0x490>
 8006994:	9a05      	ldr	r2, [sp, #20]
 8006996:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006998:	4620      	mov	r0, r4
 800699a:	f001 ffb3 	bl	8008904 <__mdiff>
 800699e:	4605      	mov	r5, r0
 80069a0:	2800      	cmp	r0, #0
 80069a2:	f43f ae69 	beq.w	8006678 <_strtod_l+0x490>
 80069a6:	68c3      	ldr	r3, [r0, #12]
 80069a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80069aa:	2300      	movs	r3, #0
 80069ac:	60c3      	str	r3, [r0, #12]
 80069ae:	4631      	mov	r1, r6
 80069b0:	f001 ff8c 	bl	80088cc <__mcmp>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	da60      	bge.n	8006a7a <_strtod_l+0x892>
 80069b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ba:	ea53 030a 	orrs.w	r3, r3, sl
 80069be:	f040 8082 	bne.w	8006ac6 <_strtod_l+0x8de>
 80069c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d17d      	bne.n	8006ac6 <_strtod_l+0x8de>
 80069ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069ce:	0d1b      	lsrs	r3, r3, #20
 80069d0:	051b      	lsls	r3, r3, #20
 80069d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80069d6:	d976      	bls.n	8006ac6 <_strtod_l+0x8de>
 80069d8:	696b      	ldr	r3, [r5, #20]
 80069da:	b913      	cbnz	r3, 80069e2 <_strtod_l+0x7fa>
 80069dc:	692b      	ldr	r3, [r5, #16]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	dd71      	ble.n	8006ac6 <_strtod_l+0x8de>
 80069e2:	4629      	mov	r1, r5
 80069e4:	2201      	movs	r2, #1
 80069e6:	4620      	mov	r0, r4
 80069e8:	f001 ff00 	bl	80087ec <__lshift>
 80069ec:	4631      	mov	r1, r6
 80069ee:	4605      	mov	r5, r0
 80069f0:	f001 ff6c 	bl	80088cc <__mcmp>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	dd66      	ble.n	8006ac6 <_strtod_l+0x8de>
 80069f8:	9904      	ldr	r1, [sp, #16]
 80069fa:	4a53      	ldr	r2, [pc, #332]	; (8006b48 <_strtod_l+0x960>)
 80069fc:	465b      	mov	r3, fp
 80069fe:	2900      	cmp	r1, #0
 8006a00:	f000 8081 	beq.w	8006b06 <_strtod_l+0x91e>
 8006a04:	ea02 010b 	and.w	r1, r2, fp
 8006a08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a0c:	dc7b      	bgt.n	8006b06 <_strtod_l+0x91e>
 8006a0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a12:	f77f aea9 	ble.w	8006768 <_strtod_l+0x580>
 8006a16:	4b4d      	ldr	r3, [pc, #308]	; (8006b4c <_strtod_l+0x964>)
 8006a18:	4650      	mov	r0, sl
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f7f9 fdeb 	bl	80005f8 <__aeabi_dmul>
 8006a22:	460b      	mov	r3, r1
 8006a24:	4303      	orrs	r3, r0
 8006a26:	bf08      	it	eq
 8006a28:	2322      	moveq	r3, #34	; 0x22
 8006a2a:	4682      	mov	sl, r0
 8006a2c:	468b      	mov	fp, r1
 8006a2e:	bf08      	it	eq
 8006a30:	6023      	streq	r3, [r4, #0]
 8006a32:	e62b      	b.n	800668c <_strtod_l+0x4a4>
 8006a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	ea03 0a0a 	and.w	sl, r3, sl
 8006a40:	e6e3      	b.n	800680a <_strtod_l+0x622>
 8006a42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006a46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006a4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006a4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006a52:	fa01 f308 	lsl.w	r3, r1, r8
 8006a56:	9308      	str	r3, [sp, #32]
 8006a58:	910d      	str	r1, [sp, #52]	; 0x34
 8006a5a:	e746      	b.n	80068ea <_strtod_l+0x702>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	9308      	str	r3, [sp, #32]
 8006a60:	2301      	movs	r3, #1
 8006a62:	930d      	str	r3, [sp, #52]	; 0x34
 8006a64:	e741      	b.n	80068ea <_strtod_l+0x702>
 8006a66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a68:	4642      	mov	r2, r8
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f001 febe 	bl	80087ec <__lshift>
 8006a70:	9018      	str	r0, [sp, #96]	; 0x60
 8006a72:	2800      	cmp	r0, #0
 8006a74:	f47f af6b 	bne.w	800694e <_strtod_l+0x766>
 8006a78:	e5fe      	b.n	8006678 <_strtod_l+0x490>
 8006a7a:	465f      	mov	r7, fp
 8006a7c:	d16e      	bne.n	8006b5c <_strtod_l+0x974>
 8006a7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a84:	b342      	cbz	r2, 8006ad8 <_strtod_l+0x8f0>
 8006a86:	4a32      	ldr	r2, [pc, #200]	; (8006b50 <_strtod_l+0x968>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d128      	bne.n	8006ade <_strtod_l+0x8f6>
 8006a8c:	9b04      	ldr	r3, [sp, #16]
 8006a8e:	4651      	mov	r1, sl
 8006a90:	b1eb      	cbz	r3, 8006ace <_strtod_l+0x8e6>
 8006a92:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <_strtod_l+0x960>)
 8006a94:	403b      	ands	r3, r7
 8006a96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a9e:	d819      	bhi.n	8006ad4 <_strtod_l+0x8ec>
 8006aa0:	0d1b      	lsrs	r3, r3, #20
 8006aa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	4299      	cmp	r1, r3
 8006aac:	d117      	bne.n	8006ade <_strtod_l+0x8f6>
 8006aae:	4b29      	ldr	r3, [pc, #164]	; (8006b54 <_strtod_l+0x96c>)
 8006ab0:	429f      	cmp	r7, r3
 8006ab2:	d102      	bne.n	8006aba <_strtod_l+0x8d2>
 8006ab4:	3101      	adds	r1, #1
 8006ab6:	f43f addf 	beq.w	8006678 <_strtod_l+0x490>
 8006aba:	4b23      	ldr	r3, [pc, #140]	; (8006b48 <_strtod_l+0x960>)
 8006abc:	403b      	ands	r3, r7
 8006abe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006ac2:	f04f 0a00 	mov.w	sl, #0
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1a4      	bne.n	8006a16 <_strtod_l+0x82e>
 8006acc:	e5de      	b.n	800668c <_strtod_l+0x4a4>
 8006ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ad2:	e7ea      	b.n	8006aaa <_strtod_l+0x8c2>
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	e7e8      	b.n	8006aaa <_strtod_l+0x8c2>
 8006ad8:	ea53 030a 	orrs.w	r3, r3, sl
 8006adc:	d08c      	beq.n	80069f8 <_strtod_l+0x810>
 8006ade:	9b08      	ldr	r3, [sp, #32]
 8006ae0:	b1db      	cbz	r3, 8006b1a <_strtod_l+0x932>
 8006ae2:	423b      	tst	r3, r7
 8006ae4:	d0ef      	beq.n	8006ac6 <_strtod_l+0x8de>
 8006ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae8:	9a04      	ldr	r2, [sp, #16]
 8006aea:	4650      	mov	r0, sl
 8006aec:	4659      	mov	r1, fp
 8006aee:	b1c3      	cbz	r3, 8006b22 <_strtod_l+0x93a>
 8006af0:	f7ff fb5e 	bl	80061b0 <sulp>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	ec51 0b18 	vmov	r0, r1, d8
 8006afc:	f7f9 fbc6 	bl	800028c <__adddf3>
 8006b00:	4682      	mov	sl, r0
 8006b02:	468b      	mov	fp, r1
 8006b04:	e7df      	b.n	8006ac6 <_strtod_l+0x8de>
 8006b06:	4013      	ands	r3, r2
 8006b08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b0c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006b10:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006b14:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006b18:	e7d5      	b.n	8006ac6 <_strtod_l+0x8de>
 8006b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b1c:	ea13 0f0a 	tst.w	r3, sl
 8006b20:	e7e0      	b.n	8006ae4 <_strtod_l+0x8fc>
 8006b22:	f7ff fb45 	bl	80061b0 <sulp>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	ec51 0b18 	vmov	r0, r1, d8
 8006b2e:	f7f9 fbab 	bl	8000288 <__aeabi_dsub>
 8006b32:	2200      	movs	r2, #0
 8006b34:	2300      	movs	r3, #0
 8006b36:	4682      	mov	sl, r0
 8006b38:	468b      	mov	fp, r1
 8006b3a:	f7f9 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d0c1      	beq.n	8006ac6 <_strtod_l+0x8de>
 8006b42:	e611      	b.n	8006768 <_strtod_l+0x580>
 8006b44:	fffffc02 	.word	0xfffffc02
 8006b48:	7ff00000 	.word	0x7ff00000
 8006b4c:	39500000 	.word	0x39500000
 8006b50:	000fffff 	.word	0x000fffff
 8006b54:	7fefffff 	.word	0x7fefffff
 8006b58:	08009e28 	.word	0x08009e28
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f002 f832 	bl	8008bc8 <__ratio>
 8006b64:	ec59 8b10 	vmov	r8, r9, d0
 8006b68:	ee10 0a10 	vmov	r0, s0
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b72:	4649      	mov	r1, r9
 8006b74:	f7f9 ffbc 	bl	8000af0 <__aeabi_dcmple>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d07a      	beq.n	8006c72 <_strtod_l+0xa8a>
 8006b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d04a      	beq.n	8006c18 <_strtod_l+0xa30>
 8006b82:	4b95      	ldr	r3, [pc, #596]	; (8006dd8 <_strtod_l+0xbf0>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b8a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006dd8 <_strtod_l+0xbf0>
 8006b8e:	f04f 0800 	mov.w	r8, #0
 8006b92:	4b92      	ldr	r3, [pc, #584]	; (8006ddc <_strtod_l+0xbf4>)
 8006b94:	403b      	ands	r3, r7
 8006b96:	930d      	str	r3, [sp, #52]	; 0x34
 8006b98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b9a:	4b91      	ldr	r3, [pc, #580]	; (8006de0 <_strtod_l+0xbf8>)
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	f040 80b0 	bne.w	8006d02 <_strtod_l+0xb1a>
 8006ba2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ba6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006baa:	ec4b ab10 	vmov	d0, sl, fp
 8006bae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006bb2:	f001 ff31 	bl	8008a18 <__ulp>
 8006bb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bba:	ec53 2b10 	vmov	r2, r3, d0
 8006bbe:	f7f9 fd1b 	bl	80005f8 <__aeabi_dmul>
 8006bc2:	4652      	mov	r2, sl
 8006bc4:	465b      	mov	r3, fp
 8006bc6:	f7f9 fb61 	bl	800028c <__adddf3>
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4983      	ldr	r1, [pc, #524]	; (8006ddc <_strtod_l+0xbf4>)
 8006bce:	4a85      	ldr	r2, [pc, #532]	; (8006de4 <_strtod_l+0xbfc>)
 8006bd0:	4019      	ands	r1, r3
 8006bd2:	4291      	cmp	r1, r2
 8006bd4:	4682      	mov	sl, r0
 8006bd6:	d960      	bls.n	8006c9a <_strtod_l+0xab2>
 8006bd8:	ee18 3a90 	vmov	r3, s17
 8006bdc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d104      	bne.n	8006bee <_strtod_l+0xa06>
 8006be4:	ee18 3a10 	vmov	r3, s16
 8006be8:	3301      	adds	r3, #1
 8006bea:	f43f ad45 	beq.w	8006678 <_strtod_l+0x490>
 8006bee:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006df0 <_strtod_l+0xc08>
 8006bf2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006bf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f001 fbdb 	bl	80083b4 <_Bfree>
 8006bfe:	9905      	ldr	r1, [sp, #20]
 8006c00:	4620      	mov	r0, r4
 8006c02:	f001 fbd7 	bl	80083b4 <_Bfree>
 8006c06:	4631      	mov	r1, r6
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f001 fbd3 	bl	80083b4 <_Bfree>
 8006c0e:	4629      	mov	r1, r5
 8006c10:	4620      	mov	r0, r4
 8006c12:	f001 fbcf 	bl	80083b4 <_Bfree>
 8006c16:	e61a      	b.n	800684e <_strtod_l+0x666>
 8006c18:	f1ba 0f00 	cmp.w	sl, #0
 8006c1c:	d11b      	bne.n	8006c56 <_strtod_l+0xa6e>
 8006c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c22:	b9f3      	cbnz	r3, 8006c62 <_strtod_l+0xa7a>
 8006c24:	4b6c      	ldr	r3, [pc, #432]	; (8006dd8 <_strtod_l+0xbf0>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	4640      	mov	r0, r8
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	f7f9 ff56 	bl	8000adc <__aeabi_dcmplt>
 8006c30:	b9d0      	cbnz	r0, 8006c68 <_strtod_l+0xa80>
 8006c32:	4640      	mov	r0, r8
 8006c34:	4649      	mov	r1, r9
 8006c36:	4b6c      	ldr	r3, [pc, #432]	; (8006de8 <_strtod_l+0xc00>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f7f9 fcdd 	bl	80005f8 <__aeabi_dmul>
 8006c3e:	4680      	mov	r8, r0
 8006c40:	4689      	mov	r9, r1
 8006c42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c46:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006c4a:	9315      	str	r3, [sp, #84]	; 0x54
 8006c4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006c50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c54:	e79d      	b.n	8006b92 <_strtod_l+0x9aa>
 8006c56:	f1ba 0f01 	cmp.w	sl, #1
 8006c5a:	d102      	bne.n	8006c62 <_strtod_l+0xa7a>
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	f43f ad83 	beq.w	8006768 <_strtod_l+0x580>
 8006c62:	4b62      	ldr	r3, [pc, #392]	; (8006dec <_strtod_l+0xc04>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	e78e      	b.n	8006b86 <_strtod_l+0x99e>
 8006c68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006de8 <_strtod_l+0xc00>
 8006c6c:	f04f 0800 	mov.w	r8, #0
 8006c70:	e7e7      	b.n	8006c42 <_strtod_l+0xa5a>
 8006c72:	4b5d      	ldr	r3, [pc, #372]	; (8006de8 <_strtod_l+0xc00>)
 8006c74:	4640      	mov	r0, r8
 8006c76:	4649      	mov	r1, r9
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f7f9 fcbd 	bl	80005f8 <__aeabi_dmul>
 8006c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c80:	4680      	mov	r8, r0
 8006c82:	4689      	mov	r9, r1
 8006c84:	b933      	cbnz	r3, 8006c94 <_strtod_l+0xaac>
 8006c86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c8a:	900e      	str	r0, [sp, #56]	; 0x38
 8006c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006c92:	e7dd      	b.n	8006c50 <_strtod_l+0xa68>
 8006c94:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006c98:	e7f9      	b.n	8006c8e <_strtod_l+0xaa6>
 8006c9a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006c9e:	9b04      	ldr	r3, [sp, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1a8      	bne.n	8006bf6 <_strtod_l+0xa0e>
 8006ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006caa:	0d1b      	lsrs	r3, r3, #20
 8006cac:	051b      	lsls	r3, r3, #20
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d1a1      	bne.n	8006bf6 <_strtod_l+0xa0e>
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	f7f9 ffe7 	bl	8000c88 <__aeabi_d2lz>
 8006cba:	f7f9 fc6f 	bl	800059c <__aeabi_l2d>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	f7f9 fadf 	bl	8000288 <__aeabi_dsub>
 8006cca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cd0:	ea43 030a 	orr.w	r3, r3, sl
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	4689      	mov	r9, r1
 8006cda:	d055      	beq.n	8006d88 <_strtod_l+0xba0>
 8006cdc:	a336      	add	r3, pc, #216	; (adr r3, 8006db8 <_strtod_l+0xbd0>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fefb 	bl	8000adc <__aeabi_dcmplt>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f47f acd0 	bne.w	800668c <_strtod_l+0x4a4>
 8006cec:	a334      	add	r3, pc, #208	; (adr r3, 8006dc0 <_strtod_l+0xbd8>)
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	f7f9 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f43f af7b 	beq.w	8006bf6 <_strtod_l+0xa0e>
 8006d00:	e4c4      	b.n	800668c <_strtod_l+0x4a4>
 8006d02:	9b04      	ldr	r3, [sp, #16]
 8006d04:	b333      	cbz	r3, 8006d54 <_strtod_l+0xb6c>
 8006d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d0c:	d822      	bhi.n	8006d54 <_strtod_l+0xb6c>
 8006d0e:	a32e      	add	r3, pc, #184	; (adr r3, 8006dc8 <_strtod_l+0xbe0>)
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	4640      	mov	r0, r8
 8006d16:	4649      	mov	r1, r9
 8006d18:	f7f9 feea 	bl	8000af0 <__aeabi_dcmple>
 8006d1c:	b1a0      	cbz	r0, 8006d48 <_strtod_l+0xb60>
 8006d1e:	4649      	mov	r1, r9
 8006d20:	4640      	mov	r0, r8
 8006d22:	f7f9 ff41 	bl	8000ba8 <__aeabi_d2uiz>
 8006d26:	2801      	cmp	r0, #1
 8006d28:	bf38      	it	cc
 8006d2a:	2001      	movcc	r0, #1
 8006d2c:	f7f9 fbea 	bl	8000504 <__aeabi_ui2d>
 8006d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d32:	4680      	mov	r8, r0
 8006d34:	4689      	mov	r9, r1
 8006d36:	bb23      	cbnz	r3, 8006d82 <_strtod_l+0xb9a>
 8006d38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d3c:	9010      	str	r0, [sp, #64]	; 0x40
 8006d3e:	9311      	str	r3, [sp, #68]	; 0x44
 8006d40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d44:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d4c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	9309      	str	r3, [sp, #36]	; 0x24
 8006d54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d58:	eeb0 0a48 	vmov.f32	s0, s16
 8006d5c:	eef0 0a68 	vmov.f32	s1, s17
 8006d60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d64:	f001 fe58 	bl	8008a18 <__ulp>
 8006d68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d6c:	ec53 2b10 	vmov	r2, r3, d0
 8006d70:	f7f9 fc42 	bl	80005f8 <__aeabi_dmul>
 8006d74:	ec53 2b18 	vmov	r2, r3, d8
 8006d78:	f7f9 fa88 	bl	800028c <__adddf3>
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	468b      	mov	fp, r1
 8006d80:	e78d      	b.n	8006c9e <_strtod_l+0xab6>
 8006d82:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006d86:	e7db      	b.n	8006d40 <_strtod_l+0xb58>
 8006d88:	a311      	add	r3, pc, #68	; (adr r3, 8006dd0 <_strtod_l+0xbe8>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f7f9 fea5 	bl	8000adc <__aeabi_dcmplt>
 8006d92:	e7b2      	b.n	8006cfa <_strtod_l+0xb12>
 8006d94:	2300      	movs	r3, #0
 8006d96:	930a      	str	r3, [sp, #40]	; 0x28
 8006d98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	f7ff ba6b 	b.w	8006278 <_strtod_l+0x90>
 8006da2:	2a65      	cmp	r2, #101	; 0x65
 8006da4:	f43f ab5f 	beq.w	8006466 <_strtod_l+0x27e>
 8006da8:	2a45      	cmp	r2, #69	; 0x45
 8006daa:	f43f ab5c 	beq.w	8006466 <_strtod_l+0x27e>
 8006dae:	2301      	movs	r3, #1
 8006db0:	f7ff bb94 	b.w	80064dc <_strtod_l+0x2f4>
 8006db4:	f3af 8000 	nop.w
 8006db8:	94a03595 	.word	0x94a03595
 8006dbc:	3fdfffff 	.word	0x3fdfffff
 8006dc0:	35afe535 	.word	0x35afe535
 8006dc4:	3fe00000 	.word	0x3fe00000
 8006dc8:	ffc00000 	.word	0xffc00000
 8006dcc:	41dfffff 	.word	0x41dfffff
 8006dd0:	94a03595 	.word	0x94a03595
 8006dd4:	3fcfffff 	.word	0x3fcfffff
 8006dd8:	3ff00000 	.word	0x3ff00000
 8006ddc:	7ff00000 	.word	0x7ff00000
 8006de0:	7fe00000 	.word	0x7fe00000
 8006de4:	7c9fffff 	.word	0x7c9fffff
 8006de8:	3fe00000 	.word	0x3fe00000
 8006dec:	bff00000 	.word	0xbff00000
 8006df0:	7fefffff 	.word	0x7fefffff

08006df4 <_strtod_r>:
 8006df4:	4b01      	ldr	r3, [pc, #4]	; (8006dfc <_strtod_r+0x8>)
 8006df6:	f7ff b9f7 	b.w	80061e8 <_strtod_l>
 8006dfa:	bf00      	nop
 8006dfc:	2000007c 	.word	0x2000007c

08006e00 <_strtol_l.constprop.0>:
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e06:	d001      	beq.n	8006e0c <_strtol_l.constprop.0+0xc>
 8006e08:	2b24      	cmp	r3, #36	; 0x24
 8006e0a:	d906      	bls.n	8006e1a <_strtol_l.constprop.0+0x1a>
 8006e0c:	f7fe fafe 	bl	800540c <__errno>
 8006e10:	2316      	movs	r3, #22
 8006e12:	6003      	str	r3, [r0, #0]
 8006e14:	2000      	movs	r0, #0
 8006e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f00 <_strtol_l.constprop.0+0x100>
 8006e1e:	460d      	mov	r5, r1
 8006e20:	462e      	mov	r6, r5
 8006e22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e26:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006e2a:	f017 0708 	ands.w	r7, r7, #8
 8006e2e:	d1f7      	bne.n	8006e20 <_strtol_l.constprop.0+0x20>
 8006e30:	2c2d      	cmp	r4, #45	; 0x2d
 8006e32:	d132      	bne.n	8006e9a <_strtol_l.constprop.0+0x9a>
 8006e34:	782c      	ldrb	r4, [r5, #0]
 8006e36:	2701      	movs	r7, #1
 8006e38:	1cb5      	adds	r5, r6, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d05b      	beq.n	8006ef6 <_strtol_l.constprop.0+0xf6>
 8006e3e:	2b10      	cmp	r3, #16
 8006e40:	d109      	bne.n	8006e56 <_strtol_l.constprop.0+0x56>
 8006e42:	2c30      	cmp	r4, #48	; 0x30
 8006e44:	d107      	bne.n	8006e56 <_strtol_l.constprop.0+0x56>
 8006e46:	782c      	ldrb	r4, [r5, #0]
 8006e48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006e4c:	2c58      	cmp	r4, #88	; 0x58
 8006e4e:	d14d      	bne.n	8006eec <_strtol_l.constprop.0+0xec>
 8006e50:	786c      	ldrb	r4, [r5, #1]
 8006e52:	2310      	movs	r3, #16
 8006e54:	3502      	adds	r5, #2
 8006e56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006e5a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006e5e:	f04f 0c00 	mov.w	ip, #0
 8006e62:	fbb8 f9f3 	udiv	r9, r8, r3
 8006e66:	4666      	mov	r6, ip
 8006e68:	fb03 8a19 	mls	sl, r3, r9, r8
 8006e6c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006e70:	f1be 0f09 	cmp.w	lr, #9
 8006e74:	d816      	bhi.n	8006ea4 <_strtol_l.constprop.0+0xa4>
 8006e76:	4674      	mov	r4, lr
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	dd24      	ble.n	8006ec6 <_strtol_l.constprop.0+0xc6>
 8006e7c:	f1bc 0f00 	cmp.w	ip, #0
 8006e80:	db1e      	blt.n	8006ec0 <_strtol_l.constprop.0+0xc0>
 8006e82:	45b1      	cmp	r9, r6
 8006e84:	d31c      	bcc.n	8006ec0 <_strtol_l.constprop.0+0xc0>
 8006e86:	d101      	bne.n	8006e8c <_strtol_l.constprop.0+0x8c>
 8006e88:	45a2      	cmp	sl, r4
 8006e8a:	db19      	blt.n	8006ec0 <_strtol_l.constprop.0+0xc0>
 8006e8c:	fb06 4603 	mla	r6, r6, r3, r4
 8006e90:	f04f 0c01 	mov.w	ip, #1
 8006e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e98:	e7e8      	b.n	8006e6c <_strtol_l.constprop.0+0x6c>
 8006e9a:	2c2b      	cmp	r4, #43	; 0x2b
 8006e9c:	bf04      	itt	eq
 8006e9e:	782c      	ldrbeq	r4, [r5, #0]
 8006ea0:	1cb5      	addeq	r5, r6, #2
 8006ea2:	e7ca      	b.n	8006e3a <_strtol_l.constprop.0+0x3a>
 8006ea4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006ea8:	f1be 0f19 	cmp.w	lr, #25
 8006eac:	d801      	bhi.n	8006eb2 <_strtol_l.constprop.0+0xb2>
 8006eae:	3c37      	subs	r4, #55	; 0x37
 8006eb0:	e7e2      	b.n	8006e78 <_strtol_l.constprop.0+0x78>
 8006eb2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006eb6:	f1be 0f19 	cmp.w	lr, #25
 8006eba:	d804      	bhi.n	8006ec6 <_strtol_l.constprop.0+0xc6>
 8006ebc:	3c57      	subs	r4, #87	; 0x57
 8006ebe:	e7db      	b.n	8006e78 <_strtol_l.constprop.0+0x78>
 8006ec0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006ec4:	e7e6      	b.n	8006e94 <_strtol_l.constprop.0+0x94>
 8006ec6:	f1bc 0f00 	cmp.w	ip, #0
 8006eca:	da05      	bge.n	8006ed8 <_strtol_l.constprop.0+0xd8>
 8006ecc:	2322      	movs	r3, #34	; 0x22
 8006ece:	6003      	str	r3, [r0, #0]
 8006ed0:	4646      	mov	r6, r8
 8006ed2:	b942      	cbnz	r2, 8006ee6 <_strtol_l.constprop.0+0xe6>
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	e79e      	b.n	8006e16 <_strtol_l.constprop.0+0x16>
 8006ed8:	b107      	cbz	r7, 8006edc <_strtol_l.constprop.0+0xdc>
 8006eda:	4276      	negs	r6, r6
 8006edc:	2a00      	cmp	r2, #0
 8006ede:	d0f9      	beq.n	8006ed4 <_strtol_l.constprop.0+0xd4>
 8006ee0:	f1bc 0f00 	cmp.w	ip, #0
 8006ee4:	d000      	beq.n	8006ee8 <_strtol_l.constprop.0+0xe8>
 8006ee6:	1e69      	subs	r1, r5, #1
 8006ee8:	6011      	str	r1, [r2, #0]
 8006eea:	e7f3      	b.n	8006ed4 <_strtol_l.constprop.0+0xd4>
 8006eec:	2430      	movs	r4, #48	; 0x30
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1b1      	bne.n	8006e56 <_strtol_l.constprop.0+0x56>
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	e7af      	b.n	8006e56 <_strtol_l.constprop.0+0x56>
 8006ef6:	2c30      	cmp	r4, #48	; 0x30
 8006ef8:	d0a5      	beq.n	8006e46 <_strtol_l.constprop.0+0x46>
 8006efa:	230a      	movs	r3, #10
 8006efc:	e7ab      	b.n	8006e56 <_strtol_l.constprop.0+0x56>
 8006efe:	bf00      	nop
 8006f00:	08009e51 	.word	0x08009e51

08006f04 <_strtol_r>:
 8006f04:	f7ff bf7c 	b.w	8006e00 <_strtol_l.constprop.0>

08006f08 <quorem>:
 8006f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	6903      	ldr	r3, [r0, #16]
 8006f0e:	690c      	ldr	r4, [r1, #16]
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	4607      	mov	r7, r0
 8006f14:	f2c0 8081 	blt.w	800701a <quorem+0x112>
 8006f18:	3c01      	subs	r4, #1
 8006f1a:	f101 0814 	add.w	r8, r1, #20
 8006f1e:	f100 0514 	add.w	r5, r0, #20
 8006f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f30:	3301      	adds	r3, #1
 8006f32:	429a      	cmp	r2, r3
 8006f34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f40:	d331      	bcc.n	8006fa6 <quorem+0x9e>
 8006f42:	f04f 0e00 	mov.w	lr, #0
 8006f46:	4640      	mov	r0, r8
 8006f48:	46ac      	mov	ip, r5
 8006f4a:	46f2      	mov	sl, lr
 8006f4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f50:	b293      	uxth	r3, r2
 8006f52:	fb06 e303 	mla	r3, r6, r3, lr
 8006f56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	ebaa 0303 	sub.w	r3, sl, r3
 8006f60:	f8dc a000 	ldr.w	sl, [ip]
 8006f64:	0c12      	lsrs	r2, r2, #16
 8006f66:	fa13 f38a 	uxtah	r3, r3, sl
 8006f6a:	fb06 e202 	mla	r2, r6, r2, lr
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	9b00      	ldr	r3, [sp, #0]
 8006f72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f76:	b292      	uxth	r2, r2
 8006f78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f80:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f84:	4581      	cmp	r9, r0
 8006f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f8a:	f84c 3b04 	str.w	r3, [ip], #4
 8006f8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f92:	d2db      	bcs.n	8006f4c <quorem+0x44>
 8006f94:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f98:	b92b      	cbnz	r3, 8006fa6 <quorem+0x9e>
 8006f9a:	9b01      	ldr	r3, [sp, #4]
 8006f9c:	3b04      	subs	r3, #4
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	d32e      	bcc.n	8007002 <quorem+0xfa>
 8006fa4:	613c      	str	r4, [r7, #16]
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f001 fc90 	bl	80088cc <__mcmp>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	db24      	blt.n	8006ffa <quorem+0xf2>
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f04f 0c00 	mov.w	ip, #0
 8006fb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fbc:	f8d0 e000 	ldr.w	lr, [r0]
 8006fc0:	b293      	uxth	r3, r2
 8006fc2:	ebac 0303 	sub.w	r3, ip, r3
 8006fc6:	0c12      	lsrs	r2, r2, #16
 8006fc8:	fa13 f38e 	uxtah	r3, r3, lr
 8006fcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fda:	45c1      	cmp	r9, r8
 8006fdc:	f840 3b04 	str.w	r3, [r0], #4
 8006fe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fe4:	d2e8      	bcs.n	8006fb8 <quorem+0xb0>
 8006fe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fee:	b922      	cbnz	r2, 8006ffa <quorem+0xf2>
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	429d      	cmp	r5, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	d30a      	bcc.n	800700e <quorem+0x106>
 8006ff8:	613c      	str	r4, [r7, #16]
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	b003      	add	sp, #12
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	3b04      	subs	r3, #4
 8007006:	2a00      	cmp	r2, #0
 8007008:	d1cc      	bne.n	8006fa4 <quorem+0x9c>
 800700a:	3c01      	subs	r4, #1
 800700c:	e7c7      	b.n	8006f9e <quorem+0x96>
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	3b04      	subs	r3, #4
 8007012:	2a00      	cmp	r2, #0
 8007014:	d1f0      	bne.n	8006ff8 <quorem+0xf0>
 8007016:	3c01      	subs	r4, #1
 8007018:	e7eb      	b.n	8006ff2 <quorem+0xea>
 800701a:	2000      	movs	r0, #0
 800701c:	e7ee      	b.n	8006ffc <quorem+0xf4>
	...

08007020 <_dtoa_r>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	ed2d 8b04 	vpush	{d8-d9}
 8007028:	ec57 6b10 	vmov	r6, r7, d0
 800702c:	b093      	sub	sp, #76	; 0x4c
 800702e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007030:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007034:	9106      	str	r1, [sp, #24]
 8007036:	ee10 aa10 	vmov	sl, s0
 800703a:	4604      	mov	r4, r0
 800703c:	9209      	str	r2, [sp, #36]	; 0x24
 800703e:	930c      	str	r3, [sp, #48]	; 0x30
 8007040:	46bb      	mov	fp, r7
 8007042:	b975      	cbnz	r5, 8007062 <_dtoa_r+0x42>
 8007044:	2010      	movs	r0, #16
 8007046:	f001 f94d 	bl	80082e4 <malloc>
 800704a:	4602      	mov	r2, r0
 800704c:	6260      	str	r0, [r4, #36]	; 0x24
 800704e:	b920      	cbnz	r0, 800705a <_dtoa_r+0x3a>
 8007050:	4ba7      	ldr	r3, [pc, #668]	; (80072f0 <_dtoa_r+0x2d0>)
 8007052:	21ea      	movs	r1, #234	; 0xea
 8007054:	48a7      	ldr	r0, [pc, #668]	; (80072f4 <_dtoa_r+0x2d4>)
 8007056:	f002 f8bd 	bl	80091d4 <__assert_func>
 800705a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800705e:	6005      	str	r5, [r0, #0]
 8007060:	60c5      	str	r5, [r0, #12]
 8007062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007064:	6819      	ldr	r1, [r3, #0]
 8007066:	b151      	cbz	r1, 800707e <_dtoa_r+0x5e>
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	604a      	str	r2, [r1, #4]
 800706c:	2301      	movs	r3, #1
 800706e:	4093      	lsls	r3, r2
 8007070:	608b      	str	r3, [r1, #8]
 8007072:	4620      	mov	r0, r4
 8007074:	f001 f99e 	bl	80083b4 <_Bfree>
 8007078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	1e3b      	subs	r3, r7, #0
 8007080:	bfaa      	itet	ge
 8007082:	2300      	movge	r3, #0
 8007084:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007088:	f8c8 3000 	strge.w	r3, [r8]
 800708c:	4b9a      	ldr	r3, [pc, #616]	; (80072f8 <_dtoa_r+0x2d8>)
 800708e:	bfbc      	itt	lt
 8007090:	2201      	movlt	r2, #1
 8007092:	f8c8 2000 	strlt.w	r2, [r8]
 8007096:	ea33 030b 	bics.w	r3, r3, fp
 800709a:	d11b      	bne.n	80070d4 <_dtoa_r+0xb4>
 800709c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800709e:	f242 730f 	movw	r3, #9999	; 0x270f
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070a8:	4333      	orrs	r3, r6
 80070aa:	f000 8592 	beq.w	8007bd2 <_dtoa_r+0xbb2>
 80070ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070b0:	b963      	cbnz	r3, 80070cc <_dtoa_r+0xac>
 80070b2:	4b92      	ldr	r3, [pc, #584]	; (80072fc <_dtoa_r+0x2dc>)
 80070b4:	e022      	b.n	80070fc <_dtoa_r+0xdc>
 80070b6:	4b92      	ldr	r3, [pc, #584]	; (8007300 <_dtoa_r+0x2e0>)
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	3308      	adds	r3, #8
 80070bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	9801      	ldr	r0, [sp, #4]
 80070c2:	b013      	add	sp, #76	; 0x4c
 80070c4:	ecbd 8b04 	vpop	{d8-d9}
 80070c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070cc:	4b8b      	ldr	r3, [pc, #556]	; (80072fc <_dtoa_r+0x2dc>)
 80070ce:	9301      	str	r3, [sp, #4]
 80070d0:	3303      	adds	r3, #3
 80070d2:	e7f3      	b.n	80070bc <_dtoa_r+0x9c>
 80070d4:	2200      	movs	r2, #0
 80070d6:	2300      	movs	r3, #0
 80070d8:	4650      	mov	r0, sl
 80070da:	4659      	mov	r1, fp
 80070dc:	f7f9 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80070e0:	ec4b ab19 	vmov	d9, sl, fp
 80070e4:	4680      	mov	r8, r0
 80070e6:	b158      	cbz	r0, 8007100 <_dtoa_r+0xe0>
 80070e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070ea:	2301      	movs	r3, #1
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 856b 	beq.w	8007bcc <_dtoa_r+0xbac>
 80070f6:	4883      	ldr	r0, [pc, #524]	; (8007304 <_dtoa_r+0x2e4>)
 80070f8:	6018      	str	r0, [r3, #0]
 80070fa:	1e43      	subs	r3, r0, #1
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	e7df      	b.n	80070c0 <_dtoa_r+0xa0>
 8007100:	ec4b ab10 	vmov	d0, sl, fp
 8007104:	aa10      	add	r2, sp, #64	; 0x40
 8007106:	a911      	add	r1, sp, #68	; 0x44
 8007108:	4620      	mov	r0, r4
 800710a:	f001 fd01 	bl	8008b10 <__d2b>
 800710e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007112:	ee08 0a10 	vmov	s16, r0
 8007116:	2d00      	cmp	r5, #0
 8007118:	f000 8084 	beq.w	8007224 <_dtoa_r+0x204>
 800711c:	ee19 3a90 	vmov	r3, s19
 8007120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007124:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007128:	4656      	mov	r6, sl
 800712a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800712e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007132:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007136:	4b74      	ldr	r3, [pc, #464]	; (8007308 <_dtoa_r+0x2e8>)
 8007138:	2200      	movs	r2, #0
 800713a:	4630      	mov	r0, r6
 800713c:	4639      	mov	r1, r7
 800713e:	f7f9 f8a3 	bl	8000288 <__aeabi_dsub>
 8007142:	a365      	add	r3, pc, #404	; (adr r3, 80072d8 <_dtoa_r+0x2b8>)
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f7f9 fa56 	bl	80005f8 <__aeabi_dmul>
 800714c:	a364      	add	r3, pc, #400	; (adr r3, 80072e0 <_dtoa_r+0x2c0>)
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	f7f9 f89b 	bl	800028c <__adddf3>
 8007156:	4606      	mov	r6, r0
 8007158:	4628      	mov	r0, r5
 800715a:	460f      	mov	r7, r1
 800715c:	f7f9 f9e2 	bl	8000524 <__aeabi_i2d>
 8007160:	a361      	add	r3, pc, #388	; (adr r3, 80072e8 <_dtoa_r+0x2c8>)
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	f7f9 fa47 	bl	80005f8 <__aeabi_dmul>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f9 f88b 	bl	800028c <__adddf3>
 8007176:	4606      	mov	r6, r0
 8007178:	460f      	mov	r7, r1
 800717a:	f7f9 fced 	bl	8000b58 <__aeabi_d2iz>
 800717e:	2200      	movs	r2, #0
 8007180:	9000      	str	r0, [sp, #0]
 8007182:	2300      	movs	r3, #0
 8007184:	4630      	mov	r0, r6
 8007186:	4639      	mov	r1, r7
 8007188:	f7f9 fca8 	bl	8000adc <__aeabi_dcmplt>
 800718c:	b150      	cbz	r0, 80071a4 <_dtoa_r+0x184>
 800718e:	9800      	ldr	r0, [sp, #0]
 8007190:	f7f9 f9c8 	bl	8000524 <__aeabi_i2d>
 8007194:	4632      	mov	r2, r6
 8007196:	463b      	mov	r3, r7
 8007198:	f7f9 fc96 	bl	8000ac8 <__aeabi_dcmpeq>
 800719c:	b910      	cbnz	r0, 80071a4 <_dtoa_r+0x184>
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	9b00      	ldr	r3, [sp, #0]
 80071a6:	2b16      	cmp	r3, #22
 80071a8:	d85a      	bhi.n	8007260 <_dtoa_r+0x240>
 80071aa:	9a00      	ldr	r2, [sp, #0]
 80071ac:	4b57      	ldr	r3, [pc, #348]	; (800730c <_dtoa_r+0x2ec>)
 80071ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	ec51 0b19 	vmov	r0, r1, d9
 80071ba:	f7f9 fc8f 	bl	8000adc <__aeabi_dcmplt>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d050      	beq.n	8007264 <_dtoa_r+0x244>
 80071c2:	9b00      	ldr	r3, [sp, #0]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	2300      	movs	r3, #0
 80071ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80071cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071ce:	1b5d      	subs	r5, r3, r5
 80071d0:	1e6b      	subs	r3, r5, #1
 80071d2:	9305      	str	r3, [sp, #20]
 80071d4:	bf45      	ittet	mi
 80071d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80071da:	9304      	strmi	r3, [sp, #16]
 80071dc:	2300      	movpl	r3, #0
 80071de:	2300      	movmi	r3, #0
 80071e0:	bf4c      	ite	mi
 80071e2:	9305      	strmi	r3, [sp, #20]
 80071e4:	9304      	strpl	r3, [sp, #16]
 80071e6:	9b00      	ldr	r3, [sp, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	db3d      	blt.n	8007268 <_dtoa_r+0x248>
 80071ec:	9b05      	ldr	r3, [sp, #20]
 80071ee:	9a00      	ldr	r2, [sp, #0]
 80071f0:	920a      	str	r2, [sp, #40]	; 0x28
 80071f2:	4413      	add	r3, r2
 80071f4:	9305      	str	r3, [sp, #20]
 80071f6:	2300      	movs	r3, #0
 80071f8:	9307      	str	r3, [sp, #28]
 80071fa:	9b06      	ldr	r3, [sp, #24]
 80071fc:	2b09      	cmp	r3, #9
 80071fe:	f200 8089 	bhi.w	8007314 <_dtoa_r+0x2f4>
 8007202:	2b05      	cmp	r3, #5
 8007204:	bfc4      	itt	gt
 8007206:	3b04      	subgt	r3, #4
 8007208:	9306      	strgt	r3, [sp, #24]
 800720a:	9b06      	ldr	r3, [sp, #24]
 800720c:	f1a3 0302 	sub.w	r3, r3, #2
 8007210:	bfcc      	ite	gt
 8007212:	2500      	movgt	r5, #0
 8007214:	2501      	movle	r5, #1
 8007216:	2b03      	cmp	r3, #3
 8007218:	f200 8087 	bhi.w	800732a <_dtoa_r+0x30a>
 800721c:	e8df f003 	tbb	[pc, r3]
 8007220:	59383a2d 	.word	0x59383a2d
 8007224:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007228:	441d      	add	r5, r3
 800722a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800722e:	2b20      	cmp	r3, #32
 8007230:	bfc1      	itttt	gt
 8007232:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007236:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800723a:	fa0b f303 	lslgt.w	r3, fp, r3
 800723e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007242:	bfda      	itte	le
 8007244:	f1c3 0320 	rsble	r3, r3, #32
 8007248:	fa06 f003 	lslle.w	r0, r6, r3
 800724c:	4318      	orrgt	r0, r3
 800724e:	f7f9 f959 	bl	8000504 <__aeabi_ui2d>
 8007252:	2301      	movs	r3, #1
 8007254:	4606      	mov	r6, r0
 8007256:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800725a:	3d01      	subs	r5, #1
 800725c:	930e      	str	r3, [sp, #56]	; 0x38
 800725e:	e76a      	b.n	8007136 <_dtoa_r+0x116>
 8007260:	2301      	movs	r3, #1
 8007262:	e7b2      	b.n	80071ca <_dtoa_r+0x1aa>
 8007264:	900b      	str	r0, [sp, #44]	; 0x2c
 8007266:	e7b1      	b.n	80071cc <_dtoa_r+0x1ac>
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	9a00      	ldr	r2, [sp, #0]
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	4253      	negs	r3, r2
 8007272:	9307      	str	r3, [sp, #28]
 8007274:	2300      	movs	r3, #0
 8007276:	930a      	str	r3, [sp, #40]	; 0x28
 8007278:	e7bf      	b.n	80071fa <_dtoa_r+0x1da>
 800727a:	2300      	movs	r3, #0
 800727c:	9308      	str	r3, [sp, #32]
 800727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc55      	bgt.n	8007330 <_dtoa_r+0x310>
 8007284:	2301      	movs	r3, #1
 8007286:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800728a:	461a      	mov	r2, r3
 800728c:	9209      	str	r2, [sp, #36]	; 0x24
 800728e:	e00c      	b.n	80072aa <_dtoa_r+0x28a>
 8007290:	2301      	movs	r3, #1
 8007292:	e7f3      	b.n	800727c <_dtoa_r+0x25c>
 8007294:	2300      	movs	r3, #0
 8007296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007298:	9308      	str	r3, [sp, #32]
 800729a:	9b00      	ldr	r3, [sp, #0]
 800729c:	4413      	add	r3, r2
 800729e:	9302      	str	r3, [sp, #8]
 80072a0:	3301      	adds	r3, #1
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	9303      	str	r3, [sp, #12]
 80072a6:	bfb8      	it	lt
 80072a8:	2301      	movlt	r3, #1
 80072aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80072ac:	2200      	movs	r2, #0
 80072ae:	6042      	str	r2, [r0, #4]
 80072b0:	2204      	movs	r2, #4
 80072b2:	f102 0614 	add.w	r6, r2, #20
 80072b6:	429e      	cmp	r6, r3
 80072b8:	6841      	ldr	r1, [r0, #4]
 80072ba:	d93d      	bls.n	8007338 <_dtoa_r+0x318>
 80072bc:	4620      	mov	r0, r4
 80072be:	f001 f839 	bl	8008334 <_Balloc>
 80072c2:	9001      	str	r0, [sp, #4]
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d13b      	bne.n	8007340 <_dtoa_r+0x320>
 80072c8:	4b11      	ldr	r3, [pc, #68]	; (8007310 <_dtoa_r+0x2f0>)
 80072ca:	4602      	mov	r2, r0
 80072cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072d0:	e6c0      	b.n	8007054 <_dtoa_r+0x34>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e7df      	b.n	8007296 <_dtoa_r+0x276>
 80072d6:	bf00      	nop
 80072d8:	636f4361 	.word	0x636f4361
 80072dc:	3fd287a7 	.word	0x3fd287a7
 80072e0:	8b60c8b3 	.word	0x8b60c8b3
 80072e4:	3fc68a28 	.word	0x3fc68a28
 80072e8:	509f79fb 	.word	0x509f79fb
 80072ec:	3fd34413 	.word	0x3fd34413
 80072f0:	08009f5e 	.word	0x08009f5e
 80072f4:	08009f75 	.word	0x08009f75
 80072f8:	7ff00000 	.word	0x7ff00000
 80072fc:	08009f5a 	.word	0x08009f5a
 8007300:	08009f51 	.word	0x08009f51
 8007304:	08009dd5 	.word	0x08009dd5
 8007308:	3ff80000 	.word	0x3ff80000
 800730c:	0800a0e0 	.word	0x0800a0e0
 8007310:	08009fd0 	.word	0x08009fd0
 8007314:	2501      	movs	r5, #1
 8007316:	2300      	movs	r3, #0
 8007318:	9306      	str	r3, [sp, #24]
 800731a:	9508      	str	r5, [sp, #32]
 800731c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007320:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	2312      	movs	r3, #18
 8007328:	e7b0      	b.n	800728c <_dtoa_r+0x26c>
 800732a:	2301      	movs	r3, #1
 800732c:	9308      	str	r3, [sp, #32]
 800732e:	e7f5      	b.n	800731c <_dtoa_r+0x2fc>
 8007330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007332:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007336:	e7b8      	b.n	80072aa <_dtoa_r+0x28a>
 8007338:	3101      	adds	r1, #1
 800733a:	6041      	str	r1, [r0, #4]
 800733c:	0052      	lsls	r2, r2, #1
 800733e:	e7b8      	b.n	80072b2 <_dtoa_r+0x292>
 8007340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007342:	9a01      	ldr	r2, [sp, #4]
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	2b0e      	cmp	r3, #14
 800734a:	f200 809d 	bhi.w	8007488 <_dtoa_r+0x468>
 800734e:	2d00      	cmp	r5, #0
 8007350:	f000 809a 	beq.w	8007488 <_dtoa_r+0x468>
 8007354:	9b00      	ldr	r3, [sp, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	dd32      	ble.n	80073c0 <_dtoa_r+0x3a0>
 800735a:	4ab7      	ldr	r2, [pc, #732]	; (8007638 <_dtoa_r+0x618>)
 800735c:	f003 030f 	and.w	r3, r3, #15
 8007360:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007364:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007368:	9b00      	ldr	r3, [sp, #0]
 800736a:	05d8      	lsls	r0, r3, #23
 800736c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007370:	d516      	bpl.n	80073a0 <_dtoa_r+0x380>
 8007372:	4bb2      	ldr	r3, [pc, #712]	; (800763c <_dtoa_r+0x61c>)
 8007374:	ec51 0b19 	vmov	r0, r1, d9
 8007378:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800737c:	f7f9 fa66 	bl	800084c <__aeabi_ddiv>
 8007380:	f007 070f 	and.w	r7, r7, #15
 8007384:	4682      	mov	sl, r0
 8007386:	468b      	mov	fp, r1
 8007388:	2503      	movs	r5, #3
 800738a:	4eac      	ldr	r6, [pc, #688]	; (800763c <_dtoa_r+0x61c>)
 800738c:	b957      	cbnz	r7, 80073a4 <_dtoa_r+0x384>
 800738e:	4642      	mov	r2, r8
 8007390:	464b      	mov	r3, r9
 8007392:	4650      	mov	r0, sl
 8007394:	4659      	mov	r1, fp
 8007396:	f7f9 fa59 	bl	800084c <__aeabi_ddiv>
 800739a:	4682      	mov	sl, r0
 800739c:	468b      	mov	fp, r1
 800739e:	e028      	b.n	80073f2 <_dtoa_r+0x3d2>
 80073a0:	2502      	movs	r5, #2
 80073a2:	e7f2      	b.n	800738a <_dtoa_r+0x36a>
 80073a4:	07f9      	lsls	r1, r7, #31
 80073a6:	d508      	bpl.n	80073ba <_dtoa_r+0x39a>
 80073a8:	4640      	mov	r0, r8
 80073aa:	4649      	mov	r1, r9
 80073ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073b0:	f7f9 f922 	bl	80005f8 <__aeabi_dmul>
 80073b4:	3501      	adds	r5, #1
 80073b6:	4680      	mov	r8, r0
 80073b8:	4689      	mov	r9, r1
 80073ba:	107f      	asrs	r7, r7, #1
 80073bc:	3608      	adds	r6, #8
 80073be:	e7e5      	b.n	800738c <_dtoa_r+0x36c>
 80073c0:	f000 809b 	beq.w	80074fa <_dtoa_r+0x4da>
 80073c4:	9b00      	ldr	r3, [sp, #0]
 80073c6:	4f9d      	ldr	r7, [pc, #628]	; (800763c <_dtoa_r+0x61c>)
 80073c8:	425e      	negs	r6, r3
 80073ca:	4b9b      	ldr	r3, [pc, #620]	; (8007638 <_dtoa_r+0x618>)
 80073cc:	f006 020f 	and.w	r2, r6, #15
 80073d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	ec51 0b19 	vmov	r0, r1, d9
 80073dc:	f7f9 f90c 	bl	80005f8 <__aeabi_dmul>
 80073e0:	1136      	asrs	r6, r6, #4
 80073e2:	4682      	mov	sl, r0
 80073e4:	468b      	mov	fp, r1
 80073e6:	2300      	movs	r3, #0
 80073e8:	2502      	movs	r5, #2
 80073ea:	2e00      	cmp	r6, #0
 80073ec:	d17a      	bne.n	80074e4 <_dtoa_r+0x4c4>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1d3      	bne.n	800739a <_dtoa_r+0x37a>
 80073f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8082 	beq.w	80074fe <_dtoa_r+0x4de>
 80073fa:	4b91      	ldr	r3, [pc, #580]	; (8007640 <_dtoa_r+0x620>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	4650      	mov	r0, sl
 8007400:	4659      	mov	r1, fp
 8007402:	f7f9 fb6b 	bl	8000adc <__aeabi_dcmplt>
 8007406:	2800      	cmp	r0, #0
 8007408:	d079      	beq.n	80074fe <_dtoa_r+0x4de>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d076      	beq.n	80074fe <_dtoa_r+0x4de>
 8007410:	9b02      	ldr	r3, [sp, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	dd36      	ble.n	8007484 <_dtoa_r+0x464>
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	4650      	mov	r0, sl
 800741a:	4659      	mov	r1, fp
 800741c:	1e5f      	subs	r7, r3, #1
 800741e:	2200      	movs	r2, #0
 8007420:	4b88      	ldr	r3, [pc, #544]	; (8007644 <_dtoa_r+0x624>)
 8007422:	f7f9 f8e9 	bl	80005f8 <__aeabi_dmul>
 8007426:	9e02      	ldr	r6, [sp, #8]
 8007428:	4682      	mov	sl, r0
 800742a:	468b      	mov	fp, r1
 800742c:	3501      	adds	r5, #1
 800742e:	4628      	mov	r0, r5
 8007430:	f7f9 f878 	bl	8000524 <__aeabi_i2d>
 8007434:	4652      	mov	r2, sl
 8007436:	465b      	mov	r3, fp
 8007438:	f7f9 f8de 	bl	80005f8 <__aeabi_dmul>
 800743c:	4b82      	ldr	r3, [pc, #520]	; (8007648 <_dtoa_r+0x628>)
 800743e:	2200      	movs	r2, #0
 8007440:	f7f8 ff24 	bl	800028c <__adddf3>
 8007444:	46d0      	mov	r8, sl
 8007446:	46d9      	mov	r9, fp
 8007448:	4682      	mov	sl, r0
 800744a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800744e:	2e00      	cmp	r6, #0
 8007450:	d158      	bne.n	8007504 <_dtoa_r+0x4e4>
 8007452:	4b7e      	ldr	r3, [pc, #504]	; (800764c <_dtoa_r+0x62c>)
 8007454:	2200      	movs	r2, #0
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f8 ff15 	bl	8000288 <__aeabi_dsub>
 800745e:	4652      	mov	r2, sl
 8007460:	465b      	mov	r3, fp
 8007462:	4680      	mov	r8, r0
 8007464:	4689      	mov	r9, r1
 8007466:	f7f9 fb57 	bl	8000b18 <__aeabi_dcmpgt>
 800746a:	2800      	cmp	r0, #0
 800746c:	f040 8295 	bne.w	800799a <_dtoa_r+0x97a>
 8007470:	4652      	mov	r2, sl
 8007472:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007476:	4640      	mov	r0, r8
 8007478:	4649      	mov	r1, r9
 800747a:	f7f9 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800747e:	2800      	cmp	r0, #0
 8007480:	f040 8289 	bne.w	8007996 <_dtoa_r+0x976>
 8007484:	ec5b ab19 	vmov	sl, fp, d9
 8007488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800748a:	2b00      	cmp	r3, #0
 800748c:	f2c0 8148 	blt.w	8007720 <_dtoa_r+0x700>
 8007490:	9a00      	ldr	r2, [sp, #0]
 8007492:	2a0e      	cmp	r2, #14
 8007494:	f300 8144 	bgt.w	8007720 <_dtoa_r+0x700>
 8007498:	4b67      	ldr	r3, [pc, #412]	; (8007638 <_dtoa_r+0x618>)
 800749a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800749e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f280 80d5 	bge.w	8007654 <_dtoa_r+0x634>
 80074aa:	9b03      	ldr	r3, [sp, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f300 80d1 	bgt.w	8007654 <_dtoa_r+0x634>
 80074b2:	f040 826f 	bne.w	8007994 <_dtoa_r+0x974>
 80074b6:	4b65      	ldr	r3, [pc, #404]	; (800764c <_dtoa_r+0x62c>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	4640      	mov	r0, r8
 80074bc:	4649      	mov	r1, r9
 80074be:	f7f9 f89b 	bl	80005f8 <__aeabi_dmul>
 80074c2:	4652      	mov	r2, sl
 80074c4:	465b      	mov	r3, fp
 80074c6:	f7f9 fb1d 	bl	8000b04 <__aeabi_dcmpge>
 80074ca:	9e03      	ldr	r6, [sp, #12]
 80074cc:	4637      	mov	r7, r6
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f040 8245 	bne.w	800795e <_dtoa_r+0x93e>
 80074d4:	9d01      	ldr	r5, [sp, #4]
 80074d6:	2331      	movs	r3, #49	; 0x31
 80074d8:	f805 3b01 	strb.w	r3, [r5], #1
 80074dc:	9b00      	ldr	r3, [sp, #0]
 80074de:	3301      	adds	r3, #1
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	e240      	b.n	8007966 <_dtoa_r+0x946>
 80074e4:	07f2      	lsls	r2, r6, #31
 80074e6:	d505      	bpl.n	80074f4 <_dtoa_r+0x4d4>
 80074e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ec:	f7f9 f884 	bl	80005f8 <__aeabi_dmul>
 80074f0:	3501      	adds	r5, #1
 80074f2:	2301      	movs	r3, #1
 80074f4:	1076      	asrs	r6, r6, #1
 80074f6:	3708      	adds	r7, #8
 80074f8:	e777      	b.n	80073ea <_dtoa_r+0x3ca>
 80074fa:	2502      	movs	r5, #2
 80074fc:	e779      	b.n	80073f2 <_dtoa_r+0x3d2>
 80074fe:	9f00      	ldr	r7, [sp, #0]
 8007500:	9e03      	ldr	r6, [sp, #12]
 8007502:	e794      	b.n	800742e <_dtoa_r+0x40e>
 8007504:	9901      	ldr	r1, [sp, #4]
 8007506:	4b4c      	ldr	r3, [pc, #304]	; (8007638 <_dtoa_r+0x618>)
 8007508:	4431      	add	r1, r6
 800750a:	910d      	str	r1, [sp, #52]	; 0x34
 800750c:	9908      	ldr	r1, [sp, #32]
 800750e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007512:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007516:	2900      	cmp	r1, #0
 8007518:	d043      	beq.n	80075a2 <_dtoa_r+0x582>
 800751a:	494d      	ldr	r1, [pc, #308]	; (8007650 <_dtoa_r+0x630>)
 800751c:	2000      	movs	r0, #0
 800751e:	f7f9 f995 	bl	800084c <__aeabi_ddiv>
 8007522:	4652      	mov	r2, sl
 8007524:	465b      	mov	r3, fp
 8007526:	f7f8 feaf 	bl	8000288 <__aeabi_dsub>
 800752a:	9d01      	ldr	r5, [sp, #4]
 800752c:	4682      	mov	sl, r0
 800752e:	468b      	mov	fp, r1
 8007530:	4649      	mov	r1, r9
 8007532:	4640      	mov	r0, r8
 8007534:	f7f9 fb10 	bl	8000b58 <__aeabi_d2iz>
 8007538:	4606      	mov	r6, r0
 800753a:	f7f8 fff3 	bl	8000524 <__aeabi_i2d>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4640      	mov	r0, r8
 8007544:	4649      	mov	r1, r9
 8007546:	f7f8 fe9f 	bl	8000288 <__aeabi_dsub>
 800754a:	3630      	adds	r6, #48	; 0x30
 800754c:	f805 6b01 	strb.w	r6, [r5], #1
 8007550:	4652      	mov	r2, sl
 8007552:	465b      	mov	r3, fp
 8007554:	4680      	mov	r8, r0
 8007556:	4689      	mov	r9, r1
 8007558:	f7f9 fac0 	bl	8000adc <__aeabi_dcmplt>
 800755c:	2800      	cmp	r0, #0
 800755e:	d163      	bne.n	8007628 <_dtoa_r+0x608>
 8007560:	4642      	mov	r2, r8
 8007562:	464b      	mov	r3, r9
 8007564:	4936      	ldr	r1, [pc, #216]	; (8007640 <_dtoa_r+0x620>)
 8007566:	2000      	movs	r0, #0
 8007568:	f7f8 fe8e 	bl	8000288 <__aeabi_dsub>
 800756c:	4652      	mov	r2, sl
 800756e:	465b      	mov	r3, fp
 8007570:	f7f9 fab4 	bl	8000adc <__aeabi_dcmplt>
 8007574:	2800      	cmp	r0, #0
 8007576:	f040 80b5 	bne.w	80076e4 <_dtoa_r+0x6c4>
 800757a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800757c:	429d      	cmp	r5, r3
 800757e:	d081      	beq.n	8007484 <_dtoa_r+0x464>
 8007580:	4b30      	ldr	r3, [pc, #192]	; (8007644 <_dtoa_r+0x624>)
 8007582:	2200      	movs	r2, #0
 8007584:	4650      	mov	r0, sl
 8007586:	4659      	mov	r1, fp
 8007588:	f7f9 f836 	bl	80005f8 <__aeabi_dmul>
 800758c:	4b2d      	ldr	r3, [pc, #180]	; (8007644 <_dtoa_r+0x624>)
 800758e:	4682      	mov	sl, r0
 8007590:	468b      	mov	fp, r1
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	2200      	movs	r2, #0
 8007598:	f7f9 f82e 	bl	80005f8 <__aeabi_dmul>
 800759c:	4680      	mov	r8, r0
 800759e:	4689      	mov	r9, r1
 80075a0:	e7c6      	b.n	8007530 <_dtoa_r+0x510>
 80075a2:	4650      	mov	r0, sl
 80075a4:	4659      	mov	r1, fp
 80075a6:	f7f9 f827 	bl	80005f8 <__aeabi_dmul>
 80075aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ac:	9d01      	ldr	r5, [sp, #4]
 80075ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80075b0:	4682      	mov	sl, r0
 80075b2:	468b      	mov	fp, r1
 80075b4:	4649      	mov	r1, r9
 80075b6:	4640      	mov	r0, r8
 80075b8:	f7f9 face 	bl	8000b58 <__aeabi_d2iz>
 80075bc:	4606      	mov	r6, r0
 80075be:	f7f8 ffb1 	bl	8000524 <__aeabi_i2d>
 80075c2:	3630      	adds	r6, #48	; 0x30
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4640      	mov	r0, r8
 80075ca:	4649      	mov	r1, r9
 80075cc:	f7f8 fe5c 	bl	8000288 <__aeabi_dsub>
 80075d0:	f805 6b01 	strb.w	r6, [r5], #1
 80075d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d6:	429d      	cmp	r5, r3
 80075d8:	4680      	mov	r8, r0
 80075da:	4689      	mov	r9, r1
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	d124      	bne.n	800762c <_dtoa_r+0x60c>
 80075e2:	4b1b      	ldr	r3, [pc, #108]	; (8007650 <_dtoa_r+0x630>)
 80075e4:	4650      	mov	r0, sl
 80075e6:	4659      	mov	r1, fp
 80075e8:	f7f8 fe50 	bl	800028c <__adddf3>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7f9 fa90 	bl	8000b18 <__aeabi_dcmpgt>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d173      	bne.n	80076e4 <_dtoa_r+0x6c4>
 80075fc:	4652      	mov	r2, sl
 80075fe:	465b      	mov	r3, fp
 8007600:	4913      	ldr	r1, [pc, #76]	; (8007650 <_dtoa_r+0x630>)
 8007602:	2000      	movs	r0, #0
 8007604:	f7f8 fe40 	bl	8000288 <__aeabi_dsub>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4640      	mov	r0, r8
 800760e:	4649      	mov	r1, r9
 8007610:	f7f9 fa64 	bl	8000adc <__aeabi_dcmplt>
 8007614:	2800      	cmp	r0, #0
 8007616:	f43f af35 	beq.w	8007484 <_dtoa_r+0x464>
 800761a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800761c:	1e6b      	subs	r3, r5, #1
 800761e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007620:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007624:	2b30      	cmp	r3, #48	; 0x30
 8007626:	d0f8      	beq.n	800761a <_dtoa_r+0x5fa>
 8007628:	9700      	str	r7, [sp, #0]
 800762a:	e049      	b.n	80076c0 <_dtoa_r+0x6a0>
 800762c:	4b05      	ldr	r3, [pc, #20]	; (8007644 <_dtoa_r+0x624>)
 800762e:	f7f8 ffe3 	bl	80005f8 <__aeabi_dmul>
 8007632:	4680      	mov	r8, r0
 8007634:	4689      	mov	r9, r1
 8007636:	e7bd      	b.n	80075b4 <_dtoa_r+0x594>
 8007638:	0800a0e0 	.word	0x0800a0e0
 800763c:	0800a0b8 	.word	0x0800a0b8
 8007640:	3ff00000 	.word	0x3ff00000
 8007644:	40240000 	.word	0x40240000
 8007648:	401c0000 	.word	0x401c0000
 800764c:	40140000 	.word	0x40140000
 8007650:	3fe00000 	.word	0x3fe00000
 8007654:	9d01      	ldr	r5, [sp, #4]
 8007656:	4656      	mov	r6, sl
 8007658:	465f      	mov	r7, fp
 800765a:	4642      	mov	r2, r8
 800765c:	464b      	mov	r3, r9
 800765e:	4630      	mov	r0, r6
 8007660:	4639      	mov	r1, r7
 8007662:	f7f9 f8f3 	bl	800084c <__aeabi_ddiv>
 8007666:	f7f9 fa77 	bl	8000b58 <__aeabi_d2iz>
 800766a:	4682      	mov	sl, r0
 800766c:	f7f8 ff5a 	bl	8000524 <__aeabi_i2d>
 8007670:	4642      	mov	r2, r8
 8007672:	464b      	mov	r3, r9
 8007674:	f7f8 ffc0 	bl	80005f8 <__aeabi_dmul>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4630      	mov	r0, r6
 800767e:	4639      	mov	r1, r7
 8007680:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007684:	f7f8 fe00 	bl	8000288 <__aeabi_dsub>
 8007688:	f805 6b01 	strb.w	r6, [r5], #1
 800768c:	9e01      	ldr	r6, [sp, #4]
 800768e:	9f03      	ldr	r7, [sp, #12]
 8007690:	1bae      	subs	r6, r5, r6
 8007692:	42b7      	cmp	r7, r6
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	d135      	bne.n	8007706 <_dtoa_r+0x6e6>
 800769a:	f7f8 fdf7 	bl	800028c <__adddf3>
 800769e:	4642      	mov	r2, r8
 80076a0:	464b      	mov	r3, r9
 80076a2:	4606      	mov	r6, r0
 80076a4:	460f      	mov	r7, r1
 80076a6:	f7f9 fa37 	bl	8000b18 <__aeabi_dcmpgt>
 80076aa:	b9d0      	cbnz	r0, 80076e2 <_dtoa_r+0x6c2>
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	4630      	mov	r0, r6
 80076b2:	4639      	mov	r1, r7
 80076b4:	f7f9 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b8:	b110      	cbz	r0, 80076c0 <_dtoa_r+0x6a0>
 80076ba:	f01a 0f01 	tst.w	sl, #1
 80076be:	d110      	bne.n	80076e2 <_dtoa_r+0x6c2>
 80076c0:	4620      	mov	r0, r4
 80076c2:	ee18 1a10 	vmov	r1, s16
 80076c6:	f000 fe75 	bl	80083b4 <_Bfree>
 80076ca:	2300      	movs	r3, #0
 80076cc:	9800      	ldr	r0, [sp, #0]
 80076ce:	702b      	strb	r3, [r5, #0]
 80076d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076d2:	3001      	adds	r0, #1
 80076d4:	6018      	str	r0, [r3, #0]
 80076d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f43f acf1 	beq.w	80070c0 <_dtoa_r+0xa0>
 80076de:	601d      	str	r5, [r3, #0]
 80076e0:	e4ee      	b.n	80070c0 <_dtoa_r+0xa0>
 80076e2:	9f00      	ldr	r7, [sp, #0]
 80076e4:	462b      	mov	r3, r5
 80076e6:	461d      	mov	r5, r3
 80076e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ec:	2a39      	cmp	r2, #57	; 0x39
 80076ee:	d106      	bne.n	80076fe <_dtoa_r+0x6de>
 80076f0:	9a01      	ldr	r2, [sp, #4]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d1f7      	bne.n	80076e6 <_dtoa_r+0x6c6>
 80076f6:	9901      	ldr	r1, [sp, #4]
 80076f8:	2230      	movs	r2, #48	; 0x30
 80076fa:	3701      	adds	r7, #1
 80076fc:	700a      	strb	r2, [r1, #0]
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	3201      	adds	r2, #1
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e790      	b.n	8007628 <_dtoa_r+0x608>
 8007706:	4ba6      	ldr	r3, [pc, #664]	; (80079a0 <_dtoa_r+0x980>)
 8007708:	2200      	movs	r2, #0
 800770a:	f7f8 ff75 	bl	80005f8 <__aeabi_dmul>
 800770e:	2200      	movs	r2, #0
 8007710:	2300      	movs	r3, #0
 8007712:	4606      	mov	r6, r0
 8007714:	460f      	mov	r7, r1
 8007716:	f7f9 f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800771a:	2800      	cmp	r0, #0
 800771c:	d09d      	beq.n	800765a <_dtoa_r+0x63a>
 800771e:	e7cf      	b.n	80076c0 <_dtoa_r+0x6a0>
 8007720:	9a08      	ldr	r2, [sp, #32]
 8007722:	2a00      	cmp	r2, #0
 8007724:	f000 80d7 	beq.w	80078d6 <_dtoa_r+0x8b6>
 8007728:	9a06      	ldr	r2, [sp, #24]
 800772a:	2a01      	cmp	r2, #1
 800772c:	f300 80ba 	bgt.w	80078a4 <_dtoa_r+0x884>
 8007730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007732:	2a00      	cmp	r2, #0
 8007734:	f000 80b2 	beq.w	800789c <_dtoa_r+0x87c>
 8007738:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800773c:	9e07      	ldr	r6, [sp, #28]
 800773e:	9d04      	ldr	r5, [sp, #16]
 8007740:	9a04      	ldr	r2, [sp, #16]
 8007742:	441a      	add	r2, r3
 8007744:	9204      	str	r2, [sp, #16]
 8007746:	9a05      	ldr	r2, [sp, #20]
 8007748:	2101      	movs	r1, #1
 800774a:	441a      	add	r2, r3
 800774c:	4620      	mov	r0, r4
 800774e:	9205      	str	r2, [sp, #20]
 8007750:	f000 ff32 	bl	80085b8 <__i2b>
 8007754:	4607      	mov	r7, r0
 8007756:	2d00      	cmp	r5, #0
 8007758:	dd0c      	ble.n	8007774 <_dtoa_r+0x754>
 800775a:	9b05      	ldr	r3, [sp, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	dd09      	ble.n	8007774 <_dtoa_r+0x754>
 8007760:	42ab      	cmp	r3, r5
 8007762:	9a04      	ldr	r2, [sp, #16]
 8007764:	bfa8      	it	ge
 8007766:	462b      	movge	r3, r5
 8007768:	1ad2      	subs	r2, r2, r3
 800776a:	9204      	str	r2, [sp, #16]
 800776c:	9a05      	ldr	r2, [sp, #20]
 800776e:	1aed      	subs	r5, r5, r3
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	9305      	str	r3, [sp, #20]
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	b31b      	cbz	r3, 80077c0 <_dtoa_r+0x7a0>
 8007778:	9b08      	ldr	r3, [sp, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 80af 	beq.w	80078de <_dtoa_r+0x8be>
 8007780:	2e00      	cmp	r6, #0
 8007782:	dd13      	ble.n	80077ac <_dtoa_r+0x78c>
 8007784:	4639      	mov	r1, r7
 8007786:	4632      	mov	r2, r6
 8007788:	4620      	mov	r0, r4
 800778a:	f000 ffd5 	bl	8008738 <__pow5mult>
 800778e:	ee18 2a10 	vmov	r2, s16
 8007792:	4601      	mov	r1, r0
 8007794:	4607      	mov	r7, r0
 8007796:	4620      	mov	r0, r4
 8007798:	f000 ff24 	bl	80085e4 <__multiply>
 800779c:	ee18 1a10 	vmov	r1, s16
 80077a0:	4680      	mov	r8, r0
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fe06 	bl	80083b4 <_Bfree>
 80077a8:	ee08 8a10 	vmov	s16, r8
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	1b9a      	subs	r2, r3, r6
 80077b0:	d006      	beq.n	80077c0 <_dtoa_r+0x7a0>
 80077b2:	ee18 1a10 	vmov	r1, s16
 80077b6:	4620      	mov	r0, r4
 80077b8:	f000 ffbe 	bl	8008738 <__pow5mult>
 80077bc:	ee08 0a10 	vmov	s16, r0
 80077c0:	2101      	movs	r1, #1
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 fef8 	bl	80085b8 <__i2b>
 80077c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	4606      	mov	r6, r0
 80077ce:	f340 8088 	ble.w	80078e2 <_dtoa_r+0x8c2>
 80077d2:	461a      	mov	r2, r3
 80077d4:	4601      	mov	r1, r0
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 ffae 	bl	8008738 <__pow5mult>
 80077dc:	9b06      	ldr	r3, [sp, #24]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	4606      	mov	r6, r0
 80077e2:	f340 8081 	ble.w	80078e8 <_dtoa_r+0x8c8>
 80077e6:	f04f 0800 	mov.w	r8, #0
 80077ea:	6933      	ldr	r3, [r6, #16]
 80077ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077f0:	6918      	ldr	r0, [r3, #16]
 80077f2:	f000 fe91 	bl	8008518 <__hi0bits>
 80077f6:	f1c0 0020 	rsb	r0, r0, #32
 80077fa:	9b05      	ldr	r3, [sp, #20]
 80077fc:	4418      	add	r0, r3
 80077fe:	f010 001f 	ands.w	r0, r0, #31
 8007802:	f000 8092 	beq.w	800792a <_dtoa_r+0x90a>
 8007806:	f1c0 0320 	rsb	r3, r0, #32
 800780a:	2b04      	cmp	r3, #4
 800780c:	f340 808a 	ble.w	8007924 <_dtoa_r+0x904>
 8007810:	f1c0 001c 	rsb	r0, r0, #28
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	4403      	add	r3, r0
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	9b05      	ldr	r3, [sp, #20]
 800781c:	4403      	add	r3, r0
 800781e:	4405      	add	r5, r0
 8007820:	9305      	str	r3, [sp, #20]
 8007822:	9b04      	ldr	r3, [sp, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	dd07      	ble.n	8007838 <_dtoa_r+0x818>
 8007828:	ee18 1a10 	vmov	r1, s16
 800782c:	461a      	mov	r2, r3
 800782e:	4620      	mov	r0, r4
 8007830:	f000 ffdc 	bl	80087ec <__lshift>
 8007834:	ee08 0a10 	vmov	s16, r0
 8007838:	9b05      	ldr	r3, [sp, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	dd05      	ble.n	800784a <_dtoa_r+0x82a>
 800783e:	4631      	mov	r1, r6
 8007840:	461a      	mov	r2, r3
 8007842:	4620      	mov	r0, r4
 8007844:	f000 ffd2 	bl	80087ec <__lshift>
 8007848:	4606      	mov	r6, r0
 800784a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d06e      	beq.n	800792e <_dtoa_r+0x90e>
 8007850:	ee18 0a10 	vmov	r0, s16
 8007854:	4631      	mov	r1, r6
 8007856:	f001 f839 	bl	80088cc <__mcmp>
 800785a:	2800      	cmp	r0, #0
 800785c:	da67      	bge.n	800792e <_dtoa_r+0x90e>
 800785e:	9b00      	ldr	r3, [sp, #0]
 8007860:	3b01      	subs	r3, #1
 8007862:	ee18 1a10 	vmov	r1, s16
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	220a      	movs	r2, #10
 800786a:	2300      	movs	r3, #0
 800786c:	4620      	mov	r0, r4
 800786e:	f000 fdc3 	bl	80083f8 <__multadd>
 8007872:	9b08      	ldr	r3, [sp, #32]
 8007874:	ee08 0a10 	vmov	s16, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 81b1 	beq.w	8007be0 <_dtoa_r+0xbc0>
 800787e:	2300      	movs	r3, #0
 8007880:	4639      	mov	r1, r7
 8007882:	220a      	movs	r2, #10
 8007884:	4620      	mov	r0, r4
 8007886:	f000 fdb7 	bl	80083f8 <__multadd>
 800788a:	9b02      	ldr	r3, [sp, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	4607      	mov	r7, r0
 8007890:	f300 808e 	bgt.w	80079b0 <_dtoa_r+0x990>
 8007894:	9b06      	ldr	r3, [sp, #24]
 8007896:	2b02      	cmp	r3, #2
 8007898:	dc51      	bgt.n	800793e <_dtoa_r+0x91e>
 800789a:	e089      	b.n	80079b0 <_dtoa_r+0x990>
 800789c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800789e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078a2:	e74b      	b.n	800773c <_dtoa_r+0x71c>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	1e5e      	subs	r6, r3, #1
 80078a8:	9b07      	ldr	r3, [sp, #28]
 80078aa:	42b3      	cmp	r3, r6
 80078ac:	bfbf      	itttt	lt
 80078ae:	9b07      	ldrlt	r3, [sp, #28]
 80078b0:	9607      	strlt	r6, [sp, #28]
 80078b2:	1af2      	sublt	r2, r6, r3
 80078b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078b6:	bfb6      	itet	lt
 80078b8:	189b      	addlt	r3, r3, r2
 80078ba:	1b9e      	subge	r6, r3, r6
 80078bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	bfb8      	it	lt
 80078c2:	2600      	movlt	r6, #0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bfb7      	itett	lt
 80078c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078d0:	1a9d      	sublt	r5, r3, r2
 80078d2:	2300      	movlt	r3, #0
 80078d4:	e734      	b.n	8007740 <_dtoa_r+0x720>
 80078d6:	9e07      	ldr	r6, [sp, #28]
 80078d8:	9d04      	ldr	r5, [sp, #16]
 80078da:	9f08      	ldr	r7, [sp, #32]
 80078dc:	e73b      	b.n	8007756 <_dtoa_r+0x736>
 80078de:	9a07      	ldr	r2, [sp, #28]
 80078e0:	e767      	b.n	80077b2 <_dtoa_r+0x792>
 80078e2:	9b06      	ldr	r3, [sp, #24]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	dc18      	bgt.n	800791a <_dtoa_r+0x8fa>
 80078e8:	f1ba 0f00 	cmp.w	sl, #0
 80078ec:	d115      	bne.n	800791a <_dtoa_r+0x8fa>
 80078ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078f2:	b993      	cbnz	r3, 800791a <_dtoa_r+0x8fa>
 80078f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078f8:	0d1b      	lsrs	r3, r3, #20
 80078fa:	051b      	lsls	r3, r3, #20
 80078fc:	b183      	cbz	r3, 8007920 <_dtoa_r+0x900>
 80078fe:	9b04      	ldr	r3, [sp, #16]
 8007900:	3301      	adds	r3, #1
 8007902:	9304      	str	r3, [sp, #16]
 8007904:	9b05      	ldr	r3, [sp, #20]
 8007906:	3301      	adds	r3, #1
 8007908:	9305      	str	r3, [sp, #20]
 800790a:	f04f 0801 	mov.w	r8, #1
 800790e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007910:	2b00      	cmp	r3, #0
 8007912:	f47f af6a 	bne.w	80077ea <_dtoa_r+0x7ca>
 8007916:	2001      	movs	r0, #1
 8007918:	e76f      	b.n	80077fa <_dtoa_r+0x7da>
 800791a:	f04f 0800 	mov.w	r8, #0
 800791e:	e7f6      	b.n	800790e <_dtoa_r+0x8ee>
 8007920:	4698      	mov	r8, r3
 8007922:	e7f4      	b.n	800790e <_dtoa_r+0x8ee>
 8007924:	f43f af7d 	beq.w	8007822 <_dtoa_r+0x802>
 8007928:	4618      	mov	r0, r3
 800792a:	301c      	adds	r0, #28
 800792c:	e772      	b.n	8007814 <_dtoa_r+0x7f4>
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc37      	bgt.n	80079a4 <_dtoa_r+0x984>
 8007934:	9b06      	ldr	r3, [sp, #24]
 8007936:	2b02      	cmp	r3, #2
 8007938:	dd34      	ble.n	80079a4 <_dtoa_r+0x984>
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	9302      	str	r3, [sp, #8]
 800793e:	9b02      	ldr	r3, [sp, #8]
 8007940:	b96b      	cbnz	r3, 800795e <_dtoa_r+0x93e>
 8007942:	4631      	mov	r1, r6
 8007944:	2205      	movs	r2, #5
 8007946:	4620      	mov	r0, r4
 8007948:	f000 fd56 	bl	80083f8 <__multadd>
 800794c:	4601      	mov	r1, r0
 800794e:	4606      	mov	r6, r0
 8007950:	ee18 0a10 	vmov	r0, s16
 8007954:	f000 ffba 	bl	80088cc <__mcmp>
 8007958:	2800      	cmp	r0, #0
 800795a:	f73f adbb 	bgt.w	80074d4 <_dtoa_r+0x4b4>
 800795e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007960:	9d01      	ldr	r5, [sp, #4]
 8007962:	43db      	mvns	r3, r3
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	f04f 0800 	mov.w	r8, #0
 800796a:	4631      	mov	r1, r6
 800796c:	4620      	mov	r0, r4
 800796e:	f000 fd21 	bl	80083b4 <_Bfree>
 8007972:	2f00      	cmp	r7, #0
 8007974:	f43f aea4 	beq.w	80076c0 <_dtoa_r+0x6a0>
 8007978:	f1b8 0f00 	cmp.w	r8, #0
 800797c:	d005      	beq.n	800798a <_dtoa_r+0x96a>
 800797e:	45b8      	cmp	r8, r7
 8007980:	d003      	beq.n	800798a <_dtoa_r+0x96a>
 8007982:	4641      	mov	r1, r8
 8007984:	4620      	mov	r0, r4
 8007986:	f000 fd15 	bl	80083b4 <_Bfree>
 800798a:	4639      	mov	r1, r7
 800798c:	4620      	mov	r0, r4
 800798e:	f000 fd11 	bl	80083b4 <_Bfree>
 8007992:	e695      	b.n	80076c0 <_dtoa_r+0x6a0>
 8007994:	2600      	movs	r6, #0
 8007996:	4637      	mov	r7, r6
 8007998:	e7e1      	b.n	800795e <_dtoa_r+0x93e>
 800799a:	9700      	str	r7, [sp, #0]
 800799c:	4637      	mov	r7, r6
 800799e:	e599      	b.n	80074d4 <_dtoa_r+0x4b4>
 80079a0:	40240000 	.word	0x40240000
 80079a4:	9b08      	ldr	r3, [sp, #32]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 80ca 	beq.w	8007b40 <_dtoa_r+0xb20>
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	9302      	str	r3, [sp, #8]
 80079b0:	2d00      	cmp	r5, #0
 80079b2:	dd05      	ble.n	80079c0 <_dtoa_r+0x9a0>
 80079b4:	4639      	mov	r1, r7
 80079b6:	462a      	mov	r2, r5
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 ff17 	bl	80087ec <__lshift>
 80079be:	4607      	mov	r7, r0
 80079c0:	f1b8 0f00 	cmp.w	r8, #0
 80079c4:	d05b      	beq.n	8007a7e <_dtoa_r+0xa5e>
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	4620      	mov	r0, r4
 80079ca:	f000 fcb3 	bl	8008334 <_Balloc>
 80079ce:	4605      	mov	r5, r0
 80079d0:	b928      	cbnz	r0, 80079de <_dtoa_r+0x9be>
 80079d2:	4b87      	ldr	r3, [pc, #540]	; (8007bf0 <_dtoa_r+0xbd0>)
 80079d4:	4602      	mov	r2, r0
 80079d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079da:	f7ff bb3b 	b.w	8007054 <_dtoa_r+0x34>
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	3202      	adds	r2, #2
 80079e2:	0092      	lsls	r2, r2, #2
 80079e4:	f107 010c 	add.w	r1, r7, #12
 80079e8:	300c      	adds	r0, #12
 80079ea:	f000 fc95 	bl	8008318 <memcpy>
 80079ee:	2201      	movs	r2, #1
 80079f0:	4629      	mov	r1, r5
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 fefa 	bl	80087ec <__lshift>
 80079f8:	9b01      	ldr	r3, [sp, #4]
 80079fa:	f103 0901 	add.w	r9, r3, #1
 80079fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	9305      	str	r3, [sp, #20]
 8007a06:	f00a 0301 	and.w	r3, sl, #1
 8007a0a:	46b8      	mov	r8, r7
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	4607      	mov	r7, r0
 8007a10:	4631      	mov	r1, r6
 8007a12:	ee18 0a10 	vmov	r0, s16
 8007a16:	f7ff fa77 	bl	8006f08 <quorem>
 8007a1a:	4641      	mov	r1, r8
 8007a1c:	9002      	str	r0, [sp, #8]
 8007a1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a22:	ee18 0a10 	vmov	r0, s16
 8007a26:	f000 ff51 	bl	80088cc <__mcmp>
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	9003      	str	r0, [sp, #12]
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 ff67 	bl	8008904 <__mdiff>
 8007a36:	68c2      	ldr	r2, [r0, #12]
 8007a38:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	bb02      	cbnz	r2, 8007a82 <_dtoa_r+0xa62>
 8007a40:	4601      	mov	r1, r0
 8007a42:	ee18 0a10 	vmov	r0, s16
 8007a46:	f000 ff41 	bl	80088cc <__mcmp>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4620      	mov	r0, r4
 8007a50:	9207      	str	r2, [sp, #28]
 8007a52:	f000 fcaf 	bl	80083b4 <_Bfree>
 8007a56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a5a:	ea43 0102 	orr.w	r1, r3, r2
 8007a5e:	9b04      	ldr	r3, [sp, #16]
 8007a60:	430b      	orrs	r3, r1
 8007a62:	464d      	mov	r5, r9
 8007a64:	d10f      	bne.n	8007a86 <_dtoa_r+0xa66>
 8007a66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a6a:	d02a      	beq.n	8007ac2 <_dtoa_r+0xaa2>
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dd02      	ble.n	8007a78 <_dtoa_r+0xa58>
 8007a72:	9b02      	ldr	r3, [sp, #8]
 8007a74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a78:	f88b a000 	strb.w	sl, [fp]
 8007a7c:	e775      	b.n	800796a <_dtoa_r+0x94a>
 8007a7e:	4638      	mov	r0, r7
 8007a80:	e7ba      	b.n	80079f8 <_dtoa_r+0x9d8>
 8007a82:	2201      	movs	r2, #1
 8007a84:	e7e2      	b.n	8007a4c <_dtoa_r+0xa2c>
 8007a86:	9b03      	ldr	r3, [sp, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	db04      	blt.n	8007a96 <_dtoa_r+0xa76>
 8007a8c:	9906      	ldr	r1, [sp, #24]
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	9904      	ldr	r1, [sp, #16]
 8007a92:	430b      	orrs	r3, r1
 8007a94:	d122      	bne.n	8007adc <_dtoa_r+0xabc>
 8007a96:	2a00      	cmp	r2, #0
 8007a98:	ddee      	ble.n	8007a78 <_dtoa_r+0xa58>
 8007a9a:	ee18 1a10 	vmov	r1, s16
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 fea3 	bl	80087ec <__lshift>
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	ee08 0a10 	vmov	s16, r0
 8007aac:	f000 ff0e 	bl	80088cc <__mcmp>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	dc03      	bgt.n	8007abc <_dtoa_r+0xa9c>
 8007ab4:	d1e0      	bne.n	8007a78 <_dtoa_r+0xa58>
 8007ab6:	f01a 0f01 	tst.w	sl, #1
 8007aba:	d0dd      	beq.n	8007a78 <_dtoa_r+0xa58>
 8007abc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ac0:	d1d7      	bne.n	8007a72 <_dtoa_r+0xa52>
 8007ac2:	2339      	movs	r3, #57	; 0x39
 8007ac4:	f88b 3000 	strb.w	r3, [fp]
 8007ac8:	462b      	mov	r3, r5
 8007aca:	461d      	mov	r5, r3
 8007acc:	3b01      	subs	r3, #1
 8007ace:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ad2:	2a39      	cmp	r2, #57	; 0x39
 8007ad4:	d071      	beq.n	8007bba <_dtoa_r+0xb9a>
 8007ad6:	3201      	adds	r2, #1
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e746      	b.n	800796a <_dtoa_r+0x94a>
 8007adc:	2a00      	cmp	r2, #0
 8007ade:	dd07      	ble.n	8007af0 <_dtoa_r+0xad0>
 8007ae0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ae4:	d0ed      	beq.n	8007ac2 <_dtoa_r+0xaa2>
 8007ae6:	f10a 0301 	add.w	r3, sl, #1
 8007aea:	f88b 3000 	strb.w	r3, [fp]
 8007aee:	e73c      	b.n	800796a <_dtoa_r+0x94a>
 8007af0:	9b05      	ldr	r3, [sp, #20]
 8007af2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007af6:	4599      	cmp	r9, r3
 8007af8:	d047      	beq.n	8007b8a <_dtoa_r+0xb6a>
 8007afa:	ee18 1a10 	vmov	r1, s16
 8007afe:	2300      	movs	r3, #0
 8007b00:	220a      	movs	r2, #10
 8007b02:	4620      	mov	r0, r4
 8007b04:	f000 fc78 	bl	80083f8 <__multadd>
 8007b08:	45b8      	cmp	r8, r7
 8007b0a:	ee08 0a10 	vmov	s16, r0
 8007b0e:	f04f 0300 	mov.w	r3, #0
 8007b12:	f04f 020a 	mov.w	r2, #10
 8007b16:	4641      	mov	r1, r8
 8007b18:	4620      	mov	r0, r4
 8007b1a:	d106      	bne.n	8007b2a <_dtoa_r+0xb0a>
 8007b1c:	f000 fc6c 	bl	80083f8 <__multadd>
 8007b20:	4680      	mov	r8, r0
 8007b22:	4607      	mov	r7, r0
 8007b24:	f109 0901 	add.w	r9, r9, #1
 8007b28:	e772      	b.n	8007a10 <_dtoa_r+0x9f0>
 8007b2a:	f000 fc65 	bl	80083f8 <__multadd>
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4680      	mov	r8, r0
 8007b32:	2300      	movs	r3, #0
 8007b34:	220a      	movs	r2, #10
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 fc5e 	bl	80083f8 <__multadd>
 8007b3c:	4607      	mov	r7, r0
 8007b3e:	e7f1      	b.n	8007b24 <_dtoa_r+0xb04>
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	9302      	str	r3, [sp, #8]
 8007b44:	9d01      	ldr	r5, [sp, #4]
 8007b46:	ee18 0a10 	vmov	r0, s16
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	f7ff f9dc 	bl	8006f08 <quorem>
 8007b50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b54:	9b01      	ldr	r3, [sp, #4]
 8007b56:	f805 ab01 	strb.w	sl, [r5], #1
 8007b5a:	1aea      	subs	r2, r5, r3
 8007b5c:	9b02      	ldr	r3, [sp, #8]
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	dd09      	ble.n	8007b76 <_dtoa_r+0xb56>
 8007b62:	ee18 1a10 	vmov	r1, s16
 8007b66:	2300      	movs	r3, #0
 8007b68:	220a      	movs	r2, #10
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 fc44 	bl	80083f8 <__multadd>
 8007b70:	ee08 0a10 	vmov	s16, r0
 8007b74:	e7e7      	b.n	8007b46 <_dtoa_r+0xb26>
 8007b76:	9b02      	ldr	r3, [sp, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bfc8      	it	gt
 8007b7c:	461d      	movgt	r5, r3
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	bfd8      	it	le
 8007b82:	2501      	movle	r5, #1
 8007b84:	441d      	add	r5, r3
 8007b86:	f04f 0800 	mov.w	r8, #0
 8007b8a:	ee18 1a10 	vmov	r1, s16
 8007b8e:	2201      	movs	r2, #1
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fe2b 	bl	80087ec <__lshift>
 8007b96:	4631      	mov	r1, r6
 8007b98:	ee08 0a10 	vmov	s16, r0
 8007b9c:	f000 fe96 	bl	80088cc <__mcmp>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	dc91      	bgt.n	8007ac8 <_dtoa_r+0xaa8>
 8007ba4:	d102      	bne.n	8007bac <_dtoa_r+0xb8c>
 8007ba6:	f01a 0f01 	tst.w	sl, #1
 8007baa:	d18d      	bne.n	8007ac8 <_dtoa_r+0xaa8>
 8007bac:	462b      	mov	r3, r5
 8007bae:	461d      	mov	r5, r3
 8007bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bb4:	2a30      	cmp	r2, #48	; 0x30
 8007bb6:	d0fa      	beq.n	8007bae <_dtoa_r+0xb8e>
 8007bb8:	e6d7      	b.n	800796a <_dtoa_r+0x94a>
 8007bba:	9a01      	ldr	r2, [sp, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d184      	bne.n	8007aca <_dtoa_r+0xaaa>
 8007bc0:	9b00      	ldr	r3, [sp, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	2331      	movs	r3, #49	; 0x31
 8007bc8:	7013      	strb	r3, [r2, #0]
 8007bca:	e6ce      	b.n	800796a <_dtoa_r+0x94a>
 8007bcc:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <_dtoa_r+0xbd4>)
 8007bce:	f7ff ba95 	b.w	80070fc <_dtoa_r+0xdc>
 8007bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f47f aa6e 	bne.w	80070b6 <_dtoa_r+0x96>
 8007bda:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <_dtoa_r+0xbd8>)
 8007bdc:	f7ff ba8e 	b.w	80070fc <_dtoa_r+0xdc>
 8007be0:	9b02      	ldr	r3, [sp, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	dcae      	bgt.n	8007b44 <_dtoa_r+0xb24>
 8007be6:	9b06      	ldr	r3, [sp, #24]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	f73f aea8 	bgt.w	800793e <_dtoa_r+0x91e>
 8007bee:	e7a9      	b.n	8007b44 <_dtoa_r+0xb24>
 8007bf0:	08009fd0 	.word	0x08009fd0
 8007bf4:	08009dd4 	.word	0x08009dd4
 8007bf8:	08009f51 	.word	0x08009f51

08007bfc <rshift>:
 8007bfc:	6903      	ldr	r3, [r0, #16]
 8007bfe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c06:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007c0a:	f100 0414 	add.w	r4, r0, #20
 8007c0e:	dd45      	ble.n	8007c9c <rshift+0xa0>
 8007c10:	f011 011f 	ands.w	r1, r1, #31
 8007c14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007c18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007c1c:	d10c      	bne.n	8007c38 <rshift+0x3c>
 8007c1e:	f100 0710 	add.w	r7, r0, #16
 8007c22:	4629      	mov	r1, r5
 8007c24:	42b1      	cmp	r1, r6
 8007c26:	d334      	bcc.n	8007c92 <rshift+0x96>
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	1eea      	subs	r2, r5, #3
 8007c2e:	4296      	cmp	r6, r2
 8007c30:	bf38      	it	cc
 8007c32:	2300      	movcc	r3, #0
 8007c34:	4423      	add	r3, r4
 8007c36:	e015      	b.n	8007c64 <rshift+0x68>
 8007c38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007c3c:	f1c1 0820 	rsb	r8, r1, #32
 8007c40:	40cf      	lsrs	r7, r1
 8007c42:	f105 0e04 	add.w	lr, r5, #4
 8007c46:	46a1      	mov	r9, r4
 8007c48:	4576      	cmp	r6, lr
 8007c4a:	46f4      	mov	ip, lr
 8007c4c:	d815      	bhi.n	8007c7a <rshift+0x7e>
 8007c4e:	1a9a      	subs	r2, r3, r2
 8007c50:	0092      	lsls	r2, r2, #2
 8007c52:	3a04      	subs	r2, #4
 8007c54:	3501      	adds	r5, #1
 8007c56:	42ae      	cmp	r6, r5
 8007c58:	bf38      	it	cc
 8007c5a:	2200      	movcc	r2, #0
 8007c5c:	18a3      	adds	r3, r4, r2
 8007c5e:	50a7      	str	r7, [r4, r2]
 8007c60:	b107      	cbz	r7, 8007c64 <rshift+0x68>
 8007c62:	3304      	adds	r3, #4
 8007c64:	1b1a      	subs	r2, r3, r4
 8007c66:	42a3      	cmp	r3, r4
 8007c68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c6c:	bf08      	it	eq
 8007c6e:	2300      	moveq	r3, #0
 8007c70:	6102      	str	r2, [r0, #16]
 8007c72:	bf08      	it	eq
 8007c74:	6143      	streq	r3, [r0, #20]
 8007c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c7a:	f8dc c000 	ldr.w	ip, [ip]
 8007c7e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c82:	ea4c 0707 	orr.w	r7, ip, r7
 8007c86:	f849 7b04 	str.w	r7, [r9], #4
 8007c8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c8e:	40cf      	lsrs	r7, r1
 8007c90:	e7da      	b.n	8007c48 <rshift+0x4c>
 8007c92:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c96:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c9a:	e7c3      	b.n	8007c24 <rshift+0x28>
 8007c9c:	4623      	mov	r3, r4
 8007c9e:	e7e1      	b.n	8007c64 <rshift+0x68>

08007ca0 <__hexdig_fun>:
 8007ca0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ca4:	2b09      	cmp	r3, #9
 8007ca6:	d802      	bhi.n	8007cae <__hexdig_fun+0xe>
 8007ca8:	3820      	subs	r0, #32
 8007caa:	b2c0      	uxtb	r0, r0
 8007cac:	4770      	bx	lr
 8007cae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d801      	bhi.n	8007cba <__hexdig_fun+0x1a>
 8007cb6:	3847      	subs	r0, #71	; 0x47
 8007cb8:	e7f7      	b.n	8007caa <__hexdig_fun+0xa>
 8007cba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007cbe:	2b05      	cmp	r3, #5
 8007cc0:	d801      	bhi.n	8007cc6 <__hexdig_fun+0x26>
 8007cc2:	3827      	subs	r0, #39	; 0x27
 8007cc4:	e7f1      	b.n	8007caa <__hexdig_fun+0xa>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	4770      	bx	lr
	...

08007ccc <__gethex>:
 8007ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	ed2d 8b02 	vpush	{d8}
 8007cd4:	b089      	sub	sp, #36	; 0x24
 8007cd6:	ee08 0a10 	vmov	s16, r0
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	4bb4      	ldr	r3, [pc, #720]	; (8007fb0 <__gethex+0x2e4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	468b      	mov	fp, r1
 8007ce6:	4690      	mov	r8, r2
 8007ce8:	f7f8 fa72 	bl	80001d0 <strlen>
 8007cec:	9b01      	ldr	r3, [sp, #4]
 8007cee:	f8db 2000 	ldr.w	r2, [fp]
 8007cf2:	4403      	add	r3, r0
 8007cf4:	4682      	mov	sl, r0
 8007cf6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	1c93      	adds	r3, r2, #2
 8007cfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007d02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007d06:	32fe      	adds	r2, #254	; 0xfe
 8007d08:	18d1      	adds	r1, r2, r3
 8007d0a:	461f      	mov	r7, r3
 8007d0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007d10:	9100      	str	r1, [sp, #0]
 8007d12:	2830      	cmp	r0, #48	; 0x30
 8007d14:	d0f8      	beq.n	8007d08 <__gethex+0x3c>
 8007d16:	f7ff ffc3 	bl	8007ca0 <__hexdig_fun>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d13a      	bne.n	8007d96 <__gethex+0xca>
 8007d20:	9901      	ldr	r1, [sp, #4]
 8007d22:	4652      	mov	r2, sl
 8007d24:	4638      	mov	r0, r7
 8007d26:	f001 fa33 	bl	8009190 <strncmp>
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d168      	bne.n	8007e02 <__gethex+0x136>
 8007d30:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007d34:	eb07 060a 	add.w	r6, r7, sl
 8007d38:	f7ff ffb2 	bl	8007ca0 <__hexdig_fun>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d062      	beq.n	8007e06 <__gethex+0x13a>
 8007d40:	4633      	mov	r3, r6
 8007d42:	7818      	ldrb	r0, [r3, #0]
 8007d44:	2830      	cmp	r0, #48	; 0x30
 8007d46:	461f      	mov	r7, r3
 8007d48:	f103 0301 	add.w	r3, r3, #1
 8007d4c:	d0f9      	beq.n	8007d42 <__gethex+0x76>
 8007d4e:	f7ff ffa7 	bl	8007ca0 <__hexdig_fun>
 8007d52:	2301      	movs	r3, #1
 8007d54:	fab0 f480 	clz	r4, r0
 8007d58:	0964      	lsrs	r4, r4, #5
 8007d5a:	4635      	mov	r5, r6
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	463a      	mov	r2, r7
 8007d60:	4616      	mov	r6, r2
 8007d62:	3201      	adds	r2, #1
 8007d64:	7830      	ldrb	r0, [r6, #0]
 8007d66:	f7ff ff9b 	bl	8007ca0 <__hexdig_fun>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d1f8      	bne.n	8007d60 <__gethex+0x94>
 8007d6e:	9901      	ldr	r1, [sp, #4]
 8007d70:	4652      	mov	r2, sl
 8007d72:	4630      	mov	r0, r6
 8007d74:	f001 fa0c 	bl	8009190 <strncmp>
 8007d78:	b980      	cbnz	r0, 8007d9c <__gethex+0xd0>
 8007d7a:	b94d      	cbnz	r5, 8007d90 <__gethex+0xc4>
 8007d7c:	eb06 050a 	add.w	r5, r6, sl
 8007d80:	462a      	mov	r2, r5
 8007d82:	4616      	mov	r6, r2
 8007d84:	3201      	adds	r2, #1
 8007d86:	7830      	ldrb	r0, [r6, #0]
 8007d88:	f7ff ff8a 	bl	8007ca0 <__hexdig_fun>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d1f8      	bne.n	8007d82 <__gethex+0xb6>
 8007d90:	1bad      	subs	r5, r5, r6
 8007d92:	00ad      	lsls	r5, r5, #2
 8007d94:	e004      	b.n	8007da0 <__gethex+0xd4>
 8007d96:	2400      	movs	r4, #0
 8007d98:	4625      	mov	r5, r4
 8007d9a:	e7e0      	b.n	8007d5e <__gethex+0x92>
 8007d9c:	2d00      	cmp	r5, #0
 8007d9e:	d1f7      	bne.n	8007d90 <__gethex+0xc4>
 8007da0:	7833      	ldrb	r3, [r6, #0]
 8007da2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007da6:	2b50      	cmp	r3, #80	; 0x50
 8007da8:	d13b      	bne.n	8007e22 <__gethex+0x156>
 8007daa:	7873      	ldrb	r3, [r6, #1]
 8007dac:	2b2b      	cmp	r3, #43	; 0x2b
 8007dae:	d02c      	beq.n	8007e0a <__gethex+0x13e>
 8007db0:	2b2d      	cmp	r3, #45	; 0x2d
 8007db2:	d02e      	beq.n	8007e12 <__gethex+0x146>
 8007db4:	1c71      	adds	r1, r6, #1
 8007db6:	f04f 0900 	mov.w	r9, #0
 8007dba:	7808      	ldrb	r0, [r1, #0]
 8007dbc:	f7ff ff70 	bl	8007ca0 <__hexdig_fun>
 8007dc0:	1e43      	subs	r3, r0, #1
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b18      	cmp	r3, #24
 8007dc6:	d82c      	bhi.n	8007e22 <__gethex+0x156>
 8007dc8:	f1a0 0210 	sub.w	r2, r0, #16
 8007dcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007dd0:	f7ff ff66 	bl	8007ca0 <__hexdig_fun>
 8007dd4:	1e43      	subs	r3, r0, #1
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b18      	cmp	r3, #24
 8007dda:	d91d      	bls.n	8007e18 <__gethex+0x14c>
 8007ddc:	f1b9 0f00 	cmp.w	r9, #0
 8007de0:	d000      	beq.n	8007de4 <__gethex+0x118>
 8007de2:	4252      	negs	r2, r2
 8007de4:	4415      	add	r5, r2
 8007de6:	f8cb 1000 	str.w	r1, [fp]
 8007dea:	b1e4      	cbz	r4, 8007e26 <__gethex+0x15a>
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bf14      	ite	ne
 8007df2:	2700      	movne	r7, #0
 8007df4:	2706      	moveq	r7, #6
 8007df6:	4638      	mov	r0, r7
 8007df8:	b009      	add	sp, #36	; 0x24
 8007dfa:	ecbd 8b02 	vpop	{d8}
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	463e      	mov	r6, r7
 8007e04:	4625      	mov	r5, r4
 8007e06:	2401      	movs	r4, #1
 8007e08:	e7ca      	b.n	8007da0 <__gethex+0xd4>
 8007e0a:	f04f 0900 	mov.w	r9, #0
 8007e0e:	1cb1      	adds	r1, r6, #2
 8007e10:	e7d3      	b.n	8007dba <__gethex+0xee>
 8007e12:	f04f 0901 	mov.w	r9, #1
 8007e16:	e7fa      	b.n	8007e0e <__gethex+0x142>
 8007e18:	230a      	movs	r3, #10
 8007e1a:	fb03 0202 	mla	r2, r3, r2, r0
 8007e1e:	3a10      	subs	r2, #16
 8007e20:	e7d4      	b.n	8007dcc <__gethex+0x100>
 8007e22:	4631      	mov	r1, r6
 8007e24:	e7df      	b.n	8007de6 <__gethex+0x11a>
 8007e26:	1bf3      	subs	r3, r6, r7
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	2b07      	cmp	r3, #7
 8007e2e:	dc0b      	bgt.n	8007e48 <__gethex+0x17c>
 8007e30:	ee18 0a10 	vmov	r0, s16
 8007e34:	f000 fa7e 	bl	8008334 <_Balloc>
 8007e38:	4604      	mov	r4, r0
 8007e3a:	b940      	cbnz	r0, 8007e4e <__gethex+0x182>
 8007e3c:	4b5d      	ldr	r3, [pc, #372]	; (8007fb4 <__gethex+0x2e8>)
 8007e3e:	4602      	mov	r2, r0
 8007e40:	21de      	movs	r1, #222	; 0xde
 8007e42:	485d      	ldr	r0, [pc, #372]	; (8007fb8 <__gethex+0x2ec>)
 8007e44:	f001 f9c6 	bl	80091d4 <__assert_func>
 8007e48:	3101      	adds	r1, #1
 8007e4a:	105b      	asrs	r3, r3, #1
 8007e4c:	e7ee      	b.n	8007e2c <__gethex+0x160>
 8007e4e:	f100 0914 	add.w	r9, r0, #20
 8007e52:	f04f 0b00 	mov.w	fp, #0
 8007e56:	f1ca 0301 	rsb	r3, sl, #1
 8007e5a:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e5e:	f8cd b000 	str.w	fp, [sp]
 8007e62:	9306      	str	r3, [sp, #24]
 8007e64:	42b7      	cmp	r7, r6
 8007e66:	d340      	bcc.n	8007eea <__gethex+0x21e>
 8007e68:	9802      	ldr	r0, [sp, #8]
 8007e6a:	9b00      	ldr	r3, [sp, #0]
 8007e6c:	f840 3b04 	str.w	r3, [r0], #4
 8007e70:	eba0 0009 	sub.w	r0, r0, r9
 8007e74:	1080      	asrs	r0, r0, #2
 8007e76:	0146      	lsls	r6, r0, #5
 8007e78:	6120      	str	r0, [r4, #16]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fb4c 	bl	8008518 <__hi0bits>
 8007e80:	1a30      	subs	r0, r6, r0
 8007e82:	f8d8 6000 	ldr.w	r6, [r8]
 8007e86:	42b0      	cmp	r0, r6
 8007e88:	dd63      	ble.n	8007f52 <__gethex+0x286>
 8007e8a:	1b87      	subs	r7, r0, r6
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 fef0 	bl	8008c74 <__any_on>
 8007e94:	4682      	mov	sl, r0
 8007e96:	b1a8      	cbz	r0, 8007ec4 <__gethex+0x1f8>
 8007e98:	1e7b      	subs	r3, r7, #1
 8007e9a:	1159      	asrs	r1, r3, #5
 8007e9c:	f003 021f 	and.w	r2, r3, #31
 8007ea0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007ea4:	f04f 0a01 	mov.w	sl, #1
 8007ea8:	fa0a f202 	lsl.w	r2, sl, r2
 8007eac:	420a      	tst	r2, r1
 8007eae:	d009      	beq.n	8007ec4 <__gethex+0x1f8>
 8007eb0:	4553      	cmp	r3, sl
 8007eb2:	dd05      	ble.n	8007ec0 <__gethex+0x1f4>
 8007eb4:	1eb9      	subs	r1, r7, #2
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f000 fedc 	bl	8008c74 <__any_on>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d145      	bne.n	8007f4c <__gethex+0x280>
 8007ec0:	f04f 0a02 	mov.w	sl, #2
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f7ff fe98 	bl	8007bfc <rshift>
 8007ecc:	443d      	add	r5, r7
 8007ece:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ed2:	42ab      	cmp	r3, r5
 8007ed4:	da4c      	bge.n	8007f70 <__gethex+0x2a4>
 8007ed6:	ee18 0a10 	vmov	r0, s16
 8007eda:	4621      	mov	r1, r4
 8007edc:	f000 fa6a 	bl	80083b4 <_Bfree>
 8007ee0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	27a3      	movs	r7, #163	; 0xa3
 8007ee8:	e785      	b.n	8007df6 <__gethex+0x12a>
 8007eea:	1e73      	subs	r3, r6, #1
 8007eec:	9a05      	ldr	r2, [sp, #20]
 8007eee:	9303      	str	r3, [sp, #12]
 8007ef0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d019      	beq.n	8007f2c <__gethex+0x260>
 8007ef8:	f1bb 0f20 	cmp.w	fp, #32
 8007efc:	d107      	bne.n	8007f0e <__gethex+0x242>
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	9a00      	ldr	r2, [sp, #0]
 8007f02:	f843 2b04 	str.w	r2, [r3], #4
 8007f06:	9302      	str	r3, [sp, #8]
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	469b      	mov	fp, r3
 8007f0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007f12:	f7ff fec5 	bl	8007ca0 <__hexdig_fun>
 8007f16:	9b00      	ldr	r3, [sp, #0]
 8007f18:	f000 000f 	and.w	r0, r0, #15
 8007f1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007f20:	4303      	orrs	r3, r0
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	f10b 0b04 	add.w	fp, fp, #4
 8007f28:	9b03      	ldr	r3, [sp, #12]
 8007f2a:	e00d      	b.n	8007f48 <__gethex+0x27c>
 8007f2c:	9b03      	ldr	r3, [sp, #12]
 8007f2e:	9a06      	ldr	r2, [sp, #24]
 8007f30:	4413      	add	r3, r2
 8007f32:	42bb      	cmp	r3, r7
 8007f34:	d3e0      	bcc.n	8007ef8 <__gethex+0x22c>
 8007f36:	4618      	mov	r0, r3
 8007f38:	9901      	ldr	r1, [sp, #4]
 8007f3a:	9307      	str	r3, [sp, #28]
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	f001 f927 	bl	8009190 <strncmp>
 8007f42:	9b07      	ldr	r3, [sp, #28]
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d1d7      	bne.n	8007ef8 <__gethex+0x22c>
 8007f48:	461e      	mov	r6, r3
 8007f4a:	e78b      	b.n	8007e64 <__gethex+0x198>
 8007f4c:	f04f 0a03 	mov.w	sl, #3
 8007f50:	e7b8      	b.n	8007ec4 <__gethex+0x1f8>
 8007f52:	da0a      	bge.n	8007f6a <__gethex+0x29e>
 8007f54:	1a37      	subs	r7, r6, r0
 8007f56:	4621      	mov	r1, r4
 8007f58:	ee18 0a10 	vmov	r0, s16
 8007f5c:	463a      	mov	r2, r7
 8007f5e:	f000 fc45 	bl	80087ec <__lshift>
 8007f62:	1bed      	subs	r5, r5, r7
 8007f64:	4604      	mov	r4, r0
 8007f66:	f100 0914 	add.w	r9, r0, #20
 8007f6a:	f04f 0a00 	mov.w	sl, #0
 8007f6e:	e7ae      	b.n	8007ece <__gethex+0x202>
 8007f70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007f74:	42a8      	cmp	r0, r5
 8007f76:	dd72      	ble.n	800805e <__gethex+0x392>
 8007f78:	1b45      	subs	r5, r0, r5
 8007f7a:	42ae      	cmp	r6, r5
 8007f7c:	dc36      	bgt.n	8007fec <__gethex+0x320>
 8007f7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d02a      	beq.n	8007fdc <__gethex+0x310>
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d02c      	beq.n	8007fe4 <__gethex+0x318>
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d11c      	bne.n	8007fc8 <__gethex+0x2fc>
 8007f8e:	42ae      	cmp	r6, r5
 8007f90:	d11a      	bne.n	8007fc8 <__gethex+0x2fc>
 8007f92:	2e01      	cmp	r6, #1
 8007f94:	d112      	bne.n	8007fbc <__gethex+0x2f0>
 8007f96:	9a04      	ldr	r2, [sp, #16]
 8007f98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	f8c9 3000 	str.w	r3, [r9]
 8007fa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fa8:	2762      	movs	r7, #98	; 0x62
 8007faa:	601c      	str	r4, [r3, #0]
 8007fac:	e723      	b.n	8007df6 <__gethex+0x12a>
 8007fae:	bf00      	nop
 8007fb0:	0800a048 	.word	0x0800a048
 8007fb4:	08009fd0 	.word	0x08009fd0
 8007fb8:	08009fe1 	.word	0x08009fe1
 8007fbc:	1e71      	subs	r1, r6, #1
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 fe58 	bl	8008c74 <__any_on>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d1e6      	bne.n	8007f96 <__gethex+0x2ca>
 8007fc8:	ee18 0a10 	vmov	r0, s16
 8007fcc:	4621      	mov	r1, r4
 8007fce:	f000 f9f1 	bl	80083b4 <_Bfree>
 8007fd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	2750      	movs	r7, #80	; 0x50
 8007fda:	e70c      	b.n	8007df6 <__gethex+0x12a>
 8007fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1f2      	bne.n	8007fc8 <__gethex+0x2fc>
 8007fe2:	e7d8      	b.n	8007f96 <__gethex+0x2ca>
 8007fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1d5      	bne.n	8007f96 <__gethex+0x2ca>
 8007fea:	e7ed      	b.n	8007fc8 <__gethex+0x2fc>
 8007fec:	1e6f      	subs	r7, r5, #1
 8007fee:	f1ba 0f00 	cmp.w	sl, #0
 8007ff2:	d131      	bne.n	8008058 <__gethex+0x38c>
 8007ff4:	b127      	cbz	r7, 8008000 <__gethex+0x334>
 8007ff6:	4639      	mov	r1, r7
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 fe3b 	bl	8008c74 <__any_on>
 8007ffe:	4682      	mov	sl, r0
 8008000:	117b      	asrs	r3, r7, #5
 8008002:	2101      	movs	r1, #1
 8008004:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008008:	f007 071f 	and.w	r7, r7, #31
 800800c:	fa01 f707 	lsl.w	r7, r1, r7
 8008010:	421f      	tst	r7, r3
 8008012:	4629      	mov	r1, r5
 8008014:	4620      	mov	r0, r4
 8008016:	bf18      	it	ne
 8008018:	f04a 0a02 	orrne.w	sl, sl, #2
 800801c:	1b76      	subs	r6, r6, r5
 800801e:	f7ff fded 	bl	8007bfc <rshift>
 8008022:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008026:	2702      	movs	r7, #2
 8008028:	f1ba 0f00 	cmp.w	sl, #0
 800802c:	d048      	beq.n	80080c0 <__gethex+0x3f4>
 800802e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008032:	2b02      	cmp	r3, #2
 8008034:	d015      	beq.n	8008062 <__gethex+0x396>
 8008036:	2b03      	cmp	r3, #3
 8008038:	d017      	beq.n	800806a <__gethex+0x39e>
 800803a:	2b01      	cmp	r3, #1
 800803c:	d109      	bne.n	8008052 <__gethex+0x386>
 800803e:	f01a 0f02 	tst.w	sl, #2
 8008042:	d006      	beq.n	8008052 <__gethex+0x386>
 8008044:	f8d9 0000 	ldr.w	r0, [r9]
 8008048:	ea4a 0a00 	orr.w	sl, sl, r0
 800804c:	f01a 0f01 	tst.w	sl, #1
 8008050:	d10e      	bne.n	8008070 <__gethex+0x3a4>
 8008052:	f047 0710 	orr.w	r7, r7, #16
 8008056:	e033      	b.n	80080c0 <__gethex+0x3f4>
 8008058:	f04f 0a01 	mov.w	sl, #1
 800805c:	e7d0      	b.n	8008000 <__gethex+0x334>
 800805e:	2701      	movs	r7, #1
 8008060:	e7e2      	b.n	8008028 <__gethex+0x35c>
 8008062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008064:	f1c3 0301 	rsb	r3, r3, #1
 8008068:	9315      	str	r3, [sp, #84]	; 0x54
 800806a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0f0      	beq.n	8008052 <__gethex+0x386>
 8008070:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008074:	f104 0314 	add.w	r3, r4, #20
 8008078:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800807c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008080:	f04f 0c00 	mov.w	ip, #0
 8008084:	4618      	mov	r0, r3
 8008086:	f853 2b04 	ldr.w	r2, [r3], #4
 800808a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800808e:	d01c      	beq.n	80080ca <__gethex+0x3fe>
 8008090:	3201      	adds	r2, #1
 8008092:	6002      	str	r2, [r0, #0]
 8008094:	2f02      	cmp	r7, #2
 8008096:	f104 0314 	add.w	r3, r4, #20
 800809a:	d13f      	bne.n	800811c <__gethex+0x450>
 800809c:	f8d8 2000 	ldr.w	r2, [r8]
 80080a0:	3a01      	subs	r2, #1
 80080a2:	42b2      	cmp	r2, r6
 80080a4:	d10a      	bne.n	80080bc <__gethex+0x3f0>
 80080a6:	1171      	asrs	r1, r6, #5
 80080a8:	2201      	movs	r2, #1
 80080aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080ae:	f006 061f 	and.w	r6, r6, #31
 80080b2:	fa02 f606 	lsl.w	r6, r2, r6
 80080b6:	421e      	tst	r6, r3
 80080b8:	bf18      	it	ne
 80080ba:	4617      	movne	r7, r2
 80080bc:	f047 0720 	orr.w	r7, r7, #32
 80080c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080c2:	601c      	str	r4, [r3, #0]
 80080c4:	9b04      	ldr	r3, [sp, #16]
 80080c6:	601d      	str	r5, [r3, #0]
 80080c8:	e695      	b.n	8007df6 <__gethex+0x12a>
 80080ca:	4299      	cmp	r1, r3
 80080cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80080d0:	d8d8      	bhi.n	8008084 <__gethex+0x3b8>
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	459b      	cmp	fp, r3
 80080d6:	db19      	blt.n	800810c <__gethex+0x440>
 80080d8:	6861      	ldr	r1, [r4, #4]
 80080da:	ee18 0a10 	vmov	r0, s16
 80080de:	3101      	adds	r1, #1
 80080e0:	f000 f928 	bl	8008334 <_Balloc>
 80080e4:	4681      	mov	r9, r0
 80080e6:	b918      	cbnz	r0, 80080f0 <__gethex+0x424>
 80080e8:	4b1a      	ldr	r3, [pc, #104]	; (8008154 <__gethex+0x488>)
 80080ea:	4602      	mov	r2, r0
 80080ec:	2184      	movs	r1, #132	; 0x84
 80080ee:	e6a8      	b.n	8007e42 <__gethex+0x176>
 80080f0:	6922      	ldr	r2, [r4, #16]
 80080f2:	3202      	adds	r2, #2
 80080f4:	f104 010c 	add.w	r1, r4, #12
 80080f8:	0092      	lsls	r2, r2, #2
 80080fa:	300c      	adds	r0, #12
 80080fc:	f000 f90c 	bl	8008318 <memcpy>
 8008100:	4621      	mov	r1, r4
 8008102:	ee18 0a10 	vmov	r0, s16
 8008106:	f000 f955 	bl	80083b4 <_Bfree>
 800810a:	464c      	mov	r4, r9
 800810c:	6923      	ldr	r3, [r4, #16]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008114:	6122      	str	r2, [r4, #16]
 8008116:	2201      	movs	r2, #1
 8008118:	615a      	str	r2, [r3, #20]
 800811a:	e7bb      	b.n	8008094 <__gethex+0x3c8>
 800811c:	6922      	ldr	r2, [r4, #16]
 800811e:	455a      	cmp	r2, fp
 8008120:	dd0b      	ble.n	800813a <__gethex+0x46e>
 8008122:	2101      	movs	r1, #1
 8008124:	4620      	mov	r0, r4
 8008126:	f7ff fd69 	bl	8007bfc <rshift>
 800812a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800812e:	3501      	adds	r5, #1
 8008130:	42ab      	cmp	r3, r5
 8008132:	f6ff aed0 	blt.w	8007ed6 <__gethex+0x20a>
 8008136:	2701      	movs	r7, #1
 8008138:	e7c0      	b.n	80080bc <__gethex+0x3f0>
 800813a:	f016 061f 	ands.w	r6, r6, #31
 800813e:	d0fa      	beq.n	8008136 <__gethex+0x46a>
 8008140:	4453      	add	r3, sl
 8008142:	f1c6 0620 	rsb	r6, r6, #32
 8008146:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800814a:	f000 f9e5 	bl	8008518 <__hi0bits>
 800814e:	42b0      	cmp	r0, r6
 8008150:	dbe7      	blt.n	8008122 <__gethex+0x456>
 8008152:	e7f0      	b.n	8008136 <__gethex+0x46a>
 8008154:	08009fd0 	.word	0x08009fd0

08008158 <L_shift>:
 8008158:	f1c2 0208 	rsb	r2, r2, #8
 800815c:	0092      	lsls	r2, r2, #2
 800815e:	b570      	push	{r4, r5, r6, lr}
 8008160:	f1c2 0620 	rsb	r6, r2, #32
 8008164:	6843      	ldr	r3, [r0, #4]
 8008166:	6804      	ldr	r4, [r0, #0]
 8008168:	fa03 f506 	lsl.w	r5, r3, r6
 800816c:	432c      	orrs	r4, r5
 800816e:	40d3      	lsrs	r3, r2
 8008170:	6004      	str	r4, [r0, #0]
 8008172:	f840 3f04 	str.w	r3, [r0, #4]!
 8008176:	4288      	cmp	r0, r1
 8008178:	d3f4      	bcc.n	8008164 <L_shift+0xc>
 800817a:	bd70      	pop	{r4, r5, r6, pc}

0800817c <__match>:
 800817c:	b530      	push	{r4, r5, lr}
 800817e:	6803      	ldr	r3, [r0, #0]
 8008180:	3301      	adds	r3, #1
 8008182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008186:	b914      	cbnz	r4, 800818e <__match+0x12>
 8008188:	6003      	str	r3, [r0, #0]
 800818a:	2001      	movs	r0, #1
 800818c:	bd30      	pop	{r4, r5, pc}
 800818e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008192:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008196:	2d19      	cmp	r5, #25
 8008198:	bf98      	it	ls
 800819a:	3220      	addls	r2, #32
 800819c:	42a2      	cmp	r2, r4
 800819e:	d0f0      	beq.n	8008182 <__match+0x6>
 80081a0:	2000      	movs	r0, #0
 80081a2:	e7f3      	b.n	800818c <__match+0x10>

080081a4 <__hexnan>:
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	680b      	ldr	r3, [r1, #0]
 80081aa:	115e      	asrs	r6, r3, #5
 80081ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081b0:	f013 031f 	ands.w	r3, r3, #31
 80081b4:	b087      	sub	sp, #28
 80081b6:	bf18      	it	ne
 80081b8:	3604      	addne	r6, #4
 80081ba:	2500      	movs	r5, #0
 80081bc:	1f37      	subs	r7, r6, #4
 80081be:	4690      	mov	r8, r2
 80081c0:	6802      	ldr	r2, [r0, #0]
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	4682      	mov	sl, r0
 80081c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80081ca:	46b9      	mov	r9, r7
 80081cc:	463c      	mov	r4, r7
 80081ce:	9502      	str	r5, [sp, #8]
 80081d0:	46ab      	mov	fp, r5
 80081d2:	7851      	ldrb	r1, [r2, #1]
 80081d4:	1c53      	adds	r3, r2, #1
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	b341      	cbz	r1, 800822c <__hexnan+0x88>
 80081da:	4608      	mov	r0, r1
 80081dc:	9205      	str	r2, [sp, #20]
 80081de:	9104      	str	r1, [sp, #16]
 80081e0:	f7ff fd5e 	bl	8007ca0 <__hexdig_fun>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d14f      	bne.n	8008288 <__hexnan+0xe4>
 80081e8:	9904      	ldr	r1, [sp, #16]
 80081ea:	9a05      	ldr	r2, [sp, #20]
 80081ec:	2920      	cmp	r1, #32
 80081ee:	d818      	bhi.n	8008222 <__hexnan+0x7e>
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	459b      	cmp	fp, r3
 80081f4:	dd13      	ble.n	800821e <__hexnan+0x7a>
 80081f6:	454c      	cmp	r4, r9
 80081f8:	d206      	bcs.n	8008208 <__hexnan+0x64>
 80081fa:	2d07      	cmp	r5, #7
 80081fc:	dc04      	bgt.n	8008208 <__hexnan+0x64>
 80081fe:	462a      	mov	r2, r5
 8008200:	4649      	mov	r1, r9
 8008202:	4620      	mov	r0, r4
 8008204:	f7ff ffa8 	bl	8008158 <L_shift>
 8008208:	4544      	cmp	r4, r8
 800820a:	d950      	bls.n	80082ae <__hexnan+0x10a>
 800820c:	2300      	movs	r3, #0
 800820e:	f1a4 0904 	sub.w	r9, r4, #4
 8008212:	f844 3c04 	str.w	r3, [r4, #-4]
 8008216:	f8cd b008 	str.w	fp, [sp, #8]
 800821a:	464c      	mov	r4, r9
 800821c:	461d      	mov	r5, r3
 800821e:	9a03      	ldr	r2, [sp, #12]
 8008220:	e7d7      	b.n	80081d2 <__hexnan+0x2e>
 8008222:	2929      	cmp	r1, #41	; 0x29
 8008224:	d156      	bne.n	80082d4 <__hexnan+0x130>
 8008226:	3202      	adds	r2, #2
 8008228:	f8ca 2000 	str.w	r2, [sl]
 800822c:	f1bb 0f00 	cmp.w	fp, #0
 8008230:	d050      	beq.n	80082d4 <__hexnan+0x130>
 8008232:	454c      	cmp	r4, r9
 8008234:	d206      	bcs.n	8008244 <__hexnan+0xa0>
 8008236:	2d07      	cmp	r5, #7
 8008238:	dc04      	bgt.n	8008244 <__hexnan+0xa0>
 800823a:	462a      	mov	r2, r5
 800823c:	4649      	mov	r1, r9
 800823e:	4620      	mov	r0, r4
 8008240:	f7ff ff8a 	bl	8008158 <L_shift>
 8008244:	4544      	cmp	r4, r8
 8008246:	d934      	bls.n	80082b2 <__hexnan+0x10e>
 8008248:	f1a8 0204 	sub.w	r2, r8, #4
 800824c:	4623      	mov	r3, r4
 800824e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008252:	f842 1f04 	str.w	r1, [r2, #4]!
 8008256:	429f      	cmp	r7, r3
 8008258:	d2f9      	bcs.n	800824e <__hexnan+0xaa>
 800825a:	1b3b      	subs	r3, r7, r4
 800825c:	f023 0303 	bic.w	r3, r3, #3
 8008260:	3304      	adds	r3, #4
 8008262:	3401      	adds	r4, #1
 8008264:	3e03      	subs	r6, #3
 8008266:	42b4      	cmp	r4, r6
 8008268:	bf88      	it	hi
 800826a:	2304      	movhi	r3, #4
 800826c:	4443      	add	r3, r8
 800826e:	2200      	movs	r2, #0
 8008270:	f843 2b04 	str.w	r2, [r3], #4
 8008274:	429f      	cmp	r7, r3
 8008276:	d2fb      	bcs.n	8008270 <__hexnan+0xcc>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	b91b      	cbnz	r3, 8008284 <__hexnan+0xe0>
 800827c:	4547      	cmp	r7, r8
 800827e:	d127      	bne.n	80082d0 <__hexnan+0x12c>
 8008280:	2301      	movs	r3, #1
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	2005      	movs	r0, #5
 8008286:	e026      	b.n	80082d6 <__hexnan+0x132>
 8008288:	3501      	adds	r5, #1
 800828a:	2d08      	cmp	r5, #8
 800828c:	f10b 0b01 	add.w	fp, fp, #1
 8008290:	dd06      	ble.n	80082a0 <__hexnan+0xfc>
 8008292:	4544      	cmp	r4, r8
 8008294:	d9c3      	bls.n	800821e <__hexnan+0x7a>
 8008296:	2300      	movs	r3, #0
 8008298:	f844 3c04 	str.w	r3, [r4, #-4]
 800829c:	2501      	movs	r5, #1
 800829e:	3c04      	subs	r4, #4
 80082a0:	6822      	ldr	r2, [r4, #0]
 80082a2:	f000 000f 	and.w	r0, r0, #15
 80082a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80082aa:	6022      	str	r2, [r4, #0]
 80082ac:	e7b7      	b.n	800821e <__hexnan+0x7a>
 80082ae:	2508      	movs	r5, #8
 80082b0:	e7b5      	b.n	800821e <__hexnan+0x7a>
 80082b2:	9b01      	ldr	r3, [sp, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d0df      	beq.n	8008278 <__hexnan+0xd4>
 80082b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082bc:	f1c3 0320 	rsb	r3, r3, #32
 80082c0:	fa22 f303 	lsr.w	r3, r2, r3
 80082c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80082c8:	401a      	ands	r2, r3
 80082ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80082ce:	e7d3      	b.n	8008278 <__hexnan+0xd4>
 80082d0:	3f04      	subs	r7, #4
 80082d2:	e7d1      	b.n	8008278 <__hexnan+0xd4>
 80082d4:	2004      	movs	r0, #4
 80082d6:	b007      	add	sp, #28
 80082d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082dc <_localeconv_r>:
 80082dc:	4800      	ldr	r0, [pc, #0]	; (80082e0 <_localeconv_r+0x4>)
 80082de:	4770      	bx	lr
 80082e0:	2000016c 	.word	0x2000016c

080082e4 <malloc>:
 80082e4:	4b02      	ldr	r3, [pc, #8]	; (80082f0 <malloc+0xc>)
 80082e6:	4601      	mov	r1, r0
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	f000 bd67 	b.w	8008dbc <_malloc_r>
 80082ee:	bf00      	nop
 80082f0:	20000014 	.word	0x20000014

080082f4 <__ascii_mbtowc>:
 80082f4:	b082      	sub	sp, #8
 80082f6:	b901      	cbnz	r1, 80082fa <__ascii_mbtowc+0x6>
 80082f8:	a901      	add	r1, sp, #4
 80082fa:	b142      	cbz	r2, 800830e <__ascii_mbtowc+0x1a>
 80082fc:	b14b      	cbz	r3, 8008312 <__ascii_mbtowc+0x1e>
 80082fe:	7813      	ldrb	r3, [r2, #0]
 8008300:	600b      	str	r3, [r1, #0]
 8008302:	7812      	ldrb	r2, [r2, #0]
 8008304:	1e10      	subs	r0, r2, #0
 8008306:	bf18      	it	ne
 8008308:	2001      	movne	r0, #1
 800830a:	b002      	add	sp, #8
 800830c:	4770      	bx	lr
 800830e:	4610      	mov	r0, r2
 8008310:	e7fb      	b.n	800830a <__ascii_mbtowc+0x16>
 8008312:	f06f 0001 	mvn.w	r0, #1
 8008316:	e7f8      	b.n	800830a <__ascii_mbtowc+0x16>

08008318 <memcpy>:
 8008318:	440a      	add	r2, r1
 800831a:	4291      	cmp	r1, r2
 800831c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008320:	d100      	bne.n	8008324 <memcpy+0xc>
 8008322:	4770      	bx	lr
 8008324:	b510      	push	{r4, lr}
 8008326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800832a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800832e:	4291      	cmp	r1, r2
 8008330:	d1f9      	bne.n	8008326 <memcpy+0xe>
 8008332:	bd10      	pop	{r4, pc}

08008334 <_Balloc>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	b976      	cbnz	r6, 800835c <_Balloc+0x28>
 800833e:	2010      	movs	r0, #16
 8008340:	f7ff ffd0 	bl	80082e4 <malloc>
 8008344:	4602      	mov	r2, r0
 8008346:	6260      	str	r0, [r4, #36]	; 0x24
 8008348:	b920      	cbnz	r0, 8008354 <_Balloc+0x20>
 800834a:	4b18      	ldr	r3, [pc, #96]	; (80083ac <_Balloc+0x78>)
 800834c:	4818      	ldr	r0, [pc, #96]	; (80083b0 <_Balloc+0x7c>)
 800834e:	2166      	movs	r1, #102	; 0x66
 8008350:	f000 ff40 	bl	80091d4 <__assert_func>
 8008354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008358:	6006      	str	r6, [r0, #0]
 800835a:	60c6      	str	r6, [r0, #12]
 800835c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800835e:	68f3      	ldr	r3, [r6, #12]
 8008360:	b183      	cbz	r3, 8008384 <_Balloc+0x50>
 8008362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800836a:	b9b8      	cbnz	r0, 800839c <_Balloc+0x68>
 800836c:	2101      	movs	r1, #1
 800836e:	fa01 f605 	lsl.w	r6, r1, r5
 8008372:	1d72      	adds	r2, r6, #5
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	4620      	mov	r0, r4
 8008378:	f000 fc9d 	bl	8008cb6 <_calloc_r>
 800837c:	b160      	cbz	r0, 8008398 <_Balloc+0x64>
 800837e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008382:	e00e      	b.n	80083a2 <_Balloc+0x6e>
 8008384:	2221      	movs	r2, #33	; 0x21
 8008386:	2104      	movs	r1, #4
 8008388:	4620      	mov	r0, r4
 800838a:	f000 fc94 	bl	8008cb6 <_calloc_r>
 800838e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008390:	60f0      	str	r0, [r6, #12]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e4      	bne.n	8008362 <_Balloc+0x2e>
 8008398:	2000      	movs	r0, #0
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	6802      	ldr	r2, [r0, #0]
 800839e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083a2:	2300      	movs	r3, #0
 80083a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083a8:	e7f7      	b.n	800839a <_Balloc+0x66>
 80083aa:	bf00      	nop
 80083ac:	08009f5e 	.word	0x08009f5e
 80083b0:	0800a05c 	.word	0x0800a05c

080083b4 <_Bfree>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083b8:	4605      	mov	r5, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	b976      	cbnz	r6, 80083dc <_Bfree+0x28>
 80083be:	2010      	movs	r0, #16
 80083c0:	f7ff ff90 	bl	80082e4 <malloc>
 80083c4:	4602      	mov	r2, r0
 80083c6:	6268      	str	r0, [r5, #36]	; 0x24
 80083c8:	b920      	cbnz	r0, 80083d4 <_Bfree+0x20>
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <_Bfree+0x3c>)
 80083cc:	4809      	ldr	r0, [pc, #36]	; (80083f4 <_Bfree+0x40>)
 80083ce:	218a      	movs	r1, #138	; 0x8a
 80083d0:	f000 ff00 	bl	80091d4 <__assert_func>
 80083d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083d8:	6006      	str	r6, [r0, #0]
 80083da:	60c6      	str	r6, [r0, #12]
 80083dc:	b13c      	cbz	r4, 80083ee <_Bfree+0x3a>
 80083de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083e0:	6862      	ldr	r2, [r4, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083e8:	6021      	str	r1, [r4, #0]
 80083ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	08009f5e 	.word	0x08009f5e
 80083f4:	0800a05c 	.word	0x0800a05c

080083f8 <__multadd>:
 80083f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fc:	690d      	ldr	r5, [r1, #16]
 80083fe:	4607      	mov	r7, r0
 8008400:	460c      	mov	r4, r1
 8008402:	461e      	mov	r6, r3
 8008404:	f101 0c14 	add.w	ip, r1, #20
 8008408:	2000      	movs	r0, #0
 800840a:	f8dc 3000 	ldr.w	r3, [ip]
 800840e:	b299      	uxth	r1, r3
 8008410:	fb02 6101 	mla	r1, r2, r1, r6
 8008414:	0c1e      	lsrs	r6, r3, #16
 8008416:	0c0b      	lsrs	r3, r1, #16
 8008418:	fb02 3306 	mla	r3, r2, r6, r3
 800841c:	b289      	uxth	r1, r1
 800841e:	3001      	adds	r0, #1
 8008420:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008424:	4285      	cmp	r5, r0
 8008426:	f84c 1b04 	str.w	r1, [ip], #4
 800842a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800842e:	dcec      	bgt.n	800840a <__multadd+0x12>
 8008430:	b30e      	cbz	r6, 8008476 <__multadd+0x7e>
 8008432:	68a3      	ldr	r3, [r4, #8]
 8008434:	42ab      	cmp	r3, r5
 8008436:	dc19      	bgt.n	800846c <__multadd+0x74>
 8008438:	6861      	ldr	r1, [r4, #4]
 800843a:	4638      	mov	r0, r7
 800843c:	3101      	adds	r1, #1
 800843e:	f7ff ff79 	bl	8008334 <_Balloc>
 8008442:	4680      	mov	r8, r0
 8008444:	b928      	cbnz	r0, 8008452 <__multadd+0x5a>
 8008446:	4602      	mov	r2, r0
 8008448:	4b0c      	ldr	r3, [pc, #48]	; (800847c <__multadd+0x84>)
 800844a:	480d      	ldr	r0, [pc, #52]	; (8008480 <__multadd+0x88>)
 800844c:	21b5      	movs	r1, #181	; 0xb5
 800844e:	f000 fec1 	bl	80091d4 <__assert_func>
 8008452:	6922      	ldr	r2, [r4, #16]
 8008454:	3202      	adds	r2, #2
 8008456:	f104 010c 	add.w	r1, r4, #12
 800845a:	0092      	lsls	r2, r2, #2
 800845c:	300c      	adds	r0, #12
 800845e:	f7ff ff5b 	bl	8008318 <memcpy>
 8008462:	4621      	mov	r1, r4
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff ffa5 	bl	80083b4 <_Bfree>
 800846a:	4644      	mov	r4, r8
 800846c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008470:	3501      	adds	r5, #1
 8008472:	615e      	str	r6, [r3, #20]
 8008474:	6125      	str	r5, [r4, #16]
 8008476:	4620      	mov	r0, r4
 8008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847c:	08009fd0 	.word	0x08009fd0
 8008480:	0800a05c 	.word	0x0800a05c

08008484 <__s2b>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	4615      	mov	r5, r2
 800848c:	461f      	mov	r7, r3
 800848e:	2209      	movs	r2, #9
 8008490:	3308      	adds	r3, #8
 8008492:	4606      	mov	r6, r0
 8008494:	fb93 f3f2 	sdiv	r3, r3, r2
 8008498:	2100      	movs	r1, #0
 800849a:	2201      	movs	r2, #1
 800849c:	429a      	cmp	r2, r3
 800849e:	db09      	blt.n	80084b4 <__s2b+0x30>
 80084a0:	4630      	mov	r0, r6
 80084a2:	f7ff ff47 	bl	8008334 <_Balloc>
 80084a6:	b940      	cbnz	r0, 80084ba <__s2b+0x36>
 80084a8:	4602      	mov	r2, r0
 80084aa:	4b19      	ldr	r3, [pc, #100]	; (8008510 <__s2b+0x8c>)
 80084ac:	4819      	ldr	r0, [pc, #100]	; (8008514 <__s2b+0x90>)
 80084ae:	21ce      	movs	r1, #206	; 0xce
 80084b0:	f000 fe90 	bl	80091d4 <__assert_func>
 80084b4:	0052      	lsls	r2, r2, #1
 80084b6:	3101      	adds	r1, #1
 80084b8:	e7f0      	b.n	800849c <__s2b+0x18>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	6143      	str	r3, [r0, #20]
 80084be:	2d09      	cmp	r5, #9
 80084c0:	f04f 0301 	mov.w	r3, #1
 80084c4:	6103      	str	r3, [r0, #16]
 80084c6:	dd16      	ble.n	80084f6 <__s2b+0x72>
 80084c8:	f104 0909 	add.w	r9, r4, #9
 80084cc:	46c8      	mov	r8, r9
 80084ce:	442c      	add	r4, r5
 80084d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80084d4:	4601      	mov	r1, r0
 80084d6:	3b30      	subs	r3, #48	; 0x30
 80084d8:	220a      	movs	r2, #10
 80084da:	4630      	mov	r0, r6
 80084dc:	f7ff ff8c 	bl	80083f8 <__multadd>
 80084e0:	45a0      	cmp	r8, r4
 80084e2:	d1f5      	bne.n	80084d0 <__s2b+0x4c>
 80084e4:	f1a5 0408 	sub.w	r4, r5, #8
 80084e8:	444c      	add	r4, r9
 80084ea:	1b2d      	subs	r5, r5, r4
 80084ec:	1963      	adds	r3, r4, r5
 80084ee:	42bb      	cmp	r3, r7
 80084f0:	db04      	blt.n	80084fc <__s2b+0x78>
 80084f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f6:	340a      	adds	r4, #10
 80084f8:	2509      	movs	r5, #9
 80084fa:	e7f6      	b.n	80084ea <__s2b+0x66>
 80084fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008500:	4601      	mov	r1, r0
 8008502:	3b30      	subs	r3, #48	; 0x30
 8008504:	220a      	movs	r2, #10
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff76 	bl	80083f8 <__multadd>
 800850c:	e7ee      	b.n	80084ec <__s2b+0x68>
 800850e:	bf00      	nop
 8008510:	08009fd0 	.word	0x08009fd0
 8008514:	0800a05c 	.word	0x0800a05c

08008518 <__hi0bits>:
 8008518:	0c03      	lsrs	r3, r0, #16
 800851a:	041b      	lsls	r3, r3, #16
 800851c:	b9d3      	cbnz	r3, 8008554 <__hi0bits+0x3c>
 800851e:	0400      	lsls	r0, r0, #16
 8008520:	2310      	movs	r3, #16
 8008522:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008526:	bf04      	itt	eq
 8008528:	0200      	lsleq	r0, r0, #8
 800852a:	3308      	addeq	r3, #8
 800852c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008530:	bf04      	itt	eq
 8008532:	0100      	lsleq	r0, r0, #4
 8008534:	3304      	addeq	r3, #4
 8008536:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800853a:	bf04      	itt	eq
 800853c:	0080      	lsleq	r0, r0, #2
 800853e:	3302      	addeq	r3, #2
 8008540:	2800      	cmp	r0, #0
 8008542:	db05      	blt.n	8008550 <__hi0bits+0x38>
 8008544:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008548:	f103 0301 	add.w	r3, r3, #1
 800854c:	bf08      	it	eq
 800854e:	2320      	moveq	r3, #32
 8008550:	4618      	mov	r0, r3
 8008552:	4770      	bx	lr
 8008554:	2300      	movs	r3, #0
 8008556:	e7e4      	b.n	8008522 <__hi0bits+0xa>

08008558 <__lo0bits>:
 8008558:	6803      	ldr	r3, [r0, #0]
 800855a:	f013 0207 	ands.w	r2, r3, #7
 800855e:	4601      	mov	r1, r0
 8008560:	d00b      	beq.n	800857a <__lo0bits+0x22>
 8008562:	07da      	lsls	r2, r3, #31
 8008564:	d423      	bmi.n	80085ae <__lo0bits+0x56>
 8008566:	0798      	lsls	r0, r3, #30
 8008568:	bf49      	itett	mi
 800856a:	085b      	lsrmi	r3, r3, #1
 800856c:	089b      	lsrpl	r3, r3, #2
 800856e:	2001      	movmi	r0, #1
 8008570:	600b      	strmi	r3, [r1, #0]
 8008572:	bf5c      	itt	pl
 8008574:	600b      	strpl	r3, [r1, #0]
 8008576:	2002      	movpl	r0, #2
 8008578:	4770      	bx	lr
 800857a:	b298      	uxth	r0, r3
 800857c:	b9a8      	cbnz	r0, 80085aa <__lo0bits+0x52>
 800857e:	0c1b      	lsrs	r3, r3, #16
 8008580:	2010      	movs	r0, #16
 8008582:	b2da      	uxtb	r2, r3
 8008584:	b90a      	cbnz	r2, 800858a <__lo0bits+0x32>
 8008586:	3008      	adds	r0, #8
 8008588:	0a1b      	lsrs	r3, r3, #8
 800858a:	071a      	lsls	r2, r3, #28
 800858c:	bf04      	itt	eq
 800858e:	091b      	lsreq	r3, r3, #4
 8008590:	3004      	addeq	r0, #4
 8008592:	079a      	lsls	r2, r3, #30
 8008594:	bf04      	itt	eq
 8008596:	089b      	lsreq	r3, r3, #2
 8008598:	3002      	addeq	r0, #2
 800859a:	07da      	lsls	r2, r3, #31
 800859c:	d403      	bmi.n	80085a6 <__lo0bits+0x4e>
 800859e:	085b      	lsrs	r3, r3, #1
 80085a0:	f100 0001 	add.w	r0, r0, #1
 80085a4:	d005      	beq.n	80085b2 <__lo0bits+0x5a>
 80085a6:	600b      	str	r3, [r1, #0]
 80085a8:	4770      	bx	lr
 80085aa:	4610      	mov	r0, r2
 80085ac:	e7e9      	b.n	8008582 <__lo0bits+0x2a>
 80085ae:	2000      	movs	r0, #0
 80085b0:	4770      	bx	lr
 80085b2:	2020      	movs	r0, #32
 80085b4:	4770      	bx	lr
	...

080085b8 <__i2b>:
 80085b8:	b510      	push	{r4, lr}
 80085ba:	460c      	mov	r4, r1
 80085bc:	2101      	movs	r1, #1
 80085be:	f7ff feb9 	bl	8008334 <_Balloc>
 80085c2:	4602      	mov	r2, r0
 80085c4:	b928      	cbnz	r0, 80085d2 <__i2b+0x1a>
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <__i2b+0x24>)
 80085c8:	4805      	ldr	r0, [pc, #20]	; (80085e0 <__i2b+0x28>)
 80085ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80085ce:	f000 fe01 	bl	80091d4 <__assert_func>
 80085d2:	2301      	movs	r3, #1
 80085d4:	6144      	str	r4, [r0, #20]
 80085d6:	6103      	str	r3, [r0, #16]
 80085d8:	bd10      	pop	{r4, pc}
 80085da:	bf00      	nop
 80085dc:	08009fd0 	.word	0x08009fd0
 80085e0:	0800a05c 	.word	0x0800a05c

080085e4 <__multiply>:
 80085e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e8:	4691      	mov	r9, r2
 80085ea:	690a      	ldr	r2, [r1, #16]
 80085ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	bfb8      	it	lt
 80085f4:	460b      	movlt	r3, r1
 80085f6:	460c      	mov	r4, r1
 80085f8:	bfbc      	itt	lt
 80085fa:	464c      	movlt	r4, r9
 80085fc:	4699      	movlt	r9, r3
 80085fe:	6927      	ldr	r7, [r4, #16]
 8008600:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008604:	68a3      	ldr	r3, [r4, #8]
 8008606:	6861      	ldr	r1, [r4, #4]
 8008608:	eb07 060a 	add.w	r6, r7, sl
 800860c:	42b3      	cmp	r3, r6
 800860e:	b085      	sub	sp, #20
 8008610:	bfb8      	it	lt
 8008612:	3101      	addlt	r1, #1
 8008614:	f7ff fe8e 	bl	8008334 <_Balloc>
 8008618:	b930      	cbnz	r0, 8008628 <__multiply+0x44>
 800861a:	4602      	mov	r2, r0
 800861c:	4b44      	ldr	r3, [pc, #272]	; (8008730 <__multiply+0x14c>)
 800861e:	4845      	ldr	r0, [pc, #276]	; (8008734 <__multiply+0x150>)
 8008620:	f240 115d 	movw	r1, #349	; 0x15d
 8008624:	f000 fdd6 	bl	80091d4 <__assert_func>
 8008628:	f100 0514 	add.w	r5, r0, #20
 800862c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008630:	462b      	mov	r3, r5
 8008632:	2200      	movs	r2, #0
 8008634:	4543      	cmp	r3, r8
 8008636:	d321      	bcc.n	800867c <__multiply+0x98>
 8008638:	f104 0314 	add.w	r3, r4, #20
 800863c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008640:	f109 0314 	add.w	r3, r9, #20
 8008644:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008648:	9202      	str	r2, [sp, #8]
 800864a:	1b3a      	subs	r2, r7, r4
 800864c:	3a15      	subs	r2, #21
 800864e:	f022 0203 	bic.w	r2, r2, #3
 8008652:	3204      	adds	r2, #4
 8008654:	f104 0115 	add.w	r1, r4, #21
 8008658:	428f      	cmp	r7, r1
 800865a:	bf38      	it	cc
 800865c:	2204      	movcc	r2, #4
 800865e:	9201      	str	r2, [sp, #4]
 8008660:	9a02      	ldr	r2, [sp, #8]
 8008662:	9303      	str	r3, [sp, #12]
 8008664:	429a      	cmp	r2, r3
 8008666:	d80c      	bhi.n	8008682 <__multiply+0x9e>
 8008668:	2e00      	cmp	r6, #0
 800866a:	dd03      	ble.n	8008674 <__multiply+0x90>
 800866c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008670:	2b00      	cmp	r3, #0
 8008672:	d05a      	beq.n	800872a <__multiply+0x146>
 8008674:	6106      	str	r6, [r0, #16]
 8008676:	b005      	add	sp, #20
 8008678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867c:	f843 2b04 	str.w	r2, [r3], #4
 8008680:	e7d8      	b.n	8008634 <__multiply+0x50>
 8008682:	f8b3 a000 	ldrh.w	sl, [r3]
 8008686:	f1ba 0f00 	cmp.w	sl, #0
 800868a:	d024      	beq.n	80086d6 <__multiply+0xf2>
 800868c:	f104 0e14 	add.w	lr, r4, #20
 8008690:	46a9      	mov	r9, r5
 8008692:	f04f 0c00 	mov.w	ip, #0
 8008696:	f85e 2b04 	ldr.w	r2, [lr], #4
 800869a:	f8d9 1000 	ldr.w	r1, [r9]
 800869e:	fa1f fb82 	uxth.w	fp, r2
 80086a2:	b289      	uxth	r1, r1
 80086a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80086a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80086ac:	f8d9 2000 	ldr.w	r2, [r9]
 80086b0:	4461      	add	r1, ip
 80086b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80086ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086be:	b289      	uxth	r1, r1
 80086c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80086c4:	4577      	cmp	r7, lr
 80086c6:	f849 1b04 	str.w	r1, [r9], #4
 80086ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086ce:	d8e2      	bhi.n	8008696 <__multiply+0xb2>
 80086d0:	9a01      	ldr	r2, [sp, #4]
 80086d2:	f845 c002 	str.w	ip, [r5, r2]
 80086d6:	9a03      	ldr	r2, [sp, #12]
 80086d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086dc:	3304      	adds	r3, #4
 80086de:	f1b9 0f00 	cmp.w	r9, #0
 80086e2:	d020      	beq.n	8008726 <__multiply+0x142>
 80086e4:	6829      	ldr	r1, [r5, #0]
 80086e6:	f104 0c14 	add.w	ip, r4, #20
 80086ea:	46ae      	mov	lr, r5
 80086ec:	f04f 0a00 	mov.w	sl, #0
 80086f0:	f8bc b000 	ldrh.w	fp, [ip]
 80086f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086f8:	fb09 220b 	mla	r2, r9, fp, r2
 80086fc:	4492      	add	sl, r2
 80086fe:	b289      	uxth	r1, r1
 8008700:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008704:	f84e 1b04 	str.w	r1, [lr], #4
 8008708:	f85c 2b04 	ldr.w	r2, [ip], #4
 800870c:	f8be 1000 	ldrh.w	r1, [lr]
 8008710:	0c12      	lsrs	r2, r2, #16
 8008712:	fb09 1102 	mla	r1, r9, r2, r1
 8008716:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800871a:	4567      	cmp	r7, ip
 800871c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008720:	d8e6      	bhi.n	80086f0 <__multiply+0x10c>
 8008722:	9a01      	ldr	r2, [sp, #4]
 8008724:	50a9      	str	r1, [r5, r2]
 8008726:	3504      	adds	r5, #4
 8008728:	e79a      	b.n	8008660 <__multiply+0x7c>
 800872a:	3e01      	subs	r6, #1
 800872c:	e79c      	b.n	8008668 <__multiply+0x84>
 800872e:	bf00      	nop
 8008730:	08009fd0 	.word	0x08009fd0
 8008734:	0800a05c 	.word	0x0800a05c

08008738 <__pow5mult>:
 8008738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800873c:	4615      	mov	r5, r2
 800873e:	f012 0203 	ands.w	r2, r2, #3
 8008742:	4606      	mov	r6, r0
 8008744:	460f      	mov	r7, r1
 8008746:	d007      	beq.n	8008758 <__pow5mult+0x20>
 8008748:	4c25      	ldr	r4, [pc, #148]	; (80087e0 <__pow5mult+0xa8>)
 800874a:	3a01      	subs	r2, #1
 800874c:	2300      	movs	r3, #0
 800874e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008752:	f7ff fe51 	bl	80083f8 <__multadd>
 8008756:	4607      	mov	r7, r0
 8008758:	10ad      	asrs	r5, r5, #2
 800875a:	d03d      	beq.n	80087d8 <__pow5mult+0xa0>
 800875c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800875e:	b97c      	cbnz	r4, 8008780 <__pow5mult+0x48>
 8008760:	2010      	movs	r0, #16
 8008762:	f7ff fdbf 	bl	80082e4 <malloc>
 8008766:	4602      	mov	r2, r0
 8008768:	6270      	str	r0, [r6, #36]	; 0x24
 800876a:	b928      	cbnz	r0, 8008778 <__pow5mult+0x40>
 800876c:	4b1d      	ldr	r3, [pc, #116]	; (80087e4 <__pow5mult+0xac>)
 800876e:	481e      	ldr	r0, [pc, #120]	; (80087e8 <__pow5mult+0xb0>)
 8008770:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008774:	f000 fd2e 	bl	80091d4 <__assert_func>
 8008778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800877c:	6004      	str	r4, [r0, #0]
 800877e:	60c4      	str	r4, [r0, #12]
 8008780:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008788:	b94c      	cbnz	r4, 800879e <__pow5mult+0x66>
 800878a:	f240 2171 	movw	r1, #625	; 0x271
 800878e:	4630      	mov	r0, r6
 8008790:	f7ff ff12 	bl	80085b8 <__i2b>
 8008794:	2300      	movs	r3, #0
 8008796:	f8c8 0008 	str.w	r0, [r8, #8]
 800879a:	4604      	mov	r4, r0
 800879c:	6003      	str	r3, [r0, #0]
 800879e:	f04f 0900 	mov.w	r9, #0
 80087a2:	07eb      	lsls	r3, r5, #31
 80087a4:	d50a      	bpl.n	80087bc <__pow5mult+0x84>
 80087a6:	4639      	mov	r1, r7
 80087a8:	4622      	mov	r2, r4
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7ff ff1a 	bl	80085e4 <__multiply>
 80087b0:	4639      	mov	r1, r7
 80087b2:	4680      	mov	r8, r0
 80087b4:	4630      	mov	r0, r6
 80087b6:	f7ff fdfd 	bl	80083b4 <_Bfree>
 80087ba:	4647      	mov	r7, r8
 80087bc:	106d      	asrs	r5, r5, #1
 80087be:	d00b      	beq.n	80087d8 <__pow5mult+0xa0>
 80087c0:	6820      	ldr	r0, [r4, #0]
 80087c2:	b938      	cbnz	r0, 80087d4 <__pow5mult+0x9c>
 80087c4:	4622      	mov	r2, r4
 80087c6:	4621      	mov	r1, r4
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7ff ff0b 	bl	80085e4 <__multiply>
 80087ce:	6020      	str	r0, [r4, #0]
 80087d0:	f8c0 9000 	str.w	r9, [r0]
 80087d4:	4604      	mov	r4, r0
 80087d6:	e7e4      	b.n	80087a2 <__pow5mult+0x6a>
 80087d8:	4638      	mov	r0, r7
 80087da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087de:	bf00      	nop
 80087e0:	0800a1a8 	.word	0x0800a1a8
 80087e4:	08009f5e 	.word	0x08009f5e
 80087e8:	0800a05c 	.word	0x0800a05c

080087ec <__lshift>:
 80087ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	460c      	mov	r4, r1
 80087f2:	6849      	ldr	r1, [r1, #4]
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087fa:	68a3      	ldr	r3, [r4, #8]
 80087fc:	4607      	mov	r7, r0
 80087fe:	4691      	mov	r9, r2
 8008800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008804:	f108 0601 	add.w	r6, r8, #1
 8008808:	42b3      	cmp	r3, r6
 800880a:	db0b      	blt.n	8008824 <__lshift+0x38>
 800880c:	4638      	mov	r0, r7
 800880e:	f7ff fd91 	bl	8008334 <_Balloc>
 8008812:	4605      	mov	r5, r0
 8008814:	b948      	cbnz	r0, 800882a <__lshift+0x3e>
 8008816:	4602      	mov	r2, r0
 8008818:	4b2a      	ldr	r3, [pc, #168]	; (80088c4 <__lshift+0xd8>)
 800881a:	482b      	ldr	r0, [pc, #172]	; (80088c8 <__lshift+0xdc>)
 800881c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008820:	f000 fcd8 	bl	80091d4 <__assert_func>
 8008824:	3101      	adds	r1, #1
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	e7ee      	b.n	8008808 <__lshift+0x1c>
 800882a:	2300      	movs	r3, #0
 800882c:	f100 0114 	add.w	r1, r0, #20
 8008830:	f100 0210 	add.w	r2, r0, #16
 8008834:	4618      	mov	r0, r3
 8008836:	4553      	cmp	r3, sl
 8008838:	db37      	blt.n	80088aa <__lshift+0xbe>
 800883a:	6920      	ldr	r0, [r4, #16]
 800883c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008840:	f104 0314 	add.w	r3, r4, #20
 8008844:	f019 091f 	ands.w	r9, r9, #31
 8008848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800884c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008850:	d02f      	beq.n	80088b2 <__lshift+0xc6>
 8008852:	f1c9 0e20 	rsb	lr, r9, #32
 8008856:	468a      	mov	sl, r1
 8008858:	f04f 0c00 	mov.w	ip, #0
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	fa02 f209 	lsl.w	r2, r2, r9
 8008862:	ea42 020c 	orr.w	r2, r2, ip
 8008866:	f84a 2b04 	str.w	r2, [sl], #4
 800886a:	f853 2b04 	ldr.w	r2, [r3], #4
 800886e:	4298      	cmp	r0, r3
 8008870:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008874:	d8f2      	bhi.n	800885c <__lshift+0x70>
 8008876:	1b03      	subs	r3, r0, r4
 8008878:	3b15      	subs	r3, #21
 800887a:	f023 0303 	bic.w	r3, r3, #3
 800887e:	3304      	adds	r3, #4
 8008880:	f104 0215 	add.w	r2, r4, #21
 8008884:	4290      	cmp	r0, r2
 8008886:	bf38      	it	cc
 8008888:	2304      	movcc	r3, #4
 800888a:	f841 c003 	str.w	ip, [r1, r3]
 800888e:	f1bc 0f00 	cmp.w	ip, #0
 8008892:	d001      	beq.n	8008898 <__lshift+0xac>
 8008894:	f108 0602 	add.w	r6, r8, #2
 8008898:	3e01      	subs	r6, #1
 800889a:	4638      	mov	r0, r7
 800889c:	612e      	str	r6, [r5, #16]
 800889e:	4621      	mov	r1, r4
 80088a0:	f7ff fd88 	bl	80083b4 <_Bfree>
 80088a4:	4628      	mov	r0, r5
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80088ae:	3301      	adds	r3, #1
 80088b0:	e7c1      	b.n	8008836 <__lshift+0x4a>
 80088b2:	3904      	subs	r1, #4
 80088b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80088bc:	4298      	cmp	r0, r3
 80088be:	d8f9      	bhi.n	80088b4 <__lshift+0xc8>
 80088c0:	e7ea      	b.n	8008898 <__lshift+0xac>
 80088c2:	bf00      	nop
 80088c4:	08009fd0 	.word	0x08009fd0
 80088c8:	0800a05c 	.word	0x0800a05c

080088cc <__mcmp>:
 80088cc:	b530      	push	{r4, r5, lr}
 80088ce:	6902      	ldr	r2, [r0, #16]
 80088d0:	690c      	ldr	r4, [r1, #16]
 80088d2:	1b12      	subs	r2, r2, r4
 80088d4:	d10e      	bne.n	80088f4 <__mcmp+0x28>
 80088d6:	f100 0314 	add.w	r3, r0, #20
 80088da:	3114      	adds	r1, #20
 80088dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088ec:	42a5      	cmp	r5, r4
 80088ee:	d003      	beq.n	80088f8 <__mcmp+0x2c>
 80088f0:	d305      	bcc.n	80088fe <__mcmp+0x32>
 80088f2:	2201      	movs	r2, #1
 80088f4:	4610      	mov	r0, r2
 80088f6:	bd30      	pop	{r4, r5, pc}
 80088f8:	4283      	cmp	r3, r0
 80088fa:	d3f3      	bcc.n	80088e4 <__mcmp+0x18>
 80088fc:	e7fa      	b.n	80088f4 <__mcmp+0x28>
 80088fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008902:	e7f7      	b.n	80088f4 <__mcmp+0x28>

08008904 <__mdiff>:
 8008904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008908:	460c      	mov	r4, r1
 800890a:	4606      	mov	r6, r0
 800890c:	4611      	mov	r1, r2
 800890e:	4620      	mov	r0, r4
 8008910:	4690      	mov	r8, r2
 8008912:	f7ff ffdb 	bl	80088cc <__mcmp>
 8008916:	1e05      	subs	r5, r0, #0
 8008918:	d110      	bne.n	800893c <__mdiff+0x38>
 800891a:	4629      	mov	r1, r5
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff fd09 	bl	8008334 <_Balloc>
 8008922:	b930      	cbnz	r0, 8008932 <__mdiff+0x2e>
 8008924:	4b3a      	ldr	r3, [pc, #232]	; (8008a10 <__mdiff+0x10c>)
 8008926:	4602      	mov	r2, r0
 8008928:	f240 2132 	movw	r1, #562	; 0x232
 800892c:	4839      	ldr	r0, [pc, #228]	; (8008a14 <__mdiff+0x110>)
 800892e:	f000 fc51 	bl	80091d4 <__assert_func>
 8008932:	2301      	movs	r3, #1
 8008934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893c:	bfa4      	itt	ge
 800893e:	4643      	movge	r3, r8
 8008940:	46a0      	movge	r8, r4
 8008942:	4630      	mov	r0, r6
 8008944:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008948:	bfa6      	itte	ge
 800894a:	461c      	movge	r4, r3
 800894c:	2500      	movge	r5, #0
 800894e:	2501      	movlt	r5, #1
 8008950:	f7ff fcf0 	bl	8008334 <_Balloc>
 8008954:	b920      	cbnz	r0, 8008960 <__mdiff+0x5c>
 8008956:	4b2e      	ldr	r3, [pc, #184]	; (8008a10 <__mdiff+0x10c>)
 8008958:	4602      	mov	r2, r0
 800895a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800895e:	e7e5      	b.n	800892c <__mdiff+0x28>
 8008960:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008964:	6926      	ldr	r6, [r4, #16]
 8008966:	60c5      	str	r5, [r0, #12]
 8008968:	f104 0914 	add.w	r9, r4, #20
 800896c:	f108 0514 	add.w	r5, r8, #20
 8008970:	f100 0e14 	add.w	lr, r0, #20
 8008974:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008978:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800897c:	f108 0210 	add.w	r2, r8, #16
 8008980:	46f2      	mov	sl, lr
 8008982:	2100      	movs	r1, #0
 8008984:	f859 3b04 	ldr.w	r3, [r9], #4
 8008988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800898c:	fa1f f883 	uxth.w	r8, r3
 8008990:	fa11 f18b 	uxtah	r1, r1, fp
 8008994:	0c1b      	lsrs	r3, r3, #16
 8008996:	eba1 0808 	sub.w	r8, r1, r8
 800899a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800899e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80089a2:	fa1f f888 	uxth.w	r8, r8
 80089a6:	1419      	asrs	r1, r3, #16
 80089a8:	454e      	cmp	r6, r9
 80089aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80089ae:	f84a 3b04 	str.w	r3, [sl], #4
 80089b2:	d8e7      	bhi.n	8008984 <__mdiff+0x80>
 80089b4:	1b33      	subs	r3, r6, r4
 80089b6:	3b15      	subs	r3, #21
 80089b8:	f023 0303 	bic.w	r3, r3, #3
 80089bc:	3304      	adds	r3, #4
 80089be:	3415      	adds	r4, #21
 80089c0:	42a6      	cmp	r6, r4
 80089c2:	bf38      	it	cc
 80089c4:	2304      	movcc	r3, #4
 80089c6:	441d      	add	r5, r3
 80089c8:	4473      	add	r3, lr
 80089ca:	469e      	mov	lr, r3
 80089cc:	462e      	mov	r6, r5
 80089ce:	4566      	cmp	r6, ip
 80089d0:	d30e      	bcc.n	80089f0 <__mdiff+0xec>
 80089d2:	f10c 0203 	add.w	r2, ip, #3
 80089d6:	1b52      	subs	r2, r2, r5
 80089d8:	f022 0203 	bic.w	r2, r2, #3
 80089dc:	3d03      	subs	r5, #3
 80089de:	45ac      	cmp	ip, r5
 80089e0:	bf38      	it	cc
 80089e2:	2200      	movcc	r2, #0
 80089e4:	441a      	add	r2, r3
 80089e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80089ea:	b17b      	cbz	r3, 8008a0c <__mdiff+0x108>
 80089ec:	6107      	str	r7, [r0, #16]
 80089ee:	e7a3      	b.n	8008938 <__mdiff+0x34>
 80089f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80089f4:	fa11 f288 	uxtah	r2, r1, r8
 80089f8:	1414      	asrs	r4, r2, #16
 80089fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089fe:	b292      	uxth	r2, r2
 8008a00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a04:	f84e 2b04 	str.w	r2, [lr], #4
 8008a08:	1421      	asrs	r1, r4, #16
 8008a0a:	e7e0      	b.n	80089ce <__mdiff+0xca>
 8008a0c:	3f01      	subs	r7, #1
 8008a0e:	e7ea      	b.n	80089e6 <__mdiff+0xe2>
 8008a10:	08009fd0 	.word	0x08009fd0
 8008a14:	0800a05c 	.word	0x0800a05c

08008a18 <__ulp>:
 8008a18:	b082      	sub	sp, #8
 8008a1a:	ed8d 0b00 	vstr	d0, [sp]
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	4912      	ldr	r1, [pc, #72]	; (8008a6c <__ulp+0x54>)
 8008a22:	4019      	ands	r1, r3
 8008a24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008a28:	2900      	cmp	r1, #0
 8008a2a:	dd05      	ble.n	8008a38 <__ulp+0x20>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	ec43 2b10 	vmov	d0, r2, r3
 8008a34:	b002      	add	sp, #8
 8008a36:	4770      	bx	lr
 8008a38:	4249      	negs	r1, r1
 8008a3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008a3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008a42:	f04f 0200 	mov.w	r2, #0
 8008a46:	f04f 0300 	mov.w	r3, #0
 8008a4a:	da04      	bge.n	8008a56 <__ulp+0x3e>
 8008a4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008a50:	fa41 f300 	asr.w	r3, r1, r0
 8008a54:	e7ec      	b.n	8008a30 <__ulp+0x18>
 8008a56:	f1a0 0114 	sub.w	r1, r0, #20
 8008a5a:	291e      	cmp	r1, #30
 8008a5c:	bfda      	itte	le
 8008a5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008a62:	fa20 f101 	lsrle.w	r1, r0, r1
 8008a66:	2101      	movgt	r1, #1
 8008a68:	460a      	mov	r2, r1
 8008a6a:	e7e1      	b.n	8008a30 <__ulp+0x18>
 8008a6c:	7ff00000 	.word	0x7ff00000

08008a70 <__b2d>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	6905      	ldr	r5, [r0, #16]
 8008a74:	f100 0714 	add.w	r7, r0, #20
 8008a78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008a7c:	1f2e      	subs	r6, r5, #4
 8008a7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008a82:	4620      	mov	r0, r4
 8008a84:	f7ff fd48 	bl	8008518 <__hi0bits>
 8008a88:	f1c0 0320 	rsb	r3, r0, #32
 8008a8c:	280a      	cmp	r0, #10
 8008a8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008b0c <__b2d+0x9c>
 8008a92:	600b      	str	r3, [r1, #0]
 8008a94:	dc14      	bgt.n	8008ac0 <__b2d+0x50>
 8008a96:	f1c0 0e0b 	rsb	lr, r0, #11
 8008a9a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008a9e:	42b7      	cmp	r7, r6
 8008aa0:	ea41 030c 	orr.w	r3, r1, ip
 8008aa4:	bf34      	ite	cc
 8008aa6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008aaa:	2100      	movcs	r1, #0
 8008aac:	3015      	adds	r0, #21
 8008aae:	fa04 f000 	lsl.w	r0, r4, r0
 8008ab2:	fa21 f10e 	lsr.w	r1, r1, lr
 8008ab6:	ea40 0201 	orr.w	r2, r0, r1
 8008aba:	ec43 2b10 	vmov	d0, r2, r3
 8008abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac0:	42b7      	cmp	r7, r6
 8008ac2:	bf3a      	itte	cc
 8008ac4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ac8:	f1a5 0608 	subcc.w	r6, r5, #8
 8008acc:	2100      	movcs	r1, #0
 8008ace:	380b      	subs	r0, #11
 8008ad0:	d017      	beq.n	8008b02 <__b2d+0x92>
 8008ad2:	f1c0 0c20 	rsb	ip, r0, #32
 8008ad6:	fa04 f500 	lsl.w	r5, r4, r0
 8008ada:	42be      	cmp	r6, r7
 8008adc:	fa21 f40c 	lsr.w	r4, r1, ip
 8008ae0:	ea45 0504 	orr.w	r5, r5, r4
 8008ae4:	bf8c      	ite	hi
 8008ae6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008aea:	2400      	movls	r4, #0
 8008aec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008af0:	fa01 f000 	lsl.w	r0, r1, r0
 8008af4:	fa24 f40c 	lsr.w	r4, r4, ip
 8008af8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008afc:	ea40 0204 	orr.w	r2, r0, r4
 8008b00:	e7db      	b.n	8008aba <__b2d+0x4a>
 8008b02:	ea44 030c 	orr.w	r3, r4, ip
 8008b06:	460a      	mov	r2, r1
 8008b08:	e7d7      	b.n	8008aba <__b2d+0x4a>
 8008b0a:	bf00      	nop
 8008b0c:	3ff00000 	.word	0x3ff00000

08008b10 <__d2b>:
 8008b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b14:	4689      	mov	r9, r1
 8008b16:	2101      	movs	r1, #1
 8008b18:	ec57 6b10 	vmov	r6, r7, d0
 8008b1c:	4690      	mov	r8, r2
 8008b1e:	f7ff fc09 	bl	8008334 <_Balloc>
 8008b22:	4604      	mov	r4, r0
 8008b24:	b930      	cbnz	r0, 8008b34 <__d2b+0x24>
 8008b26:	4602      	mov	r2, r0
 8008b28:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <__d2b+0xb0>)
 8008b2a:	4826      	ldr	r0, [pc, #152]	; (8008bc4 <__d2b+0xb4>)
 8008b2c:	f240 310a 	movw	r1, #778	; 0x30a
 8008b30:	f000 fb50 	bl	80091d4 <__assert_func>
 8008b34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b3c:	bb35      	cbnz	r5, 8008b8c <__d2b+0x7c>
 8008b3e:	2e00      	cmp	r6, #0
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	d028      	beq.n	8008b96 <__d2b+0x86>
 8008b44:	4668      	mov	r0, sp
 8008b46:	9600      	str	r6, [sp, #0]
 8008b48:	f7ff fd06 	bl	8008558 <__lo0bits>
 8008b4c:	9900      	ldr	r1, [sp, #0]
 8008b4e:	b300      	cbz	r0, 8008b92 <__d2b+0x82>
 8008b50:	9a01      	ldr	r2, [sp, #4]
 8008b52:	f1c0 0320 	rsb	r3, r0, #32
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	430b      	orrs	r3, r1
 8008b5c:	40c2      	lsrs	r2, r0
 8008b5e:	6163      	str	r3, [r4, #20]
 8008b60:	9201      	str	r2, [sp, #4]
 8008b62:	9b01      	ldr	r3, [sp, #4]
 8008b64:	61a3      	str	r3, [r4, #24]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bf14      	ite	ne
 8008b6a:	2202      	movne	r2, #2
 8008b6c:	2201      	moveq	r2, #1
 8008b6e:	6122      	str	r2, [r4, #16]
 8008b70:	b1d5      	cbz	r5, 8008ba8 <__d2b+0x98>
 8008b72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b76:	4405      	add	r5, r0
 8008b78:	f8c9 5000 	str.w	r5, [r9]
 8008b7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b80:	f8c8 0000 	str.w	r0, [r8]
 8008b84:	4620      	mov	r0, r4
 8008b86:	b003      	add	sp, #12
 8008b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b90:	e7d5      	b.n	8008b3e <__d2b+0x2e>
 8008b92:	6161      	str	r1, [r4, #20]
 8008b94:	e7e5      	b.n	8008b62 <__d2b+0x52>
 8008b96:	a801      	add	r0, sp, #4
 8008b98:	f7ff fcde 	bl	8008558 <__lo0bits>
 8008b9c:	9b01      	ldr	r3, [sp, #4]
 8008b9e:	6163      	str	r3, [r4, #20]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	6122      	str	r2, [r4, #16]
 8008ba4:	3020      	adds	r0, #32
 8008ba6:	e7e3      	b.n	8008b70 <__d2b+0x60>
 8008ba8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bb0:	f8c9 0000 	str.w	r0, [r9]
 8008bb4:	6918      	ldr	r0, [r3, #16]
 8008bb6:	f7ff fcaf 	bl	8008518 <__hi0bits>
 8008bba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bbe:	e7df      	b.n	8008b80 <__d2b+0x70>
 8008bc0:	08009fd0 	.word	0x08009fd0
 8008bc4:	0800a05c 	.word	0x0800a05c

08008bc8 <__ratio>:
 8008bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	4688      	mov	r8, r1
 8008bce:	4669      	mov	r1, sp
 8008bd0:	4681      	mov	r9, r0
 8008bd2:	f7ff ff4d 	bl	8008a70 <__b2d>
 8008bd6:	a901      	add	r1, sp, #4
 8008bd8:	4640      	mov	r0, r8
 8008bda:	ec55 4b10 	vmov	r4, r5, d0
 8008bde:	f7ff ff47 	bl	8008a70 <__b2d>
 8008be2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008be6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008bea:	eba3 0c02 	sub.w	ip, r3, r2
 8008bee:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008bf2:	1a9b      	subs	r3, r3, r2
 8008bf4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008bf8:	ec51 0b10 	vmov	r0, r1, d0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bfd6      	itet	le
 8008c00:	460a      	movle	r2, r1
 8008c02:	462a      	movgt	r2, r5
 8008c04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c08:	468b      	mov	fp, r1
 8008c0a:	462f      	mov	r7, r5
 8008c0c:	bfd4      	ite	le
 8008c0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008c12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008c16:	4620      	mov	r0, r4
 8008c18:	ee10 2a10 	vmov	r2, s0
 8008c1c:	465b      	mov	r3, fp
 8008c1e:	4639      	mov	r1, r7
 8008c20:	f7f7 fe14 	bl	800084c <__aeabi_ddiv>
 8008c24:	ec41 0b10 	vmov	d0, r0, r1
 8008c28:	b003      	add	sp, #12
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c2e <__copybits>:
 8008c2e:	3901      	subs	r1, #1
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	1149      	asrs	r1, r1, #5
 8008c34:	6914      	ldr	r4, [r2, #16]
 8008c36:	3101      	adds	r1, #1
 8008c38:	f102 0314 	add.w	r3, r2, #20
 8008c3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c44:	1f05      	subs	r5, r0, #4
 8008c46:	42a3      	cmp	r3, r4
 8008c48:	d30c      	bcc.n	8008c64 <__copybits+0x36>
 8008c4a:	1aa3      	subs	r3, r4, r2
 8008c4c:	3b11      	subs	r3, #17
 8008c4e:	f023 0303 	bic.w	r3, r3, #3
 8008c52:	3211      	adds	r2, #17
 8008c54:	42a2      	cmp	r2, r4
 8008c56:	bf88      	it	hi
 8008c58:	2300      	movhi	r3, #0
 8008c5a:	4418      	add	r0, r3
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	4288      	cmp	r0, r1
 8008c60:	d305      	bcc.n	8008c6e <__copybits+0x40>
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c68:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c6c:	e7eb      	b.n	8008c46 <__copybits+0x18>
 8008c6e:	f840 3b04 	str.w	r3, [r0], #4
 8008c72:	e7f4      	b.n	8008c5e <__copybits+0x30>

08008c74 <__any_on>:
 8008c74:	f100 0214 	add.w	r2, r0, #20
 8008c78:	6900      	ldr	r0, [r0, #16]
 8008c7a:	114b      	asrs	r3, r1, #5
 8008c7c:	4298      	cmp	r0, r3
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	db11      	blt.n	8008ca6 <__any_on+0x32>
 8008c82:	dd0a      	ble.n	8008c9a <__any_on+0x26>
 8008c84:	f011 011f 	ands.w	r1, r1, #31
 8008c88:	d007      	beq.n	8008c9a <__any_on+0x26>
 8008c8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c8e:	fa24 f001 	lsr.w	r0, r4, r1
 8008c92:	fa00 f101 	lsl.w	r1, r0, r1
 8008c96:	428c      	cmp	r4, r1
 8008c98:	d10b      	bne.n	8008cb2 <__any_on+0x3e>
 8008c9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d803      	bhi.n	8008caa <__any_on+0x36>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	bd10      	pop	{r4, pc}
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	e7f7      	b.n	8008c9a <__any_on+0x26>
 8008caa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	d0f5      	beq.n	8008c9e <__any_on+0x2a>
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e7f6      	b.n	8008ca4 <__any_on+0x30>

08008cb6 <_calloc_r>:
 8008cb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cb8:	fba1 2402 	umull	r2, r4, r1, r2
 8008cbc:	b94c      	cbnz	r4, 8008cd2 <_calloc_r+0x1c>
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	9201      	str	r2, [sp, #4]
 8008cc2:	f000 f87b 	bl	8008dbc <_malloc_r>
 8008cc6:	9a01      	ldr	r2, [sp, #4]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	b930      	cbnz	r0, 8008cda <_calloc_r+0x24>
 8008ccc:	4628      	mov	r0, r5
 8008cce:	b003      	add	sp, #12
 8008cd0:	bd30      	pop	{r4, r5, pc}
 8008cd2:	220c      	movs	r2, #12
 8008cd4:	6002      	str	r2, [r0, #0]
 8008cd6:	2500      	movs	r5, #0
 8008cd8:	e7f8      	b.n	8008ccc <_calloc_r+0x16>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	f7fc fbc0 	bl	8005460 <memset>
 8008ce0:	e7f4      	b.n	8008ccc <_calloc_r+0x16>
	...

08008ce4 <_free_r>:
 8008ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ce6:	2900      	cmp	r1, #0
 8008ce8:	d044      	beq.n	8008d74 <_free_r+0x90>
 8008cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cee:	9001      	str	r0, [sp, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8008cf6:	bfb8      	it	lt
 8008cf8:	18e4      	addlt	r4, r4, r3
 8008cfa:	f000 fab5 	bl	8009268 <__malloc_lock>
 8008cfe:	4a1e      	ldr	r2, [pc, #120]	; (8008d78 <_free_r+0x94>)
 8008d00:	9801      	ldr	r0, [sp, #4]
 8008d02:	6813      	ldr	r3, [r2, #0]
 8008d04:	b933      	cbnz	r3, 8008d14 <_free_r+0x30>
 8008d06:	6063      	str	r3, [r4, #4]
 8008d08:	6014      	str	r4, [r2, #0]
 8008d0a:	b003      	add	sp, #12
 8008d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d10:	f000 bab0 	b.w	8009274 <__malloc_unlock>
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	d908      	bls.n	8008d2a <_free_r+0x46>
 8008d18:	6825      	ldr	r5, [r4, #0]
 8008d1a:	1961      	adds	r1, r4, r5
 8008d1c:	428b      	cmp	r3, r1
 8008d1e:	bf01      	itttt	eq
 8008d20:	6819      	ldreq	r1, [r3, #0]
 8008d22:	685b      	ldreq	r3, [r3, #4]
 8008d24:	1949      	addeq	r1, r1, r5
 8008d26:	6021      	streq	r1, [r4, #0]
 8008d28:	e7ed      	b.n	8008d06 <_free_r+0x22>
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	b10b      	cbz	r3, 8008d34 <_free_r+0x50>
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d9fa      	bls.n	8008d2a <_free_r+0x46>
 8008d34:	6811      	ldr	r1, [r2, #0]
 8008d36:	1855      	adds	r5, r2, r1
 8008d38:	42a5      	cmp	r5, r4
 8008d3a:	d10b      	bne.n	8008d54 <_free_r+0x70>
 8008d3c:	6824      	ldr	r4, [r4, #0]
 8008d3e:	4421      	add	r1, r4
 8008d40:	1854      	adds	r4, r2, r1
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	6011      	str	r1, [r2, #0]
 8008d46:	d1e0      	bne.n	8008d0a <_free_r+0x26>
 8008d48:	681c      	ldr	r4, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	6053      	str	r3, [r2, #4]
 8008d4e:	4421      	add	r1, r4
 8008d50:	6011      	str	r1, [r2, #0]
 8008d52:	e7da      	b.n	8008d0a <_free_r+0x26>
 8008d54:	d902      	bls.n	8008d5c <_free_r+0x78>
 8008d56:	230c      	movs	r3, #12
 8008d58:	6003      	str	r3, [r0, #0]
 8008d5a:	e7d6      	b.n	8008d0a <_free_r+0x26>
 8008d5c:	6825      	ldr	r5, [r4, #0]
 8008d5e:	1961      	adds	r1, r4, r5
 8008d60:	428b      	cmp	r3, r1
 8008d62:	bf04      	itt	eq
 8008d64:	6819      	ldreq	r1, [r3, #0]
 8008d66:	685b      	ldreq	r3, [r3, #4]
 8008d68:	6063      	str	r3, [r4, #4]
 8008d6a:	bf04      	itt	eq
 8008d6c:	1949      	addeq	r1, r1, r5
 8008d6e:	6021      	streq	r1, [r4, #0]
 8008d70:	6054      	str	r4, [r2, #4]
 8008d72:	e7ca      	b.n	8008d0a <_free_r+0x26>
 8008d74:	b003      	add	sp, #12
 8008d76:	bd30      	pop	{r4, r5, pc}
 8008d78:	20000310 	.word	0x20000310

08008d7c <sbrk_aligned>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	4e0e      	ldr	r6, [pc, #56]	; (8008db8 <sbrk_aligned+0x3c>)
 8008d80:	460c      	mov	r4, r1
 8008d82:	6831      	ldr	r1, [r6, #0]
 8008d84:	4605      	mov	r5, r0
 8008d86:	b911      	cbnz	r1, 8008d8e <sbrk_aligned+0x12>
 8008d88:	f000 f9f2 	bl	8009170 <_sbrk_r>
 8008d8c:	6030      	str	r0, [r6, #0]
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4628      	mov	r0, r5
 8008d92:	f000 f9ed 	bl	8009170 <_sbrk_r>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d00a      	beq.n	8008db0 <sbrk_aligned+0x34>
 8008d9a:	1cc4      	adds	r4, r0, #3
 8008d9c:	f024 0403 	bic.w	r4, r4, #3
 8008da0:	42a0      	cmp	r0, r4
 8008da2:	d007      	beq.n	8008db4 <sbrk_aligned+0x38>
 8008da4:	1a21      	subs	r1, r4, r0
 8008da6:	4628      	mov	r0, r5
 8008da8:	f000 f9e2 	bl	8009170 <_sbrk_r>
 8008dac:	3001      	adds	r0, #1
 8008dae:	d101      	bne.n	8008db4 <sbrk_aligned+0x38>
 8008db0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008db4:	4620      	mov	r0, r4
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	20000314 	.word	0x20000314

08008dbc <_malloc_r>:
 8008dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc0:	1ccd      	adds	r5, r1, #3
 8008dc2:	f025 0503 	bic.w	r5, r5, #3
 8008dc6:	3508      	adds	r5, #8
 8008dc8:	2d0c      	cmp	r5, #12
 8008dca:	bf38      	it	cc
 8008dcc:	250c      	movcc	r5, #12
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	db01      	blt.n	8008dd8 <_malloc_r+0x1c>
 8008dd4:	42a9      	cmp	r1, r5
 8008dd6:	d905      	bls.n	8008de4 <_malloc_r+0x28>
 8008dd8:	230c      	movs	r3, #12
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	2600      	movs	r6, #0
 8008dde:	4630      	mov	r0, r6
 8008de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de4:	4e2e      	ldr	r6, [pc, #184]	; (8008ea0 <_malloc_r+0xe4>)
 8008de6:	f000 fa3f 	bl	8009268 <__malloc_lock>
 8008dea:	6833      	ldr	r3, [r6, #0]
 8008dec:	461c      	mov	r4, r3
 8008dee:	bb34      	cbnz	r4, 8008e3e <_malloc_r+0x82>
 8008df0:	4629      	mov	r1, r5
 8008df2:	4638      	mov	r0, r7
 8008df4:	f7ff ffc2 	bl	8008d7c <sbrk_aligned>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	d14d      	bne.n	8008e9a <_malloc_r+0xde>
 8008dfe:	6834      	ldr	r4, [r6, #0]
 8008e00:	4626      	mov	r6, r4
 8008e02:	2e00      	cmp	r6, #0
 8008e04:	d140      	bne.n	8008e88 <_malloc_r+0xcc>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	eb04 0803 	add.w	r8, r4, r3
 8008e10:	f000 f9ae 	bl	8009170 <_sbrk_r>
 8008e14:	4580      	cmp	r8, r0
 8008e16:	d13a      	bne.n	8008e8e <_malloc_r+0xd2>
 8008e18:	6821      	ldr	r1, [r4, #0]
 8008e1a:	3503      	adds	r5, #3
 8008e1c:	1a6d      	subs	r5, r5, r1
 8008e1e:	f025 0503 	bic.w	r5, r5, #3
 8008e22:	3508      	adds	r5, #8
 8008e24:	2d0c      	cmp	r5, #12
 8008e26:	bf38      	it	cc
 8008e28:	250c      	movcc	r5, #12
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	4638      	mov	r0, r7
 8008e2e:	f7ff ffa5 	bl	8008d7c <sbrk_aligned>
 8008e32:	3001      	adds	r0, #1
 8008e34:	d02b      	beq.n	8008e8e <_malloc_r+0xd2>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	442b      	add	r3, r5
 8008e3a:	6023      	str	r3, [r4, #0]
 8008e3c:	e00e      	b.n	8008e5c <_malloc_r+0xa0>
 8008e3e:	6822      	ldr	r2, [r4, #0]
 8008e40:	1b52      	subs	r2, r2, r5
 8008e42:	d41e      	bmi.n	8008e82 <_malloc_r+0xc6>
 8008e44:	2a0b      	cmp	r2, #11
 8008e46:	d916      	bls.n	8008e76 <_malloc_r+0xba>
 8008e48:	1961      	adds	r1, r4, r5
 8008e4a:	42a3      	cmp	r3, r4
 8008e4c:	6025      	str	r5, [r4, #0]
 8008e4e:	bf18      	it	ne
 8008e50:	6059      	strne	r1, [r3, #4]
 8008e52:	6863      	ldr	r3, [r4, #4]
 8008e54:	bf08      	it	eq
 8008e56:	6031      	streq	r1, [r6, #0]
 8008e58:	5162      	str	r2, [r4, r5]
 8008e5a:	604b      	str	r3, [r1, #4]
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	f104 060b 	add.w	r6, r4, #11
 8008e62:	f000 fa07 	bl	8009274 <__malloc_unlock>
 8008e66:	f026 0607 	bic.w	r6, r6, #7
 8008e6a:	1d23      	adds	r3, r4, #4
 8008e6c:	1af2      	subs	r2, r6, r3
 8008e6e:	d0b6      	beq.n	8008dde <_malloc_r+0x22>
 8008e70:	1b9b      	subs	r3, r3, r6
 8008e72:	50a3      	str	r3, [r4, r2]
 8008e74:	e7b3      	b.n	8008dde <_malloc_r+0x22>
 8008e76:	6862      	ldr	r2, [r4, #4]
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	bf0c      	ite	eq
 8008e7c:	6032      	streq	r2, [r6, #0]
 8008e7e:	605a      	strne	r2, [r3, #4]
 8008e80:	e7ec      	b.n	8008e5c <_malloc_r+0xa0>
 8008e82:	4623      	mov	r3, r4
 8008e84:	6864      	ldr	r4, [r4, #4]
 8008e86:	e7b2      	b.n	8008dee <_malloc_r+0x32>
 8008e88:	4634      	mov	r4, r6
 8008e8a:	6876      	ldr	r6, [r6, #4]
 8008e8c:	e7b9      	b.n	8008e02 <_malloc_r+0x46>
 8008e8e:	230c      	movs	r3, #12
 8008e90:	603b      	str	r3, [r7, #0]
 8008e92:	4638      	mov	r0, r7
 8008e94:	f000 f9ee 	bl	8009274 <__malloc_unlock>
 8008e98:	e7a1      	b.n	8008dde <_malloc_r+0x22>
 8008e9a:	6025      	str	r5, [r4, #0]
 8008e9c:	e7de      	b.n	8008e5c <_malloc_r+0xa0>
 8008e9e:	bf00      	nop
 8008ea0:	20000310 	.word	0x20000310

08008ea4 <__ssputs_r>:
 8008ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea8:	688e      	ldr	r6, [r1, #8]
 8008eaa:	429e      	cmp	r6, r3
 8008eac:	4682      	mov	sl, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	4690      	mov	r8, r2
 8008eb2:	461f      	mov	r7, r3
 8008eb4:	d838      	bhi.n	8008f28 <__ssputs_r+0x84>
 8008eb6:	898a      	ldrh	r2, [r1, #12]
 8008eb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ebc:	d032      	beq.n	8008f24 <__ssputs_r+0x80>
 8008ebe:	6825      	ldr	r5, [r4, #0]
 8008ec0:	6909      	ldr	r1, [r1, #16]
 8008ec2:	eba5 0901 	sub.w	r9, r5, r1
 8008ec6:	6965      	ldr	r5, [r4, #20]
 8008ec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ecc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	444b      	add	r3, r9
 8008ed4:	106d      	asrs	r5, r5, #1
 8008ed6:	429d      	cmp	r5, r3
 8008ed8:	bf38      	it	cc
 8008eda:	461d      	movcc	r5, r3
 8008edc:	0553      	lsls	r3, r2, #21
 8008ede:	d531      	bpl.n	8008f44 <__ssputs_r+0xa0>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f7ff ff6b 	bl	8008dbc <_malloc_r>
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	b950      	cbnz	r0, 8008f00 <__ssputs_r+0x5c>
 8008eea:	230c      	movs	r3, #12
 8008eec:	f8ca 3000 	str.w	r3, [sl]
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f00:	6921      	ldr	r1, [r4, #16]
 8008f02:	464a      	mov	r2, r9
 8008f04:	f7ff fa08 	bl	8008318 <memcpy>
 8008f08:	89a3      	ldrh	r3, [r4, #12]
 8008f0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f12:	81a3      	strh	r3, [r4, #12]
 8008f14:	6126      	str	r6, [r4, #16]
 8008f16:	6165      	str	r5, [r4, #20]
 8008f18:	444e      	add	r6, r9
 8008f1a:	eba5 0509 	sub.w	r5, r5, r9
 8008f1e:	6026      	str	r6, [r4, #0]
 8008f20:	60a5      	str	r5, [r4, #8]
 8008f22:	463e      	mov	r6, r7
 8008f24:	42be      	cmp	r6, r7
 8008f26:	d900      	bls.n	8008f2a <__ssputs_r+0x86>
 8008f28:	463e      	mov	r6, r7
 8008f2a:	6820      	ldr	r0, [r4, #0]
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	4641      	mov	r1, r8
 8008f30:	f000 f980 	bl	8009234 <memmove>
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	1b9b      	subs	r3, r3, r6
 8008f38:	60a3      	str	r3, [r4, #8]
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	4433      	add	r3, r6
 8008f3e:	6023      	str	r3, [r4, #0]
 8008f40:	2000      	movs	r0, #0
 8008f42:	e7db      	b.n	8008efc <__ssputs_r+0x58>
 8008f44:	462a      	mov	r2, r5
 8008f46:	f000 f99b 	bl	8009280 <_realloc_r>
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d1e1      	bne.n	8008f14 <__ssputs_r+0x70>
 8008f50:	6921      	ldr	r1, [r4, #16]
 8008f52:	4650      	mov	r0, sl
 8008f54:	f7ff fec6 	bl	8008ce4 <_free_r>
 8008f58:	e7c7      	b.n	8008eea <__ssputs_r+0x46>
	...

08008f5c <_svfiprintf_r>:
 8008f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f60:	4698      	mov	r8, r3
 8008f62:	898b      	ldrh	r3, [r1, #12]
 8008f64:	061b      	lsls	r3, r3, #24
 8008f66:	b09d      	sub	sp, #116	; 0x74
 8008f68:	4607      	mov	r7, r0
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	d50e      	bpl.n	8008f8e <_svfiprintf_r+0x32>
 8008f70:	690b      	ldr	r3, [r1, #16]
 8008f72:	b963      	cbnz	r3, 8008f8e <_svfiprintf_r+0x32>
 8008f74:	2140      	movs	r1, #64	; 0x40
 8008f76:	f7ff ff21 	bl	8008dbc <_malloc_r>
 8008f7a:	6028      	str	r0, [r5, #0]
 8008f7c:	6128      	str	r0, [r5, #16]
 8008f7e:	b920      	cbnz	r0, 8008f8a <_svfiprintf_r+0x2e>
 8008f80:	230c      	movs	r3, #12
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f88:	e0d1      	b.n	800912e <_svfiprintf_r+0x1d2>
 8008f8a:	2340      	movs	r3, #64	; 0x40
 8008f8c:	616b      	str	r3, [r5, #20]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9309      	str	r3, [sp, #36]	; 0x24
 8008f92:	2320      	movs	r3, #32
 8008f94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f9c:	2330      	movs	r3, #48	; 0x30
 8008f9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009148 <_svfiprintf_r+0x1ec>
 8008fa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fa6:	f04f 0901 	mov.w	r9, #1
 8008faa:	4623      	mov	r3, r4
 8008fac:	469a      	mov	sl, r3
 8008fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fb2:	b10a      	cbz	r2, 8008fb8 <_svfiprintf_r+0x5c>
 8008fb4:	2a25      	cmp	r2, #37	; 0x25
 8008fb6:	d1f9      	bne.n	8008fac <_svfiprintf_r+0x50>
 8008fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8008fbc:	d00b      	beq.n	8008fd6 <_svfiprintf_r+0x7a>
 8008fbe:	465b      	mov	r3, fp
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	f7ff ff6d 	bl	8008ea4 <__ssputs_r>
 8008fca:	3001      	adds	r0, #1
 8008fcc:	f000 80aa 	beq.w	8009124 <_svfiprintf_r+0x1c8>
 8008fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fd2:	445a      	add	r2, fp
 8008fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 80a2 	beq.w	8009124 <_svfiprintf_r+0x1c8>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fea:	f10a 0a01 	add.w	sl, sl, #1
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	9307      	str	r3, [sp, #28]
 8008ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ff8:	4654      	mov	r4, sl
 8008ffa:	2205      	movs	r2, #5
 8008ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009000:	4851      	ldr	r0, [pc, #324]	; (8009148 <_svfiprintf_r+0x1ec>)
 8009002:	f7f7 f8ed 	bl	80001e0 <memchr>
 8009006:	9a04      	ldr	r2, [sp, #16]
 8009008:	b9d8      	cbnz	r0, 8009042 <_svfiprintf_r+0xe6>
 800900a:	06d0      	lsls	r0, r2, #27
 800900c:	bf44      	itt	mi
 800900e:	2320      	movmi	r3, #32
 8009010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009014:	0711      	lsls	r1, r2, #28
 8009016:	bf44      	itt	mi
 8009018:	232b      	movmi	r3, #43	; 0x2b
 800901a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800901e:	f89a 3000 	ldrb.w	r3, [sl]
 8009022:	2b2a      	cmp	r3, #42	; 0x2a
 8009024:	d015      	beq.n	8009052 <_svfiprintf_r+0xf6>
 8009026:	9a07      	ldr	r2, [sp, #28]
 8009028:	4654      	mov	r4, sl
 800902a:	2000      	movs	r0, #0
 800902c:	f04f 0c0a 	mov.w	ip, #10
 8009030:	4621      	mov	r1, r4
 8009032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009036:	3b30      	subs	r3, #48	; 0x30
 8009038:	2b09      	cmp	r3, #9
 800903a:	d94e      	bls.n	80090da <_svfiprintf_r+0x17e>
 800903c:	b1b0      	cbz	r0, 800906c <_svfiprintf_r+0x110>
 800903e:	9207      	str	r2, [sp, #28]
 8009040:	e014      	b.n	800906c <_svfiprintf_r+0x110>
 8009042:	eba0 0308 	sub.w	r3, r0, r8
 8009046:	fa09 f303 	lsl.w	r3, r9, r3
 800904a:	4313      	orrs	r3, r2
 800904c:	9304      	str	r3, [sp, #16]
 800904e:	46a2      	mov	sl, r4
 8009050:	e7d2      	b.n	8008ff8 <_svfiprintf_r+0x9c>
 8009052:	9b03      	ldr	r3, [sp, #12]
 8009054:	1d19      	adds	r1, r3, #4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	9103      	str	r1, [sp, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	bfbb      	ittet	lt
 800905e:	425b      	neglt	r3, r3
 8009060:	f042 0202 	orrlt.w	r2, r2, #2
 8009064:	9307      	strge	r3, [sp, #28]
 8009066:	9307      	strlt	r3, [sp, #28]
 8009068:	bfb8      	it	lt
 800906a:	9204      	strlt	r2, [sp, #16]
 800906c:	7823      	ldrb	r3, [r4, #0]
 800906e:	2b2e      	cmp	r3, #46	; 0x2e
 8009070:	d10c      	bne.n	800908c <_svfiprintf_r+0x130>
 8009072:	7863      	ldrb	r3, [r4, #1]
 8009074:	2b2a      	cmp	r3, #42	; 0x2a
 8009076:	d135      	bne.n	80090e4 <_svfiprintf_r+0x188>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	1d1a      	adds	r2, r3, #4
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	9203      	str	r2, [sp, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	bfb8      	it	lt
 8009084:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009088:	3402      	adds	r4, #2
 800908a:	9305      	str	r3, [sp, #20]
 800908c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009158 <_svfiprintf_r+0x1fc>
 8009090:	7821      	ldrb	r1, [r4, #0]
 8009092:	2203      	movs	r2, #3
 8009094:	4650      	mov	r0, sl
 8009096:	f7f7 f8a3 	bl	80001e0 <memchr>
 800909a:	b140      	cbz	r0, 80090ae <_svfiprintf_r+0x152>
 800909c:	2340      	movs	r3, #64	; 0x40
 800909e:	eba0 000a 	sub.w	r0, r0, sl
 80090a2:	fa03 f000 	lsl.w	r0, r3, r0
 80090a6:	9b04      	ldr	r3, [sp, #16]
 80090a8:	4303      	orrs	r3, r0
 80090aa:	3401      	adds	r4, #1
 80090ac:	9304      	str	r3, [sp, #16]
 80090ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b2:	4826      	ldr	r0, [pc, #152]	; (800914c <_svfiprintf_r+0x1f0>)
 80090b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090b8:	2206      	movs	r2, #6
 80090ba:	f7f7 f891 	bl	80001e0 <memchr>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d038      	beq.n	8009134 <_svfiprintf_r+0x1d8>
 80090c2:	4b23      	ldr	r3, [pc, #140]	; (8009150 <_svfiprintf_r+0x1f4>)
 80090c4:	bb1b      	cbnz	r3, 800910e <_svfiprintf_r+0x1b2>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	3307      	adds	r3, #7
 80090ca:	f023 0307 	bic.w	r3, r3, #7
 80090ce:	3308      	adds	r3, #8
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d4:	4433      	add	r3, r6
 80090d6:	9309      	str	r3, [sp, #36]	; 0x24
 80090d8:	e767      	b.n	8008faa <_svfiprintf_r+0x4e>
 80090da:	fb0c 3202 	mla	r2, ip, r2, r3
 80090de:	460c      	mov	r4, r1
 80090e0:	2001      	movs	r0, #1
 80090e2:	e7a5      	b.n	8009030 <_svfiprintf_r+0xd4>
 80090e4:	2300      	movs	r3, #0
 80090e6:	3401      	adds	r4, #1
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	4619      	mov	r1, r3
 80090ec:	f04f 0c0a 	mov.w	ip, #10
 80090f0:	4620      	mov	r0, r4
 80090f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090f6:	3a30      	subs	r2, #48	; 0x30
 80090f8:	2a09      	cmp	r2, #9
 80090fa:	d903      	bls.n	8009104 <_svfiprintf_r+0x1a8>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0c5      	beq.n	800908c <_svfiprintf_r+0x130>
 8009100:	9105      	str	r1, [sp, #20]
 8009102:	e7c3      	b.n	800908c <_svfiprintf_r+0x130>
 8009104:	fb0c 2101 	mla	r1, ip, r1, r2
 8009108:	4604      	mov	r4, r0
 800910a:	2301      	movs	r3, #1
 800910c:	e7f0      	b.n	80090f0 <_svfiprintf_r+0x194>
 800910e:	ab03      	add	r3, sp, #12
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	462a      	mov	r2, r5
 8009114:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <_svfiprintf_r+0x1f8>)
 8009116:	a904      	add	r1, sp, #16
 8009118:	4638      	mov	r0, r7
 800911a:	f7fc fa49 	bl	80055b0 <_printf_float>
 800911e:	1c42      	adds	r2, r0, #1
 8009120:	4606      	mov	r6, r0
 8009122:	d1d6      	bne.n	80090d2 <_svfiprintf_r+0x176>
 8009124:	89ab      	ldrh	r3, [r5, #12]
 8009126:	065b      	lsls	r3, r3, #25
 8009128:	f53f af2c 	bmi.w	8008f84 <_svfiprintf_r+0x28>
 800912c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800912e:	b01d      	add	sp, #116	; 0x74
 8009130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009134:	ab03      	add	r3, sp, #12
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	462a      	mov	r2, r5
 800913a:	4b06      	ldr	r3, [pc, #24]	; (8009154 <_svfiprintf_r+0x1f8>)
 800913c:	a904      	add	r1, sp, #16
 800913e:	4638      	mov	r0, r7
 8009140:	f7fc fcda 	bl	8005af8 <_printf_i>
 8009144:	e7eb      	b.n	800911e <_svfiprintf_r+0x1c2>
 8009146:	bf00      	nop
 8009148:	0800a1b4 	.word	0x0800a1b4
 800914c:	0800a1be 	.word	0x0800a1be
 8009150:	080055b1 	.word	0x080055b1
 8009154:	08008ea5 	.word	0x08008ea5
 8009158:	0800a1ba 	.word	0x0800a1ba
 800915c:	00000000 	.word	0x00000000

08009160 <nan>:
 8009160:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009168 <nan+0x8>
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	00000000 	.word	0x00000000
 800916c:	7ff80000 	.word	0x7ff80000

08009170 <_sbrk_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d06      	ldr	r5, [pc, #24]	; (800918c <_sbrk_r+0x1c>)
 8009174:	2300      	movs	r3, #0
 8009176:	4604      	mov	r4, r0
 8009178:	4608      	mov	r0, r1
 800917a:	602b      	str	r3, [r5, #0]
 800917c:	f7f8 fa3a 	bl	80015f4 <_sbrk>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d102      	bne.n	800918a <_sbrk_r+0x1a>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	b103      	cbz	r3, 800918a <_sbrk_r+0x1a>
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	20000318 	.word	0x20000318

08009190 <strncmp>:
 8009190:	b510      	push	{r4, lr}
 8009192:	b17a      	cbz	r2, 80091b4 <strncmp+0x24>
 8009194:	4603      	mov	r3, r0
 8009196:	3901      	subs	r1, #1
 8009198:	1884      	adds	r4, r0, r2
 800919a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800919e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80091a2:	4290      	cmp	r0, r2
 80091a4:	d101      	bne.n	80091aa <strncmp+0x1a>
 80091a6:	42a3      	cmp	r3, r4
 80091a8:	d101      	bne.n	80091ae <strncmp+0x1e>
 80091aa:	1a80      	subs	r0, r0, r2
 80091ac:	bd10      	pop	{r4, pc}
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d1f3      	bne.n	800919a <strncmp+0xa>
 80091b2:	e7fa      	b.n	80091aa <strncmp+0x1a>
 80091b4:	4610      	mov	r0, r2
 80091b6:	e7f9      	b.n	80091ac <strncmp+0x1c>

080091b8 <__ascii_wctomb>:
 80091b8:	b149      	cbz	r1, 80091ce <__ascii_wctomb+0x16>
 80091ba:	2aff      	cmp	r2, #255	; 0xff
 80091bc:	bf85      	ittet	hi
 80091be:	238a      	movhi	r3, #138	; 0x8a
 80091c0:	6003      	strhi	r3, [r0, #0]
 80091c2:	700a      	strbls	r2, [r1, #0]
 80091c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80091c8:	bf98      	it	ls
 80091ca:	2001      	movls	r0, #1
 80091cc:	4770      	bx	lr
 80091ce:	4608      	mov	r0, r1
 80091d0:	4770      	bx	lr
	...

080091d4 <__assert_func>:
 80091d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091d6:	4614      	mov	r4, r2
 80091d8:	461a      	mov	r2, r3
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <__assert_func+0x2c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4605      	mov	r5, r0
 80091e0:	68d8      	ldr	r0, [r3, #12]
 80091e2:	b14c      	cbz	r4, 80091f8 <__assert_func+0x24>
 80091e4:	4b07      	ldr	r3, [pc, #28]	; (8009204 <__assert_func+0x30>)
 80091e6:	9100      	str	r1, [sp, #0]
 80091e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091ec:	4906      	ldr	r1, [pc, #24]	; (8009208 <__assert_func+0x34>)
 80091ee:	462b      	mov	r3, r5
 80091f0:	f000 f80e 	bl	8009210 <fiprintf>
 80091f4:	f000 fa8c 	bl	8009710 <abort>
 80091f8:	4b04      	ldr	r3, [pc, #16]	; (800920c <__assert_func+0x38>)
 80091fa:	461c      	mov	r4, r3
 80091fc:	e7f3      	b.n	80091e6 <__assert_func+0x12>
 80091fe:	bf00      	nop
 8009200:	20000014 	.word	0x20000014
 8009204:	0800a1c5 	.word	0x0800a1c5
 8009208:	0800a1d2 	.word	0x0800a1d2
 800920c:	0800a200 	.word	0x0800a200

08009210 <fiprintf>:
 8009210:	b40e      	push	{r1, r2, r3}
 8009212:	b503      	push	{r0, r1, lr}
 8009214:	4601      	mov	r1, r0
 8009216:	ab03      	add	r3, sp, #12
 8009218:	4805      	ldr	r0, [pc, #20]	; (8009230 <fiprintf+0x20>)
 800921a:	f853 2b04 	ldr.w	r2, [r3], #4
 800921e:	6800      	ldr	r0, [r0, #0]
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	f000 f885 	bl	8009330 <_vfiprintf_r>
 8009226:	b002      	add	sp, #8
 8009228:	f85d eb04 	ldr.w	lr, [sp], #4
 800922c:	b003      	add	sp, #12
 800922e:	4770      	bx	lr
 8009230:	20000014 	.word	0x20000014

08009234 <memmove>:
 8009234:	4288      	cmp	r0, r1
 8009236:	b510      	push	{r4, lr}
 8009238:	eb01 0402 	add.w	r4, r1, r2
 800923c:	d902      	bls.n	8009244 <memmove+0x10>
 800923e:	4284      	cmp	r4, r0
 8009240:	4623      	mov	r3, r4
 8009242:	d807      	bhi.n	8009254 <memmove+0x20>
 8009244:	1e43      	subs	r3, r0, #1
 8009246:	42a1      	cmp	r1, r4
 8009248:	d008      	beq.n	800925c <memmove+0x28>
 800924a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800924e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009252:	e7f8      	b.n	8009246 <memmove+0x12>
 8009254:	4402      	add	r2, r0
 8009256:	4601      	mov	r1, r0
 8009258:	428a      	cmp	r2, r1
 800925a:	d100      	bne.n	800925e <memmove+0x2a>
 800925c:	bd10      	pop	{r4, pc}
 800925e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009266:	e7f7      	b.n	8009258 <memmove+0x24>

08009268 <__malloc_lock>:
 8009268:	4801      	ldr	r0, [pc, #4]	; (8009270 <__malloc_lock+0x8>)
 800926a:	f000 bc11 	b.w	8009a90 <__retarget_lock_acquire_recursive>
 800926e:	bf00      	nop
 8009270:	2000031c 	.word	0x2000031c

08009274 <__malloc_unlock>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__malloc_unlock+0x8>)
 8009276:	f000 bc0c 	b.w	8009a92 <__retarget_lock_release_recursive>
 800927a:	bf00      	nop
 800927c:	2000031c 	.word	0x2000031c

08009280 <_realloc_r>:
 8009280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009284:	4680      	mov	r8, r0
 8009286:	4614      	mov	r4, r2
 8009288:	460e      	mov	r6, r1
 800928a:	b921      	cbnz	r1, 8009296 <_realloc_r+0x16>
 800928c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009290:	4611      	mov	r1, r2
 8009292:	f7ff bd93 	b.w	8008dbc <_malloc_r>
 8009296:	b92a      	cbnz	r2, 80092a4 <_realloc_r+0x24>
 8009298:	f7ff fd24 	bl	8008ce4 <_free_r>
 800929c:	4625      	mov	r5, r4
 800929e:	4628      	mov	r0, r5
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a4:	f000 fc5c 	bl	8009b60 <_malloc_usable_size_r>
 80092a8:	4284      	cmp	r4, r0
 80092aa:	4607      	mov	r7, r0
 80092ac:	d802      	bhi.n	80092b4 <_realloc_r+0x34>
 80092ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092b2:	d812      	bhi.n	80092da <_realloc_r+0x5a>
 80092b4:	4621      	mov	r1, r4
 80092b6:	4640      	mov	r0, r8
 80092b8:	f7ff fd80 	bl	8008dbc <_malloc_r>
 80092bc:	4605      	mov	r5, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d0ed      	beq.n	800929e <_realloc_r+0x1e>
 80092c2:	42bc      	cmp	r4, r7
 80092c4:	4622      	mov	r2, r4
 80092c6:	4631      	mov	r1, r6
 80092c8:	bf28      	it	cs
 80092ca:	463a      	movcs	r2, r7
 80092cc:	f7ff f824 	bl	8008318 <memcpy>
 80092d0:	4631      	mov	r1, r6
 80092d2:	4640      	mov	r0, r8
 80092d4:	f7ff fd06 	bl	8008ce4 <_free_r>
 80092d8:	e7e1      	b.n	800929e <_realloc_r+0x1e>
 80092da:	4635      	mov	r5, r6
 80092dc:	e7df      	b.n	800929e <_realloc_r+0x1e>

080092de <__sfputc_r>:
 80092de:	6893      	ldr	r3, [r2, #8]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	b410      	push	{r4}
 80092e6:	6093      	str	r3, [r2, #8]
 80092e8:	da08      	bge.n	80092fc <__sfputc_r+0x1e>
 80092ea:	6994      	ldr	r4, [r2, #24]
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	db01      	blt.n	80092f4 <__sfputc_r+0x16>
 80092f0:	290a      	cmp	r1, #10
 80092f2:	d103      	bne.n	80092fc <__sfputc_r+0x1e>
 80092f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092f8:	f000 b94a 	b.w	8009590 <__swbuf_r>
 80092fc:	6813      	ldr	r3, [r2, #0]
 80092fe:	1c58      	adds	r0, r3, #1
 8009300:	6010      	str	r0, [r2, #0]
 8009302:	7019      	strb	r1, [r3, #0]
 8009304:	4608      	mov	r0, r1
 8009306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800930a:	4770      	bx	lr

0800930c <__sfputs_r>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	4606      	mov	r6, r0
 8009310:	460f      	mov	r7, r1
 8009312:	4614      	mov	r4, r2
 8009314:	18d5      	adds	r5, r2, r3
 8009316:	42ac      	cmp	r4, r5
 8009318:	d101      	bne.n	800931e <__sfputs_r+0x12>
 800931a:	2000      	movs	r0, #0
 800931c:	e007      	b.n	800932e <__sfputs_r+0x22>
 800931e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009322:	463a      	mov	r2, r7
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff ffda 	bl	80092de <__sfputc_r>
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	d1f3      	bne.n	8009316 <__sfputs_r+0xa>
 800932e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009330 <_vfiprintf_r>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	460d      	mov	r5, r1
 8009336:	b09d      	sub	sp, #116	; 0x74
 8009338:	4614      	mov	r4, r2
 800933a:	4698      	mov	r8, r3
 800933c:	4606      	mov	r6, r0
 800933e:	b118      	cbz	r0, 8009348 <_vfiprintf_r+0x18>
 8009340:	6983      	ldr	r3, [r0, #24]
 8009342:	b90b      	cbnz	r3, 8009348 <_vfiprintf_r+0x18>
 8009344:	f000 fb06 	bl	8009954 <__sinit>
 8009348:	4b89      	ldr	r3, [pc, #548]	; (8009570 <_vfiprintf_r+0x240>)
 800934a:	429d      	cmp	r5, r3
 800934c:	d11b      	bne.n	8009386 <_vfiprintf_r+0x56>
 800934e:	6875      	ldr	r5, [r6, #4]
 8009350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009352:	07d9      	lsls	r1, r3, #31
 8009354:	d405      	bmi.n	8009362 <_vfiprintf_r+0x32>
 8009356:	89ab      	ldrh	r3, [r5, #12]
 8009358:	059a      	lsls	r2, r3, #22
 800935a:	d402      	bmi.n	8009362 <_vfiprintf_r+0x32>
 800935c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800935e:	f000 fb97 	bl	8009a90 <__retarget_lock_acquire_recursive>
 8009362:	89ab      	ldrh	r3, [r5, #12]
 8009364:	071b      	lsls	r3, r3, #28
 8009366:	d501      	bpl.n	800936c <_vfiprintf_r+0x3c>
 8009368:	692b      	ldr	r3, [r5, #16]
 800936a:	b9eb      	cbnz	r3, 80093a8 <_vfiprintf_r+0x78>
 800936c:	4629      	mov	r1, r5
 800936e:	4630      	mov	r0, r6
 8009370:	f000 f960 	bl	8009634 <__swsetup_r>
 8009374:	b1c0      	cbz	r0, 80093a8 <_vfiprintf_r+0x78>
 8009376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009378:	07dc      	lsls	r4, r3, #31
 800937a:	d50e      	bpl.n	800939a <_vfiprintf_r+0x6a>
 800937c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009380:	b01d      	add	sp, #116	; 0x74
 8009382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009386:	4b7b      	ldr	r3, [pc, #492]	; (8009574 <_vfiprintf_r+0x244>)
 8009388:	429d      	cmp	r5, r3
 800938a:	d101      	bne.n	8009390 <_vfiprintf_r+0x60>
 800938c:	68b5      	ldr	r5, [r6, #8]
 800938e:	e7df      	b.n	8009350 <_vfiprintf_r+0x20>
 8009390:	4b79      	ldr	r3, [pc, #484]	; (8009578 <_vfiprintf_r+0x248>)
 8009392:	429d      	cmp	r5, r3
 8009394:	bf08      	it	eq
 8009396:	68f5      	ldreq	r5, [r6, #12]
 8009398:	e7da      	b.n	8009350 <_vfiprintf_r+0x20>
 800939a:	89ab      	ldrh	r3, [r5, #12]
 800939c:	0598      	lsls	r0, r3, #22
 800939e:	d4ed      	bmi.n	800937c <_vfiprintf_r+0x4c>
 80093a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093a2:	f000 fb76 	bl	8009a92 <__retarget_lock_release_recursive>
 80093a6:	e7e9      	b.n	800937c <_vfiprintf_r+0x4c>
 80093a8:	2300      	movs	r3, #0
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	2320      	movs	r3, #32
 80093ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093b6:	2330      	movs	r3, #48	; 0x30
 80093b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800957c <_vfiprintf_r+0x24c>
 80093bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093c0:	f04f 0901 	mov.w	r9, #1
 80093c4:	4623      	mov	r3, r4
 80093c6:	469a      	mov	sl, r3
 80093c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093cc:	b10a      	cbz	r2, 80093d2 <_vfiprintf_r+0xa2>
 80093ce:	2a25      	cmp	r2, #37	; 0x25
 80093d0:	d1f9      	bne.n	80093c6 <_vfiprintf_r+0x96>
 80093d2:	ebba 0b04 	subs.w	fp, sl, r4
 80093d6:	d00b      	beq.n	80093f0 <_vfiprintf_r+0xc0>
 80093d8:	465b      	mov	r3, fp
 80093da:	4622      	mov	r2, r4
 80093dc:	4629      	mov	r1, r5
 80093de:	4630      	mov	r0, r6
 80093e0:	f7ff ff94 	bl	800930c <__sfputs_r>
 80093e4:	3001      	adds	r0, #1
 80093e6:	f000 80aa 	beq.w	800953e <_vfiprintf_r+0x20e>
 80093ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093ec:	445a      	add	r2, fp
 80093ee:	9209      	str	r2, [sp, #36]	; 0x24
 80093f0:	f89a 3000 	ldrb.w	r3, [sl]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80a2 	beq.w	800953e <_vfiprintf_r+0x20e>
 80093fa:	2300      	movs	r3, #0
 80093fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009404:	f10a 0a01 	add.w	sl, sl, #1
 8009408:	9304      	str	r3, [sp, #16]
 800940a:	9307      	str	r3, [sp, #28]
 800940c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009410:	931a      	str	r3, [sp, #104]	; 0x68
 8009412:	4654      	mov	r4, sl
 8009414:	2205      	movs	r2, #5
 8009416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800941a:	4858      	ldr	r0, [pc, #352]	; (800957c <_vfiprintf_r+0x24c>)
 800941c:	f7f6 fee0 	bl	80001e0 <memchr>
 8009420:	9a04      	ldr	r2, [sp, #16]
 8009422:	b9d8      	cbnz	r0, 800945c <_vfiprintf_r+0x12c>
 8009424:	06d1      	lsls	r1, r2, #27
 8009426:	bf44      	itt	mi
 8009428:	2320      	movmi	r3, #32
 800942a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800942e:	0713      	lsls	r3, r2, #28
 8009430:	bf44      	itt	mi
 8009432:	232b      	movmi	r3, #43	; 0x2b
 8009434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009438:	f89a 3000 	ldrb.w	r3, [sl]
 800943c:	2b2a      	cmp	r3, #42	; 0x2a
 800943e:	d015      	beq.n	800946c <_vfiprintf_r+0x13c>
 8009440:	9a07      	ldr	r2, [sp, #28]
 8009442:	4654      	mov	r4, sl
 8009444:	2000      	movs	r0, #0
 8009446:	f04f 0c0a 	mov.w	ip, #10
 800944a:	4621      	mov	r1, r4
 800944c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009450:	3b30      	subs	r3, #48	; 0x30
 8009452:	2b09      	cmp	r3, #9
 8009454:	d94e      	bls.n	80094f4 <_vfiprintf_r+0x1c4>
 8009456:	b1b0      	cbz	r0, 8009486 <_vfiprintf_r+0x156>
 8009458:	9207      	str	r2, [sp, #28]
 800945a:	e014      	b.n	8009486 <_vfiprintf_r+0x156>
 800945c:	eba0 0308 	sub.w	r3, r0, r8
 8009460:	fa09 f303 	lsl.w	r3, r9, r3
 8009464:	4313      	orrs	r3, r2
 8009466:	9304      	str	r3, [sp, #16]
 8009468:	46a2      	mov	sl, r4
 800946a:	e7d2      	b.n	8009412 <_vfiprintf_r+0xe2>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	1d19      	adds	r1, r3, #4
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	9103      	str	r1, [sp, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	bfbb      	ittet	lt
 8009478:	425b      	neglt	r3, r3
 800947a:	f042 0202 	orrlt.w	r2, r2, #2
 800947e:	9307      	strge	r3, [sp, #28]
 8009480:	9307      	strlt	r3, [sp, #28]
 8009482:	bfb8      	it	lt
 8009484:	9204      	strlt	r2, [sp, #16]
 8009486:	7823      	ldrb	r3, [r4, #0]
 8009488:	2b2e      	cmp	r3, #46	; 0x2e
 800948a:	d10c      	bne.n	80094a6 <_vfiprintf_r+0x176>
 800948c:	7863      	ldrb	r3, [r4, #1]
 800948e:	2b2a      	cmp	r3, #42	; 0x2a
 8009490:	d135      	bne.n	80094fe <_vfiprintf_r+0x1ce>
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	1d1a      	adds	r2, r3, #4
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	9203      	str	r2, [sp, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	bfb8      	it	lt
 800949e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094a2:	3402      	adds	r4, #2
 80094a4:	9305      	str	r3, [sp, #20]
 80094a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800958c <_vfiprintf_r+0x25c>
 80094aa:	7821      	ldrb	r1, [r4, #0]
 80094ac:	2203      	movs	r2, #3
 80094ae:	4650      	mov	r0, sl
 80094b0:	f7f6 fe96 	bl	80001e0 <memchr>
 80094b4:	b140      	cbz	r0, 80094c8 <_vfiprintf_r+0x198>
 80094b6:	2340      	movs	r3, #64	; 0x40
 80094b8:	eba0 000a 	sub.w	r0, r0, sl
 80094bc:	fa03 f000 	lsl.w	r0, r3, r0
 80094c0:	9b04      	ldr	r3, [sp, #16]
 80094c2:	4303      	orrs	r3, r0
 80094c4:	3401      	adds	r4, #1
 80094c6:	9304      	str	r3, [sp, #16]
 80094c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094cc:	482c      	ldr	r0, [pc, #176]	; (8009580 <_vfiprintf_r+0x250>)
 80094ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094d2:	2206      	movs	r2, #6
 80094d4:	f7f6 fe84 	bl	80001e0 <memchr>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d03f      	beq.n	800955c <_vfiprintf_r+0x22c>
 80094dc:	4b29      	ldr	r3, [pc, #164]	; (8009584 <_vfiprintf_r+0x254>)
 80094de:	bb1b      	cbnz	r3, 8009528 <_vfiprintf_r+0x1f8>
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	3307      	adds	r3, #7
 80094e4:	f023 0307 	bic.w	r3, r3, #7
 80094e8:	3308      	adds	r3, #8
 80094ea:	9303      	str	r3, [sp, #12]
 80094ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ee:	443b      	add	r3, r7
 80094f0:	9309      	str	r3, [sp, #36]	; 0x24
 80094f2:	e767      	b.n	80093c4 <_vfiprintf_r+0x94>
 80094f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80094f8:	460c      	mov	r4, r1
 80094fa:	2001      	movs	r0, #1
 80094fc:	e7a5      	b.n	800944a <_vfiprintf_r+0x11a>
 80094fe:	2300      	movs	r3, #0
 8009500:	3401      	adds	r4, #1
 8009502:	9305      	str	r3, [sp, #20]
 8009504:	4619      	mov	r1, r3
 8009506:	f04f 0c0a 	mov.w	ip, #10
 800950a:	4620      	mov	r0, r4
 800950c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009510:	3a30      	subs	r2, #48	; 0x30
 8009512:	2a09      	cmp	r2, #9
 8009514:	d903      	bls.n	800951e <_vfiprintf_r+0x1ee>
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0c5      	beq.n	80094a6 <_vfiprintf_r+0x176>
 800951a:	9105      	str	r1, [sp, #20]
 800951c:	e7c3      	b.n	80094a6 <_vfiprintf_r+0x176>
 800951e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009522:	4604      	mov	r4, r0
 8009524:	2301      	movs	r3, #1
 8009526:	e7f0      	b.n	800950a <_vfiprintf_r+0x1da>
 8009528:	ab03      	add	r3, sp, #12
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	462a      	mov	r2, r5
 800952e:	4b16      	ldr	r3, [pc, #88]	; (8009588 <_vfiprintf_r+0x258>)
 8009530:	a904      	add	r1, sp, #16
 8009532:	4630      	mov	r0, r6
 8009534:	f7fc f83c 	bl	80055b0 <_printf_float>
 8009538:	4607      	mov	r7, r0
 800953a:	1c78      	adds	r0, r7, #1
 800953c:	d1d6      	bne.n	80094ec <_vfiprintf_r+0x1bc>
 800953e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009540:	07d9      	lsls	r1, r3, #31
 8009542:	d405      	bmi.n	8009550 <_vfiprintf_r+0x220>
 8009544:	89ab      	ldrh	r3, [r5, #12]
 8009546:	059a      	lsls	r2, r3, #22
 8009548:	d402      	bmi.n	8009550 <_vfiprintf_r+0x220>
 800954a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800954c:	f000 faa1 	bl	8009a92 <__retarget_lock_release_recursive>
 8009550:	89ab      	ldrh	r3, [r5, #12]
 8009552:	065b      	lsls	r3, r3, #25
 8009554:	f53f af12 	bmi.w	800937c <_vfiprintf_r+0x4c>
 8009558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800955a:	e711      	b.n	8009380 <_vfiprintf_r+0x50>
 800955c:	ab03      	add	r3, sp, #12
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	462a      	mov	r2, r5
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <_vfiprintf_r+0x258>)
 8009564:	a904      	add	r1, sp, #16
 8009566:	4630      	mov	r0, r6
 8009568:	f7fc fac6 	bl	8005af8 <_printf_i>
 800956c:	e7e4      	b.n	8009538 <_vfiprintf_r+0x208>
 800956e:	bf00      	nop
 8009570:	0800a224 	.word	0x0800a224
 8009574:	0800a244 	.word	0x0800a244
 8009578:	0800a204 	.word	0x0800a204
 800957c:	0800a1b4 	.word	0x0800a1b4
 8009580:	0800a1be 	.word	0x0800a1be
 8009584:	080055b1 	.word	0x080055b1
 8009588:	0800930d 	.word	0x0800930d
 800958c:	0800a1ba 	.word	0x0800a1ba

08009590 <__swbuf_r>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	460e      	mov	r6, r1
 8009594:	4614      	mov	r4, r2
 8009596:	4605      	mov	r5, r0
 8009598:	b118      	cbz	r0, 80095a2 <__swbuf_r+0x12>
 800959a:	6983      	ldr	r3, [r0, #24]
 800959c:	b90b      	cbnz	r3, 80095a2 <__swbuf_r+0x12>
 800959e:	f000 f9d9 	bl	8009954 <__sinit>
 80095a2:	4b21      	ldr	r3, [pc, #132]	; (8009628 <__swbuf_r+0x98>)
 80095a4:	429c      	cmp	r4, r3
 80095a6:	d12b      	bne.n	8009600 <__swbuf_r+0x70>
 80095a8:	686c      	ldr	r4, [r5, #4]
 80095aa:	69a3      	ldr	r3, [r4, #24]
 80095ac:	60a3      	str	r3, [r4, #8]
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	071a      	lsls	r2, r3, #28
 80095b2:	d52f      	bpl.n	8009614 <__swbuf_r+0x84>
 80095b4:	6923      	ldr	r3, [r4, #16]
 80095b6:	b36b      	cbz	r3, 8009614 <__swbuf_r+0x84>
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	6820      	ldr	r0, [r4, #0]
 80095bc:	1ac0      	subs	r0, r0, r3
 80095be:	6963      	ldr	r3, [r4, #20]
 80095c0:	b2f6      	uxtb	r6, r6
 80095c2:	4283      	cmp	r3, r0
 80095c4:	4637      	mov	r7, r6
 80095c6:	dc04      	bgt.n	80095d2 <__swbuf_r+0x42>
 80095c8:	4621      	mov	r1, r4
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f92e 	bl	800982c <_fflush_r>
 80095d0:	bb30      	cbnz	r0, 8009620 <__swbuf_r+0x90>
 80095d2:	68a3      	ldr	r3, [r4, #8]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	60a3      	str	r3, [r4, #8]
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	6022      	str	r2, [r4, #0]
 80095de:	701e      	strb	r6, [r3, #0]
 80095e0:	6963      	ldr	r3, [r4, #20]
 80095e2:	3001      	adds	r0, #1
 80095e4:	4283      	cmp	r3, r0
 80095e6:	d004      	beq.n	80095f2 <__swbuf_r+0x62>
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	07db      	lsls	r3, r3, #31
 80095ec:	d506      	bpl.n	80095fc <__swbuf_r+0x6c>
 80095ee:	2e0a      	cmp	r6, #10
 80095f0:	d104      	bne.n	80095fc <__swbuf_r+0x6c>
 80095f2:	4621      	mov	r1, r4
 80095f4:	4628      	mov	r0, r5
 80095f6:	f000 f919 	bl	800982c <_fflush_r>
 80095fa:	b988      	cbnz	r0, 8009620 <__swbuf_r+0x90>
 80095fc:	4638      	mov	r0, r7
 80095fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <__swbuf_r+0x9c>)
 8009602:	429c      	cmp	r4, r3
 8009604:	d101      	bne.n	800960a <__swbuf_r+0x7a>
 8009606:	68ac      	ldr	r4, [r5, #8]
 8009608:	e7cf      	b.n	80095aa <__swbuf_r+0x1a>
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <__swbuf_r+0xa0>)
 800960c:	429c      	cmp	r4, r3
 800960e:	bf08      	it	eq
 8009610:	68ec      	ldreq	r4, [r5, #12]
 8009612:	e7ca      	b.n	80095aa <__swbuf_r+0x1a>
 8009614:	4621      	mov	r1, r4
 8009616:	4628      	mov	r0, r5
 8009618:	f000 f80c 	bl	8009634 <__swsetup_r>
 800961c:	2800      	cmp	r0, #0
 800961e:	d0cb      	beq.n	80095b8 <__swbuf_r+0x28>
 8009620:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009624:	e7ea      	b.n	80095fc <__swbuf_r+0x6c>
 8009626:	bf00      	nop
 8009628:	0800a224 	.word	0x0800a224
 800962c:	0800a244 	.word	0x0800a244
 8009630:	0800a204 	.word	0x0800a204

08009634 <__swsetup_r>:
 8009634:	4b32      	ldr	r3, [pc, #200]	; (8009700 <__swsetup_r+0xcc>)
 8009636:	b570      	push	{r4, r5, r6, lr}
 8009638:	681d      	ldr	r5, [r3, #0]
 800963a:	4606      	mov	r6, r0
 800963c:	460c      	mov	r4, r1
 800963e:	b125      	cbz	r5, 800964a <__swsetup_r+0x16>
 8009640:	69ab      	ldr	r3, [r5, #24]
 8009642:	b913      	cbnz	r3, 800964a <__swsetup_r+0x16>
 8009644:	4628      	mov	r0, r5
 8009646:	f000 f985 	bl	8009954 <__sinit>
 800964a:	4b2e      	ldr	r3, [pc, #184]	; (8009704 <__swsetup_r+0xd0>)
 800964c:	429c      	cmp	r4, r3
 800964e:	d10f      	bne.n	8009670 <__swsetup_r+0x3c>
 8009650:	686c      	ldr	r4, [r5, #4]
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009658:	0719      	lsls	r1, r3, #28
 800965a:	d42c      	bmi.n	80096b6 <__swsetup_r+0x82>
 800965c:	06dd      	lsls	r5, r3, #27
 800965e:	d411      	bmi.n	8009684 <__swsetup_r+0x50>
 8009660:	2309      	movs	r3, #9
 8009662:	6033      	str	r3, [r6, #0]
 8009664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800966e:	e03e      	b.n	80096ee <__swsetup_r+0xba>
 8009670:	4b25      	ldr	r3, [pc, #148]	; (8009708 <__swsetup_r+0xd4>)
 8009672:	429c      	cmp	r4, r3
 8009674:	d101      	bne.n	800967a <__swsetup_r+0x46>
 8009676:	68ac      	ldr	r4, [r5, #8]
 8009678:	e7eb      	b.n	8009652 <__swsetup_r+0x1e>
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <__swsetup_r+0xd8>)
 800967c:	429c      	cmp	r4, r3
 800967e:	bf08      	it	eq
 8009680:	68ec      	ldreq	r4, [r5, #12]
 8009682:	e7e6      	b.n	8009652 <__swsetup_r+0x1e>
 8009684:	0758      	lsls	r0, r3, #29
 8009686:	d512      	bpl.n	80096ae <__swsetup_r+0x7a>
 8009688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800968a:	b141      	cbz	r1, 800969e <__swsetup_r+0x6a>
 800968c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009690:	4299      	cmp	r1, r3
 8009692:	d002      	beq.n	800969a <__swsetup_r+0x66>
 8009694:	4630      	mov	r0, r6
 8009696:	f7ff fb25 	bl	8008ce4 <_free_r>
 800969a:	2300      	movs	r3, #0
 800969c:	6363      	str	r3, [r4, #52]	; 0x34
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	2300      	movs	r3, #0
 80096a8:	6063      	str	r3, [r4, #4]
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	f043 0308 	orr.w	r3, r3, #8
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	6923      	ldr	r3, [r4, #16]
 80096b8:	b94b      	cbnz	r3, 80096ce <__swsetup_r+0x9a>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096c4:	d003      	beq.n	80096ce <__swsetup_r+0x9a>
 80096c6:	4621      	mov	r1, r4
 80096c8:	4630      	mov	r0, r6
 80096ca:	f000 fa09 	bl	8009ae0 <__smakebuf_r>
 80096ce:	89a0      	ldrh	r0, [r4, #12]
 80096d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096d4:	f010 0301 	ands.w	r3, r0, #1
 80096d8:	d00a      	beq.n	80096f0 <__swsetup_r+0xbc>
 80096da:	2300      	movs	r3, #0
 80096dc:	60a3      	str	r3, [r4, #8]
 80096de:	6963      	ldr	r3, [r4, #20]
 80096e0:	425b      	negs	r3, r3
 80096e2:	61a3      	str	r3, [r4, #24]
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	b943      	cbnz	r3, 80096fa <__swsetup_r+0xc6>
 80096e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096ec:	d1ba      	bne.n	8009664 <__swsetup_r+0x30>
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
 80096f0:	0781      	lsls	r1, r0, #30
 80096f2:	bf58      	it	pl
 80096f4:	6963      	ldrpl	r3, [r4, #20]
 80096f6:	60a3      	str	r3, [r4, #8]
 80096f8:	e7f4      	b.n	80096e4 <__swsetup_r+0xb0>
 80096fa:	2000      	movs	r0, #0
 80096fc:	e7f7      	b.n	80096ee <__swsetup_r+0xba>
 80096fe:	bf00      	nop
 8009700:	20000014 	.word	0x20000014
 8009704:	0800a224 	.word	0x0800a224
 8009708:	0800a244 	.word	0x0800a244
 800970c:	0800a204 	.word	0x0800a204

08009710 <abort>:
 8009710:	b508      	push	{r3, lr}
 8009712:	2006      	movs	r0, #6
 8009714:	f000 fa54 	bl	8009bc0 <raise>
 8009718:	2001      	movs	r0, #1
 800971a:	f7f7 fef3 	bl	8001504 <_exit>
	...

08009720 <__sflush_r>:
 8009720:	898a      	ldrh	r2, [r1, #12]
 8009722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009726:	4605      	mov	r5, r0
 8009728:	0710      	lsls	r0, r2, #28
 800972a:	460c      	mov	r4, r1
 800972c:	d458      	bmi.n	80097e0 <__sflush_r+0xc0>
 800972e:	684b      	ldr	r3, [r1, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	dc05      	bgt.n	8009740 <__sflush_r+0x20>
 8009734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009736:	2b00      	cmp	r3, #0
 8009738:	dc02      	bgt.n	8009740 <__sflush_r+0x20>
 800973a:	2000      	movs	r0, #0
 800973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009742:	2e00      	cmp	r6, #0
 8009744:	d0f9      	beq.n	800973a <__sflush_r+0x1a>
 8009746:	2300      	movs	r3, #0
 8009748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800974c:	682f      	ldr	r7, [r5, #0]
 800974e:	602b      	str	r3, [r5, #0]
 8009750:	d032      	beq.n	80097b8 <__sflush_r+0x98>
 8009752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	075a      	lsls	r2, r3, #29
 8009758:	d505      	bpl.n	8009766 <__sflush_r+0x46>
 800975a:	6863      	ldr	r3, [r4, #4]
 800975c:	1ac0      	subs	r0, r0, r3
 800975e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009760:	b10b      	cbz	r3, 8009766 <__sflush_r+0x46>
 8009762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009764:	1ac0      	subs	r0, r0, r3
 8009766:	2300      	movs	r3, #0
 8009768:	4602      	mov	r2, r0
 800976a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800976c:	6a21      	ldr	r1, [r4, #32]
 800976e:	4628      	mov	r0, r5
 8009770:	47b0      	blx	r6
 8009772:	1c43      	adds	r3, r0, #1
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	d106      	bne.n	8009786 <__sflush_r+0x66>
 8009778:	6829      	ldr	r1, [r5, #0]
 800977a:	291d      	cmp	r1, #29
 800977c:	d82c      	bhi.n	80097d8 <__sflush_r+0xb8>
 800977e:	4a2a      	ldr	r2, [pc, #168]	; (8009828 <__sflush_r+0x108>)
 8009780:	40ca      	lsrs	r2, r1
 8009782:	07d6      	lsls	r6, r2, #31
 8009784:	d528      	bpl.n	80097d8 <__sflush_r+0xb8>
 8009786:	2200      	movs	r2, #0
 8009788:	6062      	str	r2, [r4, #4]
 800978a:	04d9      	lsls	r1, r3, #19
 800978c:	6922      	ldr	r2, [r4, #16]
 800978e:	6022      	str	r2, [r4, #0]
 8009790:	d504      	bpl.n	800979c <__sflush_r+0x7c>
 8009792:	1c42      	adds	r2, r0, #1
 8009794:	d101      	bne.n	800979a <__sflush_r+0x7a>
 8009796:	682b      	ldr	r3, [r5, #0]
 8009798:	b903      	cbnz	r3, 800979c <__sflush_r+0x7c>
 800979a:	6560      	str	r0, [r4, #84]	; 0x54
 800979c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800979e:	602f      	str	r7, [r5, #0]
 80097a0:	2900      	cmp	r1, #0
 80097a2:	d0ca      	beq.n	800973a <__sflush_r+0x1a>
 80097a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a8:	4299      	cmp	r1, r3
 80097aa:	d002      	beq.n	80097b2 <__sflush_r+0x92>
 80097ac:	4628      	mov	r0, r5
 80097ae:	f7ff fa99 	bl	8008ce4 <_free_r>
 80097b2:	2000      	movs	r0, #0
 80097b4:	6360      	str	r0, [r4, #52]	; 0x34
 80097b6:	e7c1      	b.n	800973c <__sflush_r+0x1c>
 80097b8:	6a21      	ldr	r1, [r4, #32]
 80097ba:	2301      	movs	r3, #1
 80097bc:	4628      	mov	r0, r5
 80097be:	47b0      	blx	r6
 80097c0:	1c41      	adds	r1, r0, #1
 80097c2:	d1c7      	bne.n	8009754 <__sflush_r+0x34>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0c4      	beq.n	8009754 <__sflush_r+0x34>
 80097ca:	2b1d      	cmp	r3, #29
 80097cc:	d001      	beq.n	80097d2 <__sflush_r+0xb2>
 80097ce:	2b16      	cmp	r3, #22
 80097d0:	d101      	bne.n	80097d6 <__sflush_r+0xb6>
 80097d2:	602f      	str	r7, [r5, #0]
 80097d4:	e7b1      	b.n	800973a <__sflush_r+0x1a>
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097dc:	81a3      	strh	r3, [r4, #12]
 80097de:	e7ad      	b.n	800973c <__sflush_r+0x1c>
 80097e0:	690f      	ldr	r7, [r1, #16]
 80097e2:	2f00      	cmp	r7, #0
 80097e4:	d0a9      	beq.n	800973a <__sflush_r+0x1a>
 80097e6:	0793      	lsls	r3, r2, #30
 80097e8:	680e      	ldr	r6, [r1, #0]
 80097ea:	bf08      	it	eq
 80097ec:	694b      	ldreq	r3, [r1, #20]
 80097ee:	600f      	str	r7, [r1, #0]
 80097f0:	bf18      	it	ne
 80097f2:	2300      	movne	r3, #0
 80097f4:	eba6 0807 	sub.w	r8, r6, r7
 80097f8:	608b      	str	r3, [r1, #8]
 80097fa:	f1b8 0f00 	cmp.w	r8, #0
 80097fe:	dd9c      	ble.n	800973a <__sflush_r+0x1a>
 8009800:	6a21      	ldr	r1, [r4, #32]
 8009802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009804:	4643      	mov	r3, r8
 8009806:	463a      	mov	r2, r7
 8009808:	4628      	mov	r0, r5
 800980a:	47b0      	blx	r6
 800980c:	2800      	cmp	r0, #0
 800980e:	dc06      	bgt.n	800981e <__sflush_r+0xfe>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800981c:	e78e      	b.n	800973c <__sflush_r+0x1c>
 800981e:	4407      	add	r7, r0
 8009820:	eba8 0800 	sub.w	r8, r8, r0
 8009824:	e7e9      	b.n	80097fa <__sflush_r+0xda>
 8009826:	bf00      	nop
 8009828:	20400001 	.word	0x20400001

0800982c <_fflush_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	690b      	ldr	r3, [r1, #16]
 8009830:	4605      	mov	r5, r0
 8009832:	460c      	mov	r4, r1
 8009834:	b913      	cbnz	r3, 800983c <_fflush_r+0x10>
 8009836:	2500      	movs	r5, #0
 8009838:	4628      	mov	r0, r5
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	b118      	cbz	r0, 8009846 <_fflush_r+0x1a>
 800983e:	6983      	ldr	r3, [r0, #24]
 8009840:	b90b      	cbnz	r3, 8009846 <_fflush_r+0x1a>
 8009842:	f000 f887 	bl	8009954 <__sinit>
 8009846:	4b14      	ldr	r3, [pc, #80]	; (8009898 <_fflush_r+0x6c>)
 8009848:	429c      	cmp	r4, r3
 800984a:	d11b      	bne.n	8009884 <_fflush_r+0x58>
 800984c:	686c      	ldr	r4, [r5, #4]
 800984e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0ef      	beq.n	8009836 <_fflush_r+0xa>
 8009856:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009858:	07d0      	lsls	r0, r2, #31
 800985a:	d404      	bmi.n	8009866 <_fflush_r+0x3a>
 800985c:	0599      	lsls	r1, r3, #22
 800985e:	d402      	bmi.n	8009866 <_fflush_r+0x3a>
 8009860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009862:	f000 f915 	bl	8009a90 <__retarget_lock_acquire_recursive>
 8009866:	4628      	mov	r0, r5
 8009868:	4621      	mov	r1, r4
 800986a:	f7ff ff59 	bl	8009720 <__sflush_r>
 800986e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009870:	07da      	lsls	r2, r3, #31
 8009872:	4605      	mov	r5, r0
 8009874:	d4e0      	bmi.n	8009838 <_fflush_r+0xc>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	059b      	lsls	r3, r3, #22
 800987a:	d4dd      	bmi.n	8009838 <_fflush_r+0xc>
 800987c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800987e:	f000 f908 	bl	8009a92 <__retarget_lock_release_recursive>
 8009882:	e7d9      	b.n	8009838 <_fflush_r+0xc>
 8009884:	4b05      	ldr	r3, [pc, #20]	; (800989c <_fflush_r+0x70>)
 8009886:	429c      	cmp	r4, r3
 8009888:	d101      	bne.n	800988e <_fflush_r+0x62>
 800988a:	68ac      	ldr	r4, [r5, #8]
 800988c:	e7df      	b.n	800984e <_fflush_r+0x22>
 800988e:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <_fflush_r+0x74>)
 8009890:	429c      	cmp	r4, r3
 8009892:	bf08      	it	eq
 8009894:	68ec      	ldreq	r4, [r5, #12]
 8009896:	e7da      	b.n	800984e <_fflush_r+0x22>
 8009898:	0800a224 	.word	0x0800a224
 800989c:	0800a244 	.word	0x0800a244
 80098a0:	0800a204 	.word	0x0800a204

080098a4 <std>:
 80098a4:	2300      	movs	r3, #0
 80098a6:	b510      	push	{r4, lr}
 80098a8:	4604      	mov	r4, r0
 80098aa:	e9c0 3300 	strd	r3, r3, [r0]
 80098ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098b2:	6083      	str	r3, [r0, #8]
 80098b4:	8181      	strh	r1, [r0, #12]
 80098b6:	6643      	str	r3, [r0, #100]	; 0x64
 80098b8:	81c2      	strh	r2, [r0, #14]
 80098ba:	6183      	str	r3, [r0, #24]
 80098bc:	4619      	mov	r1, r3
 80098be:	2208      	movs	r2, #8
 80098c0:	305c      	adds	r0, #92	; 0x5c
 80098c2:	f7fb fdcd 	bl	8005460 <memset>
 80098c6:	4b05      	ldr	r3, [pc, #20]	; (80098dc <std+0x38>)
 80098c8:	6263      	str	r3, [r4, #36]	; 0x24
 80098ca:	4b05      	ldr	r3, [pc, #20]	; (80098e0 <std+0x3c>)
 80098cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80098ce:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <std+0x40>)
 80098d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098d2:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <std+0x44>)
 80098d4:	6224      	str	r4, [r4, #32]
 80098d6:	6323      	str	r3, [r4, #48]	; 0x30
 80098d8:	bd10      	pop	{r4, pc}
 80098da:	bf00      	nop
 80098dc:	08009bf9 	.word	0x08009bf9
 80098e0:	08009c1b 	.word	0x08009c1b
 80098e4:	08009c53 	.word	0x08009c53
 80098e8:	08009c77 	.word	0x08009c77

080098ec <_cleanup_r>:
 80098ec:	4901      	ldr	r1, [pc, #4]	; (80098f4 <_cleanup_r+0x8>)
 80098ee:	f000 b8af 	b.w	8009a50 <_fwalk_reent>
 80098f2:	bf00      	nop
 80098f4:	0800982d 	.word	0x0800982d

080098f8 <__sfmoreglue>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	2268      	movs	r2, #104	; 0x68
 80098fc:	1e4d      	subs	r5, r1, #1
 80098fe:	4355      	muls	r5, r2
 8009900:	460e      	mov	r6, r1
 8009902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009906:	f7ff fa59 	bl	8008dbc <_malloc_r>
 800990a:	4604      	mov	r4, r0
 800990c:	b140      	cbz	r0, 8009920 <__sfmoreglue+0x28>
 800990e:	2100      	movs	r1, #0
 8009910:	e9c0 1600 	strd	r1, r6, [r0]
 8009914:	300c      	adds	r0, #12
 8009916:	60a0      	str	r0, [r4, #8]
 8009918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800991c:	f7fb fda0 	bl	8005460 <memset>
 8009920:	4620      	mov	r0, r4
 8009922:	bd70      	pop	{r4, r5, r6, pc}

08009924 <__sfp_lock_acquire>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__sfp_lock_acquire+0x8>)
 8009926:	f000 b8b3 	b.w	8009a90 <__retarget_lock_acquire_recursive>
 800992a:	bf00      	nop
 800992c:	2000031d 	.word	0x2000031d

08009930 <__sfp_lock_release>:
 8009930:	4801      	ldr	r0, [pc, #4]	; (8009938 <__sfp_lock_release+0x8>)
 8009932:	f000 b8ae 	b.w	8009a92 <__retarget_lock_release_recursive>
 8009936:	bf00      	nop
 8009938:	2000031d 	.word	0x2000031d

0800993c <__sinit_lock_acquire>:
 800993c:	4801      	ldr	r0, [pc, #4]	; (8009944 <__sinit_lock_acquire+0x8>)
 800993e:	f000 b8a7 	b.w	8009a90 <__retarget_lock_acquire_recursive>
 8009942:	bf00      	nop
 8009944:	2000031e 	.word	0x2000031e

08009948 <__sinit_lock_release>:
 8009948:	4801      	ldr	r0, [pc, #4]	; (8009950 <__sinit_lock_release+0x8>)
 800994a:	f000 b8a2 	b.w	8009a92 <__retarget_lock_release_recursive>
 800994e:	bf00      	nop
 8009950:	2000031e 	.word	0x2000031e

08009954 <__sinit>:
 8009954:	b510      	push	{r4, lr}
 8009956:	4604      	mov	r4, r0
 8009958:	f7ff fff0 	bl	800993c <__sinit_lock_acquire>
 800995c:	69a3      	ldr	r3, [r4, #24]
 800995e:	b11b      	cbz	r3, 8009968 <__sinit+0x14>
 8009960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009964:	f7ff bff0 	b.w	8009948 <__sinit_lock_release>
 8009968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800996c:	6523      	str	r3, [r4, #80]	; 0x50
 800996e:	4b13      	ldr	r3, [pc, #76]	; (80099bc <__sinit+0x68>)
 8009970:	4a13      	ldr	r2, [pc, #76]	; (80099c0 <__sinit+0x6c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	62a2      	str	r2, [r4, #40]	; 0x28
 8009976:	42a3      	cmp	r3, r4
 8009978:	bf04      	itt	eq
 800997a:	2301      	moveq	r3, #1
 800997c:	61a3      	streq	r3, [r4, #24]
 800997e:	4620      	mov	r0, r4
 8009980:	f000 f820 	bl	80099c4 <__sfp>
 8009984:	6060      	str	r0, [r4, #4]
 8009986:	4620      	mov	r0, r4
 8009988:	f000 f81c 	bl	80099c4 <__sfp>
 800998c:	60a0      	str	r0, [r4, #8]
 800998e:	4620      	mov	r0, r4
 8009990:	f000 f818 	bl	80099c4 <__sfp>
 8009994:	2200      	movs	r2, #0
 8009996:	60e0      	str	r0, [r4, #12]
 8009998:	2104      	movs	r1, #4
 800999a:	6860      	ldr	r0, [r4, #4]
 800999c:	f7ff ff82 	bl	80098a4 <std>
 80099a0:	68a0      	ldr	r0, [r4, #8]
 80099a2:	2201      	movs	r2, #1
 80099a4:	2109      	movs	r1, #9
 80099a6:	f7ff ff7d 	bl	80098a4 <std>
 80099aa:	68e0      	ldr	r0, [r4, #12]
 80099ac:	2202      	movs	r2, #2
 80099ae:	2112      	movs	r1, #18
 80099b0:	f7ff ff78 	bl	80098a4 <std>
 80099b4:	2301      	movs	r3, #1
 80099b6:	61a3      	str	r3, [r4, #24]
 80099b8:	e7d2      	b.n	8009960 <__sinit+0xc>
 80099ba:	bf00      	nop
 80099bc:	08009dc0 	.word	0x08009dc0
 80099c0:	080098ed 	.word	0x080098ed

080099c4 <__sfp>:
 80099c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c6:	4607      	mov	r7, r0
 80099c8:	f7ff ffac 	bl	8009924 <__sfp_lock_acquire>
 80099cc:	4b1e      	ldr	r3, [pc, #120]	; (8009a48 <__sfp+0x84>)
 80099ce:	681e      	ldr	r6, [r3, #0]
 80099d0:	69b3      	ldr	r3, [r6, #24]
 80099d2:	b913      	cbnz	r3, 80099da <__sfp+0x16>
 80099d4:	4630      	mov	r0, r6
 80099d6:	f7ff ffbd 	bl	8009954 <__sinit>
 80099da:	3648      	adds	r6, #72	; 0x48
 80099dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	d503      	bpl.n	80099ec <__sfp+0x28>
 80099e4:	6833      	ldr	r3, [r6, #0]
 80099e6:	b30b      	cbz	r3, 8009a2c <__sfp+0x68>
 80099e8:	6836      	ldr	r6, [r6, #0]
 80099ea:	e7f7      	b.n	80099dc <__sfp+0x18>
 80099ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099f0:	b9d5      	cbnz	r5, 8009a28 <__sfp+0x64>
 80099f2:	4b16      	ldr	r3, [pc, #88]	; (8009a4c <__sfp+0x88>)
 80099f4:	60e3      	str	r3, [r4, #12]
 80099f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099fa:	6665      	str	r5, [r4, #100]	; 0x64
 80099fc:	f000 f847 	bl	8009a8e <__retarget_lock_init_recursive>
 8009a00:	f7ff ff96 	bl	8009930 <__sfp_lock_release>
 8009a04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a0c:	6025      	str	r5, [r4, #0]
 8009a0e:	61a5      	str	r5, [r4, #24]
 8009a10:	2208      	movs	r2, #8
 8009a12:	4629      	mov	r1, r5
 8009a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a18:	f7fb fd22 	bl	8005460 <memset>
 8009a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a24:	4620      	mov	r0, r4
 8009a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a28:	3468      	adds	r4, #104	; 0x68
 8009a2a:	e7d9      	b.n	80099e0 <__sfp+0x1c>
 8009a2c:	2104      	movs	r1, #4
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f7ff ff62 	bl	80098f8 <__sfmoreglue>
 8009a34:	4604      	mov	r4, r0
 8009a36:	6030      	str	r0, [r6, #0]
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d1d5      	bne.n	80099e8 <__sfp+0x24>
 8009a3c:	f7ff ff78 	bl	8009930 <__sfp_lock_release>
 8009a40:	230c      	movs	r3, #12
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	e7ee      	b.n	8009a24 <__sfp+0x60>
 8009a46:	bf00      	nop
 8009a48:	08009dc0 	.word	0x08009dc0
 8009a4c:	ffff0001 	.word	0xffff0001

08009a50 <_fwalk_reent>:
 8009a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a54:	4606      	mov	r6, r0
 8009a56:	4688      	mov	r8, r1
 8009a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a5c:	2700      	movs	r7, #0
 8009a5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a62:	f1b9 0901 	subs.w	r9, r9, #1
 8009a66:	d505      	bpl.n	8009a74 <_fwalk_reent+0x24>
 8009a68:	6824      	ldr	r4, [r4, #0]
 8009a6a:	2c00      	cmp	r4, #0
 8009a6c:	d1f7      	bne.n	8009a5e <_fwalk_reent+0xe>
 8009a6e:	4638      	mov	r0, r7
 8009a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a74:	89ab      	ldrh	r3, [r5, #12]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d907      	bls.n	8009a8a <_fwalk_reent+0x3a>
 8009a7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	d003      	beq.n	8009a8a <_fwalk_reent+0x3a>
 8009a82:	4629      	mov	r1, r5
 8009a84:	4630      	mov	r0, r6
 8009a86:	47c0      	blx	r8
 8009a88:	4307      	orrs	r7, r0
 8009a8a:	3568      	adds	r5, #104	; 0x68
 8009a8c:	e7e9      	b.n	8009a62 <_fwalk_reent+0x12>

08009a8e <__retarget_lock_init_recursive>:
 8009a8e:	4770      	bx	lr

08009a90 <__retarget_lock_acquire_recursive>:
 8009a90:	4770      	bx	lr

08009a92 <__retarget_lock_release_recursive>:
 8009a92:	4770      	bx	lr

08009a94 <__swhatbuf_r>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	460e      	mov	r6, r1
 8009a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	b096      	sub	sp, #88	; 0x58
 8009aa0:	4614      	mov	r4, r2
 8009aa2:	461d      	mov	r5, r3
 8009aa4:	da08      	bge.n	8009ab8 <__swhatbuf_r+0x24>
 8009aa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	602a      	str	r2, [r5, #0]
 8009aae:	061a      	lsls	r2, r3, #24
 8009ab0:	d410      	bmi.n	8009ad4 <__swhatbuf_r+0x40>
 8009ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab6:	e00e      	b.n	8009ad6 <__swhatbuf_r+0x42>
 8009ab8:	466a      	mov	r2, sp
 8009aba:	f000 f903 	bl	8009cc4 <_fstat_r>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	dbf1      	blt.n	8009aa6 <__swhatbuf_r+0x12>
 8009ac2:	9a01      	ldr	r2, [sp, #4]
 8009ac4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ac8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009acc:	425a      	negs	r2, r3
 8009ace:	415a      	adcs	r2, r3
 8009ad0:	602a      	str	r2, [r5, #0]
 8009ad2:	e7ee      	b.n	8009ab2 <__swhatbuf_r+0x1e>
 8009ad4:	2340      	movs	r3, #64	; 0x40
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	b016      	add	sp, #88	; 0x58
 8009adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ae0 <__smakebuf_r>:
 8009ae0:	898b      	ldrh	r3, [r1, #12]
 8009ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ae4:	079d      	lsls	r5, r3, #30
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	460c      	mov	r4, r1
 8009aea:	d507      	bpl.n	8009afc <__smakebuf_r+0x1c>
 8009aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	6123      	str	r3, [r4, #16]
 8009af4:	2301      	movs	r3, #1
 8009af6:	6163      	str	r3, [r4, #20]
 8009af8:	b002      	add	sp, #8
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	ab01      	add	r3, sp, #4
 8009afe:	466a      	mov	r2, sp
 8009b00:	f7ff ffc8 	bl	8009a94 <__swhatbuf_r>
 8009b04:	9900      	ldr	r1, [sp, #0]
 8009b06:	4605      	mov	r5, r0
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7ff f957 	bl	8008dbc <_malloc_r>
 8009b0e:	b948      	cbnz	r0, 8009b24 <__smakebuf_r+0x44>
 8009b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b14:	059a      	lsls	r2, r3, #22
 8009b16:	d4ef      	bmi.n	8009af8 <__smakebuf_r+0x18>
 8009b18:	f023 0303 	bic.w	r3, r3, #3
 8009b1c:	f043 0302 	orr.w	r3, r3, #2
 8009b20:	81a3      	strh	r3, [r4, #12]
 8009b22:	e7e3      	b.n	8009aec <__smakebuf_r+0xc>
 8009b24:	4b0d      	ldr	r3, [pc, #52]	; (8009b5c <__smakebuf_r+0x7c>)
 8009b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	6020      	str	r0, [r4, #0]
 8009b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b30:	81a3      	strh	r3, [r4, #12]
 8009b32:	9b00      	ldr	r3, [sp, #0]
 8009b34:	6163      	str	r3, [r4, #20]
 8009b36:	9b01      	ldr	r3, [sp, #4]
 8009b38:	6120      	str	r0, [r4, #16]
 8009b3a:	b15b      	cbz	r3, 8009b54 <__smakebuf_r+0x74>
 8009b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b40:	4630      	mov	r0, r6
 8009b42:	f000 f8d1 	bl	8009ce8 <_isatty_r>
 8009b46:	b128      	cbz	r0, 8009b54 <__smakebuf_r+0x74>
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	f023 0303 	bic.w	r3, r3, #3
 8009b4e:	f043 0301 	orr.w	r3, r3, #1
 8009b52:	81a3      	strh	r3, [r4, #12]
 8009b54:	89a0      	ldrh	r0, [r4, #12]
 8009b56:	4305      	orrs	r5, r0
 8009b58:	81a5      	strh	r5, [r4, #12]
 8009b5a:	e7cd      	b.n	8009af8 <__smakebuf_r+0x18>
 8009b5c:	080098ed 	.word	0x080098ed

08009b60 <_malloc_usable_size_r>:
 8009b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b64:	1f18      	subs	r0, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfbc      	itt	lt
 8009b6a:	580b      	ldrlt	r3, [r1, r0]
 8009b6c:	18c0      	addlt	r0, r0, r3
 8009b6e:	4770      	bx	lr

08009b70 <_raise_r>:
 8009b70:	291f      	cmp	r1, #31
 8009b72:	b538      	push	{r3, r4, r5, lr}
 8009b74:	4604      	mov	r4, r0
 8009b76:	460d      	mov	r5, r1
 8009b78:	d904      	bls.n	8009b84 <_raise_r+0x14>
 8009b7a:	2316      	movs	r3, #22
 8009b7c:	6003      	str	r3, [r0, #0]
 8009b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b86:	b112      	cbz	r2, 8009b8e <_raise_r+0x1e>
 8009b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b8c:	b94b      	cbnz	r3, 8009ba2 <_raise_r+0x32>
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 f830 	bl	8009bf4 <_getpid_r>
 8009b94:	462a      	mov	r2, r5
 8009b96:	4601      	mov	r1, r0
 8009b98:	4620      	mov	r0, r4
 8009b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b9e:	f000 b817 	b.w	8009bd0 <_kill_r>
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d00a      	beq.n	8009bbc <_raise_r+0x4c>
 8009ba6:	1c59      	adds	r1, r3, #1
 8009ba8:	d103      	bne.n	8009bb2 <_raise_r+0x42>
 8009baa:	2316      	movs	r3, #22
 8009bac:	6003      	str	r3, [r0, #0]
 8009bae:	2001      	movs	r0, #1
 8009bb0:	e7e7      	b.n	8009b82 <_raise_r+0x12>
 8009bb2:	2400      	movs	r4, #0
 8009bb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bb8:	4628      	mov	r0, r5
 8009bba:	4798      	blx	r3
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	e7e0      	b.n	8009b82 <_raise_r+0x12>

08009bc0 <raise>:
 8009bc0:	4b02      	ldr	r3, [pc, #8]	; (8009bcc <raise+0xc>)
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	f7ff bfd3 	b.w	8009b70 <_raise_r>
 8009bca:	bf00      	nop
 8009bcc:	20000014 	.word	0x20000014

08009bd0 <_kill_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	4d07      	ldr	r5, [pc, #28]	; (8009bf0 <_kill_r+0x20>)
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	4608      	mov	r0, r1
 8009bda:	4611      	mov	r1, r2
 8009bdc:	602b      	str	r3, [r5, #0]
 8009bde:	f7f7 fc81 	bl	80014e4 <_kill>
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	d102      	bne.n	8009bec <_kill_r+0x1c>
 8009be6:	682b      	ldr	r3, [r5, #0]
 8009be8:	b103      	cbz	r3, 8009bec <_kill_r+0x1c>
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	bd38      	pop	{r3, r4, r5, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000318 	.word	0x20000318

08009bf4 <_getpid_r>:
 8009bf4:	f7f7 bc6e 	b.w	80014d4 <_getpid>

08009bf8 <__sread>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c00:	f000 f894 	bl	8009d2c <_read_r>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	bfab      	itete	ge
 8009c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c0c:	181b      	addge	r3, r3, r0
 8009c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c12:	bfac      	ite	ge
 8009c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c16:	81a3      	strhlt	r3, [r4, #12]
 8009c18:	bd10      	pop	{r4, pc}

08009c1a <__swrite>:
 8009c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1e:	461f      	mov	r7, r3
 8009c20:	898b      	ldrh	r3, [r1, #12]
 8009c22:	05db      	lsls	r3, r3, #23
 8009c24:	4605      	mov	r5, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	4616      	mov	r6, r2
 8009c2a:	d505      	bpl.n	8009c38 <__swrite+0x1e>
 8009c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c30:	2302      	movs	r3, #2
 8009c32:	2200      	movs	r2, #0
 8009c34:	f000 f868 	bl	8009d08 <_lseek_r>
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c42:	81a3      	strh	r3, [r4, #12]
 8009c44:	4632      	mov	r2, r6
 8009c46:	463b      	mov	r3, r7
 8009c48:	4628      	mov	r0, r5
 8009c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c4e:	f000 b817 	b.w	8009c80 <_write_r>

08009c52 <__sseek>:
 8009c52:	b510      	push	{r4, lr}
 8009c54:	460c      	mov	r4, r1
 8009c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c5a:	f000 f855 	bl	8009d08 <_lseek_r>
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	bf15      	itete	ne
 8009c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c6e:	81a3      	strheq	r3, [r4, #12]
 8009c70:	bf18      	it	ne
 8009c72:	81a3      	strhne	r3, [r4, #12]
 8009c74:	bd10      	pop	{r4, pc}

08009c76 <__sclose>:
 8009c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c7a:	f000 b813 	b.w	8009ca4 <_close_r>
	...

08009c80 <_write_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d07      	ldr	r5, [pc, #28]	; (8009ca0 <_write_r+0x20>)
 8009c84:	4604      	mov	r4, r0
 8009c86:	4608      	mov	r0, r1
 8009c88:	4611      	mov	r1, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	602a      	str	r2, [r5, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f7f7 fc5f 	bl	8001552 <_write>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_write_r+0x1e>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_write_r+0x1e>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20000318 	.word	0x20000318

08009ca4 <_close_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d06      	ldr	r5, [pc, #24]	; (8009cc0 <_close_r+0x1c>)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4604      	mov	r4, r0
 8009cac:	4608      	mov	r0, r1
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	f7f7 fc6b 	bl	800158a <_close>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d102      	bne.n	8009cbe <_close_r+0x1a>
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	b103      	cbz	r3, 8009cbe <_close_r+0x1a>
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	20000318 	.word	0x20000318

08009cc4 <_fstat_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4d07      	ldr	r5, [pc, #28]	; (8009ce4 <_fstat_r+0x20>)
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4604      	mov	r4, r0
 8009ccc:	4608      	mov	r0, r1
 8009cce:	4611      	mov	r1, r2
 8009cd0:	602b      	str	r3, [r5, #0]
 8009cd2:	f7f7 fc66 	bl	80015a2 <_fstat>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	d102      	bne.n	8009ce0 <_fstat_r+0x1c>
 8009cda:	682b      	ldr	r3, [r5, #0]
 8009cdc:	b103      	cbz	r3, 8009ce0 <_fstat_r+0x1c>
 8009cde:	6023      	str	r3, [r4, #0]
 8009ce0:	bd38      	pop	{r3, r4, r5, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000318 	.word	0x20000318

08009ce8 <_isatty_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d06      	ldr	r5, [pc, #24]	; (8009d04 <_isatty_r+0x1c>)
 8009cec:	2300      	movs	r3, #0
 8009cee:	4604      	mov	r4, r0
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	602b      	str	r3, [r5, #0]
 8009cf4:	f7f7 fc65 	bl	80015c2 <_isatty>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_isatty_r+0x1a>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_isatty_r+0x1a>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	20000318 	.word	0x20000318

08009d08 <_lseek_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4d07      	ldr	r5, [pc, #28]	; (8009d28 <_lseek_r+0x20>)
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	4608      	mov	r0, r1
 8009d10:	4611      	mov	r1, r2
 8009d12:	2200      	movs	r2, #0
 8009d14:	602a      	str	r2, [r5, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	f7f7 fc5e 	bl	80015d8 <_lseek>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_lseek_r+0x1e>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_lseek_r+0x1e>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	20000318 	.word	0x20000318

08009d2c <_read_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d07      	ldr	r5, [pc, #28]	; (8009d4c <_read_r+0x20>)
 8009d30:	4604      	mov	r4, r0
 8009d32:	4608      	mov	r0, r1
 8009d34:	4611      	mov	r1, r2
 8009d36:	2200      	movs	r2, #0
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f7f7 fbec 	bl	8001518 <_read>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_read_r+0x1e>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_read_r+0x1e>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	20000318 	.word	0x20000318

08009d50 <_init>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	bf00      	nop
 8009d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d56:	bc08      	pop	{r3}
 8009d58:	469e      	mov	lr, r3
 8009d5a:	4770      	bx	lr

08009d5c <_fini>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	bf00      	nop
 8009d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d62:	bc08      	pop	{r3}
 8009d64:	469e      	mov	lr, r3
 8009d66:	4770      	bx	lr
