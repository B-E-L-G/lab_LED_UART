
lab_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a50c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800a6a0  0800a6a0  0001a6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac24  0800ac24  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac24  0800ac24  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac24  0800ac24  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac24  0800ac24  0001ac24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac28  0800ac28  0001ac28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ac2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000015c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000344  20000344  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010768  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002268  00000000  00000000  00030980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00032be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d08  00000000  00000000  000339c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211c3  00000000  00000000  000346d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fc3  00000000  00000000  00055893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4a0f  00000000  00000000  00066856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b265  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051f8  00000000  00000000  0012b2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a684 	.word	0x0800a684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a684 	.word	0x0800a684

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0c      	blt.n	8000d40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_ClearPendingIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	3360      	adds	r3, #96	; 0x60
 8000d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0c2      	sub	sp, #264	; 0x108
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fd45 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f88b 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 f96b 	bl	8001038 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d62:	f000 f939 	bl	8000fd8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d66:	f000 f8e3 	bl	8000f30 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ring_init(&uart_ring, buff, sizeof(buff) / sizeof(buff[0]) ); // Initialize UART receiver ring buffer.
 8000d6a:	2220      	movs	r2, #32
 8000d6c:	4934      	ldr	r1, [pc, #208]	; (8000e40 <main+0xf0>)
 8000d6e:	4835      	ldr	r0, [pc, #212]	; (8000e44 <main+0xf4>)
 8000d70:	f000 fa56 	bl	8001220 <ring_init>
  sprintf((char*)tstring,"UART IT Enter command 'F = ' \r\n");
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4933      	ldr	r1, [pc, #204]	; (8000e48 <main+0xf8>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f005 fa5a 	bl	8006234 <siprintf>
  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fa2d 	bl	80001e4 <strlen>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	482d      	ldr	r0, [pc, #180]	; (8000e4c <main+0xfc>)
 8000d96:	f003 f989 	bl	80040ac <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2,uart_ring.buffer,1);						 // Start UART receiver in the non blocking mode
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <main+0xf4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	482a      	ldr	r0, [pc, #168]	; (8000e4c <main+0xfc>)
 8000da4:	f003 f9f0 	bl	8004188 <HAL_UART_Receive_IT>
   //btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);



////////////////////////////
  if (ring_get_message(&uart_ring, rstring)){
 8000da8:	4929      	ldr	r1, [pc, #164]	; (8000e50 <main+0x100>)
 8000daa:	4826      	ldr	r0, [pc, #152]	; (8000e44 <main+0xf4>)
 8000dac:	f000 faa5 	bl	80012fa <ring_get_message>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d035      	beq.n	8000e22 <main+0xd2>
	  sscanf((char*)rstring,"%4[F = ]" ,string);
 8000db6:	463b      	mov	r3, r7
 8000db8:	461a      	mov	r2, r3
 8000dba:	4926      	ldr	r1, [pc, #152]	; (8000e54 <main+0x104>)
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <main+0x100>)
 8000dbe:	f005 fa59 	bl	8006274 <siscanf>
	  sscanf((char*)&rstring[strlen(string)],"%f" ,&Freq);
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fa0d 	bl	80001e4 <strlen>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <main+0x100>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <main+0x108>)
 8000dd2:	4922      	ldr	r1, [pc, #136]	; (8000e5c <main+0x10c>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 fa4d 	bl	8006274 <siscanf>

	  if(!strcmp(string,"F = "))
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4920      	ldr	r1, [pc, #128]	; (8000e60 <main+0x110>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff f9f6 	bl	80001d0 <strcmp>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d107      	bne.n	8000dfa <main+0xaa>
	  {
		  sprintf((char*)tstring,"F = %f \r\n",&Freq);
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <main+0x108>)
 8000df0:	491c      	ldr	r1, [pc, #112]	; (8000e64 <main+0x114>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f005 fa1e 	bl	8006234 <siprintf>
 8000df8:	e006      	b.n	8000e08 <main+0xb8>
	  }

	  else
	  {
		  // Transmit (in non blocking mode) back to the UART the last entered line and prompt for the next input
		  sprintf((char*)tstring,"Incorrect command Echo: %s\n" "Enter the correct command 'F = x.x'\r\n",rstring);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <main+0x100>)
 8000e00:	4919      	ldr	r1, [pc, #100]	; (8000e68 <main+0x118>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fa16 	bl	8006234 <siprintf>
	  }

	  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff f9e9 	bl	80001e4 <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <main+0xfc>)
 8000e1e:	f003 f945 	bl	80040ac <HAL_UART_Transmit_IT>
//		  }
//		  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
//	  }


  Delay = (float)1000/Freq;//T = 1c/F ; період.
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <main+0x108>)
 8000e24:	ed93 7a00 	vldr	s14, [r3]
 8000e28:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000e6c <main+0x11c>
 8000e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e34:	ee17 3a90 	vmov	r3, s15
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <main+0x120>)
 8000e3c:	801a      	strh	r2, [r3, #0]
  if (ring_get_message(&uart_ring, rstring)){
 8000e3e:	e7b3      	b.n	8000da8 <main+0x58>
 8000e40:	200002d8 	.word	0x200002d8
 8000e44:	200002f8 	.word	0x200002f8
 8000e48:	0800a6a0 	.word	0x0800a6a0
 8000e4c:	20000250 	.word	0x20000250
 8000e50:	20000308 	.word	0x20000308
 8000e54:	0800a6c0 	.word	0x0800a6c0
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	0800a6cc 	.word	0x0800a6cc
 8000e60:	0800a6d0 	.word	0x0800a6d0
 8000e64:	0800a6d8 	.word	0x0800a6d8
 8000e68:	0800a6e4 	.word	0x0800a6e4
 8000e6c:	447a0000 	.word	0x447a0000
 8000e70:	20000000 	.word	0x20000000

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b096      	sub	sp, #88	; 0x58
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e7e:	2228      	movs	r2, #40	; 0x28
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f004 fb4e 	bl	8005524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	615a      	str	r2, [r3, #20]
 8000ea8:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000ec6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000eca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 f861 	bl	8001f98 <HAL_RCC_OscConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000edc:	f000 fa6b 	bl	80013b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2102      	movs	r1, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 f889 	bl	8003014 <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f08:	f000 fa55 	bl	80013b6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fab1 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f24:	f000 fa47 	bl	80013b6 <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3758      	adds	r7, #88	; 0x58
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f50:	4a20      	ldr	r2, [pc, #128]	; (8000fd4 <MX_TIM1_Init+0xa4>)
 8000f52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f56:	f240 123f 	movw	r2, #319	; 0x13f
 8000f5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f7c:	4814      	ldr	r0, [pc, #80]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f7e:	f002 fbb5 	bl	80036ec <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000f88:	f000 fa15 	bl	80013b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000f9a:	f002 fda9 	bl	8003af0 <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000fa4:	f000 fa07 	bl	80013b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_TIM1_Init+0xa0>)
 8000fba:	f002 ff9d 	bl	8003ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fc4:	f000 f9f7 	bl	80013b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000204 	.word	0x20000204
 8000fd4:	40012c00 	.word	0x40012c00

08000fd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_USART2_UART_Init+0x58>)
 8000fde:	4a15      	ldr	r2, [pc, #84]	; (8001034 <MX_USART2_UART_Init+0x5c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_USART2_UART_Init+0x58>)
 8000fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_USART2_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_USART2_UART_Init+0x58>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_USART2_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <MX_USART2_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_USART2_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_USART2_UART_Init+0x58>)
 800101c:	f002 fff8 	bl	8004010 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001026:	f000 f9c6 	bl	80013b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000250 	.word	0x20000250
 8001034:	40004400 	.word	0x40004400

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <MX_GPIO_Init+0xb8>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <MX_GPIO_Init+0xb8>)
 8001054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <MX_GPIO_Init+0xb8>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <MX_GPIO_Init+0xb8>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <MX_GPIO_Init+0xb8>)
 800106c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_GPIO_Init+0xb8>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_GPIO_Init+0xb8>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MX_GPIO_Init+0xb8>)
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_GPIO_Init+0xb8>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2103      	movs	r1, #3
 800109a:	4816      	ldr	r0, [pc, #88]	; (80010f4 <MX_GPIO_Init+0xbc>)
 800109c:	f000 ff4c 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ac:	2302      	movs	r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4619      	mov	r1, r3
 80010b6:	480f      	ldr	r0, [pc, #60]	; (80010f4 <MX_GPIO_Init+0xbc>)
 80010b8:	f000 fdb4 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin;
 80010bc:	2303      	movs	r3, #3
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <MX_GPIO_Init+0xbc>)
 80010d4:	f000 fda6 	bl	8001c24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2028      	movs	r0, #40	; 0x28
 80010de:	f000 fce6 	bl	8001aae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010e2:	2028      	movs	r0, #40	; 0x28
 80010e4:	f000 fcff 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000800 	.word	0x48000800

080010f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001108:	d105      	bne.n	8001116 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // сразу же отключаем прерывания на этом пине
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f000 fcf9 	bl	8001b02 <HAL_NVIC_DisableIRQ>
		// либо выполняем какое-то действие прямо тут, либо поднимаем флажок
		HAL_TIM_Base_Start_IT(&htim1); // запускаем таймер
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <HAL_GPIO_EXTI_Callback+0x28>)
 8001112:	f002 fb43 	bl	800379c <HAL_TIM_Base_Start_IT>
	}
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000204 	.word	0x20000204

08001124 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a13      	ldr	r2, [pc, #76]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d11f      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		HAL_TIM_Base_Stop_IT(&htim1); // останавливаем таймер
 8001136:	4813      	ldr	r0, [pc, #76]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001138:	f002 fb8c 	bl	8003854 <HAL_TIM_Base_Stop_IT>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);  // очищаем бит EXTI_PR (бит прерывания)
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800113e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001142:	615a      	str	r2, [r3, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 8001144:	2028      	movs	r0, #40	; 0x28
 8001146:	f7ff fde5 	bl	8000d14 <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 800114a:	2028      	movs	r0, #40	; 0x28
 800114c:	f000 fccb 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
		//btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001156:	f000 fed7 	bl	8001f08 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d10a      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if(btn_state == 0)
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d103      	bne.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				btn_state = 1;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
		}
		/*if((btn_prev == 0) && (btn_cur != 0))
		{
		}*/
	}
}
 800116e:	e002      	b.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x52>
			else btn_state = 0;
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40012c00 	.word	0x40012c00
 8001184:	20000204 	.word	0x20000204
 8001188:	40010400 	.word	0x40010400
 800118c:	48000800 	.word	0x48000800
 8001190:	200002d4 	.word	0x200002d4

08001194 <HAL_UART_RxCpltCallback>:
//////////////////////////////////////////////////////////UART_IT////////////////////////////////////////////////////////////////
// UART receive interrupt callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	// Check that interrupt caused by UART1
	if (huart == &huart2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <HAL_UART_RxCpltCallback+0x84>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d134      	bne.n	800120e <HAL_UART_RxCpltCallback+0x7a>
		{
			// Put new character from the UART receiver data register (RDR) to the ring buffer
			ring_putchar(&uart_ring,huart->Instance->RDR);              //питання RDR чи DR?
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4619      	mov	r1, r3
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011b2:	f000 f863 	bl	800127c <ring_putchar>
			// Set the overrun flag if the message is longer than ring buffer can hold
			if (uart_ring.end == uart_ring.start) uart_ring.flag.BufferOverrun = 1;
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011b8:	88da      	ldrh	r2, [r3, #6]
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011bc:	889b      	ldrh	r3, [r3, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d104      	bne.n	80011cc <HAL_UART_RxCpltCallback+0x38>
 80011c2:	4a16      	ldr	r2, [pc, #88]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011c4:	7b13      	ldrb	r3, [r2, #12]
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	7313      	strb	r3, [r2, #12]
			// Set the message ready flag if the end of line character has been received
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011d2:	88db      	ldrh	r3, [r3, #6]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b0d      	cmp	r3, #13
 80011dc:	d008      	beq.n	80011f0 <HAL_UART_RxCpltCallback+0x5c>
					(uart_ring.buffer[uart_ring.end -1] == '\n'))
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011e4:	88db      	ldrh	r3, [r3, #6]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 80011ec:	2b0a      	cmp	r3, #10
 80011ee:	d104      	bne.n	80011fa <HAL_UART_RxCpltCallback+0x66>
				uart_ring.flag.MessageReady = 1;
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011f2:	7b13      	ldrb	r3, [r2, #12]
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	7313      	strb	r3, [r2, #12]
			// Receive the next character from UART in non blocking mode
			HAL_UART_Receive_IT(&huart2,&uart_ring.buffer[uart_ring.end],1);
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_UART_RxCpltCallback+0x88>)
 8001200:	88d2      	ldrh	r2, [r2, #6]
 8001202:	4413      	add	r3, r2
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <HAL_UART_RxCpltCallback+0x84>)
 800120a:	f002 ffbd 	bl	8004188 <HAL_UART_Receive_IT>
		}
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000250 	.word	0x20000250
 800121c:	200002f8 	.word	0x200002f8

08001220 <ring_init>:
// Initializes the ring buffer
void ring_init(uart_ring_buff_t * uart_ring, uint8_t * buff, uint16_t buff_size)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	4613      	mov	r3, r2
 800122c:	80fb      	strh	r3, [r7, #6]
	uart_ring->buffer = buff;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	601a      	str	r2, [r3, #0]
	uart_ring->size = buff_size;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	88fa      	ldrh	r2, [r7, #6]
 8001238:	811a      	strh	r2, [r3, #8]
	ring_clear(uart_ring);
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 f804 	bl	8001248 <ring_clear>
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <ring_clear>:
// Clears the ring buffer
void ring_clear(uart_ring_buff_t * uart_ring)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	uart_ring->start = 0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	809a      	strh	r2, [r3, #4]
	uart_ring->end = 0;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	80da      	strh	r2, [r3, #6]
	uart_ring->flag.BufferOverrun = 0;
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	7b13      	ldrb	r3, [r2, #12]
 8001260:	f36f 0341 	bfc	r3, #1, #1
 8001264:	7313      	strb	r3, [r2, #12]
	uart_ring->flag.MessageReady = 0;
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	7b13      	ldrb	r3, [r2, #12]
 800126a:	f36f 0300 	bfc	r3, #0, #1
 800126e:	7313      	strb	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <ring_putchar>:
// Puts a new character to the ring buffer
void ring_putchar(uart_ring_buff_t * uart_ring, uint8_t ch)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	70fb      	strb	r3, [r7, #3]
	uart_ring->buffer[uart_ring->end++] = ch;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	88db      	ldrh	r3, [r3, #6]
 8001290:	1c59      	adds	r1, r3, #1
 8001292:	b288      	uxth	r0, r1
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	80c8      	strh	r0, [r1, #6]
 8001298:	4413      	add	r3, r2
 800129a:	78fa      	ldrb	r2, [r7, #3]
 800129c:	701a      	strb	r2, [r3, #0]
	if (uart_ring->end >= uart_ring->size) uart_ring->end = 0;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	88da      	ldrh	r2, [r3, #6]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	891b      	ldrh	r3, [r3, #8]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d302      	bcc.n	80012b0 <ring_putchar+0x34>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	80da      	strh	r2, [r3, #6]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <ring_getchar>:
// Gets one character from the ring buffer
uint8_t ring_getchar(uart_ring_buff_t * uart_ring)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	uint8_t ch = uart_ring->buffer[uart_ring->start++];
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	889b      	ldrh	r3, [r3, #4]
 80012cc:	1c59      	adds	r1, r3, #1
 80012ce:	b288      	uxth	r0, r1
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	8088      	strh	r0, [r1, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	73fb      	strb	r3, [r7, #15]
	if (uart_ring->start >= uart_ring->size) uart_ring->start = 0;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	889a      	ldrh	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	891b      	ldrh	r3, [r3, #8]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d302      	bcc.n	80012ec <ring_getchar+0x30>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	809a      	strh	r2, [r3, #4]
	return ch;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <ring_get_message>:
// Reads full message from the ring buffer and clears appropriate flags
uint8_t ring_get_message(uart_ring_buff_t * uart_ring, uint8_t * string)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	uint16_t char_count = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	81fb      	strh	r3, [r7, #14]
	// Check if the message has been received
	if (uart_ring->flag.MessageReady)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7b1b      	ldrb	r3, [r3, #12]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d049      	beq.n	80013aa <ring_get_message+0xb0>
		{
			if (uart_ring->flag.BufferOverrun)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7b1b      	ldrb	r3, [r3, #12]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d016      	beq.n	8001352 <ring_get_message+0x58>
				{
					uart_ring->start = uart_ring->end;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	88da      	ldrh	r2, [r3, #6]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	809a      	strh	r2, [r3, #4]
					uart_ring->flag.BufferOverrun = 0;
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	7b13      	ldrb	r3, [r2, #12]
 8001330:	f36f 0341 	bfc	r3, #1, #1
 8001334:	7313      	strb	r3, [r2, #12]
				}
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 8001336:	e00c      	b.n	8001352 <ring_get_message+0x58>
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
						 (uart_ring->size != char_count - 1))
				{
					*string =  ring_getchar(uart_ring);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffbf 	bl	80012bc <ring_getchar>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	701a      	strb	r2, [r3, #0]
					string++;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	603b      	str	r3, [r7, #0]
					char_count++;
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	3301      	adds	r3, #1
 8001350:	81fb      	strh	r3, [r7, #14]
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	8892      	ldrh	r2, [r2, #4]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b0d      	cmp	r3, #13
 8001360:	d00e      	beq.n	8001380 <ring_get_message+0x86>
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	8892      	ldrh	r2, [r2, #4]
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 800136e:	2b0a      	cmp	r3, #10
 8001370:	d006      	beq.n	8001380 <ring_get_message+0x86>
						 (uart_ring->size != char_count - 1))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	891b      	ldrh	r3, [r3, #8]
 8001376:	461a      	mov	r2, r3
 8001378:	89fb      	ldrh	r3, [r7, #14]
 800137a:	3b01      	subs	r3, #1
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
 800137c:	429a      	cmp	r2, r3
 800137e:	d1db      	bne.n	8001338 <ring_get_message+0x3e>
				}
			*string =  ring_getchar(uart_ring);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff9b 	bl	80012bc <ring_getchar>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	701a      	strb	r2, [r3, #0]
			string++;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	603b      	str	r3, [r7, #0]
			char_count++;
 8001394:	89fb      	ldrh	r3, [r7, #14]
 8001396:	3301      	adds	r3, #1
 8001398:	81fb      	strh	r3, [r7, #14]
			*string = '\0';
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
			uart_ring->flag.MessageReady = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	7b13      	ldrb	r3, [r2, #12]
 80013a4:	f36f 0300 	bfc	r3, #0, #1
 80013a8:	7313      	strb	r3, [r2, #12]
		}
	return char_count;
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	b2db      	uxtb	r3, r3
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ba:	b672      	cpsid	i
}
 80013bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013be:	e7fe      	b.n	80013be <Error_Handler+0x8>

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_MspInit+0x44>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_MspInit+0x44>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_MspInit+0x44>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_MspInit+0x44>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_MspInit+0x44>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_MspInit+0x44>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013f6:	2007      	movs	r0, #7
 80013f8:	f000 fb4e 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_TIM_Base_MspInit+0x74>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12b      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_TIM_Base_MspInit+0x78>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_TIM_Base_MspInit+0x78>)
 8001420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_TIM_Base_MspInit+0x78>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2018      	movs	r0, #24
 8001438:	f000 fb39 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800143c:	2018      	movs	r0, #24
 800143e:	f000 fb52 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2019      	movs	r0, #25
 8001448:	f000 fb31 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800144c:	2019      	movs	r0, #25
 800144e:	f000 fb4a 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	201a      	movs	r0, #26
 8001458:	f000 fb29 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800145c:	201a      	movs	r0, #26
 800145e:	f000 fb42 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	201b      	movs	r0, #27
 8001468:	f000 fb21 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800146c:	201b      	movs	r0, #27
 800146e:	f000 fb3a 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40012c00 	.word	0x40012c00
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <HAL_UART_MspInit+0x8c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d130      	bne.n	8001508 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	6153      	str	r3, [r2, #20]
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_UART_MspInit+0x90>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014d6:	230c      	movs	r3, #12
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e6:	2307      	movs	r3, #7
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f4:	f000 fb96 	bl	8001c24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2026      	movs	r0, #38	; 0x26
 80014fe:	f000 fad6 	bl	8001aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001502:	2026      	movs	r0, #38	; 0x26
 8001504:	f000 faef 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40004400 	.word	0x40004400
 8001514:	40021000 	.word	0x40021000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001564:	f000 f984 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001572:	f002 f99e 	bl	80038b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000204 	.word	0x20000204

08001580 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001586:	f002 f994 	bl	80038b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000204 	.word	0x20000204

08001594 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800159a:	f002 f98a 	bl	80038b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000204 	.word	0x20000204

080015a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM1_CC_IRQHandler+0x10>)
 80015ae:	f002 f980 	bl	80038b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000204 	.word	0x20000204

080015bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <USART2_IRQHandler+0x10>)
 80015c2:	f002 fe2f 	bl	8004224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000250 	.word	0x20000250

080015d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015d8:	f000 fcc6 	bl	8001f68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_kill>:

int _kill(int pid, int sig)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015fa:	f003 ff69 	bl	80054d0 <__errno>
 80015fe:	4603      	mov	r3, r0
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
	return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_exit>:

void _exit (int status)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffe7 	bl	80015f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001622:	e7fe      	b.n	8001622 <_exit+0x12>

08001624 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e00a      	b.n	800164c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001636:	f3af 8000 	nop.w
 800163a:	4601      	mov	r1, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	b2ca      	uxtb	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf0      	blt.n	8001636 <_read+0x12>
	}

return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e009      	b.n	8001684 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf1      	blt.n	8001670 <_write+0x12>
	}
	return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_close>:

int _close(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	return -1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016be:	605a      	str	r2, [r3, #4]
	return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_isatty>:

int _isatty(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	return 1;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
	return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f003 fece 	bl	80054d0 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20003000 	.word	0x20003000
 8001760:	00000400 	.word	0x00000400
 8001764:	2000032c 	.word	0x2000032c
 8001768:	20000348 	.word	0x20000348

0800176c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <LoopForever+0xe>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ac:	4c0b      	ldr	r4, [pc, #44]	; (80017dc <LoopForever+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ba:	f7ff ffd7 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017be:	f003 fe8d 	bl	80054dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017c2:	f7ff fac5 	bl	8000d50 <main>

080017c6 <LoopForever>:

LoopForever:
    b LoopForever
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017c8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80017d4:	0800ac2c 	.word	0x0800ac2c
  ldr r2, =_sbss
 80017d8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80017dc:	20000344 	.word	0x20000344

080017e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_2_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_Init+0x28>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_Init+0x28>)
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f94f 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fdde 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f975 	bl	8001b1e <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800184c:	f000 f92f 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000008 	.word	0x20000008
 8001868:	20000010 	.word	0x20000010
 800186c:	2000000c 	.word	0x2000000c

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000010 	.word	0x20000010
 8001894:	20000330 	.word	0x20000330

08001898 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;  
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000330 	.word	0x20000330

080018b0 <__NVIC_SetPriorityGrouping>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	; (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_DisableIRQ>:
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db12      	blt.n	8001988 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	490a      	ldr	r1, [pc, #40]	; (8001994 <__NVIC_DisableIRQ+0x44>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	3320      	adds	r3, #32
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800197c:	f3bf 8f4f 	dsb	sy
}
 8001980:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001982:	f3bf 8f6f 	isb	sy
}
 8001986:	bf00      	nop
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a78:	f7ff ff8e 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff05 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff1a 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff8e 	bl	80019ec <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5d 	bl	8001998 <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff0d 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff1d 	bl	8001950 <__NVIC_DisableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ff94 	bl	8001a54 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d008      	beq.n	8001b5a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e020      	b.n	8001b9c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 020e 	bic.w	r2, r2, #14
 8001b68:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f202 	lsl.w	r2, r1, r2
 8001b88:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d005      	beq.n	8001bca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e027      	b.n	8001c1a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 020e 	bic.w	r2, r2, #14
 8001bd8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
    } 
  }
  return status;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c32:	e14e      	b.n	8001ed2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8140 	beq.w	8001ecc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d005      	beq.n	8001c64 <HAL_GPIO_Init+0x40>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d130      	bne.n	8001cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 0201 	and.w	r2, r3, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d017      	beq.n	8001d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d123      	bne.n	8001d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	08da      	lsrs	r2, r3, #3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3208      	adds	r2, #8
 8001d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	08da      	lsrs	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3208      	adds	r2, #8
 8001d50:	6939      	ldr	r1, [r7, #16]
 8001d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0203 	and.w	r2, r3, #3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 809a 	beq.w	8001ecc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d98:	4b55      	ldr	r3, [pc, #340]	; (8001ef0 <HAL_GPIO_Init+0x2cc>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a54      	ldr	r2, [pc, #336]	; (8001ef0 <HAL_GPIO_Init+0x2cc>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <HAL_GPIO_Init+0x2cc>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001db0:	4a50      	ldr	r2, [pc, #320]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dda:	d013      	beq.n	8001e04 <HAL_GPIO_Init+0x1e0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a46      	ldr	r2, [pc, #280]	; (8001ef8 <HAL_GPIO_Init+0x2d4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00d      	beq.n	8001e00 <HAL_GPIO_Init+0x1dc>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a45      	ldr	r2, [pc, #276]	; (8001efc <HAL_GPIO_Init+0x2d8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d007      	beq.n	8001dfc <HAL_GPIO_Init+0x1d8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a44      	ldr	r2, [pc, #272]	; (8001f00 <HAL_GPIO_Init+0x2dc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_GPIO_Init+0x1d4>
 8001df4:	2303      	movs	r3, #3
 8001df6:	e006      	b.n	8001e06 <HAL_GPIO_Init+0x1e2>
 8001df8:	2305      	movs	r3, #5
 8001dfa:	e004      	b.n	8001e06 <HAL_GPIO_Init+0x1e2>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x1e2>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_GPIO_Init+0x1e2>
 8001e04:	2300      	movs	r3, #0
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	f002 0203 	and.w	r2, r2, #3
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	4093      	lsls	r3, r2
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e16:	4937      	ldr	r1, [pc, #220]	; (8001ef4 <HAL_GPIO_Init+0x2d0>)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e24:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e48:	4a2e      	ldr	r2, [pc, #184]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ec6:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <HAL_GPIO_Init+0x2e0>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f47f aea9 	bne.w	8001c34 <HAL_GPIO_Init+0x10>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	48000800 	.word	0x48000800
 8001f00:	48000c00 	.word	0x48000c00
 8001f04:	40010400 	.word	0x40010400

08001f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	887b      	ldrh	r3, [r7, #2]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	e001      	b.n	8001f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f8b6 	bl	80010f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f001 b823 	b.w	8003004 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 817d 	beq.w	80022ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fd4:	4bbc      	ldr	r3, [pc, #752]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d00c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe0:	4bb9      	ldr	r3, [pc, #740]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d15c      	bne.n	80020a6 <HAL_RCC_OscConfig+0x10e>
 8001fec:	4bb6      	ldr	r3, [pc, #728]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d155      	bne.n	80020a6 <HAL_RCC_OscConfig+0x10e>
 8001ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800200e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <HAL_RCC_OscConfig+0x94>
 8002026:	4ba8      	ldr	r3, [pc, #672]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	e015      	b.n	8002058 <HAL_RCC_OscConfig+0xc0>
 800202c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002030:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002044:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002048:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002054:	4b9c      	ldr	r3, [pc, #624]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800205c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002060:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002064:	fa92 f2a2 	rbit	r2, r2
 8002068:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800206c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002070:	fab2 f282 	clz	r2, r2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f042 0220 	orr.w	r2, r2, #32
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f002 021f 	and.w	r2, r2, #31
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 811f 	beq.w	80022cc <HAL_RCC_OscConfig+0x334>
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8116 	bne.w	80022cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f000 bfaf 	b.w	8003004 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12e>
 80020b8:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a82      	ldr	r2, [pc, #520]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 80020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e036      	b.n	8002134 <HAL_RCC_OscConfig+0x19c>
 80020c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x158>
 80020d6:	4b7c      	ldr	r3, [pc, #496]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7b      	ldr	r2, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b79      	ldr	r3, [pc, #484]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a78      	ldr	r2, [pc, #480]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 80020e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	e021      	b.n	8002134 <HAL_RCC_OscConfig+0x19c>
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x184>
 8002102:	4b71      	ldr	r3, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a70      	ldr	r2, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6d      	ldr	r2, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0x19c>
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a69      	ldr	r2, [pc, #420]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a66      	ldr	r2, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 800212e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002132:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002134:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	f023 020f 	bic.w	r2, r3, #15
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	495f      	ldr	r1, [pc, #380]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 800214a:	4313      	orrs	r3, r2
 800214c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d059      	beq.n	8002212 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff fb9b 	bl	8001898 <HAL_GetTick>
 8002162:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	e00a      	b.n	800217e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff fb96 	bl	8001898 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b64      	cmp	r3, #100	; 0x64
 8002176:	d902      	bls.n	800217e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	f000 bf43 	b.w	8003004 <HAL_RCC_OscConfig+0x106c>
 800217e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002182:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002192:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d102      	bne.n	80021b0 <HAL_RCC_OscConfig+0x218>
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	e015      	b.n	80021dc <HAL_RCC_OscConfig+0x244>
 80021b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80021c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021d8:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021e0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80021e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021e8:	fa92 f2a2 	rbit	r2, r2
 80021ec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80021f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80021f4:	fab2 f282 	clz	r2, r2
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	f042 0220 	orr.w	r2, r2, #32
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f002 021f 	and.w	r2, r2, #31
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f202 	lsl.w	r2, r1, r2
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ab      	beq.n	8002168 <HAL_RCC_OscConfig+0x1d0>
 8002210:	e05d      	b.n	80022ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7ff fb41 	bl	8001898 <HAL_GetTick>
 8002216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	e00a      	b.n	8002232 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221c:	f7ff fb3c 	bl	8001898 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d902      	bls.n	8002232 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	f000 bee9 	b.w	8003004 <HAL_RCC_OscConfig+0x106c>
 8002232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002236:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002246:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_OscConfig+0x2cc>
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e015      	b.n	8002290 <HAL_RCC_OscConfig+0x2f8>
 8002264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002268:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002280:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_RCC_OscConfig+0x330>)
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002294:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002298:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800229c:	fa92 f2a2 	rbit	r2, r2
 80022a0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80022a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80022a8:	fab2 f282 	clz	r2, r2
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f042 0220 	orr.w	r2, r2, #32
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	f002 021f 	and.w	r2, r2, #31
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f202 	lsl.w	r2, r1, r2
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ab      	bne.n	800221c <HAL_RCC_OscConfig+0x284>
 80022c4:	e003      	b.n	80022ce <HAL_RCC_OscConfig+0x336>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 817d 	beq.w	80025de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022e4:	4ba6      	ldr	r3, [pc, #664]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00b      	beq.n	8002308 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022f0:	4ba3      	ldr	r3, [pc, #652]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d172      	bne.n	80023e2 <HAL_RCC_OscConfig+0x44a>
 80022fc:	4ba0      	ldr	r3, [pc, #640]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d16c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x44a>
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800231a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <HAL_RCC_OscConfig+0x3a0>
 8002332:	4b93      	ldr	r3, [pc, #588]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	e013      	b.n	8002360 <HAL_RCC_OscConfig+0x3c8>
 8002338:	2302      	movs	r3, #2
 800233a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800234a:	2302      	movs	r3, #2
 800234c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002350:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800235c:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2202      	movs	r2, #2
 8002362:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002366:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800236a:	fa92 f2a2 	rbit	r2, r2
 800236e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002372:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002376:	fab2 f282 	clz	r2, r2
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	f042 0220 	orr.w	r2, r2, #32
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f002 021f 	and.w	r2, r2, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCC_OscConfig+0x410>
 8002392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f000 be2e 	b.w	8003004 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b75      	ldr	r3, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	21f8      	movs	r1, #248	; 0xf8
 80023be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80023c6:	fa91 f1a1 	rbit	r1, r1
 80023ca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80023ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80023d2:	fab1 f181 	clz	r1, r1
 80023d6:	b2c9      	uxtb	r1, r1
 80023d8:	408b      	lsls	r3, r1
 80023da:	4969      	ldr	r1, [pc, #420]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e0:	e0fd      	b.n	80025de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8088 	beq.w	8002504 <HAL_RCC_OscConfig+0x56c>
 80023f4:	2301      	movs	r3, #1
 80023f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002406:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002414:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	461a      	mov	r2, r3
 800241c:	2301      	movs	r3, #1
 800241e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff fa3a 	bl	8001898 <HAL_GetTick>
 8002424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242a:	f7ff fa35 	bl	8001898 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d902      	bls.n	8002440 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	f000 bde2 	b.w	8003004 <HAL_RCC_OscConfig+0x106c>
 8002440:	2302      	movs	r3, #2
 8002442:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002452:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0x4d8>
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	e013      	b.n	8002498 <HAL_RCC_OscConfig+0x500>
 8002470:	2302      	movs	r3, #2
 8002472:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002488:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002494:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2202      	movs	r2, #2
 800249a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800249e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80024a2:	fa92 f2a2 	rbit	r2, r2
 80024a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80024aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f042 0220 	orr.w	r2, r2, #32
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f002 021f 	and.w	r2, r2, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f202 	lsl.w	r2, r1, r2
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0af      	beq.n	800242a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	21f8      	movs	r1, #248	; 0xf8
 80024e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024e8:	fa91 f1a1 	rbit	r1, r1
 80024ec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80024f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80024f4:	fab1 f181 	clz	r1, r1
 80024f8:	b2c9      	uxtb	r1, r1
 80024fa:	408b      	lsls	r3, r1
 80024fc:	4920      	ldr	r1, [pc, #128]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
 8002502:	e06c      	b.n	80025de <HAL_RCC_OscConfig+0x646>
 8002504:	2301      	movs	r3, #1
 8002506:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002516:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002524:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	461a      	mov	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff f9b2 	bl	8001898 <HAL_GetTick>
 8002534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253a:	f7ff f9ad 	bl	8001898 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d902      	bls.n	8002550 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	f000 bd5a 	b.w	8003004 <HAL_RCC_OscConfig+0x106c>
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d104      	bne.n	8002584 <HAL_RCC_OscConfig+0x5ec>
 800257a:	4b01      	ldr	r3, [pc, #4]	; (8002580 <HAL_RCC_OscConfig+0x5e8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	e015      	b.n	80025ac <HAL_RCC_OscConfig+0x614>
 8002580:	40021000 	.word	0x40021000
 8002584:	2302      	movs	r3, #2
 8002586:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002596:	2302      	movs	r3, #2
 8002598:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800259c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80025a8:	4bc8      	ldr	r3, [pc, #800]	; (80028cc <HAL_RCC_OscConfig+0x934>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2202      	movs	r2, #2
 80025ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80025b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80025b6:	fa92 f2a2 	rbit	r2, r2
 80025ba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80025be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80025c2:	fab2 f282 	clz	r2, r2
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	f042 0220 	orr.w	r2, r2, #32
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f002 021f 	and.w	r2, r2, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f202 	lsl.w	r2, r1, r2
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ad      	bne.n	800253a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8110 	beq.w	8002814 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d079      	beq.n	80026f8 <HAL_RCC_OscConfig+0x760>
 8002604:	2301      	movs	r3, #1
 8002606:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	4bab      	ldr	r3, [pc, #684]	; (80028d0 <HAL_RCC_OscConfig+0x938>)
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	461a      	mov	r2, r3
 800262a:	2301      	movs	r3, #1
 800262c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7ff f933 	bl	8001898 <HAL_GetTick>
 8002632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	e00a      	b.n	800264e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002638:	f7ff f92e 	bl	8001898 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d902      	bls.n	800264e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	f000 bcdb 	b.w	8003004 <HAL_RCC_OscConfig+0x106c>
 800264e:	2302      	movs	r3, #2
 8002650:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002668:	2202      	movs	r2, #2
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	fa93 f2a3 	rbit	r2, r3
 800267a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800268c:	2202      	movs	r2, #2
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a8:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x934>)
 80026aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026b4:	2102      	movs	r1, #2
 80026b6:	6019      	str	r1, [r3, #0]
 80026b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f1a3 	rbit	r1, r3
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026ce:	6019      	str	r1, [r3, #0]
  return result;
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0a0      	beq.n	8002638 <HAL_RCC_OscConfig+0x6a0>
 80026f6:	e08d      	b.n	8002814 <HAL_RCC_OscConfig+0x87c>
 80026f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002708:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800271a:	601a      	str	r2, [r3, #0]
  return result;
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002724:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_OscConfig+0x938>)
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	461a      	mov	r2, r3
 8002736:	2300      	movs	r3, #0
 8002738:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7ff f8ad 	bl	8001898 <HAL_GetTick>
 800273e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff f8a8 	bl	8001898 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d902      	bls.n	800275a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	f000 bc55 	b.w	8003004 <HAL_RCC_OscConfig+0x106c>
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002762:	2202      	movs	r2, #2
 8002764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fa93 f2a3 	rbit	r2, r3
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002786:	2202      	movs	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027aa:	2202      	movs	r2, #2
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_OscConfig+0x934>)
 80027c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027d2:	2102      	movs	r1, #2
 80027d4:	6019      	str	r1, [r3, #0]
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fa93 f1a3 	rbit	r1, r3
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027ec:	6019      	str	r1, [r3, #0]
  return result;
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d197      	bne.n	8002744 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 81a1 	beq.w	8002b6c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002830:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x934>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d116      	bne.n	800286a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_RCC_OscConfig+0x934>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4a22      	ldr	r2, [pc, #136]	; (80028cc <HAL_RCC_OscConfig+0x934>)
 8002842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002846:	61d3      	str	r3, [r2, #28]
 8002848:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_RCC_OscConfig+0x934>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002862:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_OscConfig+0x93c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d11a      	bne.n	80028ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_RCC_OscConfig+0x93c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_RCC_OscConfig+0x93c>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7ff f809 	bl	8001898 <HAL_GetTick>
 8002886:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288a:	e009      	b.n	80028a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7ff f804 	bl	8001898 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b64      	cmp	r3, #100	; 0x64
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e3b1      	b.n	8003004 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_RCC_OscConfig+0x93c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ef      	beq.n	800288c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCC_OscConfig+0x940>
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_RCC_OscConfig+0x934>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a02      	ldr	r2, [pc, #8]	; (80028cc <HAL_RCC_OscConfig+0x934>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	e03c      	b.n	8002944 <HAL_RCC_OscConfig+0x9ac>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	10908120 	.word	0x10908120
 80028d4:	40007000 	.word	0x40007000
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x96a>
 80028e8:	4bc1      	ldr	r3, [pc, #772]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4ac0      	ldr	r2, [pc, #768]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6213      	str	r3, [r2, #32]
 80028f4:	4bbe      	ldr	r3, [pc, #760]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4abd      	ldr	r2, [pc, #756]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	6213      	str	r3, [r2, #32]
 8002900:	e020      	b.n	8002944 <HAL_RCC_OscConfig+0x9ac>
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x994>
 8002912:	4bb7      	ldr	r3, [pc, #732]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4ab6      	ldr	r2, [pc, #728]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6213      	str	r3, [r2, #32]
 800291e:	4bb4      	ldr	r3, [pc, #720]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4ab3      	ldr	r2, [pc, #716]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0x9ac>
 800292c:	4bb0      	ldr	r3, [pc, #704]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4aaf      	ldr	r2, [pc, #700]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6213      	str	r3, [r2, #32]
 8002938:	4bad      	ldr	r3, [pc, #692]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4aac      	ldr	r2, [pc, #688]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 800293e:	f023 0304 	bic.w	r3, r3, #4
 8002942:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8081 	beq.w	8002a58 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7fe ff9f 	bl	8001898 <HAL_GetTick>
 800295a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe ff9a 	bl	8001898 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e345      	b.n	8003004 <HAL_RCC_OscConfig+0x106c>
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002980:	2202      	movs	r2, #2
 8002982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80029a4:	2202      	movs	r2, #2
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029be:	601a      	str	r2, [r3, #0]
  return result;
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d102      	bne.n	80029e4 <HAL_RCC_OscConfig+0xa4c>
 80029de:	4b84      	ldr	r3, [pc, #528]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	e013      	b.n	8002a0c <HAL_RCC_OscConfig+0xa74>
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029ec:	2202      	movs	r2, #2
 80029ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	fa93 f2a3 	rbit	r2, r3
 80029fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	4b79      	ldr	r3, [pc, #484]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a14:	2102      	movs	r1, #2
 8002a16:	6011      	str	r1, [r2, #0]
 8002a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a1c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	fa92 f1a2 	rbit	r1, r2
 8002a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a2e:	6011      	str	r1, [r2, #0]
  return result;
 8002a30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a34:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	fab2 f282 	clz	r2, r2
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f002 021f 	and.w	r2, r2, #31
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d084      	beq.n	8002960 <HAL_RCC_OscConfig+0x9c8>
 8002a56:	e07f      	b.n	8002b58 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7fe ff1e 	bl	8001898 <HAL_GetTick>
 8002a5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a60:	e00b      	b.n	8002a7a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe ff19 	bl	8001898 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e2c4      	b.n	8003004 <HAL_RCC_OscConfig+0x106c>
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a82:	2202      	movs	r2, #2
 8002a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	fa93 f2a3 	rbit	r2, r3
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	fa93 f2a3 	rbit	r2, r3
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ac0:	601a      	str	r2, [r3, #0]
  return result;
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002aca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d102      	bne.n	8002ae6 <HAL_RCC_OscConfig+0xb4e>
 8002ae0:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	e013      	b.n	8002b0e <HAL_RCC_OscConfig+0xb76>
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002aee:	2202      	movs	r2, #2
 8002af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	fa93 f2a3 	rbit	r2, r3
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b16:	2102      	movs	r1, #2
 8002b18:	6011      	str	r1, [r2, #0]
 8002b1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	fa92 f1a2 	rbit	r1, r2
 8002b28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b30:	6011      	str	r1, [r2, #0]
  return result;
 8002b32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b36:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f002 021f 	and.w	r2, r2, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d184      	bne.n	8002a62 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b60:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8242 	beq.w	8003002 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_RCC_OscConfig+0xc58>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	f000 8213 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	f040 8162 	bne.w	8002e62 <HAL_RCC_OscConfig+0xeca>
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bc2:	601a      	str	r2, [r3, #0]
  return result;
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bcc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	2300      	movs	r3, #0
 8002be2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fe58 	bl	8001898 <HAL_GetTick>
 8002be8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bec:	e00c      	b.n	8002c08 <HAL_RCC_OscConfig+0xc70>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe fe50 	bl	8001898 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1fd      	b.n	8003004 <HAL_RCC_OscConfig+0x106c>
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c2c:	601a      	str	r2, [r3, #0]
  return result;
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c38:	fab3 f383 	clz	r3, r3
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d102      	bne.n	8002c52 <HAL_RCC_OscConfig+0xcba>
 8002c4c:	4bb0      	ldr	r3, [pc, #704]	; (8002f10 <HAL_RCC_OscConfig+0xf78>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	e027      	b.n	8002ca2 <HAL_RCC_OscConfig+0xd0a>
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	4b9c      	ldr	r3, [pc, #624]	; (8002f10 <HAL_RCC_OscConfig+0xf78>)
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ca6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002caa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cae:	6011      	str	r1, [r2, #0]
 8002cb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cb4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	fa92 f1a2 	rbit	r1, r2
 8002cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002cc6:	6011      	str	r1, [r2, #0]
  return result;
 8002cc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ccc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f042 0220 	orr.w	r2, r2, #32
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f002 021f 	and.w	r2, r2, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d182      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cee:	4b88      	ldr	r3, [pc, #544]	; (8002f10 <HAL_RCC_OscConfig+0xf78>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	497f      	ldr	r1, [pc, #508]	; (8002f10 <HAL_RCC_OscConfig+0xf78>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	fa93 f2a3 	rbit	r2, r3
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d3a:	601a      	str	r2, [r3, #0]
  return result;
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d44:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	2301      	movs	r3, #1
 8002d5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fd9c 	bl	8001898 <HAL_GetTick>
 8002d60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d64:	e009      	b.n	8002d7a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d66:	f7fe fd97 	bl	8001898 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e144      	b.n	8003004 <HAL_RCC_OscConfig+0x106c>
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d9e:	601a      	str	r2, [r3, #0]
  return result;
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002da8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	095b      	lsrs	r3, r3, #5
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xe2c>
 8002dbe:	4b54      	ldr	r3, [pc, #336]	; (8002f10 <HAL_RCC_OscConfig+0xf78>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	e027      	b.n	8002e14 <HAL_RCC_OscConfig+0xe7c>
 8002dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002dcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	fa93 f2a3 	rbit	r2, r3
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fa93 f2a3 	rbit	r2, r3
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCC_OscConfig+0xf78>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e18:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e20:	6011      	str	r1, [r2, #0]
 8002e22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e26:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	fa92 f1a2 	rbit	r1, r2
 8002e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e34:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e38:	6011      	str	r1, [r2, #0]
  return result;
 8002e3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e3e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f042 0220 	orr.w	r2, r2, #32
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f002 021f 	and.w	r2, r2, #31
 8002e54:	2101      	movs	r1, #1
 8002e56:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d082      	beq.n	8002d66 <HAL_RCC_OscConfig+0xdce>
 8002e60:	e0cf      	b.n	8003002 <HAL_RCC_OscConfig+0x106a>
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e86:	601a      	str	r2, [r3, #0]
  return result;
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fe fcf6 	bl	8001898 <HAL_GetTick>
 8002eac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb0:	e009      	b.n	8002ec6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fe fcf1 	bl	8001898 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e09e      	b.n	8003004 <HAL_RCC_OscConfig+0x106c>
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002eea:	601a      	str	r2, [r3, #0]
  return result;
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d104      	bne.n	8002f14 <HAL_RCC_OscConfig+0xf7c>
 8002f0a:	4b01      	ldr	r3, [pc, #4]	; (8002f10 <HAL_RCC_OscConfig+0xf78>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	e029      	b.n	8002f64 <HAL_RCC_OscConfig+0xfcc>
 8002f10:	40021000 	.word	0x40021000
 8002f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	fa93 f2a3 	rbit	r2, r3
 8002f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	4b2b      	ldr	r3, [pc, #172]	; (8003010 <HAL_RCC_OscConfig+0x1078>)
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f68:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f70:	6011      	str	r1, [r2, #0]
 8002f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f76:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	fa92 f1a2 	rbit	r1, r2
 8002f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f84:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f88:	6011      	str	r1, [r2, #0]
  return result;
 8002f8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f8e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	f042 0220 	orr.w	r2, r2, #32
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f002 021f 	and.w	r2, r2, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d180      	bne.n	8002eb2 <HAL_RCC_OscConfig+0xf1a>
 8002fb0:	e027      	b.n	8003002 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e01e      	b.n	8003004 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_OscConfig+0x1078>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fd2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d10b      	bne.n	8002ffe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fe6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b09e      	sub	sp, #120	; 0x78
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e162      	b.n	80032f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800302c:	4b90      	ldr	r3, [pc, #576]	; (8003270 <HAL_RCC_ClockConfig+0x25c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d910      	bls.n	800305c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b8d      	ldr	r3, [pc, #564]	; (8003270 <HAL_RCC_ClockConfig+0x25c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 0207 	bic.w	r2, r3, #7
 8003042:	498b      	ldr	r1, [pc, #556]	; (8003270 <HAL_RCC_ClockConfig+0x25c>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b89      	ldr	r3, [pc, #548]	; (8003270 <HAL_RCC_ClockConfig+0x25c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e14a      	b.n	80032f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4b82      	ldr	r3, [pc, #520]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	497f      	ldr	r1, [pc, #508]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80dc 	beq.w	8003240 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d13c      	bne.n	800310a <HAL_RCC_ClockConfig+0xf6>
 8003090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003094:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800309e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d102      	bne.n	80030ba <HAL_RCC_ClockConfig+0xa6>
 80030b4:	4b6f      	ldr	r3, [pc, #444]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e00f      	b.n	80030da <HAL_RCC_ClockConfig+0xc6>
 80030ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	667b      	str	r3, [r7, #100]	; 0x64
 80030c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030cc:	663b      	str	r3, [r7, #96]	; 0x60
 80030ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030d6:	4b67      	ldr	r3, [pc, #412]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030de:	65ba      	str	r2, [r7, #88]	; 0x58
 80030e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030e2:	fa92 f2a2 	rbit	r2, r2
 80030e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030ea:	fab2 f282 	clz	r2, r2
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f042 0220 	orr.w	r2, r2, #32
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	f002 021f 	and.w	r2, r2, #31
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d17b      	bne.n	80031fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0f3      	b.n	80032f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d13c      	bne.n	800318c <HAL_RCC_ClockConfig+0x178>
 8003112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003116:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <HAL_RCC_ClockConfig+0x128>
 8003136:	4b4f      	ldr	r3, [pc, #316]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	e00f      	b.n	800315c <HAL_RCC_ClockConfig+0x148>
 800313c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003140:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	647b      	str	r3, [r7, #68]	; 0x44
 800314a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314e:	643b      	str	r3, [r7, #64]	; 0x40
 8003150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003158:	4b46      	ldr	r3, [pc, #280]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003160:	63ba      	str	r2, [r7, #56]	; 0x38
 8003162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800316a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800316c:	fab2 f282 	clz	r2, r2
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	f042 0220 	orr.w	r2, r2, #32
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f002 021f 	and.w	r2, r2, #31
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f202 	lsl.w	r2, r1, r2
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d13a      	bne.n	80031fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0b2      	b.n	80032f2 <HAL_RCC_ClockConfig+0x2de>
 800318c:	2302      	movs	r3, #2
 800318e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319a:	fab3 f383 	clz	r3, r3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d102      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x1a0>
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	e00d      	b.n	80031d0 <HAL_RCC_ClockConfig+0x1bc>
 80031b4:	2302      	movs	r3, #2
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
 80031c0:	2302      	movs	r3, #2
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	4b29      	ldr	r3, [pc, #164]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	2202      	movs	r2, #2
 80031d2:	61ba      	str	r2, [r7, #24]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	fa92 f2a2 	rbit	r2, r2
 80031da:	617a      	str	r2, [r7, #20]
  return result;
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	fab2 f282 	clz	r2, r2
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	f042 0220 	orr.w	r2, r2, #32
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	f002 021f 	and.w	r2, r2, #31
 80031ee:	2101      	movs	r1, #1
 80031f0:	fa01 f202 	lsl.w	r2, r1, r2
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e079      	b.n	80032f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fe:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	491a      	ldr	r1, [pc, #104]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003210:	f7fe fb42 	bl	8001898 <HAL_GetTick>
 8003214:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	e00a      	b.n	800322e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003218:	f7fe fb3e 	bl	8001898 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e061      	b.n	80032f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_RCC_ClockConfig+0x260>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 020c 	and.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	429a      	cmp	r2, r3
 800323e:	d1eb      	bne.n	8003218 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x25c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d214      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_RCC_ClockConfig+0x25c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 0207 	bic.w	r2, r3, #7
 8003256:	4906      	ldr	r1, [pc, #24]	; (8003270 <HAL_RCC_ClockConfig+0x25c>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_RCC_ClockConfig+0x25c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e040      	b.n	80032f2 <HAL_RCC_ClockConfig+0x2de>
 8003270:	40022000 	.word	0x40022000
 8003274:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RCC_ClockConfig+0x2e8>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	491a      	ldr	r1, [pc, #104]	; (80032fc <HAL_RCC_ClockConfig+0x2e8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_RCC_ClockConfig+0x2e8>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4912      	ldr	r1, [pc, #72]	; (80032fc <HAL_RCC_ClockConfig+0x2e8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032b6:	f000 f829 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032ba:	4601      	mov	r1, r0
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_RCC_ClockConfig+0x2e8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c4:	22f0      	movs	r2, #240	; 0xf0
 80032c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	fa92 f2a2 	rbit	r2, r2
 80032ce:	60fa      	str	r2, [r7, #12]
  return result;
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	fab2 f282 	clz	r2, r2
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	40d3      	lsrs	r3, r2
 80032da:	4a09      	ldr	r2, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x2ec>)
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	fa21 f303 	lsr.w	r3, r1, r3
 80032e2:	4a08      	ldr	r2, [pc, #32]	; (8003304 <HAL_RCC_ClockConfig+0x2f0>)
 80032e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_RCC_ClockConfig+0x2f4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fe fa90 	bl	8001810 <HAL_InitTick>
  
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3778      	adds	r7, #120	; 0x78
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	0800a734 	.word	0x0800a734
 8003304:	20000008 	.word	0x20000008
 8003308:	2000000c 	.word	0x2000000c

0800330c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b08b      	sub	sp, #44	; 0x2c
 8003310:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b04      	cmp	r3, #4
 8003334:	d002      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x30>
 8003336:	2b08      	cmp	r3, #8
 8003338:	d003      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0x36>
 800333a:	e03c      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800333e:	623b      	str	r3, [r7, #32]
      break;
 8003340:	e03c      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003348:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800334c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	fa92 f2a2 	rbit	r2, r2
 8003354:	607a      	str	r2, [r7, #4]
  return result;
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	fab2 f282 	clz	r2, r2
 800335c:	b2d2      	uxtb	r2, r2
 800335e:	40d3      	lsrs	r3, r2
 8003360:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003366:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	220f      	movs	r2, #15
 8003370:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	fa92 f2a2 	rbit	r2, r2
 8003378:	60fa      	str	r2, [r7, #12]
  return result;
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	fab2 f282 	clz	r2, r2
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	40d3      	lsrs	r3, r2
 8003384:	4a14      	ldr	r2, [pc, #80]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003386:	5cd3      	ldrb	r3, [r2, r3]
 8003388:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003394:	4a0e      	ldr	r2, [pc, #56]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	fbb2 f2f3 	udiv	r2, r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
 80033a4:	e004      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80033aa:	fb02 f303 	mul.w	r3, r2, r3
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	623b      	str	r3, [r7, #32]
      break;
 80033b4:	e002      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033b8:	623b      	str	r3, [r7, #32]
      break;
 80033ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033bc:	6a3b      	ldr	r3, [r7, #32]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	372c      	adds	r7, #44	; 0x2c
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	007a1200 	.word	0x007a1200
 80033d4:	0800a74c 	.word	0x0800a74c
 80033d8:	0800a75c 	.word	0x0800a75c
 80033dc:	003d0900 	.word	0x003d0900

080033e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000008 	.word	0x20000008

080033f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033fe:	f7ff ffef 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003402:	4601      	mov	r1, r0
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800340c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003410:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	fa92 f2a2 	rbit	r2, r2
 8003418:	603a      	str	r2, [r7, #0]
  return result;
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	fab2 f282 	clz	r2, r2
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	40d3      	lsrs	r3, r2
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003426:	5cd3      	ldrb	r3, [r2, r3]
 8003428:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	0800a744 	.word	0x0800a744

0800343c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003442:	f7ff ffcd 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003446:	4601      	mov	r1, r0
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003450:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003454:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	fa92 f2a2 	rbit	r2, r2
 800345c:	603a      	str	r2, [r7, #0]
  return result;
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	fab2 f282 	clz	r2, r2
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	40d3      	lsrs	r3, r2
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <HAL_RCC_GetPCLK2Freq+0x40>)
 800346a:	5cd3      	ldrb	r3, [r2, r3]
 800346c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000
 800347c:	0800a744 	.word	0x0800a744

08003480 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b092      	sub	sp, #72	; 0x48
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003490:	2300      	movs	r3, #0
 8003492:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80cd 	beq.w	800363e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a4:	4b8e      	ldr	r3, [pc, #568]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10e      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b0:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a8a      	ldr	r2, [pc, #552]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ba:	61d3      	str	r3, [r2, #28]
 80034bc:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ce:	4b85      	ldr	r3, [pc, #532]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034da:	4b82      	ldr	r3, [pc, #520]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a81      	ldr	r2, [pc, #516]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7fe f9d7 	bl	8001898 <HAL_GetTick>
 80034ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7fe f9d3 	bl	8001898 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0ea      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b78      	ldr	r3, [pc, #480]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800350c:	4b74      	ldr	r3, [pc, #464]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d07d      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003526:	429a      	cmp	r2, r3
 8003528:	d076      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800352a:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003538:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003544:	fab3 f383 	clz	r3, r3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	461a      	mov	r2, r3
 8003554:	2301      	movs	r3, #1
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800355c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	4b5d      	ldr	r3, [pc, #372]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	461a      	mov	r2, r3
 8003578:	2300      	movs	r3, #0
 800357a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800357c:	4a58      	ldr	r2, [pc, #352]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003580:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d045      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe f984 	bl	8001898 <HAL_GetTick>
 8003590:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003592:	e00a      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	f7fe f980 	bl	8001898 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e095      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80035aa:	2302      	movs	r3, #2
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
 80035b6:	2302      	movs	r3, #2
 80035b8:	623b      	str	r3, [r7, #32]
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	61fb      	str	r3, [r7, #28]
  return result;
 80035c2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f043 0302 	orr.w	r3, r3, #2
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d102      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80035d8:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	e007      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80035de:	2302      	movs	r3, #2
 80035e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2202      	movs	r2, #2
 80035f0:	613a      	str	r2, [r7, #16]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	fa92 f2a2 	rbit	r2, r2
 80035f8:	60fa      	str	r2, [r7, #12]
  return result;
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	fab2 f282 	clz	r2, r2
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	f002 021f 	and.w	r2, r2, #31
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f202 	lsl.w	r2, r1, r2
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0bd      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003618:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	492e      	ldr	r1, [pc, #184]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	4313      	orrs	r3, r2
 8003628:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800362a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800362e:	2b01      	cmp	r3, #1
 8003630:	d105      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003632:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800364a:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4922      	ldr	r1, [pc, #136]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	4313      	orrs	r3, r2
 800365a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f023 0210 	bic.w	r2, r3, #16
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003676:	4313      	orrs	r3, r2
 8003678:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	4913      	ldr	r1, [pc, #76]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003694:	4313      	orrs	r3, r2
 8003696:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	490b      	ldr	r1, [pc, #44]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3748      	adds	r7, #72	; 0x48
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	10908100 	.word	0x10908100

080036ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e049      	b.n	8003792 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fe78 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	4619      	mov	r1, r3
 800372a:	4610      	mov	r0, r2
 800372c:	f000 fad2 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d001      	beq.n	80037b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e040      	b.n	8003836 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_TIM_Base_Start_IT+0xa8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x58>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d009      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x58>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_TIM_Base_Start_IT+0xac>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x58>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a17      	ldr	r2, [pc, #92]	; (800384c <HAL_TIM_Base_Start_IT+0xb0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d115      	bne.n	8003820 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_TIM_Base_Start_IT+0xb4>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b06      	cmp	r3, #6
 8003804:	d015      	beq.n	8003832 <HAL_TIM_Base_Start_IT+0x96>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d011      	beq.n	8003832 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381e:	e008      	b.n	8003832 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e000      	b.n	8003834 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003832:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40000400 	.word	0x40000400
 800384c:	40014000 	.word	0x40014000
 8003850:	00010007 	.word	0x00010007

08003854 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6a1a      	ldr	r2, [r3, #32]
 8003872:	f241 1311 	movw	r3, #4369	; 0x1111
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10f      	bne.n	800389c <HAL_TIM_Base_Stop_IT+0x48>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	f240 4344 	movw	r3, #1092	; 0x444
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d107      	bne.n	800389c <HAL_TIM_Base_Stop_IT+0x48>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d122      	bne.n	800390e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d11b      	bne.n	800390e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f06f 0202 	mvn.w	r2, #2
 80038de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f9ce 	bl	8003c96 <HAL_TIM_IC_CaptureCallback>
 80038fa:	e005      	b.n	8003908 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f9c0 	bl	8003c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f9d1 	bl	8003caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b04      	cmp	r3, #4
 800391a:	d122      	bne.n	8003962 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b04      	cmp	r3, #4
 8003928:	d11b      	bne.n	8003962 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f06f 0204 	mvn.w	r2, #4
 8003932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f9a4 	bl	8003c96 <HAL_TIM_IC_CaptureCallback>
 800394e:	e005      	b.n	800395c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f996 	bl	8003c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f9a7 	bl	8003caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b08      	cmp	r3, #8
 800396e:	d122      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b08      	cmp	r3, #8
 800397c:	d11b      	bne.n	80039b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f06f 0208 	mvn.w	r2, #8
 8003986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2204      	movs	r2, #4
 800398c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f97a 	bl	8003c96 <HAL_TIM_IC_CaptureCallback>
 80039a2:	e005      	b.n	80039b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f96c 	bl	8003c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f97d 	bl	8003caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d122      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d11b      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f06f 0210 	mvn.w	r2, #16
 80039da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2208      	movs	r2, #8
 80039e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f950 	bl	8003c96 <HAL_TIM_IC_CaptureCallback>
 80039f6:	e005      	b.n	8003a04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f942 	bl	8003c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f953 	bl	8003caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10e      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f06f 0201 	mvn.w	r2, #1
 8003a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7fd fb77 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a40:	2b80      	cmp	r3, #128	; 0x80
 8003a42:	d10e      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b80      	cmp	r3, #128	; 0x80
 8003a50:	d107      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fac3 	bl	8003fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	d107      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fab6 	bl	8003ffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f901 	bl	8003cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0220 	mvn.w	r2, #32
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa76 	bl	8003fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_ConfigClockSource+0x1c>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e0b6      	b.n	8003c7a <HAL_TIM_ConfigClockSource+0x18a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d03e      	beq.n	8003bc8 <HAL_TIM_ConfigClockSource+0xd8>
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	f200 8087 	bhi.w	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	f000 8086 	beq.w	8003c66 <HAL_TIM_ConfigClockSource+0x176>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d87f      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b60:	2b70      	cmp	r3, #112	; 0x70
 8003b62:	d01a      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0xaa>
 8003b64:	2b70      	cmp	r3, #112	; 0x70
 8003b66:	d87b      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b68:	2b60      	cmp	r3, #96	; 0x60
 8003b6a:	d050      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0x11e>
 8003b6c:	2b60      	cmp	r3, #96	; 0x60
 8003b6e:	d877      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b70:	2b50      	cmp	r3, #80	; 0x50
 8003b72:	d03c      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xfe>
 8003b74:	2b50      	cmp	r3, #80	; 0x50
 8003b76:	d873      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d058      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x13e>
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	d86f      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b80:	2b30      	cmp	r3, #48	; 0x30
 8003b82:	d064      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15e>
 8003b84:	2b30      	cmp	r3, #48	; 0x30
 8003b86:	d86b      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d060      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15e>
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d867      	bhi.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d05c      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15e>
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d05a      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x15e>
 8003b98:	e062      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6899      	ldr	r1, [r3, #8]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f000 f985 	bl	8003eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	609a      	str	r2, [r3, #8]
      break;
 8003bc6:	e04f      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6899      	ldr	r1, [r3, #8]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f000 f96e 	bl	8003eb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bea:	609a      	str	r2, [r3, #8]
      break;
 8003bec:	e03c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f000 f8e2 	bl	8003dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2150      	movs	r1, #80	; 0x50
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f93b 	bl	8003e82 <TIM_ITRx_SetConfig>
      break;
 8003c0c:	e02c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6859      	ldr	r1, [r3, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f000 f901 	bl	8003e22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2160      	movs	r1, #96	; 0x60
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f92b 	bl	8003e82 <TIM_ITRx_SetConfig>
      break;
 8003c2c:	e01c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 f8c2 	bl	8003dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2140      	movs	r1, #64	; 0x40
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f91b 	bl	8003e82 <TIM_ITRx_SetConfig>
      break;
 8003c4c:	e00c      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f000 f912 	bl	8003e82 <TIM_ITRx_SetConfig>
      break;
 8003c5e:	e003      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
      break;
 8003c64:	e000      	b.n	8003c68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a32      	ldr	r2, [pc, #200]	; (8003db0 <TIM_Base_SetConfig+0xdc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d007      	beq.n	8003cfc <TIM_Base_SetConfig+0x28>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d003      	beq.n	8003cfc <TIM_Base_SetConfig+0x28>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <TIM_Base_SetConfig+0xe0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d108      	bne.n	8003d0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a27      	ldr	r2, [pc, #156]	; (8003db0 <TIM_Base_SetConfig+0xdc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <TIM_Base_SetConfig+0x6a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d00f      	beq.n	8003d3e <TIM_Base_SetConfig+0x6a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <TIM_Base_SetConfig+0xe0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_Base_SetConfig+0x6a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a23      	ldr	r2, [pc, #140]	; (8003db8 <TIM_Base_SetConfig+0xe4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0x6a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <TIM_Base_SetConfig+0xe8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0x6a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <TIM_Base_SetConfig+0xec>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d108      	bne.n	8003d50 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <TIM_Base_SetConfig+0xdc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00b      	beq.n	8003d94 <TIM_Base_SetConfig+0xc0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <TIM_Base_SetConfig+0xe4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <TIM_Base_SetConfig+0xc0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <TIM_Base_SetConfig+0xe8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d003      	beq.n	8003d94 <TIM_Base_SetConfig+0xc0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a0c      	ldr	r2, [pc, #48]	; (8003dc0 <TIM_Base_SetConfig+0xec>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d103      	bne.n	8003d9c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	615a      	str	r2, [r3, #20]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800

08003dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f023 0201 	bic.w	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f023 030a 	bic.w	r3, r3, #10
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f023 0210 	bic.w	r2, r3, #16
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	031b      	lsls	r3, r3, #12
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f043 0307 	orr.w	r3, r3, #7
 8003ea4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	609a      	str	r2, [r3, #8]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	021a      	lsls	r2, r3, #8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e054      	b.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d009      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a13      	ldr	r2, [pc, #76]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a11      	ldr	r2, [pc, #68]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40014000 	.word	0x40014000

08003fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e040      	b.n	80040a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd fa26 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2224      	movs	r2, #36	; 0x24
 800403c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fbe6 	bl	8004820 <UART_SetConfig>
 8004054:	4603      	mov	r3, r0
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e022      	b.n	80040a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fd10 	bl	8004a8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800407a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800408a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fd97 	bl	8004bd0 <UART_CheckIdleState>
 80040a2:	4603      	mov	r3, r0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b08b      	sub	sp, #44	; 0x2c
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d156      	bne.n	8004170 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_UART_Transmit_IT+0x22>
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e04f      	b.n	8004172 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_UART_Transmit_IT+0x34>
 80040dc:	2302      	movs	r3, #2
 80040de:	e048      	b.n	8004172 <HAL_UART_Transmit_IT+0xc6>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	88fa      	ldrh	r2, [r7, #6]
 80040f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2221      	movs	r2, #33	; 0x21
 8004110:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411a:	d107      	bne.n	800412c <HAL_UART_Transmit_IT+0x80>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a16      	ldr	r2, [pc, #88]	; (8004180 <HAL_UART_Transmit_IT+0xd4>)
 8004128:	669a      	str	r2, [r3, #104]	; 0x68
 800412a:	e002      	b.n	8004132 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4a15      	ldr	r2, [pc, #84]	; (8004184 <HAL_UART_Transmit_IT+0xd8>)
 8004130:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	613b      	str	r3, [r7, #16]
   return(result);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	623b      	str	r3, [r7, #32]
 800415a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	69f9      	ldr	r1, [r7, #28]
 800415e:	6a3a      	ldr	r2, [r7, #32]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	61bb      	str	r3, [r7, #24]
   return(result);
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	372c      	adds	r7, #44	; 0x2c
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	080050ef 	.word	0x080050ef
 8004184:	08005037 	.word	0x08005037

08004188 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419a:	2b20      	cmp	r3, #32
 800419c:	d13d      	bne.n	800421a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_UART_Receive_IT+0x22>
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e036      	b.n	800421c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Receive_IT+0x34>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e02f      	b.n	800421c <HAL_UART_Receive_IT+0x94>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d018      	beq.n	800420a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	613b      	str	r3, [r7, #16]
   return(result);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	623b      	str	r3, [r7, #32]
 80041f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	69f9      	ldr	r1, [r7, #28]
 80041fc:	6a3a      	ldr	r2, [r7, #32]
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	61bb      	str	r3, [r7, #24]
   return(result);
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e6      	bne.n	80041d8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	461a      	mov	r2, r3
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 fdeb 	bl	8004dec <UART_Start_Receive_IT>
 8004216:	4603      	mov	r3, r0
 8004218:	e000      	b.n	800421c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3728      	adds	r7, #40	; 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b0ba      	sub	sp, #232	; 0xe8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800424a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800424e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004252:	4013      	ands	r3, r2
 8004254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d115      	bne.n	800428c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00f      	beq.n	800428c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 82a3 	beq.w	80047c8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
      }
      return;
 800428a:	e29d      	b.n	80047c8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800428c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8117 	beq.w	80044c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80042a6:	4b85      	ldr	r3, [pc, #532]	; (80044bc <HAL_UART_IRQHandler+0x298>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 810a 	beq.w	80044c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d011      	beq.n	80042e0 <HAL_UART_IRQHandler+0xbc>
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2201      	movs	r2, #1
 80042ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d6:	f043 0201 	orr.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d011      	beq.n	8004310 <HAL_UART_IRQHandler+0xec>
 80042ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2202      	movs	r2, #2
 80042fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004306:	f043 0204 	orr.w	r2, r3, #4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d011      	beq.n	8004340 <HAL_UART_IRQHandler+0x11c>
 800431c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00b      	beq.n	8004340 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2204      	movs	r2, #4
 800432e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004336:	f043 0202 	orr.w	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d017      	beq.n	800437c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800434c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800435c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2208      	movs	r2, #8
 800436a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004372:	f043 0208 	orr.w	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004384:	2b00      	cmp	r3, #0
 8004386:	d012      	beq.n	80043ae <HAL_UART_IRQHandler+0x18a>
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800439c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8209 	beq.w	80047cc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00d      	beq.n	80043e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d007      	beq.n	80043e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d005      	beq.n	8004406 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004402:	2b00      	cmp	r3, #0
 8004404:	d04f      	beq.n	80044a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fd9c 	bl	8004f44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d141      	bne.n	800449e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3308      	adds	r3, #8
 8004420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004446:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800444a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800445e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1d9      	bne.n	800441a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	2b00      	cmp	r3, #0
 800446c:	d013      	beq.n	8004496 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	4a13      	ldr	r2, [pc, #76]	; (80044c0 <HAL_UART_IRQHandler+0x29c>)
 8004474:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd fb94 	bl	8001ba8 <HAL_DMA_Abort_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d017      	beq.n	80044b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004490:	4610      	mov	r0, r2
 8004492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	e00f      	b.n	80044b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9ac 	bl	80047f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	e00b      	b.n	80044b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9a8 	bl	80047f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e007      	b.n	80044b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f9a4 	bl	80047f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80044b4:	e18a      	b.n	80047cc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b6:	bf00      	nop
    return;
 80044b8:	e188      	b.n	80047cc <HAL_UART_IRQHandler+0x5a8>
 80044ba:	bf00      	nop
 80044bc:	04000120 	.word	0x04000120
 80044c0:	0800500b 	.word	0x0800500b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f040 8143 	bne.w	8004754 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 813c 	beq.w	8004754 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8135 	beq.w	8004754 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2210      	movs	r2, #16
 80044f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	f040 80b1 	bne.w	8004664 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800450e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 815c 	beq.w	80047d0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800451e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004522:	429a      	cmp	r2, r3
 8004524:	f080 8154 	bcs.w	80047d0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800452e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b20      	cmp	r3, #32
 800453a:	f000 8085 	beq.w	8004648 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800455a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004568:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800456c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004574:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1da      	bne.n	800453e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004598:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3308      	adds	r3, #8
 80045a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e1      	bne.n	8004588 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3308      	adds	r3, #8
 80045ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3308      	adds	r3, #8
 80045e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e3      	bne.n	80045c4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004618:	f023 0310 	bic.w	r3, r3, #16
 800461c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800462a:	65bb      	str	r3, [r7, #88]	; 0x58
 800462c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e4      	bne.n	8004608 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4618      	mov	r0, r3
 8004644:	f7fd fa77 	bl	8001b36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004654:	b29b      	uxth	r3, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	b29b      	uxth	r3, r3
 800465a:	4619      	mov	r1, r3
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f8d3 	bl	8004808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004662:	e0b5      	b.n	80047d0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004670:	b29b      	uxth	r3, r3
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80a7 	beq.w	80047d4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80a2 	beq.w	80047d4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	461a      	mov	r2, r3
 80046ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
 80046b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e4      	bne.n	8004690 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3308      	adds	r3, #8
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	e853 3f00 	ldrex	r3, [r3]
 80046d4:	623b      	str	r3, [r7, #32]
   return(result);
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046ea:	633a      	str	r2, [r7, #48]	; 0x30
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e3      	bne.n	80046c6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	60fb      	str	r3, [r7, #12]
   return(result);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f023 0310 	bic.w	r3, r3, #16
 8004724:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	69b9      	ldr	r1, [r7, #24]
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	617b      	str	r3, [r7, #20]
   return(result);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e4      	bne.n	8004710 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f85b 	bl	8004808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004752:	e03f      	b.n	80047d4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00e      	beq.n	800477e <HAL_UART_IRQHandler+0x55a>
 8004760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fe9f 	bl	80054ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800477c:	e02d      	b.n	80047da <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00e      	beq.n	80047a8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800478a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01c      	beq.n	80047d8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
    }
    return;
 80047a6:	e017      	b.n	80047d8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <HAL_UART_IRQHandler+0x5b6>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00c      	beq.n	80047da <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fcf4 	bl	80051ae <UART_EndTransmit_IT>
    return;
 80047c6:	e008      	b.n	80047da <HAL_UART_IRQHandler+0x5b6>
      return;
 80047c8:	bf00      	nop
 80047ca:	e006      	b.n	80047da <HAL_UART_IRQHandler+0x5b6>
    return;
 80047cc:	bf00      	nop
 80047ce:	e004      	b.n	80047da <HAL_UART_IRQHandler+0x5b6>
      return;
 80047d0:	bf00      	nop
 80047d2:	e002      	b.n	80047da <HAL_UART_IRQHandler+0x5b6>
      return;
 80047d4:	bf00      	nop
 80047d6:	e000      	b.n	80047da <HAL_UART_IRQHandler+0x5b6>
    return;
 80047d8:	bf00      	nop
  }

}
 80047da:	37e8      	adds	r7, #232	; 0xe8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b8a      	ldr	r3, [pc, #552]	; (8004a74 <UART_SetConfig+0x254>)
 800484c:	4013      	ands	r3, r2
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6979      	ldr	r1, [r7, #20]
 8004854:	430b      	orrs	r3, r1
 8004856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	430a      	orrs	r2, r1
 8004890:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a78      	ldr	r2, [pc, #480]	; (8004a78 <UART_SetConfig+0x258>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d120      	bne.n	80048de <UART_SetConfig+0xbe>
 800489c:	4b77      	ldr	r3, [pc, #476]	; (8004a7c <UART_SetConfig+0x25c>)
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d817      	bhi.n	80048d8 <UART_SetConfig+0xb8>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0x90>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048cd 	.word	0x080048cd
 80048b8:	080048d3 	.word	0x080048d3
 80048bc:	080048c7 	.word	0x080048c7
 80048c0:	2300      	movs	r3, #0
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e01d      	b.n	8004902 <UART_SetConfig+0xe2>
 80048c6:	2302      	movs	r3, #2
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e01a      	b.n	8004902 <UART_SetConfig+0xe2>
 80048cc:	2304      	movs	r3, #4
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e017      	b.n	8004902 <UART_SetConfig+0xe2>
 80048d2:	2308      	movs	r3, #8
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e014      	b.n	8004902 <UART_SetConfig+0xe2>
 80048d8:	2310      	movs	r3, #16
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e011      	b.n	8004902 <UART_SetConfig+0xe2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a67      	ldr	r2, [pc, #412]	; (8004a80 <UART_SetConfig+0x260>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d102      	bne.n	80048ee <UART_SetConfig+0xce>
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e009      	b.n	8004902 <UART_SetConfig+0xe2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a64      	ldr	r2, [pc, #400]	; (8004a84 <UART_SetConfig+0x264>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d102      	bne.n	80048fe <UART_SetConfig+0xde>
 80048f8:	2300      	movs	r3, #0
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e001      	b.n	8004902 <UART_SetConfig+0xe2>
 80048fe:	2310      	movs	r3, #16
 8004900:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490a:	d15b      	bne.n	80049c4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800490c:	7ffb      	ldrb	r3, [r7, #31]
 800490e:	2b08      	cmp	r3, #8
 8004910:	d827      	bhi.n	8004962 <UART_SetConfig+0x142>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0xf8>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004945 	.word	0x08004945
 8004920:	0800494d 	.word	0x0800494d
 8004924:	08004963 	.word	0x08004963
 8004928:	08004953 	.word	0x08004953
 800492c:	08004963 	.word	0x08004963
 8004930:	08004963 	.word	0x08004963
 8004934:	08004963 	.word	0x08004963
 8004938:	0800495b 	.word	0x0800495b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fe fd5c 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 8004940:	61b8      	str	r0, [r7, #24]
        break;
 8004942:	e013      	b.n	800496c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004944:	f7fe fd7a 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 8004948:	61b8      	str	r0, [r7, #24]
        break;
 800494a:	e00f      	b.n	800496c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800494c:	4b4e      	ldr	r3, [pc, #312]	; (8004a88 <UART_SetConfig+0x268>)
 800494e:	61bb      	str	r3, [r7, #24]
        break;
 8004950:	e00c      	b.n	800496c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004952:	f7fe fcdb 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004956:	61b8      	str	r0, [r7, #24]
        break;
 8004958:	e008      	b.n	800496c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	61bb      	str	r3, [r7, #24]
        break;
 8004960:	e004      	b.n	800496c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	77bb      	strb	r3, [r7, #30]
        break;
 800496a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d074      	beq.n	8004a5c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	005a      	lsls	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	b29b      	uxth	r3, r3
 8004988:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b0f      	cmp	r3, #15
 800498e:	d916      	bls.n	80049be <UART_SetConfig+0x19e>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004996:	d212      	bcs.n	80049be <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f023 030f 	bic.w	r3, r3, #15
 80049a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	89fb      	ldrh	r3, [r7, #14]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	89fa      	ldrh	r2, [r7, #14]
 80049ba:	60da      	str	r2, [r3, #12]
 80049bc:	e04e      	b.n	8004a5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	77bb      	strb	r3, [r7, #30]
 80049c2:	e04b      	b.n	8004a5c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049c4:	7ffb      	ldrb	r3, [r7, #31]
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d827      	bhi.n	8004a1a <UART_SetConfig+0x1fa>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <UART_SetConfig+0x1b0>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049fd 	.word	0x080049fd
 80049d8:	08004a05 	.word	0x08004a05
 80049dc:	08004a1b 	.word	0x08004a1b
 80049e0:	08004a0b 	.word	0x08004a0b
 80049e4:	08004a1b 	.word	0x08004a1b
 80049e8:	08004a1b 	.word	0x08004a1b
 80049ec:	08004a1b 	.word	0x08004a1b
 80049f0:	08004a13 	.word	0x08004a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f4:	f7fe fd00 	bl	80033f8 <HAL_RCC_GetPCLK1Freq>
 80049f8:	61b8      	str	r0, [r7, #24]
        break;
 80049fa:	e013      	b.n	8004a24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7fe fd1e 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 8004a00:	61b8      	str	r0, [r7, #24]
        break;
 8004a02:	e00f      	b.n	8004a24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a04:	4b20      	ldr	r3, [pc, #128]	; (8004a88 <UART_SetConfig+0x268>)
 8004a06:	61bb      	str	r3, [r7, #24]
        break;
 8004a08:	e00c      	b.n	8004a24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a0a:	f7fe fc7f 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004a0e:	61b8      	str	r0, [r7, #24]
        break;
 8004a10:	e008      	b.n	8004a24 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a16:	61bb      	str	r3, [r7, #24]
        break;
 8004a18:	e004      	b.n	8004a24 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	77bb      	strb	r3, [r7, #30]
        break;
 8004a22:	bf00      	nop
    }

    if (pclk != 0U)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d018      	beq.n	8004a5c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	085a      	lsrs	r2, r3, #1
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	441a      	add	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	d908      	bls.n	8004a58 <UART_SetConfig+0x238>
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d204      	bcs.n	8004a58 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	e001      	b.n	8004a5c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a68:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	efff69f3 	.word	0xefff69f3
 8004a78:	40013800 	.word	0x40013800
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40004400 	.word	0x40004400
 8004a84:	40004800 	.word	0x40004800
 8004a88:	007a1200 	.word	0x007a1200

08004a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8a:	d10a      	bne.n	8004ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	605a      	str	r2, [r3, #4]
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be0:	f7fc fe5a 	bl	8001898 <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d10e      	bne.n	8004c12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f82d 	bl	8004c62 <UART_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e023      	b.n	8004c5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d10e      	bne.n	8004c3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f817 	bl	8004c62 <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e00d      	b.n	8004c5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b09c      	sub	sp, #112	; 0x70
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c72:	e0a5      	b.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7a:	f000 80a1 	beq.w	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7fc fe0b 	bl	8001898 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d13e      	bne.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e6      	bne.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ce6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ce8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e5      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e067      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d04f      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2e:	d147      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e6      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3308      	adds	r3, #8
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d8c:	623a      	str	r2, [r7, #32]
 8004d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e010      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	f43f af4a 	beq.w	8004c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3770      	adds	r7, #112	; 0x70
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b091      	sub	sp, #68	; 0x44
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	88fa      	ldrh	r2, [r7, #6]
 8004e0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	d10e      	bne.n	8004e3e <UART_Start_Receive_IT+0x52>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <UART_Start_Receive_IT+0x48>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e32:	e02d      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	22ff      	movs	r2, #255	; 0xff
 8004e38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e3c:	e028      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10d      	bne.n	8004e62 <UART_Start_Receive_IT+0x76>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <UART_Start_Receive_IT+0x6c>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	22ff      	movs	r2, #255	; 0xff
 8004e52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e56:	e01b      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	227f      	movs	r2, #127	; 0x7f
 8004e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e60:	e016      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e6a:	d10d      	bne.n	8004e88 <UART_Start_Receive_IT+0x9c>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <UART_Start_Receive_IT+0x92>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	227f      	movs	r2, #127	; 0x7f
 8004e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e7c:	e008      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	223f      	movs	r2, #63	; 0x3f
 8004e82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e86:	e003      	b.n	8004e90 <UART_Start_Receive_IT+0xa4>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2222      	movs	r2, #34	; 0x22
 8004e9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ebe:	637a      	str	r2, [r7, #52]	; 0x34
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e5      	bne.n	8004e9e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eda:	d107      	bne.n	8004eec <UART_Start_Receive_IT+0x100>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d103      	bne.n	8004eec <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <UART_Start_Receive_IT+0x150>)
 8004ee8:	665a      	str	r2, [r3, #100]	; 0x64
 8004eea:	e002      	b.n	8004ef2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a14      	ldr	r2, [pc, #80]	; (8004f40 <UART_Start_Receive_IT+0x154>)
 8004ef0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	613b      	str	r3, [r7, #16]
   return(result);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	623b      	str	r3, [r7, #32]
 8004f1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	69f9      	ldr	r1, [r7, #28]
 8004f1e:	6a3a      	ldr	r2, [r7, #32]
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e6      	bne.n	8004efa <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3744      	adds	r7, #68	; 0x44
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	0800535f 	.word	0x0800535f
 8004f40:	08005203 	.word	0x08005203

08004f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b095      	sub	sp, #84	; 0x54
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e6      	bne.n	8004f4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3308      	adds	r3, #8
 8004f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d118      	bne.n	8004fec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f023 0310 	bic.w	r3, r3, #16
 8004fce:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6979      	ldr	r1, [r7, #20]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e6      	bne.n	8004fba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ffe:	bf00      	nop
 8005000:	3754      	adds	r7, #84	; 0x54
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff fbe3 	bl	80047f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005036:	b480      	push	{r7}
 8005038:	b08f      	sub	sp, #60	; 0x3c
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005042:	2b21      	cmp	r3, #33	; 0x21
 8005044:	d14d      	bne.n	80050e2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d132      	bne.n	80050b8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	637b      	str	r3, [r7, #52]	; 0x34
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005072:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e6      	bne.n	8005052 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	60bb      	str	r3, [r7, #8]
   return(result);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6979      	ldr	r1, [r7, #20]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	613b      	str	r3, [r7, #16]
   return(result);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e6      	bne.n	8005084 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80050b6:	e014      	b.n	80050e2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b292      	uxth	r2, r2
 80050c4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80050e2:	bf00      	nop
 80050e4:	373c      	adds	r7, #60	; 0x3c
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b091      	sub	sp, #68	; 0x44
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050fa:	2b21      	cmp	r3, #33	; 0x21
 80050fc:	d151      	bne.n	80051a2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d132      	bne.n	8005170 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	623b      	str	r3, [r7, #32]
   return(result);
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800511e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	633b      	str	r3, [r7, #48]	; 0x30
 800512a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800512e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e6      	bne.n	800510a <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	60fb      	str	r3, [r7, #12]
   return(result);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	69b9      	ldr	r1, [r7, #24]
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	617b      	str	r3, [r7, #20]
   return(result);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e6      	bne.n	800513c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800516e:	e018      	b.n	80051a2 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005174:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005178:	881a      	ldrh	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005182:	b292      	uxth	r2, r2
 8005184:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518a:	1c9a      	adds	r2, r3, #2
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80051a2:	bf00      	nop
 80051a4:	3744      	adds	r7, #68	; 0x44
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b088      	sub	sp, #32
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6979      	ldr	r1, [r7, #20]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	613b      	str	r3, [r7, #16]
   return(result);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e6      	bne.n	80051b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff faf3 	bl	80047e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051fa:	bf00      	nop
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b096      	sub	sp, #88	; 0x58
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005210:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005218:	2b22      	cmp	r3, #34	; 0x22
 800521a:	f040 8094 	bne.w	8005346 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005224:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005228:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800522c:	b2d9      	uxtb	r1, r3
 800522e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005232:	b2da      	uxtb	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005238:	400a      	ands	r2, r1
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d177      	bne.n	8005356 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	e853 3f00 	ldrex	r3, [r3]
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800527a:	653b      	str	r3, [r7, #80]	; 0x50
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005284:	647b      	str	r3, [r7, #68]	; 0x44
 8005286:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800528a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e6      	bne.n	8005266 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3308      	adds	r3, #8
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	623b      	str	r3, [r7, #32]
   return(result);
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3308      	adds	r3, #8
 80052b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052b8:	633a      	str	r2, [r7, #48]	; 0x30
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e5      	bne.n	8005298 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d12e      	bne.n	800533e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0310 	bic.w	r3, r3, #16
 80052fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	69b9      	ldr	r1, [r7, #24]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	617b      	str	r3, [r7, #20]
   return(result);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e6      	bne.n	80052e6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	2b10      	cmp	r3, #16
 8005324:	d103      	bne.n	800532e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2210      	movs	r2, #16
 800532c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fa66 	bl	8004808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800533c:	e00b      	b.n	8005356 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fb ff28 	bl	8001194 <HAL_UART_RxCpltCallback>
}
 8005344:	e007      	b.n	8005356 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0208 	orr.w	r2, r2, #8
 8005354:	619a      	str	r2, [r3, #24]
}
 8005356:	bf00      	nop
 8005358:	3758      	adds	r7, #88	; 0x58
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b096      	sub	sp, #88	; 0x58
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800536c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005374:	2b22      	cmp	r3, #34	; 0x22
 8005376:	f040 8094 	bne.w	80054a2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005380:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800538a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800538e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005392:	4013      	ands	r3, r2
 8005394:	b29a      	uxth	r2, r3
 8005396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005398:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	1c9a      	adds	r2, r3, #2
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d177      	bne.n	80054b2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	461a      	mov	r2, r3
 80053de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e0:	643b      	str	r3, [r7, #64]	; 0x40
 80053e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e6      	bne.n	80053c2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3308      	adds	r3, #8
 80053fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	61fb      	str	r3, [r7, #28]
   return(result);
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	64bb      	str	r3, [r7, #72]	; 0x48
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800541a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e5      	bne.n	80053f4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005438:	2b01      	cmp	r3, #1
 800543a:	d12e      	bne.n	800549a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f023 0310 	bic.w	r3, r3, #16
 8005456:	647b      	str	r3, [r7, #68]	; 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6979      	ldr	r1, [r7, #20]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	613b      	str	r3, [r7, #16]
   return(result);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e6      	bne.n	8005442 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b10      	cmp	r3, #16
 8005480:	d103      	bne.n	800548a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2210      	movs	r2, #16
 8005488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff f9b8 	bl	8004808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005498:	e00b      	b.n	80054b2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fb fe7a 	bl	8001194 <HAL_UART_RxCpltCallback>
}
 80054a0:	e007      	b.n	80054b2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0208 	orr.w	r2, r2, #8
 80054b0:	619a      	str	r2, [r3, #24]
}
 80054b2:	bf00      	nop
 80054b4:	3758      	adds	r7, #88	; 0x58
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <__errno>:
 80054d0:	4b01      	ldr	r3, [pc, #4]	; (80054d8 <__errno+0x8>)
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000014 	.word	0x20000014

080054dc <__libc_init_array>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4d0d      	ldr	r5, [pc, #52]	; (8005514 <__libc_init_array+0x38>)
 80054e0:	4c0d      	ldr	r4, [pc, #52]	; (8005518 <__libc_init_array+0x3c>)
 80054e2:	1b64      	subs	r4, r4, r5
 80054e4:	10a4      	asrs	r4, r4, #2
 80054e6:	2600      	movs	r6, #0
 80054e8:	42a6      	cmp	r6, r4
 80054ea:	d109      	bne.n	8005500 <__libc_init_array+0x24>
 80054ec:	4d0b      	ldr	r5, [pc, #44]	; (800551c <__libc_init_array+0x40>)
 80054ee:	4c0c      	ldr	r4, [pc, #48]	; (8005520 <__libc_init_array+0x44>)
 80054f0:	f005 f8c8 	bl	800a684 <_init>
 80054f4:	1b64      	subs	r4, r4, r5
 80054f6:	10a4      	asrs	r4, r4, #2
 80054f8:	2600      	movs	r6, #0
 80054fa:	42a6      	cmp	r6, r4
 80054fc:	d105      	bne.n	800550a <__libc_init_array+0x2e>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	f855 3b04 	ldr.w	r3, [r5], #4
 8005504:	4798      	blx	r3
 8005506:	3601      	adds	r6, #1
 8005508:	e7ee      	b.n	80054e8 <__libc_init_array+0xc>
 800550a:	f855 3b04 	ldr.w	r3, [r5], #4
 800550e:	4798      	blx	r3
 8005510:	3601      	adds	r6, #1
 8005512:	e7f2      	b.n	80054fa <__libc_init_array+0x1e>
 8005514:	0800ac24 	.word	0x0800ac24
 8005518:	0800ac24 	.word	0x0800ac24
 800551c:	0800ac24 	.word	0x0800ac24
 8005520:	0800ac28 	.word	0x0800ac28

08005524 <memset>:
 8005524:	4402      	add	r2, r0
 8005526:	4603      	mov	r3, r0
 8005528:	4293      	cmp	r3, r2
 800552a:	d100      	bne.n	800552e <memset+0xa>
 800552c:	4770      	bx	lr
 800552e:	f803 1b01 	strb.w	r1, [r3], #1
 8005532:	e7f9      	b.n	8005528 <memset+0x4>

08005534 <__cvt>:
 8005534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	ec55 4b10 	vmov	r4, r5, d0
 800553c:	2d00      	cmp	r5, #0
 800553e:	460e      	mov	r6, r1
 8005540:	4619      	mov	r1, r3
 8005542:	462b      	mov	r3, r5
 8005544:	bfbb      	ittet	lt
 8005546:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800554a:	461d      	movlt	r5, r3
 800554c:	2300      	movge	r3, #0
 800554e:	232d      	movlt	r3, #45	; 0x2d
 8005550:	700b      	strb	r3, [r1, #0]
 8005552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005554:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005558:	4691      	mov	r9, r2
 800555a:	f023 0820 	bic.w	r8, r3, #32
 800555e:	bfbc      	itt	lt
 8005560:	4622      	movlt	r2, r4
 8005562:	4614      	movlt	r4, r2
 8005564:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005568:	d005      	beq.n	8005576 <__cvt+0x42>
 800556a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800556e:	d100      	bne.n	8005572 <__cvt+0x3e>
 8005570:	3601      	adds	r6, #1
 8005572:	2102      	movs	r1, #2
 8005574:	e000      	b.n	8005578 <__cvt+0x44>
 8005576:	2103      	movs	r1, #3
 8005578:	ab03      	add	r3, sp, #12
 800557a:	9301      	str	r3, [sp, #4]
 800557c:	ab02      	add	r3, sp, #8
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	ec45 4b10 	vmov	d0, r4, r5
 8005584:	4653      	mov	r3, sl
 8005586:	4632      	mov	r2, r6
 8005588:	f001 fe42 	bl	8007210 <_dtoa_r>
 800558c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005590:	4607      	mov	r7, r0
 8005592:	d102      	bne.n	800559a <__cvt+0x66>
 8005594:	f019 0f01 	tst.w	r9, #1
 8005598:	d022      	beq.n	80055e0 <__cvt+0xac>
 800559a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800559e:	eb07 0906 	add.w	r9, r7, r6
 80055a2:	d110      	bne.n	80055c6 <__cvt+0x92>
 80055a4:	783b      	ldrb	r3, [r7, #0]
 80055a6:	2b30      	cmp	r3, #48	; 0x30
 80055a8:	d10a      	bne.n	80055c0 <__cvt+0x8c>
 80055aa:	2200      	movs	r2, #0
 80055ac:	2300      	movs	r3, #0
 80055ae:	4620      	mov	r0, r4
 80055b0:	4629      	mov	r1, r5
 80055b2:	f7fb fa99 	bl	8000ae8 <__aeabi_dcmpeq>
 80055b6:	b918      	cbnz	r0, 80055c0 <__cvt+0x8c>
 80055b8:	f1c6 0601 	rsb	r6, r6, #1
 80055bc:	f8ca 6000 	str.w	r6, [sl]
 80055c0:	f8da 3000 	ldr.w	r3, [sl]
 80055c4:	4499      	add	r9, r3
 80055c6:	2200      	movs	r2, #0
 80055c8:	2300      	movs	r3, #0
 80055ca:	4620      	mov	r0, r4
 80055cc:	4629      	mov	r1, r5
 80055ce:	f7fb fa8b 	bl	8000ae8 <__aeabi_dcmpeq>
 80055d2:	b108      	cbz	r0, 80055d8 <__cvt+0xa4>
 80055d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80055d8:	2230      	movs	r2, #48	; 0x30
 80055da:	9b03      	ldr	r3, [sp, #12]
 80055dc:	454b      	cmp	r3, r9
 80055de:	d307      	bcc.n	80055f0 <__cvt+0xbc>
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055e4:	1bdb      	subs	r3, r3, r7
 80055e6:	4638      	mov	r0, r7
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	b004      	add	sp, #16
 80055ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f0:	1c59      	adds	r1, r3, #1
 80055f2:	9103      	str	r1, [sp, #12]
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	e7f0      	b.n	80055da <__cvt+0xa6>

080055f8 <__exponent>:
 80055f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055fa:	4603      	mov	r3, r0
 80055fc:	2900      	cmp	r1, #0
 80055fe:	bfb8      	it	lt
 8005600:	4249      	neglt	r1, r1
 8005602:	f803 2b02 	strb.w	r2, [r3], #2
 8005606:	bfb4      	ite	lt
 8005608:	222d      	movlt	r2, #45	; 0x2d
 800560a:	222b      	movge	r2, #43	; 0x2b
 800560c:	2909      	cmp	r1, #9
 800560e:	7042      	strb	r2, [r0, #1]
 8005610:	dd2a      	ble.n	8005668 <__exponent+0x70>
 8005612:	f10d 0407 	add.w	r4, sp, #7
 8005616:	46a4      	mov	ip, r4
 8005618:	270a      	movs	r7, #10
 800561a:	46a6      	mov	lr, r4
 800561c:	460a      	mov	r2, r1
 800561e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005622:	fb07 1516 	mls	r5, r7, r6, r1
 8005626:	3530      	adds	r5, #48	; 0x30
 8005628:	2a63      	cmp	r2, #99	; 0x63
 800562a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800562e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005632:	4631      	mov	r1, r6
 8005634:	dcf1      	bgt.n	800561a <__exponent+0x22>
 8005636:	3130      	adds	r1, #48	; 0x30
 8005638:	f1ae 0502 	sub.w	r5, lr, #2
 800563c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005640:	1c44      	adds	r4, r0, #1
 8005642:	4629      	mov	r1, r5
 8005644:	4561      	cmp	r1, ip
 8005646:	d30a      	bcc.n	800565e <__exponent+0x66>
 8005648:	f10d 0209 	add.w	r2, sp, #9
 800564c:	eba2 020e 	sub.w	r2, r2, lr
 8005650:	4565      	cmp	r5, ip
 8005652:	bf88      	it	hi
 8005654:	2200      	movhi	r2, #0
 8005656:	4413      	add	r3, r2
 8005658:	1a18      	subs	r0, r3, r0
 800565a:	b003      	add	sp, #12
 800565c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800565e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005662:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005666:	e7ed      	b.n	8005644 <__exponent+0x4c>
 8005668:	2330      	movs	r3, #48	; 0x30
 800566a:	3130      	adds	r1, #48	; 0x30
 800566c:	7083      	strb	r3, [r0, #2]
 800566e:	70c1      	strb	r1, [r0, #3]
 8005670:	1d03      	adds	r3, r0, #4
 8005672:	e7f1      	b.n	8005658 <__exponent+0x60>

08005674 <_printf_float>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	ed2d 8b02 	vpush	{d8}
 800567c:	b08d      	sub	sp, #52	; 0x34
 800567e:	460c      	mov	r4, r1
 8005680:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005684:	4616      	mov	r6, r2
 8005686:	461f      	mov	r7, r3
 8005688:	4605      	mov	r5, r0
 800568a:	f002 ff1f 	bl	80084cc <_localeconv_r>
 800568e:	f8d0 a000 	ldr.w	sl, [r0]
 8005692:	4650      	mov	r0, sl
 8005694:	f7fa fda6 	bl	80001e4 <strlen>
 8005698:	2300      	movs	r3, #0
 800569a:	930a      	str	r3, [sp, #40]	; 0x28
 800569c:	6823      	ldr	r3, [r4, #0]
 800569e:	9305      	str	r3, [sp, #20]
 80056a0:	f8d8 3000 	ldr.w	r3, [r8]
 80056a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056a8:	3307      	adds	r3, #7
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	f103 0208 	add.w	r2, r3, #8
 80056b2:	f8c8 2000 	str.w	r2, [r8]
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80056c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056c6:	9307      	str	r3, [sp, #28]
 80056c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80056cc:	ee08 0a10 	vmov	s16, r0
 80056d0:	4b9f      	ldr	r3, [pc, #636]	; (8005950 <_printf_float+0x2dc>)
 80056d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056da:	f7fb fa37 	bl	8000b4c <__aeabi_dcmpun>
 80056de:	bb88      	cbnz	r0, 8005744 <_printf_float+0xd0>
 80056e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e4:	4b9a      	ldr	r3, [pc, #616]	; (8005950 <_printf_float+0x2dc>)
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056ea:	f7fb fa11 	bl	8000b10 <__aeabi_dcmple>
 80056ee:	bb48      	cbnz	r0, 8005744 <_printf_float+0xd0>
 80056f0:	2200      	movs	r2, #0
 80056f2:	2300      	movs	r3, #0
 80056f4:	4640      	mov	r0, r8
 80056f6:	4649      	mov	r1, r9
 80056f8:	f7fb fa00 	bl	8000afc <__aeabi_dcmplt>
 80056fc:	b110      	cbz	r0, 8005704 <_printf_float+0x90>
 80056fe:	232d      	movs	r3, #45	; 0x2d
 8005700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005704:	4b93      	ldr	r3, [pc, #588]	; (8005954 <_printf_float+0x2e0>)
 8005706:	4894      	ldr	r0, [pc, #592]	; (8005958 <_printf_float+0x2e4>)
 8005708:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800570c:	bf94      	ite	ls
 800570e:	4698      	movls	r8, r3
 8005710:	4680      	movhi	r8, r0
 8005712:	2303      	movs	r3, #3
 8005714:	6123      	str	r3, [r4, #16]
 8005716:	9b05      	ldr	r3, [sp, #20]
 8005718:	f023 0204 	bic.w	r2, r3, #4
 800571c:	6022      	str	r2, [r4, #0]
 800571e:	f04f 0900 	mov.w	r9, #0
 8005722:	9700      	str	r7, [sp, #0]
 8005724:	4633      	mov	r3, r6
 8005726:	aa0b      	add	r2, sp, #44	; 0x2c
 8005728:	4621      	mov	r1, r4
 800572a:	4628      	mov	r0, r5
 800572c:	f000 f9d8 	bl	8005ae0 <_printf_common>
 8005730:	3001      	adds	r0, #1
 8005732:	f040 8090 	bne.w	8005856 <_printf_float+0x1e2>
 8005736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800573a:	b00d      	add	sp, #52	; 0x34
 800573c:	ecbd 8b02 	vpop	{d8}
 8005740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	4640      	mov	r0, r8
 800574a:	4649      	mov	r1, r9
 800574c:	f7fb f9fe 	bl	8000b4c <__aeabi_dcmpun>
 8005750:	b140      	cbz	r0, 8005764 <_printf_float+0xf0>
 8005752:	464b      	mov	r3, r9
 8005754:	2b00      	cmp	r3, #0
 8005756:	bfbc      	itt	lt
 8005758:	232d      	movlt	r3, #45	; 0x2d
 800575a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800575e:	487f      	ldr	r0, [pc, #508]	; (800595c <_printf_float+0x2e8>)
 8005760:	4b7f      	ldr	r3, [pc, #508]	; (8005960 <_printf_float+0x2ec>)
 8005762:	e7d1      	b.n	8005708 <_printf_float+0x94>
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800576a:	9206      	str	r2, [sp, #24]
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	d13f      	bne.n	80057f0 <_printf_float+0x17c>
 8005770:	2306      	movs	r3, #6
 8005772:	6063      	str	r3, [r4, #4]
 8005774:	9b05      	ldr	r3, [sp, #20]
 8005776:	6861      	ldr	r1, [r4, #4]
 8005778:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800577c:	2300      	movs	r3, #0
 800577e:	9303      	str	r3, [sp, #12]
 8005780:	ab0a      	add	r3, sp, #40	; 0x28
 8005782:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005786:	ab09      	add	r3, sp, #36	; 0x24
 8005788:	ec49 8b10 	vmov	d0, r8, r9
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6022      	str	r2, [r4, #0]
 8005790:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005794:	4628      	mov	r0, r5
 8005796:	f7ff fecd 	bl	8005534 <__cvt>
 800579a:	9b06      	ldr	r3, [sp, #24]
 800579c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800579e:	2b47      	cmp	r3, #71	; 0x47
 80057a0:	4680      	mov	r8, r0
 80057a2:	d108      	bne.n	80057b6 <_printf_float+0x142>
 80057a4:	1cc8      	adds	r0, r1, #3
 80057a6:	db02      	blt.n	80057ae <_printf_float+0x13a>
 80057a8:	6863      	ldr	r3, [r4, #4]
 80057aa:	4299      	cmp	r1, r3
 80057ac:	dd41      	ble.n	8005832 <_printf_float+0x1be>
 80057ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80057b2:	fa5f fb8b 	uxtb.w	fp, fp
 80057b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057ba:	d820      	bhi.n	80057fe <_printf_float+0x18a>
 80057bc:	3901      	subs	r1, #1
 80057be:	465a      	mov	r2, fp
 80057c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057c4:	9109      	str	r1, [sp, #36]	; 0x24
 80057c6:	f7ff ff17 	bl	80055f8 <__exponent>
 80057ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057cc:	1813      	adds	r3, r2, r0
 80057ce:	2a01      	cmp	r2, #1
 80057d0:	4681      	mov	r9, r0
 80057d2:	6123      	str	r3, [r4, #16]
 80057d4:	dc02      	bgt.n	80057dc <_printf_float+0x168>
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	07d2      	lsls	r2, r2, #31
 80057da:	d501      	bpl.n	80057e0 <_printf_float+0x16c>
 80057dc:	3301      	adds	r3, #1
 80057de:	6123      	str	r3, [r4, #16]
 80057e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d09c      	beq.n	8005722 <_printf_float+0xae>
 80057e8:	232d      	movs	r3, #45	; 0x2d
 80057ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ee:	e798      	b.n	8005722 <_printf_float+0xae>
 80057f0:	9a06      	ldr	r2, [sp, #24]
 80057f2:	2a47      	cmp	r2, #71	; 0x47
 80057f4:	d1be      	bne.n	8005774 <_printf_float+0x100>
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1bc      	bne.n	8005774 <_printf_float+0x100>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e7b9      	b.n	8005772 <_printf_float+0xfe>
 80057fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005802:	d118      	bne.n	8005836 <_printf_float+0x1c2>
 8005804:	2900      	cmp	r1, #0
 8005806:	6863      	ldr	r3, [r4, #4]
 8005808:	dd0b      	ble.n	8005822 <_printf_float+0x1ae>
 800580a:	6121      	str	r1, [r4, #16]
 800580c:	b913      	cbnz	r3, 8005814 <_printf_float+0x1a0>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	07d0      	lsls	r0, r2, #31
 8005812:	d502      	bpl.n	800581a <_printf_float+0x1a6>
 8005814:	3301      	adds	r3, #1
 8005816:	440b      	add	r3, r1
 8005818:	6123      	str	r3, [r4, #16]
 800581a:	65a1      	str	r1, [r4, #88]	; 0x58
 800581c:	f04f 0900 	mov.w	r9, #0
 8005820:	e7de      	b.n	80057e0 <_printf_float+0x16c>
 8005822:	b913      	cbnz	r3, 800582a <_printf_float+0x1b6>
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	07d2      	lsls	r2, r2, #31
 8005828:	d501      	bpl.n	800582e <_printf_float+0x1ba>
 800582a:	3302      	adds	r3, #2
 800582c:	e7f4      	b.n	8005818 <_printf_float+0x1a4>
 800582e:	2301      	movs	r3, #1
 8005830:	e7f2      	b.n	8005818 <_printf_float+0x1a4>
 8005832:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005838:	4299      	cmp	r1, r3
 800583a:	db05      	blt.n	8005848 <_printf_float+0x1d4>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	6121      	str	r1, [r4, #16]
 8005840:	07d8      	lsls	r0, r3, #31
 8005842:	d5ea      	bpl.n	800581a <_printf_float+0x1a6>
 8005844:	1c4b      	adds	r3, r1, #1
 8005846:	e7e7      	b.n	8005818 <_printf_float+0x1a4>
 8005848:	2900      	cmp	r1, #0
 800584a:	bfd4      	ite	le
 800584c:	f1c1 0202 	rsble	r2, r1, #2
 8005850:	2201      	movgt	r2, #1
 8005852:	4413      	add	r3, r2
 8005854:	e7e0      	b.n	8005818 <_printf_float+0x1a4>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	055a      	lsls	r2, r3, #21
 800585a:	d407      	bmi.n	800586c <_printf_float+0x1f8>
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	4642      	mov	r2, r8
 8005860:	4631      	mov	r1, r6
 8005862:	4628      	mov	r0, r5
 8005864:	47b8      	blx	r7
 8005866:	3001      	adds	r0, #1
 8005868:	d12c      	bne.n	80058c4 <_printf_float+0x250>
 800586a:	e764      	b.n	8005736 <_printf_float+0xc2>
 800586c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005870:	f240 80e0 	bls.w	8005a34 <_printf_float+0x3c0>
 8005874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005878:	2200      	movs	r2, #0
 800587a:	2300      	movs	r3, #0
 800587c:	f7fb f934 	bl	8000ae8 <__aeabi_dcmpeq>
 8005880:	2800      	cmp	r0, #0
 8005882:	d034      	beq.n	80058ee <_printf_float+0x27a>
 8005884:	4a37      	ldr	r2, [pc, #220]	; (8005964 <_printf_float+0x2f0>)
 8005886:	2301      	movs	r3, #1
 8005888:	4631      	mov	r1, r6
 800588a:	4628      	mov	r0, r5
 800588c:	47b8      	blx	r7
 800588e:	3001      	adds	r0, #1
 8005890:	f43f af51 	beq.w	8005736 <_printf_float+0xc2>
 8005894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005898:	429a      	cmp	r2, r3
 800589a:	db02      	blt.n	80058a2 <_printf_float+0x22e>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	07d8      	lsls	r0, r3, #31
 80058a0:	d510      	bpl.n	80058c4 <_printf_float+0x250>
 80058a2:	ee18 3a10 	vmov	r3, s16
 80058a6:	4652      	mov	r2, sl
 80058a8:	4631      	mov	r1, r6
 80058aa:	4628      	mov	r0, r5
 80058ac:	47b8      	blx	r7
 80058ae:	3001      	adds	r0, #1
 80058b0:	f43f af41 	beq.w	8005736 <_printf_float+0xc2>
 80058b4:	f04f 0800 	mov.w	r8, #0
 80058b8:	f104 091a 	add.w	r9, r4, #26
 80058bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058be:	3b01      	subs	r3, #1
 80058c0:	4543      	cmp	r3, r8
 80058c2:	dc09      	bgt.n	80058d8 <_printf_float+0x264>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	079b      	lsls	r3, r3, #30
 80058c8:	f100 8105 	bmi.w	8005ad6 <_printf_float+0x462>
 80058cc:	68e0      	ldr	r0, [r4, #12]
 80058ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058d0:	4298      	cmp	r0, r3
 80058d2:	bfb8      	it	lt
 80058d4:	4618      	movlt	r0, r3
 80058d6:	e730      	b.n	800573a <_printf_float+0xc6>
 80058d8:	2301      	movs	r3, #1
 80058da:	464a      	mov	r2, r9
 80058dc:	4631      	mov	r1, r6
 80058de:	4628      	mov	r0, r5
 80058e0:	47b8      	blx	r7
 80058e2:	3001      	adds	r0, #1
 80058e4:	f43f af27 	beq.w	8005736 <_printf_float+0xc2>
 80058e8:	f108 0801 	add.w	r8, r8, #1
 80058ec:	e7e6      	b.n	80058bc <_printf_float+0x248>
 80058ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	dc39      	bgt.n	8005968 <_printf_float+0x2f4>
 80058f4:	4a1b      	ldr	r2, [pc, #108]	; (8005964 <_printf_float+0x2f0>)
 80058f6:	2301      	movs	r3, #1
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	f43f af19 	beq.w	8005736 <_printf_float+0xc2>
 8005904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005908:	4313      	orrs	r3, r2
 800590a:	d102      	bne.n	8005912 <_printf_float+0x29e>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	07d9      	lsls	r1, r3, #31
 8005910:	d5d8      	bpl.n	80058c4 <_printf_float+0x250>
 8005912:	ee18 3a10 	vmov	r3, s16
 8005916:	4652      	mov	r2, sl
 8005918:	4631      	mov	r1, r6
 800591a:	4628      	mov	r0, r5
 800591c:	47b8      	blx	r7
 800591e:	3001      	adds	r0, #1
 8005920:	f43f af09 	beq.w	8005736 <_printf_float+0xc2>
 8005924:	f04f 0900 	mov.w	r9, #0
 8005928:	f104 0a1a 	add.w	sl, r4, #26
 800592c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592e:	425b      	negs	r3, r3
 8005930:	454b      	cmp	r3, r9
 8005932:	dc01      	bgt.n	8005938 <_printf_float+0x2c4>
 8005934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005936:	e792      	b.n	800585e <_printf_float+0x1ea>
 8005938:	2301      	movs	r3, #1
 800593a:	4652      	mov	r2, sl
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f aef7 	beq.w	8005736 <_printf_float+0xc2>
 8005948:	f109 0901 	add.w	r9, r9, #1
 800594c:	e7ee      	b.n	800592c <_printf_float+0x2b8>
 800594e:	bf00      	nop
 8005950:	7fefffff 	.word	0x7fefffff
 8005954:	0800a770 	.word	0x0800a770
 8005958:	0800a774 	.word	0x0800a774
 800595c:	0800a77c 	.word	0x0800a77c
 8005960:	0800a778 	.word	0x0800a778
 8005964:	0800ab71 	.word	0x0800ab71
 8005968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800596a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800596c:	429a      	cmp	r2, r3
 800596e:	bfa8      	it	ge
 8005970:	461a      	movge	r2, r3
 8005972:	2a00      	cmp	r2, #0
 8005974:	4691      	mov	r9, r2
 8005976:	dc37      	bgt.n	80059e8 <_printf_float+0x374>
 8005978:	f04f 0b00 	mov.w	fp, #0
 800597c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005980:	f104 021a 	add.w	r2, r4, #26
 8005984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	eba3 0309 	sub.w	r3, r3, r9
 800598c:	455b      	cmp	r3, fp
 800598e:	dc33      	bgt.n	80059f8 <_printf_float+0x384>
 8005990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005994:	429a      	cmp	r2, r3
 8005996:	db3b      	blt.n	8005a10 <_printf_float+0x39c>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	07da      	lsls	r2, r3, #31
 800599c:	d438      	bmi.n	8005a10 <_printf_float+0x39c>
 800599e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a0:	9a05      	ldr	r2, [sp, #20]
 80059a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059a4:	1a9a      	subs	r2, r3, r2
 80059a6:	eba3 0901 	sub.w	r9, r3, r1
 80059aa:	4591      	cmp	r9, r2
 80059ac:	bfa8      	it	ge
 80059ae:	4691      	movge	r9, r2
 80059b0:	f1b9 0f00 	cmp.w	r9, #0
 80059b4:	dc35      	bgt.n	8005a22 <_printf_float+0x3ae>
 80059b6:	f04f 0800 	mov.w	r8, #0
 80059ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059be:	f104 0a1a 	add.w	sl, r4, #26
 80059c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	eba3 0309 	sub.w	r3, r3, r9
 80059cc:	4543      	cmp	r3, r8
 80059ce:	f77f af79 	ble.w	80058c4 <_printf_float+0x250>
 80059d2:	2301      	movs	r3, #1
 80059d4:	4652      	mov	r2, sl
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	f43f aeaa 	beq.w	8005736 <_printf_float+0xc2>
 80059e2:	f108 0801 	add.w	r8, r8, #1
 80059e6:	e7ec      	b.n	80059c2 <_printf_float+0x34e>
 80059e8:	4613      	mov	r3, r2
 80059ea:	4631      	mov	r1, r6
 80059ec:	4642      	mov	r2, r8
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	d1c0      	bne.n	8005978 <_printf_float+0x304>
 80059f6:	e69e      	b.n	8005736 <_printf_float+0xc2>
 80059f8:	2301      	movs	r3, #1
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	9205      	str	r2, [sp, #20]
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f ae97 	beq.w	8005736 <_printf_float+0xc2>
 8005a08:	9a05      	ldr	r2, [sp, #20]
 8005a0a:	f10b 0b01 	add.w	fp, fp, #1
 8005a0e:	e7b9      	b.n	8005984 <_printf_float+0x310>
 8005a10:	ee18 3a10 	vmov	r3, s16
 8005a14:	4652      	mov	r2, sl
 8005a16:	4631      	mov	r1, r6
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b8      	blx	r7
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d1be      	bne.n	800599e <_printf_float+0x32a>
 8005a20:	e689      	b.n	8005736 <_printf_float+0xc2>
 8005a22:	9a05      	ldr	r2, [sp, #20]
 8005a24:	464b      	mov	r3, r9
 8005a26:	4442      	add	r2, r8
 8005a28:	4631      	mov	r1, r6
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d1c1      	bne.n	80059b6 <_printf_float+0x342>
 8005a32:	e680      	b.n	8005736 <_printf_float+0xc2>
 8005a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a36:	2a01      	cmp	r2, #1
 8005a38:	dc01      	bgt.n	8005a3e <_printf_float+0x3ca>
 8005a3a:	07db      	lsls	r3, r3, #31
 8005a3c:	d538      	bpl.n	8005ab0 <_printf_float+0x43c>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4642      	mov	r2, r8
 8005a42:	4631      	mov	r1, r6
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b8      	blx	r7
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f43f ae74 	beq.w	8005736 <_printf_float+0xc2>
 8005a4e:	ee18 3a10 	vmov	r3, s16
 8005a52:	4652      	mov	r2, sl
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f ae6b 	beq.w	8005736 <_printf_float+0xc2>
 8005a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	f7fb f83e 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a6c:	b9d8      	cbnz	r0, 8005aa6 <_printf_float+0x432>
 8005a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a70:	f108 0201 	add.w	r2, r8, #1
 8005a74:	3b01      	subs	r3, #1
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d10e      	bne.n	8005a9e <_printf_float+0x42a>
 8005a80:	e659      	b.n	8005736 <_printf_float+0xc2>
 8005a82:	2301      	movs	r3, #1
 8005a84:	4652      	mov	r2, sl
 8005a86:	4631      	mov	r1, r6
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b8      	blx	r7
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	f43f ae52 	beq.w	8005736 <_printf_float+0xc2>
 8005a92:	f108 0801 	add.w	r8, r8, #1
 8005a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	4543      	cmp	r3, r8
 8005a9c:	dcf1      	bgt.n	8005a82 <_printf_float+0x40e>
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005aa4:	e6dc      	b.n	8005860 <_printf_float+0x1ec>
 8005aa6:	f04f 0800 	mov.w	r8, #0
 8005aaa:	f104 0a1a 	add.w	sl, r4, #26
 8005aae:	e7f2      	b.n	8005a96 <_printf_float+0x422>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4642      	mov	r2, r8
 8005ab4:	e7df      	b.n	8005a76 <_printf_float+0x402>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	464a      	mov	r2, r9
 8005aba:	4631      	mov	r1, r6
 8005abc:	4628      	mov	r0, r5
 8005abe:	47b8      	blx	r7
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f43f ae38 	beq.w	8005736 <_printf_float+0xc2>
 8005ac6:	f108 0801 	add.w	r8, r8, #1
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ace:	1a5b      	subs	r3, r3, r1
 8005ad0:	4543      	cmp	r3, r8
 8005ad2:	dcf0      	bgt.n	8005ab6 <_printf_float+0x442>
 8005ad4:	e6fa      	b.n	80058cc <_printf_float+0x258>
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	f104 0919 	add.w	r9, r4, #25
 8005ade:	e7f4      	b.n	8005aca <_printf_float+0x456>

08005ae0 <_printf_common>:
 8005ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	4699      	mov	r9, r3
 8005ae8:	688a      	ldr	r2, [r1, #8]
 8005aea:	690b      	ldr	r3, [r1, #16]
 8005aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005af0:	4293      	cmp	r3, r2
 8005af2:	bfb8      	it	lt
 8005af4:	4613      	movlt	r3, r2
 8005af6:	6033      	str	r3, [r6, #0]
 8005af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005afc:	4607      	mov	r7, r0
 8005afe:	460c      	mov	r4, r1
 8005b00:	b10a      	cbz	r2, 8005b06 <_printf_common+0x26>
 8005b02:	3301      	adds	r3, #1
 8005b04:	6033      	str	r3, [r6, #0]
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	0699      	lsls	r1, r3, #26
 8005b0a:	bf42      	ittt	mi
 8005b0c:	6833      	ldrmi	r3, [r6, #0]
 8005b0e:	3302      	addmi	r3, #2
 8005b10:	6033      	strmi	r3, [r6, #0]
 8005b12:	6825      	ldr	r5, [r4, #0]
 8005b14:	f015 0506 	ands.w	r5, r5, #6
 8005b18:	d106      	bne.n	8005b28 <_printf_common+0x48>
 8005b1a:	f104 0a19 	add.w	sl, r4, #25
 8005b1e:	68e3      	ldr	r3, [r4, #12]
 8005b20:	6832      	ldr	r2, [r6, #0]
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	42ab      	cmp	r3, r5
 8005b26:	dc26      	bgt.n	8005b76 <_printf_common+0x96>
 8005b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b2c:	1e13      	subs	r3, r2, #0
 8005b2e:	6822      	ldr	r2, [r4, #0]
 8005b30:	bf18      	it	ne
 8005b32:	2301      	movne	r3, #1
 8005b34:	0692      	lsls	r2, r2, #26
 8005b36:	d42b      	bmi.n	8005b90 <_printf_common+0xb0>
 8005b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	4638      	mov	r0, r7
 8005b40:	47c0      	blx	r8
 8005b42:	3001      	adds	r0, #1
 8005b44:	d01e      	beq.n	8005b84 <_printf_common+0xa4>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	68e5      	ldr	r5, [r4, #12]
 8005b4a:	6832      	ldr	r2, [r6, #0]
 8005b4c:	f003 0306 	and.w	r3, r3, #6
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	bf08      	it	eq
 8005b54:	1aad      	subeq	r5, r5, r2
 8005b56:	68a3      	ldr	r3, [r4, #8]
 8005b58:	6922      	ldr	r2, [r4, #16]
 8005b5a:	bf0c      	ite	eq
 8005b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b60:	2500      	movne	r5, #0
 8005b62:	4293      	cmp	r3, r2
 8005b64:	bfc4      	itt	gt
 8005b66:	1a9b      	subgt	r3, r3, r2
 8005b68:	18ed      	addgt	r5, r5, r3
 8005b6a:	2600      	movs	r6, #0
 8005b6c:	341a      	adds	r4, #26
 8005b6e:	42b5      	cmp	r5, r6
 8005b70:	d11a      	bne.n	8005ba8 <_printf_common+0xc8>
 8005b72:	2000      	movs	r0, #0
 8005b74:	e008      	b.n	8005b88 <_printf_common+0xa8>
 8005b76:	2301      	movs	r3, #1
 8005b78:	4652      	mov	r2, sl
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	47c0      	blx	r8
 8005b80:	3001      	adds	r0, #1
 8005b82:	d103      	bne.n	8005b8c <_printf_common+0xac>
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8c:	3501      	adds	r5, #1
 8005b8e:	e7c6      	b.n	8005b1e <_printf_common+0x3e>
 8005b90:	18e1      	adds	r1, r4, r3
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	2030      	movs	r0, #48	; 0x30
 8005b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b9a:	4422      	add	r2, r4
 8005b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ba4:	3302      	adds	r3, #2
 8005ba6:	e7c7      	b.n	8005b38 <_printf_common+0x58>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	4622      	mov	r2, r4
 8005bac:	4649      	mov	r1, r9
 8005bae:	4638      	mov	r0, r7
 8005bb0:	47c0      	blx	r8
 8005bb2:	3001      	adds	r0, #1
 8005bb4:	d0e6      	beq.n	8005b84 <_printf_common+0xa4>
 8005bb6:	3601      	adds	r6, #1
 8005bb8:	e7d9      	b.n	8005b6e <_printf_common+0x8e>
	...

08005bbc <_printf_i>:
 8005bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc0:	7e0f      	ldrb	r7, [r1, #24]
 8005bc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bc4:	2f78      	cmp	r7, #120	; 0x78
 8005bc6:	4691      	mov	r9, r2
 8005bc8:	4680      	mov	r8, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	469a      	mov	sl, r3
 8005bce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bd2:	d807      	bhi.n	8005be4 <_printf_i+0x28>
 8005bd4:	2f62      	cmp	r7, #98	; 0x62
 8005bd6:	d80a      	bhi.n	8005bee <_printf_i+0x32>
 8005bd8:	2f00      	cmp	r7, #0
 8005bda:	f000 80d8 	beq.w	8005d8e <_printf_i+0x1d2>
 8005bde:	2f58      	cmp	r7, #88	; 0x58
 8005be0:	f000 80a3 	beq.w	8005d2a <_printf_i+0x16e>
 8005be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bec:	e03a      	b.n	8005c64 <_printf_i+0xa8>
 8005bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bf2:	2b15      	cmp	r3, #21
 8005bf4:	d8f6      	bhi.n	8005be4 <_printf_i+0x28>
 8005bf6:	a101      	add	r1, pc, #4	; (adr r1, 8005bfc <_printf_i+0x40>)
 8005bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bfc:	08005c55 	.word	0x08005c55
 8005c00:	08005c69 	.word	0x08005c69
 8005c04:	08005be5 	.word	0x08005be5
 8005c08:	08005be5 	.word	0x08005be5
 8005c0c:	08005be5 	.word	0x08005be5
 8005c10:	08005be5 	.word	0x08005be5
 8005c14:	08005c69 	.word	0x08005c69
 8005c18:	08005be5 	.word	0x08005be5
 8005c1c:	08005be5 	.word	0x08005be5
 8005c20:	08005be5 	.word	0x08005be5
 8005c24:	08005be5 	.word	0x08005be5
 8005c28:	08005d75 	.word	0x08005d75
 8005c2c:	08005c99 	.word	0x08005c99
 8005c30:	08005d57 	.word	0x08005d57
 8005c34:	08005be5 	.word	0x08005be5
 8005c38:	08005be5 	.word	0x08005be5
 8005c3c:	08005d97 	.word	0x08005d97
 8005c40:	08005be5 	.word	0x08005be5
 8005c44:	08005c99 	.word	0x08005c99
 8005c48:	08005be5 	.word	0x08005be5
 8005c4c:	08005be5 	.word	0x08005be5
 8005c50:	08005d5f 	.word	0x08005d5f
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	1d1a      	adds	r2, r3, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	602a      	str	r2, [r5, #0]
 8005c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0a3      	b.n	8005db0 <_printf_i+0x1f4>
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	6829      	ldr	r1, [r5, #0]
 8005c6c:	0606      	lsls	r6, r0, #24
 8005c6e:	f101 0304 	add.w	r3, r1, #4
 8005c72:	d50a      	bpl.n	8005c8a <_printf_i+0xce>
 8005c74:	680e      	ldr	r6, [r1, #0]
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	2e00      	cmp	r6, #0
 8005c7a:	da03      	bge.n	8005c84 <_printf_i+0xc8>
 8005c7c:	232d      	movs	r3, #45	; 0x2d
 8005c7e:	4276      	negs	r6, r6
 8005c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c84:	485e      	ldr	r0, [pc, #376]	; (8005e00 <_printf_i+0x244>)
 8005c86:	230a      	movs	r3, #10
 8005c88:	e019      	b.n	8005cbe <_printf_i+0x102>
 8005c8a:	680e      	ldr	r6, [r1, #0]
 8005c8c:	602b      	str	r3, [r5, #0]
 8005c8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c92:	bf18      	it	ne
 8005c94:	b236      	sxthne	r6, r6
 8005c96:	e7ef      	b.n	8005c78 <_printf_i+0xbc>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	6820      	ldr	r0, [r4, #0]
 8005c9c:	1d19      	adds	r1, r3, #4
 8005c9e:	6029      	str	r1, [r5, #0]
 8005ca0:	0601      	lsls	r1, r0, #24
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0xec>
 8005ca4:	681e      	ldr	r6, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <_printf_i+0xf2>
 8005ca8:	0646      	lsls	r6, r0, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0xe8>
 8005cac:	881e      	ldrh	r6, [r3, #0]
 8005cae:	4854      	ldr	r0, [pc, #336]	; (8005e00 <_printf_i+0x244>)
 8005cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005cb2:	bf0c      	ite	eq
 8005cb4:	2308      	moveq	r3, #8
 8005cb6:	230a      	movne	r3, #10
 8005cb8:	2100      	movs	r1, #0
 8005cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cbe:	6865      	ldr	r5, [r4, #4]
 8005cc0:	60a5      	str	r5, [r4, #8]
 8005cc2:	2d00      	cmp	r5, #0
 8005cc4:	bfa2      	ittt	ge
 8005cc6:	6821      	ldrge	r1, [r4, #0]
 8005cc8:	f021 0104 	bicge.w	r1, r1, #4
 8005ccc:	6021      	strge	r1, [r4, #0]
 8005cce:	b90e      	cbnz	r6, 8005cd4 <_printf_i+0x118>
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	d04d      	beq.n	8005d70 <_printf_i+0x1b4>
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cda:	fb03 6711 	mls	r7, r3, r1, r6
 8005cde:	5dc7      	ldrb	r7, [r0, r7]
 8005ce0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ce4:	4637      	mov	r7, r6
 8005ce6:	42bb      	cmp	r3, r7
 8005ce8:	460e      	mov	r6, r1
 8005cea:	d9f4      	bls.n	8005cd6 <_printf_i+0x11a>
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d10b      	bne.n	8005d08 <_printf_i+0x14c>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	07de      	lsls	r6, r3, #31
 8005cf4:	d508      	bpl.n	8005d08 <_printf_i+0x14c>
 8005cf6:	6923      	ldr	r3, [r4, #16]
 8005cf8:	6861      	ldr	r1, [r4, #4]
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	bfde      	ittt	le
 8005cfe:	2330      	movle	r3, #48	; 0x30
 8005d00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d04:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d08:	1b52      	subs	r2, r2, r5
 8005d0a:	6122      	str	r2, [r4, #16]
 8005d0c:	f8cd a000 	str.w	sl, [sp]
 8005d10:	464b      	mov	r3, r9
 8005d12:	aa03      	add	r2, sp, #12
 8005d14:	4621      	mov	r1, r4
 8005d16:	4640      	mov	r0, r8
 8005d18:	f7ff fee2 	bl	8005ae0 <_printf_common>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d14c      	bne.n	8005dba <_printf_i+0x1fe>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d24:	b004      	add	sp, #16
 8005d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2a:	4835      	ldr	r0, [pc, #212]	; (8005e00 <_printf_i+0x244>)
 8005d2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d30:	6829      	ldr	r1, [r5, #0]
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d38:	6029      	str	r1, [r5, #0]
 8005d3a:	061d      	lsls	r5, r3, #24
 8005d3c:	d514      	bpl.n	8005d68 <_printf_i+0x1ac>
 8005d3e:	07df      	lsls	r7, r3, #31
 8005d40:	bf44      	itt	mi
 8005d42:	f043 0320 	orrmi.w	r3, r3, #32
 8005d46:	6023      	strmi	r3, [r4, #0]
 8005d48:	b91e      	cbnz	r6, 8005d52 <_printf_i+0x196>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	f023 0320 	bic.w	r3, r3, #32
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	2310      	movs	r3, #16
 8005d54:	e7b0      	b.n	8005cb8 <_printf_i+0xfc>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	f043 0320 	orr.w	r3, r3, #32
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	2378      	movs	r3, #120	; 0x78
 8005d60:	4828      	ldr	r0, [pc, #160]	; (8005e04 <_printf_i+0x248>)
 8005d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d66:	e7e3      	b.n	8005d30 <_printf_i+0x174>
 8005d68:	0659      	lsls	r1, r3, #25
 8005d6a:	bf48      	it	mi
 8005d6c:	b2b6      	uxthmi	r6, r6
 8005d6e:	e7e6      	b.n	8005d3e <_printf_i+0x182>
 8005d70:	4615      	mov	r5, r2
 8005d72:	e7bb      	b.n	8005cec <_printf_i+0x130>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	6826      	ldr	r6, [r4, #0]
 8005d78:	6961      	ldr	r1, [r4, #20]
 8005d7a:	1d18      	adds	r0, r3, #4
 8005d7c:	6028      	str	r0, [r5, #0]
 8005d7e:	0635      	lsls	r5, r6, #24
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	d501      	bpl.n	8005d88 <_printf_i+0x1cc>
 8005d84:	6019      	str	r1, [r3, #0]
 8005d86:	e002      	b.n	8005d8e <_printf_i+0x1d2>
 8005d88:	0670      	lsls	r0, r6, #25
 8005d8a:	d5fb      	bpl.n	8005d84 <_printf_i+0x1c8>
 8005d8c:	8019      	strh	r1, [r3, #0]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	6123      	str	r3, [r4, #16]
 8005d92:	4615      	mov	r5, r2
 8005d94:	e7ba      	b.n	8005d0c <_printf_i+0x150>
 8005d96:	682b      	ldr	r3, [r5, #0]
 8005d98:	1d1a      	adds	r2, r3, #4
 8005d9a:	602a      	str	r2, [r5, #0]
 8005d9c:	681d      	ldr	r5, [r3, #0]
 8005d9e:	6862      	ldr	r2, [r4, #4]
 8005da0:	2100      	movs	r1, #0
 8005da2:	4628      	mov	r0, r5
 8005da4:	f7fa fa2c 	bl	8000200 <memchr>
 8005da8:	b108      	cbz	r0, 8005dae <_printf_i+0x1f2>
 8005daa:	1b40      	subs	r0, r0, r5
 8005dac:	6060      	str	r0, [r4, #4]
 8005dae:	6863      	ldr	r3, [r4, #4]
 8005db0:	6123      	str	r3, [r4, #16]
 8005db2:	2300      	movs	r3, #0
 8005db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db8:	e7a8      	b.n	8005d0c <_printf_i+0x150>
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	462a      	mov	r2, r5
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	47d0      	blx	sl
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d0ab      	beq.n	8005d20 <_printf_i+0x164>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	079b      	lsls	r3, r3, #30
 8005dcc:	d413      	bmi.n	8005df6 <_printf_i+0x23a>
 8005dce:	68e0      	ldr	r0, [r4, #12]
 8005dd0:	9b03      	ldr	r3, [sp, #12]
 8005dd2:	4298      	cmp	r0, r3
 8005dd4:	bfb8      	it	lt
 8005dd6:	4618      	movlt	r0, r3
 8005dd8:	e7a4      	b.n	8005d24 <_printf_i+0x168>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4632      	mov	r2, r6
 8005dde:	4649      	mov	r1, r9
 8005de0:	4640      	mov	r0, r8
 8005de2:	47d0      	blx	sl
 8005de4:	3001      	adds	r0, #1
 8005de6:	d09b      	beq.n	8005d20 <_printf_i+0x164>
 8005de8:	3501      	adds	r5, #1
 8005dea:	68e3      	ldr	r3, [r4, #12]
 8005dec:	9903      	ldr	r1, [sp, #12]
 8005dee:	1a5b      	subs	r3, r3, r1
 8005df0:	42ab      	cmp	r3, r5
 8005df2:	dcf2      	bgt.n	8005dda <_printf_i+0x21e>
 8005df4:	e7eb      	b.n	8005dce <_printf_i+0x212>
 8005df6:	2500      	movs	r5, #0
 8005df8:	f104 0619 	add.w	r6, r4, #25
 8005dfc:	e7f5      	b.n	8005dea <_printf_i+0x22e>
 8005dfe:	bf00      	nop
 8005e00:	0800a780 	.word	0x0800a780
 8005e04:	0800a791 	.word	0x0800a791

08005e08 <_scanf_float>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	b087      	sub	sp, #28
 8005e0e:	4617      	mov	r7, r2
 8005e10:	9303      	str	r3, [sp, #12]
 8005e12:	688b      	ldr	r3, [r1, #8]
 8005e14:	1e5a      	subs	r2, r3, #1
 8005e16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e1a:	bf83      	ittte	hi
 8005e1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005e20:	195b      	addhi	r3, r3, r5
 8005e22:	9302      	strhi	r3, [sp, #8]
 8005e24:	2300      	movls	r3, #0
 8005e26:	bf86      	itte	hi
 8005e28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e2c:	608b      	strhi	r3, [r1, #8]
 8005e2e:	9302      	strls	r3, [sp, #8]
 8005e30:	680b      	ldr	r3, [r1, #0]
 8005e32:	468b      	mov	fp, r1
 8005e34:	2500      	movs	r5, #0
 8005e36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005e3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005e3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005e42:	4680      	mov	r8, r0
 8005e44:	460c      	mov	r4, r1
 8005e46:	465e      	mov	r6, fp
 8005e48:	46aa      	mov	sl, r5
 8005e4a:	46a9      	mov	r9, r5
 8005e4c:	9501      	str	r5, [sp, #4]
 8005e4e:	68a2      	ldr	r2, [r4, #8]
 8005e50:	b152      	cbz	r2, 8005e68 <_scanf_float+0x60>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b4e      	cmp	r3, #78	; 0x4e
 8005e58:	d864      	bhi.n	8005f24 <_scanf_float+0x11c>
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d83c      	bhi.n	8005ed8 <_scanf_float+0xd0>
 8005e5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005e62:	b2c8      	uxtb	r0, r1
 8005e64:	280e      	cmp	r0, #14
 8005e66:	d93a      	bls.n	8005ede <_scanf_float+0xd6>
 8005e68:	f1b9 0f00 	cmp.w	r9, #0
 8005e6c:	d003      	beq.n	8005e76 <_scanf_float+0x6e>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e7a:	f1ba 0f01 	cmp.w	sl, #1
 8005e7e:	f200 8113 	bhi.w	80060a8 <_scanf_float+0x2a0>
 8005e82:	455e      	cmp	r6, fp
 8005e84:	f200 8105 	bhi.w	8006092 <_scanf_float+0x28a>
 8005e88:	2501      	movs	r5, #1
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	b007      	add	sp, #28
 8005e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005e96:	2a0d      	cmp	r2, #13
 8005e98:	d8e6      	bhi.n	8005e68 <_scanf_float+0x60>
 8005e9a:	a101      	add	r1, pc, #4	; (adr r1, 8005ea0 <_scanf_float+0x98>)
 8005e9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ea0:	08005fdf 	.word	0x08005fdf
 8005ea4:	08005e69 	.word	0x08005e69
 8005ea8:	08005e69 	.word	0x08005e69
 8005eac:	08005e69 	.word	0x08005e69
 8005eb0:	0800603f 	.word	0x0800603f
 8005eb4:	08006017 	.word	0x08006017
 8005eb8:	08005e69 	.word	0x08005e69
 8005ebc:	08005e69 	.word	0x08005e69
 8005ec0:	08005fed 	.word	0x08005fed
 8005ec4:	08005e69 	.word	0x08005e69
 8005ec8:	08005e69 	.word	0x08005e69
 8005ecc:	08005e69 	.word	0x08005e69
 8005ed0:	08005e69 	.word	0x08005e69
 8005ed4:	08005fa5 	.word	0x08005fa5
 8005ed8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005edc:	e7db      	b.n	8005e96 <_scanf_float+0x8e>
 8005ede:	290e      	cmp	r1, #14
 8005ee0:	d8c2      	bhi.n	8005e68 <_scanf_float+0x60>
 8005ee2:	a001      	add	r0, pc, #4	; (adr r0, 8005ee8 <_scanf_float+0xe0>)
 8005ee4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ee8:	08005f97 	.word	0x08005f97
 8005eec:	08005e69 	.word	0x08005e69
 8005ef0:	08005f97 	.word	0x08005f97
 8005ef4:	0800602b 	.word	0x0800602b
 8005ef8:	08005e69 	.word	0x08005e69
 8005efc:	08005f45 	.word	0x08005f45
 8005f00:	08005f81 	.word	0x08005f81
 8005f04:	08005f81 	.word	0x08005f81
 8005f08:	08005f81 	.word	0x08005f81
 8005f0c:	08005f81 	.word	0x08005f81
 8005f10:	08005f81 	.word	0x08005f81
 8005f14:	08005f81 	.word	0x08005f81
 8005f18:	08005f81 	.word	0x08005f81
 8005f1c:	08005f81 	.word	0x08005f81
 8005f20:	08005f81 	.word	0x08005f81
 8005f24:	2b6e      	cmp	r3, #110	; 0x6e
 8005f26:	d809      	bhi.n	8005f3c <_scanf_float+0x134>
 8005f28:	2b60      	cmp	r3, #96	; 0x60
 8005f2a:	d8b2      	bhi.n	8005e92 <_scanf_float+0x8a>
 8005f2c:	2b54      	cmp	r3, #84	; 0x54
 8005f2e:	d077      	beq.n	8006020 <_scanf_float+0x218>
 8005f30:	2b59      	cmp	r3, #89	; 0x59
 8005f32:	d199      	bne.n	8005e68 <_scanf_float+0x60>
 8005f34:	2d07      	cmp	r5, #7
 8005f36:	d197      	bne.n	8005e68 <_scanf_float+0x60>
 8005f38:	2508      	movs	r5, #8
 8005f3a:	e029      	b.n	8005f90 <_scanf_float+0x188>
 8005f3c:	2b74      	cmp	r3, #116	; 0x74
 8005f3e:	d06f      	beq.n	8006020 <_scanf_float+0x218>
 8005f40:	2b79      	cmp	r3, #121	; 0x79
 8005f42:	e7f6      	b.n	8005f32 <_scanf_float+0x12a>
 8005f44:	6821      	ldr	r1, [r4, #0]
 8005f46:	05c8      	lsls	r0, r1, #23
 8005f48:	d51a      	bpl.n	8005f80 <_scanf_float+0x178>
 8005f4a:	9b02      	ldr	r3, [sp, #8]
 8005f4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005f50:	6021      	str	r1, [r4, #0]
 8005f52:	f109 0901 	add.w	r9, r9, #1
 8005f56:	b11b      	cbz	r3, 8005f60 <_scanf_float+0x158>
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	3201      	adds	r2, #1
 8005f5c:	9302      	str	r3, [sp, #8]
 8005f5e:	60a2      	str	r2, [r4, #8]
 8005f60:	68a3      	ldr	r3, [r4, #8]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	60a3      	str	r3, [r4, #8]
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	6123      	str	r3, [r4, #16]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	f340 8084 	ble.w	8006080 <_scanf_float+0x278>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	e766      	b.n	8005e4e <_scanf_float+0x46>
 8005f80:	eb1a 0f05 	cmn.w	sl, r5
 8005f84:	f47f af70 	bne.w	8005e68 <_scanf_float+0x60>
 8005f88:	6822      	ldr	r2, [r4, #0]
 8005f8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005f8e:	6022      	str	r2, [r4, #0]
 8005f90:	f806 3b01 	strb.w	r3, [r6], #1
 8005f94:	e7e4      	b.n	8005f60 <_scanf_float+0x158>
 8005f96:	6822      	ldr	r2, [r4, #0]
 8005f98:	0610      	lsls	r0, r2, #24
 8005f9a:	f57f af65 	bpl.w	8005e68 <_scanf_float+0x60>
 8005f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fa2:	e7f4      	b.n	8005f8e <_scanf_float+0x186>
 8005fa4:	f1ba 0f00 	cmp.w	sl, #0
 8005fa8:	d10e      	bne.n	8005fc8 <_scanf_float+0x1c0>
 8005faa:	f1b9 0f00 	cmp.w	r9, #0
 8005fae:	d10e      	bne.n	8005fce <_scanf_float+0x1c6>
 8005fb0:	6822      	ldr	r2, [r4, #0]
 8005fb2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005fb6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005fba:	d108      	bne.n	8005fce <_scanf_float+0x1c6>
 8005fbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005fc0:	6022      	str	r2, [r4, #0]
 8005fc2:	f04f 0a01 	mov.w	sl, #1
 8005fc6:	e7e3      	b.n	8005f90 <_scanf_float+0x188>
 8005fc8:	f1ba 0f02 	cmp.w	sl, #2
 8005fcc:	d055      	beq.n	800607a <_scanf_float+0x272>
 8005fce:	2d01      	cmp	r5, #1
 8005fd0:	d002      	beq.n	8005fd8 <_scanf_float+0x1d0>
 8005fd2:	2d04      	cmp	r5, #4
 8005fd4:	f47f af48 	bne.w	8005e68 <_scanf_float+0x60>
 8005fd8:	3501      	adds	r5, #1
 8005fda:	b2ed      	uxtb	r5, r5
 8005fdc:	e7d8      	b.n	8005f90 <_scanf_float+0x188>
 8005fde:	f1ba 0f01 	cmp.w	sl, #1
 8005fe2:	f47f af41 	bne.w	8005e68 <_scanf_float+0x60>
 8005fe6:	f04f 0a02 	mov.w	sl, #2
 8005fea:	e7d1      	b.n	8005f90 <_scanf_float+0x188>
 8005fec:	b97d      	cbnz	r5, 800600e <_scanf_float+0x206>
 8005fee:	f1b9 0f00 	cmp.w	r9, #0
 8005ff2:	f47f af3c 	bne.w	8005e6e <_scanf_float+0x66>
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ffc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006000:	f47f af39 	bne.w	8005e76 <_scanf_float+0x6e>
 8006004:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006008:	6022      	str	r2, [r4, #0]
 800600a:	2501      	movs	r5, #1
 800600c:	e7c0      	b.n	8005f90 <_scanf_float+0x188>
 800600e:	2d03      	cmp	r5, #3
 8006010:	d0e2      	beq.n	8005fd8 <_scanf_float+0x1d0>
 8006012:	2d05      	cmp	r5, #5
 8006014:	e7de      	b.n	8005fd4 <_scanf_float+0x1cc>
 8006016:	2d02      	cmp	r5, #2
 8006018:	f47f af26 	bne.w	8005e68 <_scanf_float+0x60>
 800601c:	2503      	movs	r5, #3
 800601e:	e7b7      	b.n	8005f90 <_scanf_float+0x188>
 8006020:	2d06      	cmp	r5, #6
 8006022:	f47f af21 	bne.w	8005e68 <_scanf_float+0x60>
 8006026:	2507      	movs	r5, #7
 8006028:	e7b2      	b.n	8005f90 <_scanf_float+0x188>
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	0591      	lsls	r1, r2, #22
 800602e:	f57f af1b 	bpl.w	8005e68 <_scanf_float+0x60>
 8006032:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006036:	6022      	str	r2, [r4, #0]
 8006038:	f8cd 9004 	str.w	r9, [sp, #4]
 800603c:	e7a8      	b.n	8005f90 <_scanf_float+0x188>
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006044:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006048:	d006      	beq.n	8006058 <_scanf_float+0x250>
 800604a:	0550      	lsls	r0, r2, #21
 800604c:	f57f af0c 	bpl.w	8005e68 <_scanf_float+0x60>
 8006050:	f1b9 0f00 	cmp.w	r9, #0
 8006054:	f43f af0f 	beq.w	8005e76 <_scanf_float+0x6e>
 8006058:	0591      	lsls	r1, r2, #22
 800605a:	bf58      	it	pl
 800605c:	9901      	ldrpl	r1, [sp, #4]
 800605e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006062:	bf58      	it	pl
 8006064:	eba9 0101 	subpl.w	r1, r9, r1
 8006068:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800606c:	bf58      	it	pl
 800606e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006072:	6022      	str	r2, [r4, #0]
 8006074:	f04f 0900 	mov.w	r9, #0
 8006078:	e78a      	b.n	8005f90 <_scanf_float+0x188>
 800607a:	f04f 0a03 	mov.w	sl, #3
 800607e:	e787      	b.n	8005f90 <_scanf_float+0x188>
 8006080:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006084:	4639      	mov	r1, r7
 8006086:	4640      	mov	r0, r8
 8006088:	4798      	blx	r3
 800608a:	2800      	cmp	r0, #0
 800608c:	f43f aedf 	beq.w	8005e4e <_scanf_float+0x46>
 8006090:	e6ea      	b.n	8005e68 <_scanf_float+0x60>
 8006092:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006096:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800609a:	463a      	mov	r2, r7
 800609c:	4640      	mov	r0, r8
 800609e:	4798      	blx	r3
 80060a0:	6923      	ldr	r3, [r4, #16]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	6123      	str	r3, [r4, #16]
 80060a6:	e6ec      	b.n	8005e82 <_scanf_float+0x7a>
 80060a8:	1e6b      	subs	r3, r5, #1
 80060aa:	2b06      	cmp	r3, #6
 80060ac:	d825      	bhi.n	80060fa <_scanf_float+0x2f2>
 80060ae:	2d02      	cmp	r5, #2
 80060b0:	d836      	bhi.n	8006120 <_scanf_float+0x318>
 80060b2:	455e      	cmp	r6, fp
 80060b4:	f67f aee8 	bls.w	8005e88 <_scanf_float+0x80>
 80060b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060c0:	463a      	mov	r2, r7
 80060c2:	4640      	mov	r0, r8
 80060c4:	4798      	blx	r3
 80060c6:	6923      	ldr	r3, [r4, #16]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	e7f1      	b.n	80060b2 <_scanf_float+0x2aa>
 80060ce:	9802      	ldr	r0, [sp, #8]
 80060d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80060d8:	9002      	str	r0, [sp, #8]
 80060da:	463a      	mov	r2, r7
 80060dc:	4640      	mov	r0, r8
 80060de:	4798      	blx	r3
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	6123      	str	r3, [r4, #16]
 80060e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80060ea:	fa5f fa8a 	uxtb.w	sl, sl
 80060ee:	f1ba 0f02 	cmp.w	sl, #2
 80060f2:	d1ec      	bne.n	80060ce <_scanf_float+0x2c6>
 80060f4:	3d03      	subs	r5, #3
 80060f6:	b2ed      	uxtb	r5, r5
 80060f8:	1b76      	subs	r6, r6, r5
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	05da      	lsls	r2, r3, #23
 80060fe:	d52f      	bpl.n	8006160 <_scanf_float+0x358>
 8006100:	055b      	lsls	r3, r3, #21
 8006102:	d510      	bpl.n	8006126 <_scanf_float+0x31e>
 8006104:	455e      	cmp	r6, fp
 8006106:	f67f aebf 	bls.w	8005e88 <_scanf_float+0x80>
 800610a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800610e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006112:	463a      	mov	r2, r7
 8006114:	4640      	mov	r0, r8
 8006116:	4798      	blx	r3
 8006118:	6923      	ldr	r3, [r4, #16]
 800611a:	3b01      	subs	r3, #1
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	e7f1      	b.n	8006104 <_scanf_float+0x2fc>
 8006120:	46aa      	mov	sl, r5
 8006122:	9602      	str	r6, [sp, #8]
 8006124:	e7df      	b.n	80060e6 <_scanf_float+0x2de>
 8006126:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	2965      	cmp	r1, #101	; 0x65
 800612e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006132:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8006136:	6123      	str	r3, [r4, #16]
 8006138:	d00c      	beq.n	8006154 <_scanf_float+0x34c>
 800613a:	2945      	cmp	r1, #69	; 0x45
 800613c:	d00a      	beq.n	8006154 <_scanf_float+0x34c>
 800613e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006142:	463a      	mov	r2, r7
 8006144:	4640      	mov	r0, r8
 8006146:	4798      	blx	r3
 8006148:	6923      	ldr	r3, [r4, #16]
 800614a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800614e:	3b01      	subs	r3, #1
 8006150:	1eb5      	subs	r5, r6, #2
 8006152:	6123      	str	r3, [r4, #16]
 8006154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006158:	463a      	mov	r2, r7
 800615a:	4640      	mov	r0, r8
 800615c:	4798      	blx	r3
 800615e:	462e      	mov	r6, r5
 8006160:	6825      	ldr	r5, [r4, #0]
 8006162:	f015 0510 	ands.w	r5, r5, #16
 8006166:	d159      	bne.n	800621c <_scanf_float+0x414>
 8006168:	7035      	strb	r5, [r6, #0]
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	d11b      	bne.n	80061ae <_scanf_float+0x3a6>
 8006176:	9b01      	ldr	r3, [sp, #4]
 8006178:	454b      	cmp	r3, r9
 800617a:	eba3 0209 	sub.w	r2, r3, r9
 800617e:	d123      	bne.n	80061c8 <_scanf_float+0x3c0>
 8006180:	2200      	movs	r2, #0
 8006182:	4659      	mov	r1, fp
 8006184:	4640      	mov	r0, r8
 8006186:	f000 ff09 	bl	8006f9c <_strtod_r>
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	f012 0f02 	tst.w	r2, #2
 8006192:	ec57 6b10 	vmov	r6, r7, d0
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	d021      	beq.n	80061de <_scanf_float+0x3d6>
 800619a:	9903      	ldr	r1, [sp, #12]
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	600a      	str	r2, [r1, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	e9c3 6700 	strd	r6, r7, [r3]
 80061a6:	68e3      	ldr	r3, [r4, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60e3      	str	r3, [r4, #12]
 80061ac:	e66d      	b.n	8005e8a <_scanf_float+0x82>
 80061ae:	9b04      	ldr	r3, [sp, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0e5      	beq.n	8006180 <_scanf_float+0x378>
 80061b4:	9905      	ldr	r1, [sp, #20]
 80061b6:	230a      	movs	r3, #10
 80061b8:	462a      	mov	r2, r5
 80061ba:	3101      	adds	r1, #1
 80061bc:	4640      	mov	r0, r8
 80061be:	f000 ff75 	bl	80070ac <_strtol_r>
 80061c2:	9b04      	ldr	r3, [sp, #16]
 80061c4:	9e05      	ldr	r6, [sp, #20]
 80061c6:	1ac2      	subs	r2, r0, r3
 80061c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80061cc:	429e      	cmp	r6, r3
 80061ce:	bf28      	it	cs
 80061d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80061d4:	4912      	ldr	r1, [pc, #72]	; (8006220 <_scanf_float+0x418>)
 80061d6:	4630      	mov	r0, r6
 80061d8:	f000 f82c 	bl	8006234 <siprintf>
 80061dc:	e7d0      	b.n	8006180 <_scanf_float+0x378>
 80061de:	9903      	ldr	r1, [sp, #12]
 80061e0:	f012 0f04 	tst.w	r2, #4
 80061e4:	f103 0204 	add.w	r2, r3, #4
 80061e8:	600a      	str	r2, [r1, #0]
 80061ea:	d1d9      	bne.n	80061a0 <_scanf_float+0x398>
 80061ec:	f8d3 8000 	ldr.w	r8, [r3]
 80061f0:	ee10 2a10 	vmov	r2, s0
 80061f4:	ee10 0a10 	vmov	r0, s0
 80061f8:	463b      	mov	r3, r7
 80061fa:	4639      	mov	r1, r7
 80061fc:	f7fa fca6 	bl	8000b4c <__aeabi_dcmpun>
 8006200:	b128      	cbz	r0, 800620e <_scanf_float+0x406>
 8006202:	4808      	ldr	r0, [pc, #32]	; (8006224 <_scanf_float+0x41c>)
 8006204:	f000 f810 	bl	8006228 <nanf>
 8006208:	ed88 0a00 	vstr	s0, [r8]
 800620c:	e7cb      	b.n	80061a6 <_scanf_float+0x39e>
 800620e:	4630      	mov	r0, r6
 8006210:	4639      	mov	r1, r7
 8006212:	f7fa fcf9 	bl	8000c08 <__aeabi_d2f>
 8006216:	f8c8 0000 	str.w	r0, [r8]
 800621a:	e7c4      	b.n	80061a6 <_scanf_float+0x39e>
 800621c:	2500      	movs	r5, #0
 800621e:	e634      	b.n	8005e8a <_scanf_float+0x82>
 8006220:	0800a7a2 	.word	0x0800a7a2
 8006224:	0800abc3 	.word	0x0800abc3

08006228 <nanf>:
 8006228:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006230 <nanf+0x8>
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	7fc00000 	.word	0x7fc00000

08006234 <siprintf>:
 8006234:	b40e      	push	{r1, r2, r3}
 8006236:	b500      	push	{lr}
 8006238:	b09c      	sub	sp, #112	; 0x70
 800623a:	ab1d      	add	r3, sp, #116	; 0x74
 800623c:	9002      	str	r0, [sp, #8]
 800623e:	9006      	str	r0, [sp, #24]
 8006240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006244:	4809      	ldr	r0, [pc, #36]	; (800626c <siprintf+0x38>)
 8006246:	9107      	str	r1, [sp, #28]
 8006248:	9104      	str	r1, [sp, #16]
 800624a:	4909      	ldr	r1, [pc, #36]	; (8006270 <siprintf+0x3c>)
 800624c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006250:	9105      	str	r1, [sp, #20]
 8006252:	6800      	ldr	r0, [r0, #0]
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	a902      	add	r1, sp, #8
 8006258:	f002 ff8a 	bl	8009170 <_svfiprintf_r>
 800625c:	9b02      	ldr	r3, [sp, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	b01c      	add	sp, #112	; 0x70
 8006264:	f85d eb04 	ldr.w	lr, [sp], #4
 8006268:	b003      	add	sp, #12
 800626a:	4770      	bx	lr
 800626c:	20000014 	.word	0x20000014
 8006270:	ffff0208 	.word	0xffff0208

08006274 <siscanf>:
 8006274:	b40e      	push	{r1, r2, r3}
 8006276:	b510      	push	{r4, lr}
 8006278:	b09f      	sub	sp, #124	; 0x7c
 800627a:	ac21      	add	r4, sp, #132	; 0x84
 800627c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006280:	f854 2b04 	ldr.w	r2, [r4], #4
 8006284:	9201      	str	r2, [sp, #4]
 8006286:	f8ad 101c 	strh.w	r1, [sp, #28]
 800628a:	9004      	str	r0, [sp, #16]
 800628c:	9008      	str	r0, [sp, #32]
 800628e:	f7f9 ffa9 	bl	80001e4 <strlen>
 8006292:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <siscanf+0x50>)
 8006294:	9005      	str	r0, [sp, #20]
 8006296:	9009      	str	r0, [sp, #36]	; 0x24
 8006298:	930d      	str	r3, [sp, #52]	; 0x34
 800629a:	480b      	ldr	r0, [pc, #44]	; (80062c8 <siscanf+0x54>)
 800629c:	9a01      	ldr	r2, [sp, #4]
 800629e:	6800      	ldr	r0, [r0, #0]
 80062a0:	9403      	str	r4, [sp, #12]
 80062a2:	2300      	movs	r3, #0
 80062a4:	9311      	str	r3, [sp, #68]	; 0x44
 80062a6:	9316      	str	r3, [sp, #88]	; 0x58
 80062a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80062b0:	a904      	add	r1, sp, #16
 80062b2:	4623      	mov	r3, r4
 80062b4:	f003 f8b6 	bl	8009424 <__ssvfiscanf_r>
 80062b8:	b01f      	add	sp, #124	; 0x7c
 80062ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062be:	b003      	add	sp, #12
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	080062ef 	.word	0x080062ef
 80062c8:	20000014 	.word	0x20000014

080062cc <__sread>:
 80062cc:	b510      	push	{r4, lr}
 80062ce:	460c      	mov	r4, r1
 80062d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d4:	f003 fb70 	bl	80099b8 <_read_r>
 80062d8:	2800      	cmp	r0, #0
 80062da:	bfab      	itete	ge
 80062dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80062de:	89a3      	ldrhlt	r3, [r4, #12]
 80062e0:	181b      	addge	r3, r3, r0
 80062e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80062e6:	bfac      	ite	ge
 80062e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80062ea:	81a3      	strhlt	r3, [r4, #12]
 80062ec:	bd10      	pop	{r4, pc}

080062ee <__seofread>:
 80062ee:	2000      	movs	r0, #0
 80062f0:	4770      	bx	lr

080062f2 <__swrite>:
 80062f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f6:	461f      	mov	r7, r3
 80062f8:	898b      	ldrh	r3, [r1, #12]
 80062fa:	05db      	lsls	r3, r3, #23
 80062fc:	4605      	mov	r5, r0
 80062fe:	460c      	mov	r4, r1
 8006300:	4616      	mov	r6, r2
 8006302:	d505      	bpl.n	8006310 <__swrite+0x1e>
 8006304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006308:	2302      	movs	r3, #2
 800630a:	2200      	movs	r2, #0
 800630c:	f002 f8e2 	bl	80084d4 <_lseek_r>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	4632      	mov	r2, r6
 800631e:	463b      	mov	r3, r7
 8006320:	4628      	mov	r0, r5
 8006322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006326:	f000 bec3 	b.w	80070b0 <_write_r>

0800632a <__sseek>:
 800632a:	b510      	push	{r4, lr}
 800632c:	460c      	mov	r4, r1
 800632e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006332:	f002 f8cf 	bl	80084d4 <_lseek_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	bf15      	itete	ne
 800633c:	6560      	strne	r0, [r4, #84]	; 0x54
 800633e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006346:	81a3      	strheq	r3, [r4, #12]
 8006348:	bf18      	it	ne
 800634a:	81a3      	strhne	r3, [r4, #12]
 800634c:	bd10      	pop	{r4, pc}

0800634e <__sclose>:
 800634e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006352:	f000 bebf 	b.w	80070d4 <_close_r>

08006356 <sulp>:
 8006356:	b570      	push	{r4, r5, r6, lr}
 8006358:	4604      	mov	r4, r0
 800635a:	460d      	mov	r5, r1
 800635c:	ec45 4b10 	vmov	d0, r4, r5
 8006360:	4616      	mov	r6, r2
 8006362:	f002 fc63 	bl	8008c2c <__ulp>
 8006366:	ec51 0b10 	vmov	r0, r1, d0
 800636a:	b17e      	cbz	r6, 800638c <sulp+0x36>
 800636c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006370:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006374:	2b00      	cmp	r3, #0
 8006376:	dd09      	ble.n	800638c <sulp+0x36>
 8006378:	051b      	lsls	r3, r3, #20
 800637a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800637e:	2400      	movs	r4, #0
 8006380:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006384:	4622      	mov	r2, r4
 8006386:	462b      	mov	r3, r5
 8006388:	f7fa f946 	bl	8000618 <__aeabi_dmul>
 800638c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006390 <_strtod_l>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	ed2d 8b02 	vpush	{d8}
 8006398:	b09d      	sub	sp, #116	; 0x74
 800639a:	461f      	mov	r7, r3
 800639c:	2300      	movs	r3, #0
 800639e:	9318      	str	r3, [sp, #96]	; 0x60
 80063a0:	4ba2      	ldr	r3, [pc, #648]	; (800662c <_strtod_l+0x29c>)
 80063a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	9305      	str	r3, [sp, #20]
 80063a8:	4604      	mov	r4, r0
 80063aa:	4618      	mov	r0, r3
 80063ac:	4688      	mov	r8, r1
 80063ae:	f7f9 ff19 	bl	80001e4 <strlen>
 80063b2:	f04f 0a00 	mov.w	sl, #0
 80063b6:	4605      	mov	r5, r0
 80063b8:	f04f 0b00 	mov.w	fp, #0
 80063bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80063c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	2a2b      	cmp	r2, #43	; 0x2b
 80063c6:	d04e      	beq.n	8006466 <_strtod_l+0xd6>
 80063c8:	d83b      	bhi.n	8006442 <_strtod_l+0xb2>
 80063ca:	2a0d      	cmp	r2, #13
 80063cc:	d834      	bhi.n	8006438 <_strtod_l+0xa8>
 80063ce:	2a08      	cmp	r2, #8
 80063d0:	d834      	bhi.n	800643c <_strtod_l+0xac>
 80063d2:	2a00      	cmp	r2, #0
 80063d4:	d03e      	beq.n	8006454 <_strtod_l+0xc4>
 80063d6:	2300      	movs	r3, #0
 80063d8:	930a      	str	r3, [sp, #40]	; 0x28
 80063da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80063dc:	7833      	ldrb	r3, [r6, #0]
 80063de:	2b30      	cmp	r3, #48	; 0x30
 80063e0:	f040 80b0 	bne.w	8006544 <_strtod_l+0x1b4>
 80063e4:	7873      	ldrb	r3, [r6, #1]
 80063e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80063ea:	2b58      	cmp	r3, #88	; 0x58
 80063ec:	d168      	bne.n	80064c0 <_strtod_l+0x130>
 80063ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	ab18      	add	r3, sp, #96	; 0x60
 80063f4:	9702      	str	r7, [sp, #8]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	4a8d      	ldr	r2, [pc, #564]	; (8006630 <_strtod_l+0x2a0>)
 80063fa:	ab19      	add	r3, sp, #100	; 0x64
 80063fc:	a917      	add	r1, sp, #92	; 0x5c
 80063fe:	4620      	mov	r0, r4
 8006400:	f001 fd5c 	bl	8007ebc <__gethex>
 8006404:	f010 0707 	ands.w	r7, r0, #7
 8006408:	4605      	mov	r5, r0
 800640a:	d005      	beq.n	8006418 <_strtod_l+0x88>
 800640c:	2f06      	cmp	r7, #6
 800640e:	d12c      	bne.n	800646a <_strtod_l+0xda>
 8006410:	3601      	adds	r6, #1
 8006412:	2300      	movs	r3, #0
 8006414:	9617      	str	r6, [sp, #92]	; 0x5c
 8006416:	930a      	str	r3, [sp, #40]	; 0x28
 8006418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800641a:	2b00      	cmp	r3, #0
 800641c:	f040 8590 	bne.w	8006f40 <_strtod_l+0xbb0>
 8006420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006422:	b1eb      	cbz	r3, 8006460 <_strtod_l+0xd0>
 8006424:	4652      	mov	r2, sl
 8006426:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800642a:	ec43 2b10 	vmov	d0, r2, r3
 800642e:	b01d      	add	sp, #116	; 0x74
 8006430:	ecbd 8b02 	vpop	{d8}
 8006434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006438:	2a20      	cmp	r2, #32
 800643a:	d1cc      	bne.n	80063d6 <_strtod_l+0x46>
 800643c:	3301      	adds	r3, #1
 800643e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006440:	e7be      	b.n	80063c0 <_strtod_l+0x30>
 8006442:	2a2d      	cmp	r2, #45	; 0x2d
 8006444:	d1c7      	bne.n	80063d6 <_strtod_l+0x46>
 8006446:	2201      	movs	r2, #1
 8006448:	920a      	str	r2, [sp, #40]	; 0x28
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	9217      	str	r2, [sp, #92]	; 0x5c
 800644e:	785b      	ldrb	r3, [r3, #1]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1c2      	bne.n	80063da <_strtod_l+0x4a>
 8006454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006456:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800645a:	2b00      	cmp	r3, #0
 800645c:	f040 856e 	bne.w	8006f3c <_strtod_l+0xbac>
 8006460:	4652      	mov	r2, sl
 8006462:	465b      	mov	r3, fp
 8006464:	e7e1      	b.n	800642a <_strtod_l+0x9a>
 8006466:	2200      	movs	r2, #0
 8006468:	e7ee      	b.n	8006448 <_strtod_l+0xb8>
 800646a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800646c:	b13a      	cbz	r2, 800647e <_strtod_l+0xee>
 800646e:	2135      	movs	r1, #53	; 0x35
 8006470:	a81a      	add	r0, sp, #104	; 0x68
 8006472:	f002 fce6 	bl	8008e42 <__copybits>
 8006476:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006478:	4620      	mov	r0, r4
 800647a:	f002 f8a5 	bl	80085c8 <_Bfree>
 800647e:	3f01      	subs	r7, #1
 8006480:	2f04      	cmp	r7, #4
 8006482:	d806      	bhi.n	8006492 <_strtod_l+0x102>
 8006484:	e8df f007 	tbb	[pc, r7]
 8006488:	1714030a 	.word	0x1714030a
 800648c:	0a          	.byte	0x0a
 800648d:	00          	.byte	0x00
 800648e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006492:	0728      	lsls	r0, r5, #28
 8006494:	d5c0      	bpl.n	8006418 <_strtod_l+0x88>
 8006496:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800649a:	e7bd      	b.n	8006418 <_strtod_l+0x88>
 800649c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80064a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80064a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80064a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80064aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80064ae:	e7f0      	b.n	8006492 <_strtod_l+0x102>
 80064b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006634 <_strtod_l+0x2a4>
 80064b4:	e7ed      	b.n	8006492 <_strtod_l+0x102>
 80064b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80064ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80064be:	e7e8      	b.n	8006492 <_strtod_l+0x102>
 80064c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	2b30      	cmp	r3, #48	; 0x30
 80064ca:	d0f9      	beq.n	80064c0 <_strtod_l+0x130>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0a3      	beq.n	8006418 <_strtod_l+0x88>
 80064d0:	2301      	movs	r3, #1
 80064d2:	f04f 0900 	mov.w	r9, #0
 80064d6:	9304      	str	r3, [sp, #16]
 80064d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064da:	9308      	str	r3, [sp, #32]
 80064dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80064e0:	464f      	mov	r7, r9
 80064e2:	220a      	movs	r2, #10
 80064e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80064e6:	7806      	ldrb	r6, [r0, #0]
 80064e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80064ec:	b2d9      	uxtb	r1, r3
 80064ee:	2909      	cmp	r1, #9
 80064f0:	d92a      	bls.n	8006548 <_strtod_l+0x1b8>
 80064f2:	9905      	ldr	r1, [sp, #20]
 80064f4:	462a      	mov	r2, r5
 80064f6:	f003 fac3 	bl	8009a80 <strncmp>
 80064fa:	b398      	cbz	r0, 8006564 <_strtod_l+0x1d4>
 80064fc:	2000      	movs	r0, #0
 80064fe:	4632      	mov	r2, r6
 8006500:	463d      	mov	r5, r7
 8006502:	9005      	str	r0, [sp, #20]
 8006504:	4603      	mov	r3, r0
 8006506:	2a65      	cmp	r2, #101	; 0x65
 8006508:	d001      	beq.n	800650e <_strtod_l+0x17e>
 800650a:	2a45      	cmp	r2, #69	; 0x45
 800650c:	d118      	bne.n	8006540 <_strtod_l+0x1b0>
 800650e:	b91d      	cbnz	r5, 8006518 <_strtod_l+0x188>
 8006510:	9a04      	ldr	r2, [sp, #16]
 8006512:	4302      	orrs	r2, r0
 8006514:	d09e      	beq.n	8006454 <_strtod_l+0xc4>
 8006516:	2500      	movs	r5, #0
 8006518:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800651c:	f108 0201 	add.w	r2, r8, #1
 8006520:	9217      	str	r2, [sp, #92]	; 0x5c
 8006522:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006526:	2a2b      	cmp	r2, #43	; 0x2b
 8006528:	d075      	beq.n	8006616 <_strtod_l+0x286>
 800652a:	2a2d      	cmp	r2, #45	; 0x2d
 800652c:	d07b      	beq.n	8006626 <_strtod_l+0x296>
 800652e:	f04f 0c00 	mov.w	ip, #0
 8006532:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006536:	2909      	cmp	r1, #9
 8006538:	f240 8082 	bls.w	8006640 <_strtod_l+0x2b0>
 800653c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006540:	2600      	movs	r6, #0
 8006542:	e09d      	b.n	8006680 <_strtod_l+0x2f0>
 8006544:	2300      	movs	r3, #0
 8006546:	e7c4      	b.n	80064d2 <_strtod_l+0x142>
 8006548:	2f08      	cmp	r7, #8
 800654a:	bfd8      	it	le
 800654c:	9907      	ldrle	r1, [sp, #28]
 800654e:	f100 0001 	add.w	r0, r0, #1
 8006552:	bfda      	itte	le
 8006554:	fb02 3301 	mlale	r3, r2, r1, r3
 8006558:	9307      	strle	r3, [sp, #28]
 800655a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800655e:	3701      	adds	r7, #1
 8006560:	9017      	str	r0, [sp, #92]	; 0x5c
 8006562:	e7bf      	b.n	80064e4 <_strtod_l+0x154>
 8006564:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006566:	195a      	adds	r2, r3, r5
 8006568:	9217      	str	r2, [sp, #92]	; 0x5c
 800656a:	5d5a      	ldrb	r2, [r3, r5]
 800656c:	2f00      	cmp	r7, #0
 800656e:	d037      	beq.n	80065e0 <_strtod_l+0x250>
 8006570:	9005      	str	r0, [sp, #20]
 8006572:	463d      	mov	r5, r7
 8006574:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006578:	2b09      	cmp	r3, #9
 800657a:	d912      	bls.n	80065a2 <_strtod_l+0x212>
 800657c:	2301      	movs	r3, #1
 800657e:	e7c2      	b.n	8006506 <_strtod_l+0x176>
 8006580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	9217      	str	r2, [sp, #92]	; 0x5c
 8006586:	785a      	ldrb	r2, [r3, #1]
 8006588:	3001      	adds	r0, #1
 800658a:	2a30      	cmp	r2, #48	; 0x30
 800658c:	d0f8      	beq.n	8006580 <_strtod_l+0x1f0>
 800658e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006592:	2b08      	cmp	r3, #8
 8006594:	f200 84d9 	bhi.w	8006f4a <_strtod_l+0xbba>
 8006598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800659a:	9005      	str	r0, [sp, #20]
 800659c:	2000      	movs	r0, #0
 800659e:	9308      	str	r3, [sp, #32]
 80065a0:	4605      	mov	r5, r0
 80065a2:	3a30      	subs	r2, #48	; 0x30
 80065a4:	f100 0301 	add.w	r3, r0, #1
 80065a8:	d014      	beq.n	80065d4 <_strtod_l+0x244>
 80065aa:	9905      	ldr	r1, [sp, #20]
 80065ac:	4419      	add	r1, r3
 80065ae:	9105      	str	r1, [sp, #20]
 80065b0:	462b      	mov	r3, r5
 80065b2:	eb00 0e05 	add.w	lr, r0, r5
 80065b6:	210a      	movs	r1, #10
 80065b8:	4573      	cmp	r3, lr
 80065ba:	d113      	bne.n	80065e4 <_strtod_l+0x254>
 80065bc:	182b      	adds	r3, r5, r0
 80065be:	2b08      	cmp	r3, #8
 80065c0:	f105 0501 	add.w	r5, r5, #1
 80065c4:	4405      	add	r5, r0
 80065c6:	dc1c      	bgt.n	8006602 <_strtod_l+0x272>
 80065c8:	9907      	ldr	r1, [sp, #28]
 80065ca:	230a      	movs	r3, #10
 80065cc:	fb03 2301 	mla	r3, r3, r1, r2
 80065d0:	9307      	str	r3, [sp, #28]
 80065d2:	2300      	movs	r3, #0
 80065d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065d6:	1c51      	adds	r1, r2, #1
 80065d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80065da:	7852      	ldrb	r2, [r2, #1]
 80065dc:	4618      	mov	r0, r3
 80065de:	e7c9      	b.n	8006574 <_strtod_l+0x1e4>
 80065e0:	4638      	mov	r0, r7
 80065e2:	e7d2      	b.n	800658a <_strtod_l+0x1fa>
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	dc04      	bgt.n	80065f2 <_strtod_l+0x262>
 80065e8:	9e07      	ldr	r6, [sp, #28]
 80065ea:	434e      	muls	r6, r1
 80065ec:	9607      	str	r6, [sp, #28]
 80065ee:	3301      	adds	r3, #1
 80065f0:	e7e2      	b.n	80065b8 <_strtod_l+0x228>
 80065f2:	f103 0c01 	add.w	ip, r3, #1
 80065f6:	f1bc 0f10 	cmp.w	ip, #16
 80065fa:	bfd8      	it	le
 80065fc:	fb01 f909 	mulle.w	r9, r1, r9
 8006600:	e7f5      	b.n	80065ee <_strtod_l+0x25e>
 8006602:	2d10      	cmp	r5, #16
 8006604:	bfdc      	itt	le
 8006606:	230a      	movle	r3, #10
 8006608:	fb03 2909 	mlale	r9, r3, r9, r2
 800660c:	e7e1      	b.n	80065d2 <_strtod_l+0x242>
 800660e:	2300      	movs	r3, #0
 8006610:	9305      	str	r3, [sp, #20]
 8006612:	2301      	movs	r3, #1
 8006614:	e77c      	b.n	8006510 <_strtod_l+0x180>
 8006616:	f04f 0c00 	mov.w	ip, #0
 800661a:	f108 0202 	add.w	r2, r8, #2
 800661e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006620:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006624:	e785      	b.n	8006532 <_strtod_l+0x1a2>
 8006626:	f04f 0c01 	mov.w	ip, #1
 800662a:	e7f6      	b.n	800661a <_strtod_l+0x28a>
 800662c:	0800a9f0 	.word	0x0800a9f0
 8006630:	0800a7a8 	.word	0x0800a7a8
 8006634:	7ff00000 	.word	0x7ff00000
 8006638:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800663a:	1c51      	adds	r1, r2, #1
 800663c:	9117      	str	r1, [sp, #92]	; 0x5c
 800663e:	7852      	ldrb	r2, [r2, #1]
 8006640:	2a30      	cmp	r2, #48	; 0x30
 8006642:	d0f9      	beq.n	8006638 <_strtod_l+0x2a8>
 8006644:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006648:	2908      	cmp	r1, #8
 800664a:	f63f af79 	bhi.w	8006540 <_strtod_l+0x1b0>
 800664e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006652:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006654:	9206      	str	r2, [sp, #24]
 8006656:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006658:	1c51      	adds	r1, r2, #1
 800665a:	9117      	str	r1, [sp, #92]	; 0x5c
 800665c:	7852      	ldrb	r2, [r2, #1]
 800665e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006662:	2e09      	cmp	r6, #9
 8006664:	d937      	bls.n	80066d6 <_strtod_l+0x346>
 8006666:	9e06      	ldr	r6, [sp, #24]
 8006668:	1b89      	subs	r1, r1, r6
 800666a:	2908      	cmp	r1, #8
 800666c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006670:	dc02      	bgt.n	8006678 <_strtod_l+0x2e8>
 8006672:	4576      	cmp	r6, lr
 8006674:	bfa8      	it	ge
 8006676:	4676      	movge	r6, lr
 8006678:	f1bc 0f00 	cmp.w	ip, #0
 800667c:	d000      	beq.n	8006680 <_strtod_l+0x2f0>
 800667e:	4276      	negs	r6, r6
 8006680:	2d00      	cmp	r5, #0
 8006682:	d14d      	bne.n	8006720 <_strtod_l+0x390>
 8006684:	9904      	ldr	r1, [sp, #16]
 8006686:	4301      	orrs	r1, r0
 8006688:	f47f aec6 	bne.w	8006418 <_strtod_l+0x88>
 800668c:	2b00      	cmp	r3, #0
 800668e:	f47f aee1 	bne.w	8006454 <_strtod_l+0xc4>
 8006692:	2a69      	cmp	r2, #105	; 0x69
 8006694:	d027      	beq.n	80066e6 <_strtod_l+0x356>
 8006696:	dc24      	bgt.n	80066e2 <_strtod_l+0x352>
 8006698:	2a49      	cmp	r2, #73	; 0x49
 800669a:	d024      	beq.n	80066e6 <_strtod_l+0x356>
 800669c:	2a4e      	cmp	r2, #78	; 0x4e
 800669e:	f47f aed9 	bne.w	8006454 <_strtod_l+0xc4>
 80066a2:	499f      	ldr	r1, [pc, #636]	; (8006920 <_strtod_l+0x590>)
 80066a4:	a817      	add	r0, sp, #92	; 0x5c
 80066a6:	f001 fe61 	bl	800836c <__match>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f43f aed2 	beq.w	8006454 <_strtod_l+0xc4>
 80066b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b28      	cmp	r3, #40	; 0x28
 80066b6:	d12d      	bne.n	8006714 <_strtod_l+0x384>
 80066b8:	499a      	ldr	r1, [pc, #616]	; (8006924 <_strtod_l+0x594>)
 80066ba:	aa1a      	add	r2, sp, #104	; 0x68
 80066bc:	a817      	add	r0, sp, #92	; 0x5c
 80066be:	f001 fe69 	bl	8008394 <__hexnan>
 80066c2:	2805      	cmp	r0, #5
 80066c4:	d126      	bne.n	8006714 <_strtod_l+0x384>
 80066c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80066cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80066d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80066d4:	e6a0      	b.n	8006418 <_strtod_l+0x88>
 80066d6:	210a      	movs	r1, #10
 80066d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80066dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80066e0:	e7b9      	b.n	8006656 <_strtod_l+0x2c6>
 80066e2:	2a6e      	cmp	r2, #110	; 0x6e
 80066e4:	e7db      	b.n	800669e <_strtod_l+0x30e>
 80066e6:	4990      	ldr	r1, [pc, #576]	; (8006928 <_strtod_l+0x598>)
 80066e8:	a817      	add	r0, sp, #92	; 0x5c
 80066ea:	f001 fe3f 	bl	800836c <__match>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	f43f aeb0 	beq.w	8006454 <_strtod_l+0xc4>
 80066f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066f6:	498d      	ldr	r1, [pc, #564]	; (800692c <_strtod_l+0x59c>)
 80066f8:	3b01      	subs	r3, #1
 80066fa:	a817      	add	r0, sp, #92	; 0x5c
 80066fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80066fe:	f001 fe35 	bl	800836c <__match>
 8006702:	b910      	cbnz	r0, 800670a <_strtod_l+0x37a>
 8006704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006706:	3301      	adds	r3, #1
 8006708:	9317      	str	r3, [sp, #92]	; 0x5c
 800670a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800693c <_strtod_l+0x5ac>
 800670e:	f04f 0a00 	mov.w	sl, #0
 8006712:	e681      	b.n	8006418 <_strtod_l+0x88>
 8006714:	4886      	ldr	r0, [pc, #536]	; (8006930 <_strtod_l+0x5a0>)
 8006716:	f003 f963 	bl	80099e0 <nan>
 800671a:	ec5b ab10 	vmov	sl, fp, d0
 800671e:	e67b      	b.n	8006418 <_strtod_l+0x88>
 8006720:	9b05      	ldr	r3, [sp, #20]
 8006722:	9807      	ldr	r0, [sp, #28]
 8006724:	1af3      	subs	r3, r6, r3
 8006726:	2f00      	cmp	r7, #0
 8006728:	bf08      	it	eq
 800672a:	462f      	moveq	r7, r5
 800672c:	2d10      	cmp	r5, #16
 800672e:	9306      	str	r3, [sp, #24]
 8006730:	46a8      	mov	r8, r5
 8006732:	bfa8      	it	ge
 8006734:	f04f 0810 	movge.w	r8, #16
 8006738:	f7f9 fef4 	bl	8000524 <__aeabi_ui2d>
 800673c:	2d09      	cmp	r5, #9
 800673e:	4682      	mov	sl, r0
 8006740:	468b      	mov	fp, r1
 8006742:	dd13      	ble.n	800676c <_strtod_l+0x3dc>
 8006744:	4b7b      	ldr	r3, [pc, #492]	; (8006934 <_strtod_l+0x5a4>)
 8006746:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800674a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800674e:	f7f9 ff63 	bl	8000618 <__aeabi_dmul>
 8006752:	4682      	mov	sl, r0
 8006754:	4648      	mov	r0, r9
 8006756:	468b      	mov	fp, r1
 8006758:	f7f9 fee4 	bl	8000524 <__aeabi_ui2d>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4650      	mov	r0, sl
 8006762:	4659      	mov	r1, fp
 8006764:	f7f9 fda2 	bl	80002ac <__adddf3>
 8006768:	4682      	mov	sl, r0
 800676a:	468b      	mov	fp, r1
 800676c:	2d0f      	cmp	r5, #15
 800676e:	dc38      	bgt.n	80067e2 <_strtod_l+0x452>
 8006770:	9b06      	ldr	r3, [sp, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f43f ae50 	beq.w	8006418 <_strtod_l+0x88>
 8006778:	dd24      	ble.n	80067c4 <_strtod_l+0x434>
 800677a:	2b16      	cmp	r3, #22
 800677c:	dc0b      	bgt.n	8006796 <_strtod_l+0x406>
 800677e:	496d      	ldr	r1, [pc, #436]	; (8006934 <_strtod_l+0x5a4>)
 8006780:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006788:	4652      	mov	r2, sl
 800678a:	465b      	mov	r3, fp
 800678c:	f7f9 ff44 	bl	8000618 <__aeabi_dmul>
 8006790:	4682      	mov	sl, r0
 8006792:	468b      	mov	fp, r1
 8006794:	e640      	b.n	8006418 <_strtod_l+0x88>
 8006796:	9a06      	ldr	r2, [sp, #24]
 8006798:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800679c:	4293      	cmp	r3, r2
 800679e:	db20      	blt.n	80067e2 <_strtod_l+0x452>
 80067a0:	4c64      	ldr	r4, [pc, #400]	; (8006934 <_strtod_l+0x5a4>)
 80067a2:	f1c5 050f 	rsb	r5, r5, #15
 80067a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80067aa:	4652      	mov	r2, sl
 80067ac:	465b      	mov	r3, fp
 80067ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067b2:	f7f9 ff31 	bl	8000618 <__aeabi_dmul>
 80067b6:	9b06      	ldr	r3, [sp, #24]
 80067b8:	1b5d      	subs	r5, r3, r5
 80067ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80067be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80067c2:	e7e3      	b.n	800678c <_strtod_l+0x3fc>
 80067c4:	9b06      	ldr	r3, [sp, #24]
 80067c6:	3316      	adds	r3, #22
 80067c8:	db0b      	blt.n	80067e2 <_strtod_l+0x452>
 80067ca:	9b05      	ldr	r3, [sp, #20]
 80067cc:	1b9e      	subs	r6, r3, r6
 80067ce:	4b59      	ldr	r3, [pc, #356]	; (8006934 <_strtod_l+0x5a4>)
 80067d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80067d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067d8:	4650      	mov	r0, sl
 80067da:	4659      	mov	r1, fp
 80067dc:	f7fa f846 	bl	800086c <__aeabi_ddiv>
 80067e0:	e7d6      	b.n	8006790 <_strtod_l+0x400>
 80067e2:	9b06      	ldr	r3, [sp, #24]
 80067e4:	eba5 0808 	sub.w	r8, r5, r8
 80067e8:	4498      	add	r8, r3
 80067ea:	f1b8 0f00 	cmp.w	r8, #0
 80067ee:	dd74      	ble.n	80068da <_strtod_l+0x54a>
 80067f0:	f018 030f 	ands.w	r3, r8, #15
 80067f4:	d00a      	beq.n	800680c <_strtod_l+0x47c>
 80067f6:	494f      	ldr	r1, [pc, #316]	; (8006934 <_strtod_l+0x5a4>)
 80067f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067fc:	4652      	mov	r2, sl
 80067fe:	465b      	mov	r3, fp
 8006800:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006804:	f7f9 ff08 	bl	8000618 <__aeabi_dmul>
 8006808:	4682      	mov	sl, r0
 800680a:	468b      	mov	fp, r1
 800680c:	f038 080f 	bics.w	r8, r8, #15
 8006810:	d04f      	beq.n	80068b2 <_strtod_l+0x522>
 8006812:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006816:	dd22      	ble.n	800685e <_strtod_l+0x4ce>
 8006818:	2500      	movs	r5, #0
 800681a:	462e      	mov	r6, r5
 800681c:	9507      	str	r5, [sp, #28]
 800681e:	9505      	str	r5, [sp, #20]
 8006820:	2322      	movs	r3, #34	; 0x22
 8006822:	f8df b118 	ldr.w	fp, [pc, #280]	; 800693c <_strtod_l+0x5ac>
 8006826:	6023      	str	r3, [r4, #0]
 8006828:	f04f 0a00 	mov.w	sl, #0
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	f43f adf2 	beq.w	8006418 <_strtod_l+0x88>
 8006834:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006836:	4620      	mov	r0, r4
 8006838:	f001 fec6 	bl	80085c8 <_Bfree>
 800683c:	9905      	ldr	r1, [sp, #20]
 800683e:	4620      	mov	r0, r4
 8006840:	f001 fec2 	bl	80085c8 <_Bfree>
 8006844:	4631      	mov	r1, r6
 8006846:	4620      	mov	r0, r4
 8006848:	f001 febe 	bl	80085c8 <_Bfree>
 800684c:	9907      	ldr	r1, [sp, #28]
 800684e:	4620      	mov	r0, r4
 8006850:	f001 feba 	bl	80085c8 <_Bfree>
 8006854:	4629      	mov	r1, r5
 8006856:	4620      	mov	r0, r4
 8006858:	f001 feb6 	bl	80085c8 <_Bfree>
 800685c:	e5dc      	b.n	8006418 <_strtod_l+0x88>
 800685e:	4b36      	ldr	r3, [pc, #216]	; (8006938 <_strtod_l+0x5a8>)
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	2300      	movs	r3, #0
 8006864:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006868:	4650      	mov	r0, sl
 800686a:	4659      	mov	r1, fp
 800686c:	4699      	mov	r9, r3
 800686e:	f1b8 0f01 	cmp.w	r8, #1
 8006872:	dc21      	bgt.n	80068b8 <_strtod_l+0x528>
 8006874:	b10b      	cbz	r3, 800687a <_strtod_l+0x4ea>
 8006876:	4682      	mov	sl, r0
 8006878:	468b      	mov	fp, r1
 800687a:	4b2f      	ldr	r3, [pc, #188]	; (8006938 <_strtod_l+0x5a8>)
 800687c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006880:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006884:	4652      	mov	r2, sl
 8006886:	465b      	mov	r3, fp
 8006888:	e9d9 0100 	ldrd	r0, r1, [r9]
 800688c:	f7f9 fec4 	bl	8000618 <__aeabi_dmul>
 8006890:	4b2a      	ldr	r3, [pc, #168]	; (800693c <_strtod_l+0x5ac>)
 8006892:	460a      	mov	r2, r1
 8006894:	400b      	ands	r3, r1
 8006896:	492a      	ldr	r1, [pc, #168]	; (8006940 <_strtod_l+0x5b0>)
 8006898:	428b      	cmp	r3, r1
 800689a:	4682      	mov	sl, r0
 800689c:	d8bc      	bhi.n	8006818 <_strtod_l+0x488>
 800689e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80068a2:	428b      	cmp	r3, r1
 80068a4:	bf86      	itte	hi
 80068a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006944 <_strtod_l+0x5b4>
 80068aa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80068ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80068b2:	2300      	movs	r3, #0
 80068b4:	9304      	str	r3, [sp, #16]
 80068b6:	e084      	b.n	80069c2 <_strtod_l+0x632>
 80068b8:	f018 0f01 	tst.w	r8, #1
 80068bc:	d005      	beq.n	80068ca <_strtod_l+0x53a>
 80068be:	9b04      	ldr	r3, [sp, #16]
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	f7f9 fea8 	bl	8000618 <__aeabi_dmul>
 80068c8:	2301      	movs	r3, #1
 80068ca:	9a04      	ldr	r2, [sp, #16]
 80068cc:	3208      	adds	r2, #8
 80068ce:	f109 0901 	add.w	r9, r9, #1
 80068d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80068d6:	9204      	str	r2, [sp, #16]
 80068d8:	e7c9      	b.n	800686e <_strtod_l+0x4de>
 80068da:	d0ea      	beq.n	80068b2 <_strtod_l+0x522>
 80068dc:	f1c8 0800 	rsb	r8, r8, #0
 80068e0:	f018 020f 	ands.w	r2, r8, #15
 80068e4:	d00a      	beq.n	80068fc <_strtod_l+0x56c>
 80068e6:	4b13      	ldr	r3, [pc, #76]	; (8006934 <_strtod_l+0x5a4>)
 80068e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ec:	4650      	mov	r0, sl
 80068ee:	4659      	mov	r1, fp
 80068f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f4:	f7f9 ffba 	bl	800086c <__aeabi_ddiv>
 80068f8:	4682      	mov	sl, r0
 80068fa:	468b      	mov	fp, r1
 80068fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006900:	d0d7      	beq.n	80068b2 <_strtod_l+0x522>
 8006902:	f1b8 0f1f 	cmp.w	r8, #31
 8006906:	dd1f      	ble.n	8006948 <_strtod_l+0x5b8>
 8006908:	2500      	movs	r5, #0
 800690a:	462e      	mov	r6, r5
 800690c:	9507      	str	r5, [sp, #28]
 800690e:	9505      	str	r5, [sp, #20]
 8006910:	2322      	movs	r3, #34	; 0x22
 8006912:	f04f 0a00 	mov.w	sl, #0
 8006916:	f04f 0b00 	mov.w	fp, #0
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	e786      	b.n	800682c <_strtod_l+0x49c>
 800691e:	bf00      	nop
 8006920:	0800a77d 	.word	0x0800a77d
 8006924:	0800a7bc 	.word	0x0800a7bc
 8006928:	0800a775 	.word	0x0800a775
 800692c:	0800a8fc 	.word	0x0800a8fc
 8006930:	0800abc3 	.word	0x0800abc3
 8006934:	0800aa88 	.word	0x0800aa88
 8006938:	0800aa60 	.word	0x0800aa60
 800693c:	7ff00000 	.word	0x7ff00000
 8006940:	7ca00000 	.word	0x7ca00000
 8006944:	7fefffff 	.word	0x7fefffff
 8006948:	f018 0310 	ands.w	r3, r8, #16
 800694c:	bf18      	it	ne
 800694e:	236a      	movne	r3, #106	; 0x6a
 8006950:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006d00 <_strtod_l+0x970>
 8006954:	9304      	str	r3, [sp, #16]
 8006956:	4650      	mov	r0, sl
 8006958:	4659      	mov	r1, fp
 800695a:	2300      	movs	r3, #0
 800695c:	f018 0f01 	tst.w	r8, #1
 8006960:	d004      	beq.n	800696c <_strtod_l+0x5dc>
 8006962:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006966:	f7f9 fe57 	bl	8000618 <__aeabi_dmul>
 800696a:	2301      	movs	r3, #1
 800696c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006970:	f109 0908 	add.w	r9, r9, #8
 8006974:	d1f2      	bne.n	800695c <_strtod_l+0x5cc>
 8006976:	b10b      	cbz	r3, 800697c <_strtod_l+0x5ec>
 8006978:	4682      	mov	sl, r0
 800697a:	468b      	mov	fp, r1
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	b1c3      	cbz	r3, 80069b2 <_strtod_l+0x622>
 8006980:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006984:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006988:	2b00      	cmp	r3, #0
 800698a:	4659      	mov	r1, fp
 800698c:	dd11      	ble.n	80069b2 <_strtod_l+0x622>
 800698e:	2b1f      	cmp	r3, #31
 8006990:	f340 8124 	ble.w	8006bdc <_strtod_l+0x84c>
 8006994:	2b34      	cmp	r3, #52	; 0x34
 8006996:	bfde      	ittt	le
 8006998:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800699c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80069a0:	fa03 f202 	lslle.w	r2, r3, r2
 80069a4:	f04f 0a00 	mov.w	sl, #0
 80069a8:	bfcc      	ite	gt
 80069aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80069ae:	ea02 0b01 	andle.w	fp, r2, r1
 80069b2:	2200      	movs	r2, #0
 80069b4:	2300      	movs	r3, #0
 80069b6:	4650      	mov	r0, sl
 80069b8:	4659      	mov	r1, fp
 80069ba:	f7fa f895 	bl	8000ae8 <__aeabi_dcmpeq>
 80069be:	2800      	cmp	r0, #0
 80069c0:	d1a2      	bne.n	8006908 <_strtod_l+0x578>
 80069c2:	9b07      	ldr	r3, [sp, #28]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	9908      	ldr	r1, [sp, #32]
 80069c8:	462b      	mov	r3, r5
 80069ca:	463a      	mov	r2, r7
 80069cc:	4620      	mov	r0, r4
 80069ce:	f001 fe63 	bl	8008698 <__s2b>
 80069d2:	9007      	str	r0, [sp, #28]
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f43f af1f 	beq.w	8006818 <_strtod_l+0x488>
 80069da:	9b05      	ldr	r3, [sp, #20]
 80069dc:	1b9e      	subs	r6, r3, r6
 80069de:	9b06      	ldr	r3, [sp, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bfb4      	ite	lt
 80069e4:	4633      	movlt	r3, r6
 80069e6:	2300      	movge	r3, #0
 80069e8:	930c      	str	r3, [sp, #48]	; 0x30
 80069ea:	9b06      	ldr	r3, [sp, #24]
 80069ec:	2500      	movs	r5, #0
 80069ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80069f2:	9312      	str	r3, [sp, #72]	; 0x48
 80069f4:	462e      	mov	r6, r5
 80069f6:	9b07      	ldr	r3, [sp, #28]
 80069f8:	4620      	mov	r0, r4
 80069fa:	6859      	ldr	r1, [r3, #4]
 80069fc:	f001 fda4 	bl	8008548 <_Balloc>
 8006a00:	9005      	str	r0, [sp, #20]
 8006a02:	2800      	cmp	r0, #0
 8006a04:	f43f af0c 	beq.w	8006820 <_strtod_l+0x490>
 8006a08:	9b07      	ldr	r3, [sp, #28]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	3202      	adds	r2, #2
 8006a0e:	f103 010c 	add.w	r1, r3, #12
 8006a12:	0092      	lsls	r2, r2, #2
 8006a14:	300c      	adds	r0, #12
 8006a16:	f001 fd89 	bl	800852c <memcpy>
 8006a1a:	ec4b ab10 	vmov	d0, sl, fp
 8006a1e:	aa1a      	add	r2, sp, #104	; 0x68
 8006a20:	a919      	add	r1, sp, #100	; 0x64
 8006a22:	4620      	mov	r0, r4
 8006a24:	f002 f97e 	bl	8008d24 <__d2b>
 8006a28:	ec4b ab18 	vmov	d8, sl, fp
 8006a2c:	9018      	str	r0, [sp, #96]	; 0x60
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f43f aef6 	beq.w	8006820 <_strtod_l+0x490>
 8006a34:	2101      	movs	r1, #1
 8006a36:	4620      	mov	r0, r4
 8006a38:	f001 fec8 	bl	80087cc <__i2b>
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f43f aeee 	beq.w	8006820 <_strtod_l+0x490>
 8006a44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a46:	9904      	ldr	r1, [sp, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	bfab      	itete	ge
 8006a4c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006a4e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006a50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006a52:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006a56:	bfac      	ite	ge
 8006a58:	eb03 0902 	addge.w	r9, r3, r2
 8006a5c:	1ad7      	sublt	r7, r2, r3
 8006a5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a60:	eba3 0801 	sub.w	r8, r3, r1
 8006a64:	4490      	add	r8, r2
 8006a66:	4ba1      	ldr	r3, [pc, #644]	; (8006cec <_strtod_l+0x95c>)
 8006a68:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006a6c:	4598      	cmp	r8, r3
 8006a6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a72:	f280 80c7 	bge.w	8006c04 <_strtod_l+0x874>
 8006a76:	eba3 0308 	sub.w	r3, r3, r8
 8006a7a:	2b1f      	cmp	r3, #31
 8006a7c:	eba2 0203 	sub.w	r2, r2, r3
 8006a80:	f04f 0101 	mov.w	r1, #1
 8006a84:	f300 80b1 	bgt.w	8006bea <_strtod_l+0x85a>
 8006a88:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8c:	930d      	str	r3, [sp, #52]	; 0x34
 8006a8e:	2300      	movs	r3, #0
 8006a90:	9308      	str	r3, [sp, #32]
 8006a92:	eb09 0802 	add.w	r8, r9, r2
 8006a96:	9b04      	ldr	r3, [sp, #16]
 8006a98:	45c1      	cmp	r9, r8
 8006a9a:	4417      	add	r7, r2
 8006a9c:	441f      	add	r7, r3
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	bfa8      	it	ge
 8006aa2:	4643      	movge	r3, r8
 8006aa4:	42bb      	cmp	r3, r7
 8006aa6:	bfa8      	it	ge
 8006aa8:	463b      	movge	r3, r7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bfc2      	ittt	gt
 8006aae:	eba8 0803 	subgt.w	r8, r8, r3
 8006ab2:	1aff      	subgt	r7, r7, r3
 8006ab4:	eba9 0903 	subgt.w	r9, r9, r3
 8006ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	dd17      	ble.n	8006aee <_strtod_l+0x75e>
 8006abe:	4631      	mov	r1, r6
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f001 ff42 	bl	800894c <__pow5mult>
 8006ac8:	4606      	mov	r6, r0
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f43f aea8 	beq.w	8006820 <_strtod_l+0x490>
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f001 fe8f 	bl	80087f8 <__multiply>
 8006ada:	900b      	str	r0, [sp, #44]	; 0x2c
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f43f ae9f 	beq.w	8006820 <_strtod_l+0x490>
 8006ae2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f001 fd6f 	bl	80085c8 <_Bfree>
 8006aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aec:	9318      	str	r3, [sp, #96]	; 0x60
 8006aee:	f1b8 0f00 	cmp.w	r8, #0
 8006af2:	f300 808c 	bgt.w	8006c0e <_strtod_l+0x87e>
 8006af6:	9b06      	ldr	r3, [sp, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dd08      	ble.n	8006b0e <_strtod_l+0x77e>
 8006afc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006afe:	9905      	ldr	r1, [sp, #20]
 8006b00:	4620      	mov	r0, r4
 8006b02:	f001 ff23 	bl	800894c <__pow5mult>
 8006b06:	9005      	str	r0, [sp, #20]
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f43f ae89 	beq.w	8006820 <_strtod_l+0x490>
 8006b0e:	2f00      	cmp	r7, #0
 8006b10:	dd08      	ble.n	8006b24 <_strtod_l+0x794>
 8006b12:	9905      	ldr	r1, [sp, #20]
 8006b14:	463a      	mov	r2, r7
 8006b16:	4620      	mov	r0, r4
 8006b18:	f001 ff72 	bl	8008a00 <__lshift>
 8006b1c:	9005      	str	r0, [sp, #20]
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f43f ae7e 	beq.w	8006820 <_strtod_l+0x490>
 8006b24:	f1b9 0f00 	cmp.w	r9, #0
 8006b28:	dd08      	ble.n	8006b3c <_strtod_l+0x7ac>
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	464a      	mov	r2, r9
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f001 ff66 	bl	8008a00 <__lshift>
 8006b34:	4606      	mov	r6, r0
 8006b36:	2800      	cmp	r0, #0
 8006b38:	f43f ae72 	beq.w	8006820 <_strtod_l+0x490>
 8006b3c:	9a05      	ldr	r2, [sp, #20]
 8006b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b40:	4620      	mov	r0, r4
 8006b42:	f001 ffe9 	bl	8008b18 <__mdiff>
 8006b46:	4605      	mov	r5, r0
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	f43f ae69 	beq.w	8006820 <_strtod_l+0x490>
 8006b4e:	68c3      	ldr	r3, [r0, #12]
 8006b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b52:	2300      	movs	r3, #0
 8006b54:	60c3      	str	r3, [r0, #12]
 8006b56:	4631      	mov	r1, r6
 8006b58:	f001 ffc2 	bl	8008ae0 <__mcmp>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	da60      	bge.n	8006c22 <_strtod_l+0x892>
 8006b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b62:	ea53 030a 	orrs.w	r3, r3, sl
 8006b66:	f040 8082 	bne.w	8006c6e <_strtod_l+0x8de>
 8006b6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d17d      	bne.n	8006c6e <_strtod_l+0x8de>
 8006b72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b76:	0d1b      	lsrs	r3, r3, #20
 8006b78:	051b      	lsls	r3, r3, #20
 8006b7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006b7e:	d976      	bls.n	8006c6e <_strtod_l+0x8de>
 8006b80:	696b      	ldr	r3, [r5, #20]
 8006b82:	b913      	cbnz	r3, 8006b8a <_strtod_l+0x7fa>
 8006b84:	692b      	ldr	r3, [r5, #16]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	dd71      	ble.n	8006c6e <_strtod_l+0x8de>
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f001 ff36 	bl	8008a00 <__lshift>
 8006b94:	4631      	mov	r1, r6
 8006b96:	4605      	mov	r5, r0
 8006b98:	f001 ffa2 	bl	8008ae0 <__mcmp>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	dd66      	ble.n	8006c6e <_strtod_l+0x8de>
 8006ba0:	9904      	ldr	r1, [sp, #16]
 8006ba2:	4a53      	ldr	r2, [pc, #332]	; (8006cf0 <_strtod_l+0x960>)
 8006ba4:	465b      	mov	r3, fp
 8006ba6:	2900      	cmp	r1, #0
 8006ba8:	f000 8081 	beq.w	8006cae <_strtod_l+0x91e>
 8006bac:	ea02 010b 	and.w	r1, r2, fp
 8006bb0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006bb4:	dc7b      	bgt.n	8006cae <_strtod_l+0x91e>
 8006bb6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006bba:	f77f aea9 	ble.w	8006910 <_strtod_l+0x580>
 8006bbe:	4b4d      	ldr	r3, [pc, #308]	; (8006cf4 <_strtod_l+0x964>)
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	4659      	mov	r1, fp
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f7f9 fd27 	bl	8000618 <__aeabi_dmul>
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4303      	orrs	r3, r0
 8006bce:	bf08      	it	eq
 8006bd0:	2322      	moveq	r3, #34	; 0x22
 8006bd2:	4682      	mov	sl, r0
 8006bd4:	468b      	mov	fp, r1
 8006bd6:	bf08      	it	eq
 8006bd8:	6023      	streq	r3, [r4, #0]
 8006bda:	e62b      	b.n	8006834 <_strtod_l+0x4a4>
 8006bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	ea03 0a0a 	and.w	sl, r3, sl
 8006be8:	e6e3      	b.n	80069b2 <_strtod_l+0x622>
 8006bea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006bee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006bf2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006bf6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006bfa:	fa01 f308 	lsl.w	r3, r1, r8
 8006bfe:	9308      	str	r3, [sp, #32]
 8006c00:	910d      	str	r1, [sp, #52]	; 0x34
 8006c02:	e746      	b.n	8006a92 <_strtod_l+0x702>
 8006c04:	2300      	movs	r3, #0
 8006c06:	9308      	str	r3, [sp, #32]
 8006c08:	2301      	movs	r3, #1
 8006c0a:	930d      	str	r3, [sp, #52]	; 0x34
 8006c0c:	e741      	b.n	8006a92 <_strtod_l+0x702>
 8006c0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c10:	4642      	mov	r2, r8
 8006c12:	4620      	mov	r0, r4
 8006c14:	f001 fef4 	bl	8008a00 <__lshift>
 8006c18:	9018      	str	r0, [sp, #96]	; 0x60
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	f47f af6b 	bne.w	8006af6 <_strtod_l+0x766>
 8006c20:	e5fe      	b.n	8006820 <_strtod_l+0x490>
 8006c22:	465f      	mov	r7, fp
 8006c24:	d16e      	bne.n	8006d04 <_strtod_l+0x974>
 8006c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c2c:	b342      	cbz	r2, 8006c80 <_strtod_l+0x8f0>
 8006c2e:	4a32      	ldr	r2, [pc, #200]	; (8006cf8 <_strtod_l+0x968>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d128      	bne.n	8006c86 <_strtod_l+0x8f6>
 8006c34:	9b04      	ldr	r3, [sp, #16]
 8006c36:	4651      	mov	r1, sl
 8006c38:	b1eb      	cbz	r3, 8006c76 <_strtod_l+0x8e6>
 8006c3a:	4b2d      	ldr	r3, [pc, #180]	; (8006cf0 <_strtod_l+0x960>)
 8006c3c:	403b      	ands	r3, r7
 8006c3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c46:	d819      	bhi.n	8006c7c <_strtod_l+0x8ec>
 8006c48:	0d1b      	lsrs	r3, r3, #20
 8006c4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c52:	4299      	cmp	r1, r3
 8006c54:	d117      	bne.n	8006c86 <_strtod_l+0x8f6>
 8006c56:	4b29      	ldr	r3, [pc, #164]	; (8006cfc <_strtod_l+0x96c>)
 8006c58:	429f      	cmp	r7, r3
 8006c5a:	d102      	bne.n	8006c62 <_strtod_l+0x8d2>
 8006c5c:	3101      	adds	r1, #1
 8006c5e:	f43f addf 	beq.w	8006820 <_strtod_l+0x490>
 8006c62:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <_strtod_l+0x960>)
 8006c64:	403b      	ands	r3, r7
 8006c66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006c6a:	f04f 0a00 	mov.w	sl, #0
 8006c6e:	9b04      	ldr	r3, [sp, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1a4      	bne.n	8006bbe <_strtod_l+0x82e>
 8006c74:	e5de      	b.n	8006834 <_strtod_l+0x4a4>
 8006c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c7a:	e7ea      	b.n	8006c52 <_strtod_l+0x8c2>
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	e7e8      	b.n	8006c52 <_strtod_l+0x8c2>
 8006c80:	ea53 030a 	orrs.w	r3, r3, sl
 8006c84:	d08c      	beq.n	8006ba0 <_strtod_l+0x810>
 8006c86:	9b08      	ldr	r3, [sp, #32]
 8006c88:	b1db      	cbz	r3, 8006cc2 <_strtod_l+0x932>
 8006c8a:	423b      	tst	r3, r7
 8006c8c:	d0ef      	beq.n	8006c6e <_strtod_l+0x8de>
 8006c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c90:	9a04      	ldr	r2, [sp, #16]
 8006c92:	4650      	mov	r0, sl
 8006c94:	4659      	mov	r1, fp
 8006c96:	b1c3      	cbz	r3, 8006cca <_strtod_l+0x93a>
 8006c98:	f7ff fb5d 	bl	8006356 <sulp>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	ec51 0b18 	vmov	r0, r1, d8
 8006ca4:	f7f9 fb02 	bl	80002ac <__adddf3>
 8006ca8:	4682      	mov	sl, r0
 8006caa:	468b      	mov	fp, r1
 8006cac:	e7df      	b.n	8006c6e <_strtod_l+0x8de>
 8006cae:	4013      	ands	r3, r2
 8006cb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006cb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006cb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006cbc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006cc0:	e7d5      	b.n	8006c6e <_strtod_l+0x8de>
 8006cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cc4:	ea13 0f0a 	tst.w	r3, sl
 8006cc8:	e7e0      	b.n	8006c8c <_strtod_l+0x8fc>
 8006cca:	f7ff fb44 	bl	8006356 <sulp>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	ec51 0b18 	vmov	r0, r1, d8
 8006cd6:	f7f9 fae7 	bl	80002a8 <__aeabi_dsub>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4682      	mov	sl, r0
 8006ce0:	468b      	mov	fp, r1
 8006ce2:	f7f9 ff01 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d0c1      	beq.n	8006c6e <_strtod_l+0x8de>
 8006cea:	e611      	b.n	8006910 <_strtod_l+0x580>
 8006cec:	fffffc02 	.word	0xfffffc02
 8006cf0:	7ff00000 	.word	0x7ff00000
 8006cf4:	39500000 	.word	0x39500000
 8006cf8:	000fffff 	.word	0x000fffff
 8006cfc:	7fefffff 	.word	0x7fefffff
 8006d00:	0800a7d0 	.word	0x0800a7d0
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	f002 f868 	bl	8008ddc <__ratio>
 8006d0c:	ec59 8b10 	vmov	r8, r9, d0
 8006d10:	ee10 0a10 	vmov	r0, s0
 8006d14:	2200      	movs	r2, #0
 8006d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	f7f9 fef8 	bl	8000b10 <__aeabi_dcmple>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d07a      	beq.n	8006e1a <_strtod_l+0xa8a>
 8006d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d04a      	beq.n	8006dc0 <_strtod_l+0xa30>
 8006d2a:	4b95      	ldr	r3, [pc, #596]	; (8006f80 <_strtod_l+0xbf0>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006f80 <_strtod_l+0xbf0>
 8006d36:	f04f 0800 	mov.w	r8, #0
 8006d3a:	4b92      	ldr	r3, [pc, #584]	; (8006f84 <_strtod_l+0xbf4>)
 8006d3c:	403b      	ands	r3, r7
 8006d3e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d42:	4b91      	ldr	r3, [pc, #580]	; (8006f88 <_strtod_l+0xbf8>)
 8006d44:	429a      	cmp	r2, r3
 8006d46:	f040 80b0 	bne.w	8006eaa <_strtod_l+0xb1a>
 8006d4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d4e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006d52:	ec4b ab10 	vmov	d0, sl, fp
 8006d56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d5a:	f001 ff67 	bl	8008c2c <__ulp>
 8006d5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d62:	ec53 2b10 	vmov	r2, r3, d0
 8006d66:	f7f9 fc57 	bl	8000618 <__aeabi_dmul>
 8006d6a:	4652      	mov	r2, sl
 8006d6c:	465b      	mov	r3, fp
 8006d6e:	f7f9 fa9d 	bl	80002ac <__adddf3>
 8006d72:	460b      	mov	r3, r1
 8006d74:	4983      	ldr	r1, [pc, #524]	; (8006f84 <_strtod_l+0xbf4>)
 8006d76:	4a85      	ldr	r2, [pc, #532]	; (8006f8c <_strtod_l+0xbfc>)
 8006d78:	4019      	ands	r1, r3
 8006d7a:	4291      	cmp	r1, r2
 8006d7c:	4682      	mov	sl, r0
 8006d7e:	d960      	bls.n	8006e42 <_strtod_l+0xab2>
 8006d80:	ee18 3a90 	vmov	r3, s17
 8006d84:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d104      	bne.n	8006d96 <_strtod_l+0xa06>
 8006d8c:	ee18 3a10 	vmov	r3, s16
 8006d90:	3301      	adds	r3, #1
 8006d92:	f43f ad45 	beq.w	8006820 <_strtod_l+0x490>
 8006d96:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006f98 <_strtod_l+0xc08>
 8006d9a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006d9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006da0:	4620      	mov	r0, r4
 8006da2:	f001 fc11 	bl	80085c8 <_Bfree>
 8006da6:	9905      	ldr	r1, [sp, #20]
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 fc0d 	bl	80085c8 <_Bfree>
 8006dae:	4631      	mov	r1, r6
 8006db0:	4620      	mov	r0, r4
 8006db2:	f001 fc09 	bl	80085c8 <_Bfree>
 8006db6:	4629      	mov	r1, r5
 8006db8:	4620      	mov	r0, r4
 8006dba:	f001 fc05 	bl	80085c8 <_Bfree>
 8006dbe:	e61a      	b.n	80069f6 <_strtod_l+0x666>
 8006dc0:	f1ba 0f00 	cmp.w	sl, #0
 8006dc4:	d11b      	bne.n	8006dfe <_strtod_l+0xa6e>
 8006dc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dca:	b9f3      	cbnz	r3, 8006e0a <_strtod_l+0xa7a>
 8006dcc:	4b6c      	ldr	r3, [pc, #432]	; (8006f80 <_strtod_l+0xbf0>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	f7f9 fe92 	bl	8000afc <__aeabi_dcmplt>
 8006dd8:	b9d0      	cbnz	r0, 8006e10 <_strtod_l+0xa80>
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	4b6c      	ldr	r3, [pc, #432]	; (8006f90 <_strtod_l+0xc00>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	f7f9 fc19 	bl	8000618 <__aeabi_dmul>
 8006de6:	4680      	mov	r8, r0
 8006de8:	4689      	mov	r9, r1
 8006dea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006dee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006df2:	9315      	str	r3, [sp, #84]	; 0x54
 8006df4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006df8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006dfc:	e79d      	b.n	8006d3a <_strtod_l+0x9aa>
 8006dfe:	f1ba 0f01 	cmp.w	sl, #1
 8006e02:	d102      	bne.n	8006e0a <_strtod_l+0xa7a>
 8006e04:	2f00      	cmp	r7, #0
 8006e06:	f43f ad83 	beq.w	8006910 <_strtod_l+0x580>
 8006e0a:	4b62      	ldr	r3, [pc, #392]	; (8006f94 <_strtod_l+0xc04>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	e78e      	b.n	8006d2e <_strtod_l+0x99e>
 8006e10:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006f90 <_strtod_l+0xc00>
 8006e14:	f04f 0800 	mov.w	r8, #0
 8006e18:	e7e7      	b.n	8006dea <_strtod_l+0xa5a>
 8006e1a:	4b5d      	ldr	r3, [pc, #372]	; (8006f90 <_strtod_l+0xc00>)
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	4649      	mov	r1, r9
 8006e20:	2200      	movs	r2, #0
 8006e22:	f7f9 fbf9 	bl	8000618 <__aeabi_dmul>
 8006e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e28:	4680      	mov	r8, r0
 8006e2a:	4689      	mov	r9, r1
 8006e2c:	b933      	cbnz	r3, 8006e3c <_strtod_l+0xaac>
 8006e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e32:	900e      	str	r0, [sp, #56]	; 0x38
 8006e34:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006e3a:	e7dd      	b.n	8006df8 <_strtod_l+0xa68>
 8006e3c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006e40:	e7f9      	b.n	8006e36 <_strtod_l+0xaa6>
 8006e42:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1a8      	bne.n	8006d9e <_strtod_l+0xa0e>
 8006e4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e52:	0d1b      	lsrs	r3, r3, #20
 8006e54:	051b      	lsls	r3, r3, #20
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d1a1      	bne.n	8006d9e <_strtod_l+0xa0e>
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	f7f9 ff23 	bl	8000ca8 <__aeabi_d2lz>
 8006e62:	f7f9 fbab 	bl	80005bc <__aeabi_l2d>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4640      	mov	r0, r8
 8006e6c:	4649      	mov	r1, r9
 8006e6e:	f7f9 fa1b 	bl	80002a8 <__aeabi_dsub>
 8006e72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e78:	ea43 030a 	orr.w	r3, r3, sl
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	4680      	mov	r8, r0
 8006e80:	4689      	mov	r9, r1
 8006e82:	d055      	beq.n	8006f30 <_strtod_l+0xba0>
 8006e84:	a336      	add	r3, pc, #216	; (adr r3, 8006f60 <_strtod_l+0xbd0>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f7f9 fe37 	bl	8000afc <__aeabi_dcmplt>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	f47f acd0 	bne.w	8006834 <_strtod_l+0x4a4>
 8006e94:	a334      	add	r3, pc, #208	; (adr r3, 8006f68 <_strtod_l+0xbd8>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	f7f9 fe4b 	bl	8000b38 <__aeabi_dcmpgt>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	f43f af7b 	beq.w	8006d9e <_strtod_l+0xa0e>
 8006ea8:	e4c4      	b.n	8006834 <_strtod_l+0x4a4>
 8006eaa:	9b04      	ldr	r3, [sp, #16]
 8006eac:	b333      	cbz	r3, 8006efc <_strtod_l+0xb6c>
 8006eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006eb4:	d822      	bhi.n	8006efc <_strtod_l+0xb6c>
 8006eb6:	a32e      	add	r3, pc, #184	; (adr r3, 8006f70 <_strtod_l+0xbe0>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	f7f9 fe26 	bl	8000b10 <__aeabi_dcmple>
 8006ec4:	b1a0      	cbz	r0, 8006ef0 <_strtod_l+0xb60>
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	4640      	mov	r0, r8
 8006eca:	f7f9 fe7d 	bl	8000bc8 <__aeabi_d2uiz>
 8006ece:	2801      	cmp	r0, #1
 8006ed0:	bf38      	it	cc
 8006ed2:	2001      	movcc	r0, #1
 8006ed4:	f7f9 fb26 	bl	8000524 <__aeabi_ui2d>
 8006ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eda:	4680      	mov	r8, r0
 8006edc:	4689      	mov	r9, r1
 8006ede:	bb23      	cbnz	r3, 8006f2a <_strtod_l+0xb9a>
 8006ee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ee4:	9010      	str	r0, [sp, #64]	; 0x40
 8006ee6:	9311      	str	r3, [sp, #68]	; 0x44
 8006ee8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006eec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ef4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	9309      	str	r3, [sp, #36]	; 0x24
 8006efc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f00:	eeb0 0a48 	vmov.f32	s0, s16
 8006f04:	eef0 0a68 	vmov.f32	s1, s17
 8006f08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f0c:	f001 fe8e 	bl	8008c2c <__ulp>
 8006f10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f14:	ec53 2b10 	vmov	r2, r3, d0
 8006f18:	f7f9 fb7e 	bl	8000618 <__aeabi_dmul>
 8006f1c:	ec53 2b18 	vmov	r2, r3, d8
 8006f20:	f7f9 f9c4 	bl	80002ac <__adddf3>
 8006f24:	4682      	mov	sl, r0
 8006f26:	468b      	mov	fp, r1
 8006f28:	e78d      	b.n	8006e46 <_strtod_l+0xab6>
 8006f2a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006f2e:	e7db      	b.n	8006ee8 <_strtod_l+0xb58>
 8006f30:	a311      	add	r3, pc, #68	; (adr r3, 8006f78 <_strtod_l+0xbe8>)
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f7f9 fde1 	bl	8000afc <__aeabi_dcmplt>
 8006f3a:	e7b2      	b.n	8006ea2 <_strtod_l+0xb12>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	f7ff ba6b 	b.w	8006420 <_strtod_l+0x90>
 8006f4a:	2a65      	cmp	r2, #101	; 0x65
 8006f4c:	f43f ab5f 	beq.w	800660e <_strtod_l+0x27e>
 8006f50:	2a45      	cmp	r2, #69	; 0x45
 8006f52:	f43f ab5c 	beq.w	800660e <_strtod_l+0x27e>
 8006f56:	2301      	movs	r3, #1
 8006f58:	f7ff bb94 	b.w	8006684 <_strtod_l+0x2f4>
 8006f5c:	f3af 8000 	nop.w
 8006f60:	94a03595 	.word	0x94a03595
 8006f64:	3fdfffff 	.word	0x3fdfffff
 8006f68:	35afe535 	.word	0x35afe535
 8006f6c:	3fe00000 	.word	0x3fe00000
 8006f70:	ffc00000 	.word	0xffc00000
 8006f74:	41dfffff 	.word	0x41dfffff
 8006f78:	94a03595 	.word	0x94a03595
 8006f7c:	3fcfffff 	.word	0x3fcfffff
 8006f80:	3ff00000 	.word	0x3ff00000
 8006f84:	7ff00000 	.word	0x7ff00000
 8006f88:	7fe00000 	.word	0x7fe00000
 8006f8c:	7c9fffff 	.word	0x7c9fffff
 8006f90:	3fe00000 	.word	0x3fe00000
 8006f94:	bff00000 	.word	0xbff00000
 8006f98:	7fefffff 	.word	0x7fefffff

08006f9c <_strtod_r>:
 8006f9c:	4b01      	ldr	r3, [pc, #4]	; (8006fa4 <_strtod_r+0x8>)
 8006f9e:	f7ff b9f7 	b.w	8006390 <_strtod_l>
 8006fa2:	bf00      	nop
 8006fa4:	2000007c 	.word	0x2000007c

08006fa8 <_strtol_l.constprop.0>:
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fae:	d001      	beq.n	8006fb4 <_strtol_l.constprop.0+0xc>
 8006fb0:	2b24      	cmp	r3, #36	; 0x24
 8006fb2:	d906      	bls.n	8006fc2 <_strtol_l.constprop.0+0x1a>
 8006fb4:	f7fe fa8c 	bl	80054d0 <__errno>
 8006fb8:	2316      	movs	r3, #22
 8006fba:	6003      	str	r3, [r0, #0]
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80070a8 <_strtol_l.constprop.0+0x100>
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	462e      	mov	r6, r5
 8006fca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fce:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006fd2:	f017 0708 	ands.w	r7, r7, #8
 8006fd6:	d1f7      	bne.n	8006fc8 <_strtol_l.constprop.0+0x20>
 8006fd8:	2c2d      	cmp	r4, #45	; 0x2d
 8006fda:	d132      	bne.n	8007042 <_strtol_l.constprop.0+0x9a>
 8006fdc:	782c      	ldrb	r4, [r5, #0]
 8006fde:	2701      	movs	r7, #1
 8006fe0:	1cb5      	adds	r5, r6, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d05b      	beq.n	800709e <_strtol_l.constprop.0+0xf6>
 8006fe6:	2b10      	cmp	r3, #16
 8006fe8:	d109      	bne.n	8006ffe <_strtol_l.constprop.0+0x56>
 8006fea:	2c30      	cmp	r4, #48	; 0x30
 8006fec:	d107      	bne.n	8006ffe <_strtol_l.constprop.0+0x56>
 8006fee:	782c      	ldrb	r4, [r5, #0]
 8006ff0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ff4:	2c58      	cmp	r4, #88	; 0x58
 8006ff6:	d14d      	bne.n	8007094 <_strtol_l.constprop.0+0xec>
 8006ff8:	786c      	ldrb	r4, [r5, #1]
 8006ffa:	2310      	movs	r3, #16
 8006ffc:	3502      	adds	r5, #2
 8006ffe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007002:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007006:	f04f 0c00 	mov.w	ip, #0
 800700a:	fbb8 f9f3 	udiv	r9, r8, r3
 800700e:	4666      	mov	r6, ip
 8007010:	fb03 8a19 	mls	sl, r3, r9, r8
 8007014:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007018:	f1be 0f09 	cmp.w	lr, #9
 800701c:	d816      	bhi.n	800704c <_strtol_l.constprop.0+0xa4>
 800701e:	4674      	mov	r4, lr
 8007020:	42a3      	cmp	r3, r4
 8007022:	dd24      	ble.n	800706e <_strtol_l.constprop.0+0xc6>
 8007024:	f1bc 0f00 	cmp.w	ip, #0
 8007028:	db1e      	blt.n	8007068 <_strtol_l.constprop.0+0xc0>
 800702a:	45b1      	cmp	r9, r6
 800702c:	d31c      	bcc.n	8007068 <_strtol_l.constprop.0+0xc0>
 800702e:	d101      	bne.n	8007034 <_strtol_l.constprop.0+0x8c>
 8007030:	45a2      	cmp	sl, r4
 8007032:	db19      	blt.n	8007068 <_strtol_l.constprop.0+0xc0>
 8007034:	fb06 4603 	mla	r6, r6, r3, r4
 8007038:	f04f 0c01 	mov.w	ip, #1
 800703c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007040:	e7e8      	b.n	8007014 <_strtol_l.constprop.0+0x6c>
 8007042:	2c2b      	cmp	r4, #43	; 0x2b
 8007044:	bf04      	itt	eq
 8007046:	782c      	ldrbeq	r4, [r5, #0]
 8007048:	1cb5      	addeq	r5, r6, #2
 800704a:	e7ca      	b.n	8006fe2 <_strtol_l.constprop.0+0x3a>
 800704c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007050:	f1be 0f19 	cmp.w	lr, #25
 8007054:	d801      	bhi.n	800705a <_strtol_l.constprop.0+0xb2>
 8007056:	3c37      	subs	r4, #55	; 0x37
 8007058:	e7e2      	b.n	8007020 <_strtol_l.constprop.0+0x78>
 800705a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800705e:	f1be 0f19 	cmp.w	lr, #25
 8007062:	d804      	bhi.n	800706e <_strtol_l.constprop.0+0xc6>
 8007064:	3c57      	subs	r4, #87	; 0x57
 8007066:	e7db      	b.n	8007020 <_strtol_l.constprop.0+0x78>
 8007068:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800706c:	e7e6      	b.n	800703c <_strtol_l.constprop.0+0x94>
 800706e:	f1bc 0f00 	cmp.w	ip, #0
 8007072:	da05      	bge.n	8007080 <_strtol_l.constprop.0+0xd8>
 8007074:	2322      	movs	r3, #34	; 0x22
 8007076:	6003      	str	r3, [r0, #0]
 8007078:	4646      	mov	r6, r8
 800707a:	b942      	cbnz	r2, 800708e <_strtol_l.constprop.0+0xe6>
 800707c:	4630      	mov	r0, r6
 800707e:	e79e      	b.n	8006fbe <_strtol_l.constprop.0+0x16>
 8007080:	b107      	cbz	r7, 8007084 <_strtol_l.constprop.0+0xdc>
 8007082:	4276      	negs	r6, r6
 8007084:	2a00      	cmp	r2, #0
 8007086:	d0f9      	beq.n	800707c <_strtol_l.constprop.0+0xd4>
 8007088:	f1bc 0f00 	cmp.w	ip, #0
 800708c:	d000      	beq.n	8007090 <_strtol_l.constprop.0+0xe8>
 800708e:	1e69      	subs	r1, r5, #1
 8007090:	6011      	str	r1, [r2, #0]
 8007092:	e7f3      	b.n	800707c <_strtol_l.constprop.0+0xd4>
 8007094:	2430      	movs	r4, #48	; 0x30
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1b1      	bne.n	8006ffe <_strtol_l.constprop.0+0x56>
 800709a:	2308      	movs	r3, #8
 800709c:	e7af      	b.n	8006ffe <_strtol_l.constprop.0+0x56>
 800709e:	2c30      	cmp	r4, #48	; 0x30
 80070a0:	d0a5      	beq.n	8006fee <_strtol_l.constprop.0+0x46>
 80070a2:	230a      	movs	r3, #10
 80070a4:	e7ab      	b.n	8006ffe <_strtol_l.constprop.0+0x56>
 80070a6:	bf00      	nop
 80070a8:	0800a7f9 	.word	0x0800a7f9

080070ac <_strtol_r>:
 80070ac:	f7ff bf7c 	b.w	8006fa8 <_strtol_l.constprop.0>

080070b0 <_write_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d07      	ldr	r5, [pc, #28]	; (80070d0 <_write_r+0x20>)
 80070b4:	4604      	mov	r4, r0
 80070b6:	4608      	mov	r0, r1
 80070b8:	4611      	mov	r1, r2
 80070ba:	2200      	movs	r2, #0
 80070bc:	602a      	str	r2, [r5, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f7fa facd 	bl	800165e <_write>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_write_r+0x1e>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_write_r+0x1e>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	2000033c 	.word	0x2000033c

080070d4 <_close_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4d06      	ldr	r5, [pc, #24]	; (80070f0 <_close_r+0x1c>)
 80070d8:	2300      	movs	r3, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	f7fa fad9 	bl	8001696 <_close>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_close_r+0x1a>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_close_r+0x1a>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	2000033c 	.word	0x2000033c

080070f4 <quorem>:
 80070f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f8:	6903      	ldr	r3, [r0, #16]
 80070fa:	690c      	ldr	r4, [r1, #16]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	4607      	mov	r7, r0
 8007100:	f2c0 8081 	blt.w	8007206 <quorem+0x112>
 8007104:	3c01      	subs	r4, #1
 8007106:	f101 0814 	add.w	r8, r1, #20
 800710a:	f100 0514 	add.w	r5, r0, #20
 800710e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800711c:	3301      	adds	r3, #1
 800711e:	429a      	cmp	r2, r3
 8007120:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007128:	fbb2 f6f3 	udiv	r6, r2, r3
 800712c:	d331      	bcc.n	8007192 <quorem+0x9e>
 800712e:	f04f 0e00 	mov.w	lr, #0
 8007132:	4640      	mov	r0, r8
 8007134:	46ac      	mov	ip, r5
 8007136:	46f2      	mov	sl, lr
 8007138:	f850 2b04 	ldr.w	r2, [r0], #4
 800713c:	b293      	uxth	r3, r2
 800713e:	fb06 e303 	mla	r3, r6, r3, lr
 8007142:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007146:	b29b      	uxth	r3, r3
 8007148:	ebaa 0303 	sub.w	r3, sl, r3
 800714c:	f8dc a000 	ldr.w	sl, [ip]
 8007150:	0c12      	lsrs	r2, r2, #16
 8007152:	fa13 f38a 	uxtah	r3, r3, sl
 8007156:	fb06 e202 	mla	r2, r6, r2, lr
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	9b00      	ldr	r3, [sp, #0]
 800715e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007162:	b292      	uxth	r2, r2
 8007164:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007168:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800716c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007170:	4581      	cmp	r9, r0
 8007172:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007176:	f84c 3b04 	str.w	r3, [ip], #4
 800717a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800717e:	d2db      	bcs.n	8007138 <quorem+0x44>
 8007180:	f855 300b 	ldr.w	r3, [r5, fp]
 8007184:	b92b      	cbnz	r3, 8007192 <quorem+0x9e>
 8007186:	9b01      	ldr	r3, [sp, #4]
 8007188:	3b04      	subs	r3, #4
 800718a:	429d      	cmp	r5, r3
 800718c:	461a      	mov	r2, r3
 800718e:	d32e      	bcc.n	80071ee <quorem+0xfa>
 8007190:	613c      	str	r4, [r7, #16]
 8007192:	4638      	mov	r0, r7
 8007194:	f001 fca4 	bl	8008ae0 <__mcmp>
 8007198:	2800      	cmp	r0, #0
 800719a:	db24      	blt.n	80071e6 <quorem+0xf2>
 800719c:	3601      	adds	r6, #1
 800719e:	4628      	mov	r0, r5
 80071a0:	f04f 0c00 	mov.w	ip, #0
 80071a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80071a8:	f8d0 e000 	ldr.w	lr, [r0]
 80071ac:	b293      	uxth	r3, r2
 80071ae:	ebac 0303 	sub.w	r3, ip, r3
 80071b2:	0c12      	lsrs	r2, r2, #16
 80071b4:	fa13 f38e 	uxtah	r3, r3, lr
 80071b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80071bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c6:	45c1      	cmp	r9, r8
 80071c8:	f840 3b04 	str.w	r3, [r0], #4
 80071cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80071d0:	d2e8      	bcs.n	80071a4 <quorem+0xb0>
 80071d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071da:	b922      	cbnz	r2, 80071e6 <quorem+0xf2>
 80071dc:	3b04      	subs	r3, #4
 80071de:	429d      	cmp	r5, r3
 80071e0:	461a      	mov	r2, r3
 80071e2:	d30a      	bcc.n	80071fa <quorem+0x106>
 80071e4:	613c      	str	r4, [r7, #16]
 80071e6:	4630      	mov	r0, r6
 80071e8:	b003      	add	sp, #12
 80071ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ee:	6812      	ldr	r2, [r2, #0]
 80071f0:	3b04      	subs	r3, #4
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	d1cc      	bne.n	8007190 <quorem+0x9c>
 80071f6:	3c01      	subs	r4, #1
 80071f8:	e7c7      	b.n	800718a <quorem+0x96>
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	3b04      	subs	r3, #4
 80071fe:	2a00      	cmp	r2, #0
 8007200:	d1f0      	bne.n	80071e4 <quorem+0xf0>
 8007202:	3c01      	subs	r4, #1
 8007204:	e7eb      	b.n	80071de <quorem+0xea>
 8007206:	2000      	movs	r0, #0
 8007208:	e7ee      	b.n	80071e8 <quorem+0xf4>
 800720a:	0000      	movs	r0, r0
 800720c:	0000      	movs	r0, r0
	...

08007210 <_dtoa_r>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	ed2d 8b04 	vpush	{d8-d9}
 8007218:	ec57 6b10 	vmov	r6, r7, d0
 800721c:	b093      	sub	sp, #76	; 0x4c
 800721e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007220:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007224:	9106      	str	r1, [sp, #24]
 8007226:	ee10 aa10 	vmov	sl, s0
 800722a:	4604      	mov	r4, r0
 800722c:	9209      	str	r2, [sp, #36]	; 0x24
 800722e:	930c      	str	r3, [sp, #48]	; 0x30
 8007230:	46bb      	mov	fp, r7
 8007232:	b975      	cbnz	r5, 8007252 <_dtoa_r+0x42>
 8007234:	2010      	movs	r0, #16
 8007236:	f001 f95f 	bl	80084f8 <malloc>
 800723a:	4602      	mov	r2, r0
 800723c:	6260      	str	r0, [r4, #36]	; 0x24
 800723e:	b920      	cbnz	r0, 800724a <_dtoa_r+0x3a>
 8007240:	4ba7      	ldr	r3, [pc, #668]	; (80074e0 <_dtoa_r+0x2d0>)
 8007242:	21ea      	movs	r1, #234	; 0xea
 8007244:	48a7      	ldr	r0, [pc, #668]	; (80074e4 <_dtoa_r+0x2d4>)
 8007246:	f002 fceb 	bl	8009c20 <__assert_func>
 800724a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800724e:	6005      	str	r5, [r0, #0]
 8007250:	60c5      	str	r5, [r0, #12]
 8007252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007254:	6819      	ldr	r1, [r3, #0]
 8007256:	b151      	cbz	r1, 800726e <_dtoa_r+0x5e>
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	604a      	str	r2, [r1, #4]
 800725c:	2301      	movs	r3, #1
 800725e:	4093      	lsls	r3, r2
 8007260:	608b      	str	r3, [r1, #8]
 8007262:	4620      	mov	r0, r4
 8007264:	f001 f9b0 	bl	80085c8 <_Bfree>
 8007268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	1e3b      	subs	r3, r7, #0
 8007270:	bfaa      	itet	ge
 8007272:	2300      	movge	r3, #0
 8007274:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007278:	f8c8 3000 	strge.w	r3, [r8]
 800727c:	4b9a      	ldr	r3, [pc, #616]	; (80074e8 <_dtoa_r+0x2d8>)
 800727e:	bfbc      	itt	lt
 8007280:	2201      	movlt	r2, #1
 8007282:	f8c8 2000 	strlt.w	r2, [r8]
 8007286:	ea33 030b 	bics.w	r3, r3, fp
 800728a:	d11b      	bne.n	80072c4 <_dtoa_r+0xb4>
 800728c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800728e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007298:	4333      	orrs	r3, r6
 800729a:	f000 8592 	beq.w	8007dc2 <_dtoa_r+0xbb2>
 800729e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072a0:	b963      	cbnz	r3, 80072bc <_dtoa_r+0xac>
 80072a2:	4b92      	ldr	r3, [pc, #584]	; (80074ec <_dtoa_r+0x2dc>)
 80072a4:	e022      	b.n	80072ec <_dtoa_r+0xdc>
 80072a6:	4b92      	ldr	r3, [pc, #584]	; (80074f0 <_dtoa_r+0x2e0>)
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	3308      	adds	r3, #8
 80072ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	9801      	ldr	r0, [sp, #4]
 80072b2:	b013      	add	sp, #76	; 0x4c
 80072b4:	ecbd 8b04 	vpop	{d8-d9}
 80072b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072bc:	4b8b      	ldr	r3, [pc, #556]	; (80074ec <_dtoa_r+0x2dc>)
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	3303      	adds	r3, #3
 80072c2:	e7f3      	b.n	80072ac <_dtoa_r+0x9c>
 80072c4:	2200      	movs	r2, #0
 80072c6:	2300      	movs	r3, #0
 80072c8:	4650      	mov	r0, sl
 80072ca:	4659      	mov	r1, fp
 80072cc:	f7f9 fc0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80072d0:	ec4b ab19 	vmov	d9, sl, fp
 80072d4:	4680      	mov	r8, r0
 80072d6:	b158      	cbz	r0, 80072f0 <_dtoa_r+0xe0>
 80072d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072da:	2301      	movs	r3, #1
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 856b 	beq.w	8007dbc <_dtoa_r+0xbac>
 80072e6:	4883      	ldr	r0, [pc, #524]	; (80074f4 <_dtoa_r+0x2e4>)
 80072e8:	6018      	str	r0, [r3, #0]
 80072ea:	1e43      	subs	r3, r0, #1
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	e7df      	b.n	80072b0 <_dtoa_r+0xa0>
 80072f0:	ec4b ab10 	vmov	d0, sl, fp
 80072f4:	aa10      	add	r2, sp, #64	; 0x40
 80072f6:	a911      	add	r1, sp, #68	; 0x44
 80072f8:	4620      	mov	r0, r4
 80072fa:	f001 fd13 	bl	8008d24 <__d2b>
 80072fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007302:	ee08 0a10 	vmov	s16, r0
 8007306:	2d00      	cmp	r5, #0
 8007308:	f000 8084 	beq.w	8007414 <_dtoa_r+0x204>
 800730c:	ee19 3a90 	vmov	r3, s19
 8007310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007314:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007318:	4656      	mov	r6, sl
 800731a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800731e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007322:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007326:	4b74      	ldr	r3, [pc, #464]	; (80074f8 <_dtoa_r+0x2e8>)
 8007328:	2200      	movs	r2, #0
 800732a:	4630      	mov	r0, r6
 800732c:	4639      	mov	r1, r7
 800732e:	f7f8 ffbb 	bl	80002a8 <__aeabi_dsub>
 8007332:	a365      	add	r3, pc, #404	; (adr r3, 80074c8 <_dtoa_r+0x2b8>)
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f7f9 f96e 	bl	8000618 <__aeabi_dmul>
 800733c:	a364      	add	r3, pc, #400	; (adr r3, 80074d0 <_dtoa_r+0x2c0>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f8 ffb3 	bl	80002ac <__adddf3>
 8007346:	4606      	mov	r6, r0
 8007348:	4628      	mov	r0, r5
 800734a:	460f      	mov	r7, r1
 800734c:	f7f9 f8fa 	bl	8000544 <__aeabi_i2d>
 8007350:	a361      	add	r3, pc, #388	; (adr r3, 80074d8 <_dtoa_r+0x2c8>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	f7f9 f95f 	bl	8000618 <__aeabi_dmul>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	4630      	mov	r0, r6
 8007360:	4639      	mov	r1, r7
 8007362:	f7f8 ffa3 	bl	80002ac <__adddf3>
 8007366:	4606      	mov	r6, r0
 8007368:	460f      	mov	r7, r1
 800736a:	f7f9 fc05 	bl	8000b78 <__aeabi_d2iz>
 800736e:	2200      	movs	r2, #0
 8007370:	9000      	str	r0, [sp, #0]
 8007372:	2300      	movs	r3, #0
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	f7f9 fbc0 	bl	8000afc <__aeabi_dcmplt>
 800737c:	b150      	cbz	r0, 8007394 <_dtoa_r+0x184>
 800737e:	9800      	ldr	r0, [sp, #0]
 8007380:	f7f9 f8e0 	bl	8000544 <__aeabi_i2d>
 8007384:	4632      	mov	r2, r6
 8007386:	463b      	mov	r3, r7
 8007388:	f7f9 fbae 	bl	8000ae8 <__aeabi_dcmpeq>
 800738c:	b910      	cbnz	r0, 8007394 <_dtoa_r+0x184>
 800738e:	9b00      	ldr	r3, [sp, #0]
 8007390:	3b01      	subs	r3, #1
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	9b00      	ldr	r3, [sp, #0]
 8007396:	2b16      	cmp	r3, #22
 8007398:	d85a      	bhi.n	8007450 <_dtoa_r+0x240>
 800739a:	9a00      	ldr	r2, [sp, #0]
 800739c:	4b57      	ldr	r3, [pc, #348]	; (80074fc <_dtoa_r+0x2ec>)
 800739e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	ec51 0b19 	vmov	r0, r1, d9
 80073aa:	f7f9 fba7 	bl	8000afc <__aeabi_dcmplt>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d050      	beq.n	8007454 <_dtoa_r+0x244>
 80073b2:	9b00      	ldr	r3, [sp, #0]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	2300      	movs	r3, #0
 80073ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80073bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073be:	1b5d      	subs	r5, r3, r5
 80073c0:	1e6b      	subs	r3, r5, #1
 80073c2:	9305      	str	r3, [sp, #20]
 80073c4:	bf45      	ittet	mi
 80073c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80073ca:	9304      	strmi	r3, [sp, #16]
 80073cc:	2300      	movpl	r3, #0
 80073ce:	2300      	movmi	r3, #0
 80073d0:	bf4c      	ite	mi
 80073d2:	9305      	strmi	r3, [sp, #20]
 80073d4:	9304      	strpl	r3, [sp, #16]
 80073d6:	9b00      	ldr	r3, [sp, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	db3d      	blt.n	8007458 <_dtoa_r+0x248>
 80073dc:	9b05      	ldr	r3, [sp, #20]
 80073de:	9a00      	ldr	r2, [sp, #0]
 80073e0:	920a      	str	r2, [sp, #40]	; 0x28
 80073e2:	4413      	add	r3, r2
 80073e4:	9305      	str	r3, [sp, #20]
 80073e6:	2300      	movs	r3, #0
 80073e8:	9307      	str	r3, [sp, #28]
 80073ea:	9b06      	ldr	r3, [sp, #24]
 80073ec:	2b09      	cmp	r3, #9
 80073ee:	f200 8089 	bhi.w	8007504 <_dtoa_r+0x2f4>
 80073f2:	2b05      	cmp	r3, #5
 80073f4:	bfc4      	itt	gt
 80073f6:	3b04      	subgt	r3, #4
 80073f8:	9306      	strgt	r3, [sp, #24]
 80073fa:	9b06      	ldr	r3, [sp, #24]
 80073fc:	f1a3 0302 	sub.w	r3, r3, #2
 8007400:	bfcc      	ite	gt
 8007402:	2500      	movgt	r5, #0
 8007404:	2501      	movle	r5, #1
 8007406:	2b03      	cmp	r3, #3
 8007408:	f200 8087 	bhi.w	800751a <_dtoa_r+0x30a>
 800740c:	e8df f003 	tbb	[pc, r3]
 8007410:	59383a2d 	.word	0x59383a2d
 8007414:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007418:	441d      	add	r5, r3
 800741a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800741e:	2b20      	cmp	r3, #32
 8007420:	bfc1      	itttt	gt
 8007422:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007426:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800742a:	fa0b f303 	lslgt.w	r3, fp, r3
 800742e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007432:	bfda      	itte	le
 8007434:	f1c3 0320 	rsble	r3, r3, #32
 8007438:	fa06 f003 	lslle.w	r0, r6, r3
 800743c:	4318      	orrgt	r0, r3
 800743e:	f7f9 f871 	bl	8000524 <__aeabi_ui2d>
 8007442:	2301      	movs	r3, #1
 8007444:	4606      	mov	r6, r0
 8007446:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800744a:	3d01      	subs	r5, #1
 800744c:	930e      	str	r3, [sp, #56]	; 0x38
 800744e:	e76a      	b.n	8007326 <_dtoa_r+0x116>
 8007450:	2301      	movs	r3, #1
 8007452:	e7b2      	b.n	80073ba <_dtoa_r+0x1aa>
 8007454:	900b      	str	r0, [sp, #44]	; 0x2c
 8007456:	e7b1      	b.n	80073bc <_dtoa_r+0x1ac>
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	9a00      	ldr	r2, [sp, #0]
 800745c:	1a9b      	subs	r3, r3, r2
 800745e:	9304      	str	r3, [sp, #16]
 8007460:	4253      	negs	r3, r2
 8007462:	9307      	str	r3, [sp, #28]
 8007464:	2300      	movs	r3, #0
 8007466:	930a      	str	r3, [sp, #40]	; 0x28
 8007468:	e7bf      	b.n	80073ea <_dtoa_r+0x1da>
 800746a:	2300      	movs	r3, #0
 800746c:	9308      	str	r3, [sp, #32]
 800746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007470:	2b00      	cmp	r3, #0
 8007472:	dc55      	bgt.n	8007520 <_dtoa_r+0x310>
 8007474:	2301      	movs	r3, #1
 8007476:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800747a:	461a      	mov	r2, r3
 800747c:	9209      	str	r2, [sp, #36]	; 0x24
 800747e:	e00c      	b.n	800749a <_dtoa_r+0x28a>
 8007480:	2301      	movs	r3, #1
 8007482:	e7f3      	b.n	800746c <_dtoa_r+0x25c>
 8007484:	2300      	movs	r3, #0
 8007486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007488:	9308      	str	r3, [sp, #32]
 800748a:	9b00      	ldr	r3, [sp, #0]
 800748c:	4413      	add	r3, r2
 800748e:	9302      	str	r3, [sp, #8]
 8007490:	3301      	adds	r3, #1
 8007492:	2b01      	cmp	r3, #1
 8007494:	9303      	str	r3, [sp, #12]
 8007496:	bfb8      	it	lt
 8007498:	2301      	movlt	r3, #1
 800749a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800749c:	2200      	movs	r2, #0
 800749e:	6042      	str	r2, [r0, #4]
 80074a0:	2204      	movs	r2, #4
 80074a2:	f102 0614 	add.w	r6, r2, #20
 80074a6:	429e      	cmp	r6, r3
 80074a8:	6841      	ldr	r1, [r0, #4]
 80074aa:	d93d      	bls.n	8007528 <_dtoa_r+0x318>
 80074ac:	4620      	mov	r0, r4
 80074ae:	f001 f84b 	bl	8008548 <_Balloc>
 80074b2:	9001      	str	r0, [sp, #4]
 80074b4:	2800      	cmp	r0, #0
 80074b6:	d13b      	bne.n	8007530 <_dtoa_r+0x320>
 80074b8:	4b11      	ldr	r3, [pc, #68]	; (8007500 <_dtoa_r+0x2f0>)
 80074ba:	4602      	mov	r2, r0
 80074bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80074c0:	e6c0      	b.n	8007244 <_dtoa_r+0x34>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e7df      	b.n	8007486 <_dtoa_r+0x276>
 80074c6:	bf00      	nop
 80074c8:	636f4361 	.word	0x636f4361
 80074cc:	3fd287a7 	.word	0x3fd287a7
 80074d0:	8b60c8b3 	.word	0x8b60c8b3
 80074d4:	3fc68a28 	.word	0x3fc68a28
 80074d8:	509f79fb 	.word	0x509f79fb
 80074dc:	3fd34413 	.word	0x3fd34413
 80074e0:	0800a906 	.word	0x0800a906
 80074e4:	0800a91d 	.word	0x0800a91d
 80074e8:	7ff00000 	.word	0x7ff00000
 80074ec:	0800a902 	.word	0x0800a902
 80074f0:	0800a8f9 	.word	0x0800a8f9
 80074f4:	0800ab72 	.word	0x0800ab72
 80074f8:	3ff80000 	.word	0x3ff80000
 80074fc:	0800aa88 	.word	0x0800aa88
 8007500:	0800a978 	.word	0x0800a978
 8007504:	2501      	movs	r5, #1
 8007506:	2300      	movs	r3, #0
 8007508:	9306      	str	r3, [sp, #24]
 800750a:	9508      	str	r5, [sp, #32]
 800750c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007510:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007514:	2200      	movs	r2, #0
 8007516:	2312      	movs	r3, #18
 8007518:	e7b0      	b.n	800747c <_dtoa_r+0x26c>
 800751a:	2301      	movs	r3, #1
 800751c:	9308      	str	r3, [sp, #32]
 800751e:	e7f5      	b.n	800750c <_dtoa_r+0x2fc>
 8007520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007522:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007526:	e7b8      	b.n	800749a <_dtoa_r+0x28a>
 8007528:	3101      	adds	r1, #1
 800752a:	6041      	str	r1, [r0, #4]
 800752c:	0052      	lsls	r2, r2, #1
 800752e:	e7b8      	b.n	80074a2 <_dtoa_r+0x292>
 8007530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007532:	9a01      	ldr	r2, [sp, #4]
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	9b03      	ldr	r3, [sp, #12]
 8007538:	2b0e      	cmp	r3, #14
 800753a:	f200 809d 	bhi.w	8007678 <_dtoa_r+0x468>
 800753e:	2d00      	cmp	r5, #0
 8007540:	f000 809a 	beq.w	8007678 <_dtoa_r+0x468>
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	dd32      	ble.n	80075b0 <_dtoa_r+0x3a0>
 800754a:	4ab7      	ldr	r2, [pc, #732]	; (8007828 <_dtoa_r+0x618>)
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007554:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007558:	9b00      	ldr	r3, [sp, #0]
 800755a:	05d8      	lsls	r0, r3, #23
 800755c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007560:	d516      	bpl.n	8007590 <_dtoa_r+0x380>
 8007562:	4bb2      	ldr	r3, [pc, #712]	; (800782c <_dtoa_r+0x61c>)
 8007564:	ec51 0b19 	vmov	r0, r1, d9
 8007568:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800756c:	f7f9 f97e 	bl	800086c <__aeabi_ddiv>
 8007570:	f007 070f 	and.w	r7, r7, #15
 8007574:	4682      	mov	sl, r0
 8007576:	468b      	mov	fp, r1
 8007578:	2503      	movs	r5, #3
 800757a:	4eac      	ldr	r6, [pc, #688]	; (800782c <_dtoa_r+0x61c>)
 800757c:	b957      	cbnz	r7, 8007594 <_dtoa_r+0x384>
 800757e:	4642      	mov	r2, r8
 8007580:	464b      	mov	r3, r9
 8007582:	4650      	mov	r0, sl
 8007584:	4659      	mov	r1, fp
 8007586:	f7f9 f971 	bl	800086c <__aeabi_ddiv>
 800758a:	4682      	mov	sl, r0
 800758c:	468b      	mov	fp, r1
 800758e:	e028      	b.n	80075e2 <_dtoa_r+0x3d2>
 8007590:	2502      	movs	r5, #2
 8007592:	e7f2      	b.n	800757a <_dtoa_r+0x36a>
 8007594:	07f9      	lsls	r1, r7, #31
 8007596:	d508      	bpl.n	80075aa <_dtoa_r+0x39a>
 8007598:	4640      	mov	r0, r8
 800759a:	4649      	mov	r1, r9
 800759c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075a0:	f7f9 f83a 	bl	8000618 <__aeabi_dmul>
 80075a4:	3501      	adds	r5, #1
 80075a6:	4680      	mov	r8, r0
 80075a8:	4689      	mov	r9, r1
 80075aa:	107f      	asrs	r7, r7, #1
 80075ac:	3608      	adds	r6, #8
 80075ae:	e7e5      	b.n	800757c <_dtoa_r+0x36c>
 80075b0:	f000 809b 	beq.w	80076ea <_dtoa_r+0x4da>
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	4f9d      	ldr	r7, [pc, #628]	; (800782c <_dtoa_r+0x61c>)
 80075b8:	425e      	negs	r6, r3
 80075ba:	4b9b      	ldr	r3, [pc, #620]	; (8007828 <_dtoa_r+0x618>)
 80075bc:	f006 020f 	and.w	r2, r6, #15
 80075c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	ec51 0b19 	vmov	r0, r1, d9
 80075cc:	f7f9 f824 	bl	8000618 <__aeabi_dmul>
 80075d0:	1136      	asrs	r6, r6, #4
 80075d2:	4682      	mov	sl, r0
 80075d4:	468b      	mov	fp, r1
 80075d6:	2300      	movs	r3, #0
 80075d8:	2502      	movs	r5, #2
 80075da:	2e00      	cmp	r6, #0
 80075dc:	d17a      	bne.n	80076d4 <_dtoa_r+0x4c4>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1d3      	bne.n	800758a <_dtoa_r+0x37a>
 80075e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 8082 	beq.w	80076ee <_dtoa_r+0x4de>
 80075ea:	4b91      	ldr	r3, [pc, #580]	; (8007830 <_dtoa_r+0x620>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	4650      	mov	r0, sl
 80075f0:	4659      	mov	r1, fp
 80075f2:	f7f9 fa83 	bl	8000afc <__aeabi_dcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d079      	beq.n	80076ee <_dtoa_r+0x4de>
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d076      	beq.n	80076ee <_dtoa_r+0x4de>
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	dd36      	ble.n	8007674 <_dtoa_r+0x464>
 8007606:	9b00      	ldr	r3, [sp, #0]
 8007608:	4650      	mov	r0, sl
 800760a:	4659      	mov	r1, fp
 800760c:	1e5f      	subs	r7, r3, #1
 800760e:	2200      	movs	r2, #0
 8007610:	4b88      	ldr	r3, [pc, #544]	; (8007834 <_dtoa_r+0x624>)
 8007612:	f7f9 f801 	bl	8000618 <__aeabi_dmul>
 8007616:	9e02      	ldr	r6, [sp, #8]
 8007618:	4682      	mov	sl, r0
 800761a:	468b      	mov	fp, r1
 800761c:	3501      	adds	r5, #1
 800761e:	4628      	mov	r0, r5
 8007620:	f7f8 ff90 	bl	8000544 <__aeabi_i2d>
 8007624:	4652      	mov	r2, sl
 8007626:	465b      	mov	r3, fp
 8007628:	f7f8 fff6 	bl	8000618 <__aeabi_dmul>
 800762c:	4b82      	ldr	r3, [pc, #520]	; (8007838 <_dtoa_r+0x628>)
 800762e:	2200      	movs	r2, #0
 8007630:	f7f8 fe3c 	bl	80002ac <__adddf3>
 8007634:	46d0      	mov	r8, sl
 8007636:	46d9      	mov	r9, fp
 8007638:	4682      	mov	sl, r0
 800763a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800763e:	2e00      	cmp	r6, #0
 8007640:	d158      	bne.n	80076f4 <_dtoa_r+0x4e4>
 8007642:	4b7e      	ldr	r3, [pc, #504]	; (800783c <_dtoa_r+0x62c>)
 8007644:	2200      	movs	r2, #0
 8007646:	4640      	mov	r0, r8
 8007648:	4649      	mov	r1, r9
 800764a:	f7f8 fe2d 	bl	80002a8 <__aeabi_dsub>
 800764e:	4652      	mov	r2, sl
 8007650:	465b      	mov	r3, fp
 8007652:	4680      	mov	r8, r0
 8007654:	4689      	mov	r9, r1
 8007656:	f7f9 fa6f 	bl	8000b38 <__aeabi_dcmpgt>
 800765a:	2800      	cmp	r0, #0
 800765c:	f040 8295 	bne.w	8007b8a <_dtoa_r+0x97a>
 8007660:	4652      	mov	r2, sl
 8007662:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007666:	4640      	mov	r0, r8
 8007668:	4649      	mov	r1, r9
 800766a:	f7f9 fa47 	bl	8000afc <__aeabi_dcmplt>
 800766e:	2800      	cmp	r0, #0
 8007670:	f040 8289 	bne.w	8007b86 <_dtoa_r+0x976>
 8007674:	ec5b ab19 	vmov	sl, fp, d9
 8007678:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800767a:	2b00      	cmp	r3, #0
 800767c:	f2c0 8148 	blt.w	8007910 <_dtoa_r+0x700>
 8007680:	9a00      	ldr	r2, [sp, #0]
 8007682:	2a0e      	cmp	r2, #14
 8007684:	f300 8144 	bgt.w	8007910 <_dtoa_r+0x700>
 8007688:	4b67      	ldr	r3, [pc, #412]	; (8007828 <_dtoa_r+0x618>)
 800768a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800768e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	f280 80d5 	bge.w	8007844 <_dtoa_r+0x634>
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	f300 80d1 	bgt.w	8007844 <_dtoa_r+0x634>
 80076a2:	f040 826f 	bne.w	8007b84 <_dtoa_r+0x974>
 80076a6:	4b65      	ldr	r3, [pc, #404]	; (800783c <_dtoa_r+0x62c>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	f7f8 ffb3 	bl	8000618 <__aeabi_dmul>
 80076b2:	4652      	mov	r2, sl
 80076b4:	465b      	mov	r3, fp
 80076b6:	f7f9 fa35 	bl	8000b24 <__aeabi_dcmpge>
 80076ba:	9e03      	ldr	r6, [sp, #12]
 80076bc:	4637      	mov	r7, r6
 80076be:	2800      	cmp	r0, #0
 80076c0:	f040 8245 	bne.w	8007b4e <_dtoa_r+0x93e>
 80076c4:	9d01      	ldr	r5, [sp, #4]
 80076c6:	2331      	movs	r3, #49	; 0x31
 80076c8:	f805 3b01 	strb.w	r3, [r5], #1
 80076cc:	9b00      	ldr	r3, [sp, #0]
 80076ce:	3301      	adds	r3, #1
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	e240      	b.n	8007b56 <_dtoa_r+0x946>
 80076d4:	07f2      	lsls	r2, r6, #31
 80076d6:	d505      	bpl.n	80076e4 <_dtoa_r+0x4d4>
 80076d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076dc:	f7f8 ff9c 	bl	8000618 <__aeabi_dmul>
 80076e0:	3501      	adds	r5, #1
 80076e2:	2301      	movs	r3, #1
 80076e4:	1076      	asrs	r6, r6, #1
 80076e6:	3708      	adds	r7, #8
 80076e8:	e777      	b.n	80075da <_dtoa_r+0x3ca>
 80076ea:	2502      	movs	r5, #2
 80076ec:	e779      	b.n	80075e2 <_dtoa_r+0x3d2>
 80076ee:	9f00      	ldr	r7, [sp, #0]
 80076f0:	9e03      	ldr	r6, [sp, #12]
 80076f2:	e794      	b.n	800761e <_dtoa_r+0x40e>
 80076f4:	9901      	ldr	r1, [sp, #4]
 80076f6:	4b4c      	ldr	r3, [pc, #304]	; (8007828 <_dtoa_r+0x618>)
 80076f8:	4431      	add	r1, r6
 80076fa:	910d      	str	r1, [sp, #52]	; 0x34
 80076fc:	9908      	ldr	r1, [sp, #32]
 80076fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007702:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007706:	2900      	cmp	r1, #0
 8007708:	d043      	beq.n	8007792 <_dtoa_r+0x582>
 800770a:	494d      	ldr	r1, [pc, #308]	; (8007840 <_dtoa_r+0x630>)
 800770c:	2000      	movs	r0, #0
 800770e:	f7f9 f8ad 	bl	800086c <__aeabi_ddiv>
 8007712:	4652      	mov	r2, sl
 8007714:	465b      	mov	r3, fp
 8007716:	f7f8 fdc7 	bl	80002a8 <__aeabi_dsub>
 800771a:	9d01      	ldr	r5, [sp, #4]
 800771c:	4682      	mov	sl, r0
 800771e:	468b      	mov	fp, r1
 8007720:	4649      	mov	r1, r9
 8007722:	4640      	mov	r0, r8
 8007724:	f7f9 fa28 	bl	8000b78 <__aeabi_d2iz>
 8007728:	4606      	mov	r6, r0
 800772a:	f7f8 ff0b 	bl	8000544 <__aeabi_i2d>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	f7f8 fdb7 	bl	80002a8 <__aeabi_dsub>
 800773a:	3630      	adds	r6, #48	; 0x30
 800773c:	f805 6b01 	strb.w	r6, [r5], #1
 8007740:	4652      	mov	r2, sl
 8007742:	465b      	mov	r3, fp
 8007744:	4680      	mov	r8, r0
 8007746:	4689      	mov	r9, r1
 8007748:	f7f9 f9d8 	bl	8000afc <__aeabi_dcmplt>
 800774c:	2800      	cmp	r0, #0
 800774e:	d163      	bne.n	8007818 <_dtoa_r+0x608>
 8007750:	4642      	mov	r2, r8
 8007752:	464b      	mov	r3, r9
 8007754:	4936      	ldr	r1, [pc, #216]	; (8007830 <_dtoa_r+0x620>)
 8007756:	2000      	movs	r0, #0
 8007758:	f7f8 fda6 	bl	80002a8 <__aeabi_dsub>
 800775c:	4652      	mov	r2, sl
 800775e:	465b      	mov	r3, fp
 8007760:	f7f9 f9cc 	bl	8000afc <__aeabi_dcmplt>
 8007764:	2800      	cmp	r0, #0
 8007766:	f040 80b5 	bne.w	80078d4 <_dtoa_r+0x6c4>
 800776a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800776c:	429d      	cmp	r5, r3
 800776e:	d081      	beq.n	8007674 <_dtoa_r+0x464>
 8007770:	4b30      	ldr	r3, [pc, #192]	; (8007834 <_dtoa_r+0x624>)
 8007772:	2200      	movs	r2, #0
 8007774:	4650      	mov	r0, sl
 8007776:	4659      	mov	r1, fp
 8007778:	f7f8 ff4e 	bl	8000618 <__aeabi_dmul>
 800777c:	4b2d      	ldr	r3, [pc, #180]	; (8007834 <_dtoa_r+0x624>)
 800777e:	4682      	mov	sl, r0
 8007780:	468b      	mov	fp, r1
 8007782:	4640      	mov	r0, r8
 8007784:	4649      	mov	r1, r9
 8007786:	2200      	movs	r2, #0
 8007788:	f7f8 ff46 	bl	8000618 <__aeabi_dmul>
 800778c:	4680      	mov	r8, r0
 800778e:	4689      	mov	r9, r1
 8007790:	e7c6      	b.n	8007720 <_dtoa_r+0x510>
 8007792:	4650      	mov	r0, sl
 8007794:	4659      	mov	r1, fp
 8007796:	f7f8 ff3f 	bl	8000618 <__aeabi_dmul>
 800779a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800779c:	9d01      	ldr	r5, [sp, #4]
 800779e:	930f      	str	r3, [sp, #60]	; 0x3c
 80077a0:	4682      	mov	sl, r0
 80077a2:	468b      	mov	fp, r1
 80077a4:	4649      	mov	r1, r9
 80077a6:	4640      	mov	r0, r8
 80077a8:	f7f9 f9e6 	bl	8000b78 <__aeabi_d2iz>
 80077ac:	4606      	mov	r6, r0
 80077ae:	f7f8 fec9 	bl	8000544 <__aeabi_i2d>
 80077b2:	3630      	adds	r6, #48	; 0x30
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4640      	mov	r0, r8
 80077ba:	4649      	mov	r1, r9
 80077bc:	f7f8 fd74 	bl	80002a8 <__aeabi_dsub>
 80077c0:	f805 6b01 	strb.w	r6, [r5], #1
 80077c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c6:	429d      	cmp	r5, r3
 80077c8:	4680      	mov	r8, r0
 80077ca:	4689      	mov	r9, r1
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	d124      	bne.n	800781c <_dtoa_r+0x60c>
 80077d2:	4b1b      	ldr	r3, [pc, #108]	; (8007840 <_dtoa_r+0x630>)
 80077d4:	4650      	mov	r0, sl
 80077d6:	4659      	mov	r1, fp
 80077d8:	f7f8 fd68 	bl	80002ac <__adddf3>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4640      	mov	r0, r8
 80077e2:	4649      	mov	r1, r9
 80077e4:	f7f9 f9a8 	bl	8000b38 <__aeabi_dcmpgt>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d173      	bne.n	80078d4 <_dtoa_r+0x6c4>
 80077ec:	4652      	mov	r2, sl
 80077ee:	465b      	mov	r3, fp
 80077f0:	4913      	ldr	r1, [pc, #76]	; (8007840 <_dtoa_r+0x630>)
 80077f2:	2000      	movs	r0, #0
 80077f4:	f7f8 fd58 	bl	80002a8 <__aeabi_dsub>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4640      	mov	r0, r8
 80077fe:	4649      	mov	r1, r9
 8007800:	f7f9 f97c 	bl	8000afc <__aeabi_dcmplt>
 8007804:	2800      	cmp	r0, #0
 8007806:	f43f af35 	beq.w	8007674 <_dtoa_r+0x464>
 800780a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800780c:	1e6b      	subs	r3, r5, #1
 800780e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007810:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007814:	2b30      	cmp	r3, #48	; 0x30
 8007816:	d0f8      	beq.n	800780a <_dtoa_r+0x5fa>
 8007818:	9700      	str	r7, [sp, #0]
 800781a:	e049      	b.n	80078b0 <_dtoa_r+0x6a0>
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <_dtoa_r+0x624>)
 800781e:	f7f8 fefb 	bl	8000618 <__aeabi_dmul>
 8007822:	4680      	mov	r8, r0
 8007824:	4689      	mov	r9, r1
 8007826:	e7bd      	b.n	80077a4 <_dtoa_r+0x594>
 8007828:	0800aa88 	.word	0x0800aa88
 800782c:	0800aa60 	.word	0x0800aa60
 8007830:	3ff00000 	.word	0x3ff00000
 8007834:	40240000 	.word	0x40240000
 8007838:	401c0000 	.word	0x401c0000
 800783c:	40140000 	.word	0x40140000
 8007840:	3fe00000 	.word	0x3fe00000
 8007844:	9d01      	ldr	r5, [sp, #4]
 8007846:	4656      	mov	r6, sl
 8007848:	465f      	mov	r7, fp
 800784a:	4642      	mov	r2, r8
 800784c:	464b      	mov	r3, r9
 800784e:	4630      	mov	r0, r6
 8007850:	4639      	mov	r1, r7
 8007852:	f7f9 f80b 	bl	800086c <__aeabi_ddiv>
 8007856:	f7f9 f98f 	bl	8000b78 <__aeabi_d2iz>
 800785a:	4682      	mov	sl, r0
 800785c:	f7f8 fe72 	bl	8000544 <__aeabi_i2d>
 8007860:	4642      	mov	r2, r8
 8007862:	464b      	mov	r3, r9
 8007864:	f7f8 fed8 	bl	8000618 <__aeabi_dmul>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007874:	f7f8 fd18 	bl	80002a8 <__aeabi_dsub>
 8007878:	f805 6b01 	strb.w	r6, [r5], #1
 800787c:	9e01      	ldr	r6, [sp, #4]
 800787e:	9f03      	ldr	r7, [sp, #12]
 8007880:	1bae      	subs	r6, r5, r6
 8007882:	42b7      	cmp	r7, r6
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	d135      	bne.n	80078f6 <_dtoa_r+0x6e6>
 800788a:	f7f8 fd0f 	bl	80002ac <__adddf3>
 800788e:	4642      	mov	r2, r8
 8007890:	464b      	mov	r3, r9
 8007892:	4606      	mov	r6, r0
 8007894:	460f      	mov	r7, r1
 8007896:	f7f9 f94f 	bl	8000b38 <__aeabi_dcmpgt>
 800789a:	b9d0      	cbnz	r0, 80078d2 <_dtoa_r+0x6c2>
 800789c:	4642      	mov	r2, r8
 800789e:	464b      	mov	r3, r9
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f9 f920 	bl	8000ae8 <__aeabi_dcmpeq>
 80078a8:	b110      	cbz	r0, 80078b0 <_dtoa_r+0x6a0>
 80078aa:	f01a 0f01 	tst.w	sl, #1
 80078ae:	d110      	bne.n	80078d2 <_dtoa_r+0x6c2>
 80078b0:	4620      	mov	r0, r4
 80078b2:	ee18 1a10 	vmov	r1, s16
 80078b6:	f000 fe87 	bl	80085c8 <_Bfree>
 80078ba:	2300      	movs	r3, #0
 80078bc:	9800      	ldr	r0, [sp, #0]
 80078be:	702b      	strb	r3, [r5, #0]
 80078c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078c2:	3001      	adds	r0, #1
 80078c4:	6018      	str	r0, [r3, #0]
 80078c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f43f acf1 	beq.w	80072b0 <_dtoa_r+0xa0>
 80078ce:	601d      	str	r5, [r3, #0]
 80078d0:	e4ee      	b.n	80072b0 <_dtoa_r+0xa0>
 80078d2:	9f00      	ldr	r7, [sp, #0]
 80078d4:	462b      	mov	r3, r5
 80078d6:	461d      	mov	r5, r3
 80078d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078dc:	2a39      	cmp	r2, #57	; 0x39
 80078de:	d106      	bne.n	80078ee <_dtoa_r+0x6de>
 80078e0:	9a01      	ldr	r2, [sp, #4]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d1f7      	bne.n	80078d6 <_dtoa_r+0x6c6>
 80078e6:	9901      	ldr	r1, [sp, #4]
 80078e8:	2230      	movs	r2, #48	; 0x30
 80078ea:	3701      	adds	r7, #1
 80078ec:	700a      	strb	r2, [r1, #0]
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	3201      	adds	r2, #1
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	e790      	b.n	8007818 <_dtoa_r+0x608>
 80078f6:	4ba6      	ldr	r3, [pc, #664]	; (8007b90 <_dtoa_r+0x980>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	f7f8 fe8d 	bl	8000618 <__aeabi_dmul>
 80078fe:	2200      	movs	r2, #0
 8007900:	2300      	movs	r3, #0
 8007902:	4606      	mov	r6, r0
 8007904:	460f      	mov	r7, r1
 8007906:	f7f9 f8ef 	bl	8000ae8 <__aeabi_dcmpeq>
 800790a:	2800      	cmp	r0, #0
 800790c:	d09d      	beq.n	800784a <_dtoa_r+0x63a>
 800790e:	e7cf      	b.n	80078b0 <_dtoa_r+0x6a0>
 8007910:	9a08      	ldr	r2, [sp, #32]
 8007912:	2a00      	cmp	r2, #0
 8007914:	f000 80d7 	beq.w	8007ac6 <_dtoa_r+0x8b6>
 8007918:	9a06      	ldr	r2, [sp, #24]
 800791a:	2a01      	cmp	r2, #1
 800791c:	f300 80ba 	bgt.w	8007a94 <_dtoa_r+0x884>
 8007920:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007922:	2a00      	cmp	r2, #0
 8007924:	f000 80b2 	beq.w	8007a8c <_dtoa_r+0x87c>
 8007928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800792c:	9e07      	ldr	r6, [sp, #28]
 800792e:	9d04      	ldr	r5, [sp, #16]
 8007930:	9a04      	ldr	r2, [sp, #16]
 8007932:	441a      	add	r2, r3
 8007934:	9204      	str	r2, [sp, #16]
 8007936:	9a05      	ldr	r2, [sp, #20]
 8007938:	2101      	movs	r1, #1
 800793a:	441a      	add	r2, r3
 800793c:	4620      	mov	r0, r4
 800793e:	9205      	str	r2, [sp, #20]
 8007940:	f000 ff44 	bl	80087cc <__i2b>
 8007944:	4607      	mov	r7, r0
 8007946:	2d00      	cmp	r5, #0
 8007948:	dd0c      	ble.n	8007964 <_dtoa_r+0x754>
 800794a:	9b05      	ldr	r3, [sp, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	dd09      	ble.n	8007964 <_dtoa_r+0x754>
 8007950:	42ab      	cmp	r3, r5
 8007952:	9a04      	ldr	r2, [sp, #16]
 8007954:	bfa8      	it	ge
 8007956:	462b      	movge	r3, r5
 8007958:	1ad2      	subs	r2, r2, r3
 800795a:	9204      	str	r2, [sp, #16]
 800795c:	9a05      	ldr	r2, [sp, #20]
 800795e:	1aed      	subs	r5, r5, r3
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	9305      	str	r3, [sp, #20]
 8007964:	9b07      	ldr	r3, [sp, #28]
 8007966:	b31b      	cbz	r3, 80079b0 <_dtoa_r+0x7a0>
 8007968:	9b08      	ldr	r3, [sp, #32]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80af 	beq.w	8007ace <_dtoa_r+0x8be>
 8007970:	2e00      	cmp	r6, #0
 8007972:	dd13      	ble.n	800799c <_dtoa_r+0x78c>
 8007974:	4639      	mov	r1, r7
 8007976:	4632      	mov	r2, r6
 8007978:	4620      	mov	r0, r4
 800797a:	f000 ffe7 	bl	800894c <__pow5mult>
 800797e:	ee18 2a10 	vmov	r2, s16
 8007982:	4601      	mov	r1, r0
 8007984:	4607      	mov	r7, r0
 8007986:	4620      	mov	r0, r4
 8007988:	f000 ff36 	bl	80087f8 <__multiply>
 800798c:	ee18 1a10 	vmov	r1, s16
 8007990:	4680      	mov	r8, r0
 8007992:	4620      	mov	r0, r4
 8007994:	f000 fe18 	bl	80085c8 <_Bfree>
 8007998:	ee08 8a10 	vmov	s16, r8
 800799c:	9b07      	ldr	r3, [sp, #28]
 800799e:	1b9a      	subs	r2, r3, r6
 80079a0:	d006      	beq.n	80079b0 <_dtoa_r+0x7a0>
 80079a2:	ee18 1a10 	vmov	r1, s16
 80079a6:	4620      	mov	r0, r4
 80079a8:	f000 ffd0 	bl	800894c <__pow5mult>
 80079ac:	ee08 0a10 	vmov	s16, r0
 80079b0:	2101      	movs	r1, #1
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 ff0a 	bl	80087cc <__i2b>
 80079b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	4606      	mov	r6, r0
 80079be:	f340 8088 	ble.w	8007ad2 <_dtoa_r+0x8c2>
 80079c2:	461a      	mov	r2, r3
 80079c4:	4601      	mov	r1, r0
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 ffc0 	bl	800894c <__pow5mult>
 80079cc:	9b06      	ldr	r3, [sp, #24]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	4606      	mov	r6, r0
 80079d2:	f340 8081 	ble.w	8007ad8 <_dtoa_r+0x8c8>
 80079d6:	f04f 0800 	mov.w	r8, #0
 80079da:	6933      	ldr	r3, [r6, #16]
 80079dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079e0:	6918      	ldr	r0, [r3, #16]
 80079e2:	f000 fea3 	bl	800872c <__hi0bits>
 80079e6:	f1c0 0020 	rsb	r0, r0, #32
 80079ea:	9b05      	ldr	r3, [sp, #20]
 80079ec:	4418      	add	r0, r3
 80079ee:	f010 001f 	ands.w	r0, r0, #31
 80079f2:	f000 8092 	beq.w	8007b1a <_dtoa_r+0x90a>
 80079f6:	f1c0 0320 	rsb	r3, r0, #32
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	f340 808a 	ble.w	8007b14 <_dtoa_r+0x904>
 8007a00:	f1c0 001c 	rsb	r0, r0, #28
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	4403      	add	r3, r0
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	4403      	add	r3, r0
 8007a0e:	4405      	add	r5, r0
 8007a10:	9305      	str	r3, [sp, #20]
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dd07      	ble.n	8007a28 <_dtoa_r+0x818>
 8007a18:	ee18 1a10 	vmov	r1, s16
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 ffee 	bl	8008a00 <__lshift>
 8007a24:	ee08 0a10 	vmov	s16, r0
 8007a28:	9b05      	ldr	r3, [sp, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	dd05      	ble.n	8007a3a <_dtoa_r+0x82a>
 8007a2e:	4631      	mov	r1, r6
 8007a30:	461a      	mov	r2, r3
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 ffe4 	bl	8008a00 <__lshift>
 8007a38:	4606      	mov	r6, r0
 8007a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d06e      	beq.n	8007b1e <_dtoa_r+0x90e>
 8007a40:	ee18 0a10 	vmov	r0, s16
 8007a44:	4631      	mov	r1, r6
 8007a46:	f001 f84b 	bl	8008ae0 <__mcmp>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	da67      	bge.n	8007b1e <_dtoa_r+0x90e>
 8007a4e:	9b00      	ldr	r3, [sp, #0]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	ee18 1a10 	vmov	r1, s16
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	220a      	movs	r2, #10
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 fdd5 	bl	800860c <__multadd>
 8007a62:	9b08      	ldr	r3, [sp, #32]
 8007a64:	ee08 0a10 	vmov	s16, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 81b1 	beq.w	8007dd0 <_dtoa_r+0xbc0>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	4639      	mov	r1, r7
 8007a72:	220a      	movs	r2, #10
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 fdc9 	bl	800860c <__multadd>
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	4607      	mov	r7, r0
 8007a80:	f300 808e 	bgt.w	8007ba0 <_dtoa_r+0x990>
 8007a84:	9b06      	ldr	r3, [sp, #24]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	dc51      	bgt.n	8007b2e <_dtoa_r+0x91e>
 8007a8a:	e089      	b.n	8007ba0 <_dtoa_r+0x990>
 8007a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a92:	e74b      	b.n	800792c <_dtoa_r+0x71c>
 8007a94:	9b03      	ldr	r3, [sp, #12]
 8007a96:	1e5e      	subs	r6, r3, #1
 8007a98:	9b07      	ldr	r3, [sp, #28]
 8007a9a:	42b3      	cmp	r3, r6
 8007a9c:	bfbf      	itttt	lt
 8007a9e:	9b07      	ldrlt	r3, [sp, #28]
 8007aa0:	9607      	strlt	r6, [sp, #28]
 8007aa2:	1af2      	sublt	r2, r6, r3
 8007aa4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007aa6:	bfb6      	itet	lt
 8007aa8:	189b      	addlt	r3, r3, r2
 8007aaa:	1b9e      	subge	r6, r3, r6
 8007aac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	bfb8      	it	lt
 8007ab2:	2600      	movlt	r6, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bfb7      	itett	lt
 8007ab8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007abc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ac0:	1a9d      	sublt	r5, r3, r2
 8007ac2:	2300      	movlt	r3, #0
 8007ac4:	e734      	b.n	8007930 <_dtoa_r+0x720>
 8007ac6:	9e07      	ldr	r6, [sp, #28]
 8007ac8:	9d04      	ldr	r5, [sp, #16]
 8007aca:	9f08      	ldr	r7, [sp, #32]
 8007acc:	e73b      	b.n	8007946 <_dtoa_r+0x736>
 8007ace:	9a07      	ldr	r2, [sp, #28]
 8007ad0:	e767      	b.n	80079a2 <_dtoa_r+0x792>
 8007ad2:	9b06      	ldr	r3, [sp, #24]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	dc18      	bgt.n	8007b0a <_dtoa_r+0x8fa>
 8007ad8:	f1ba 0f00 	cmp.w	sl, #0
 8007adc:	d115      	bne.n	8007b0a <_dtoa_r+0x8fa>
 8007ade:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ae2:	b993      	cbnz	r3, 8007b0a <_dtoa_r+0x8fa>
 8007ae4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ae8:	0d1b      	lsrs	r3, r3, #20
 8007aea:	051b      	lsls	r3, r3, #20
 8007aec:	b183      	cbz	r3, 8007b10 <_dtoa_r+0x900>
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	3301      	adds	r3, #1
 8007af2:	9304      	str	r3, [sp, #16]
 8007af4:	9b05      	ldr	r3, [sp, #20]
 8007af6:	3301      	adds	r3, #1
 8007af8:	9305      	str	r3, [sp, #20]
 8007afa:	f04f 0801 	mov.w	r8, #1
 8007afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f47f af6a 	bne.w	80079da <_dtoa_r+0x7ca>
 8007b06:	2001      	movs	r0, #1
 8007b08:	e76f      	b.n	80079ea <_dtoa_r+0x7da>
 8007b0a:	f04f 0800 	mov.w	r8, #0
 8007b0e:	e7f6      	b.n	8007afe <_dtoa_r+0x8ee>
 8007b10:	4698      	mov	r8, r3
 8007b12:	e7f4      	b.n	8007afe <_dtoa_r+0x8ee>
 8007b14:	f43f af7d 	beq.w	8007a12 <_dtoa_r+0x802>
 8007b18:	4618      	mov	r0, r3
 8007b1a:	301c      	adds	r0, #28
 8007b1c:	e772      	b.n	8007a04 <_dtoa_r+0x7f4>
 8007b1e:	9b03      	ldr	r3, [sp, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	dc37      	bgt.n	8007b94 <_dtoa_r+0x984>
 8007b24:	9b06      	ldr	r3, [sp, #24]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	dd34      	ble.n	8007b94 <_dtoa_r+0x984>
 8007b2a:	9b03      	ldr	r3, [sp, #12]
 8007b2c:	9302      	str	r3, [sp, #8]
 8007b2e:	9b02      	ldr	r3, [sp, #8]
 8007b30:	b96b      	cbnz	r3, 8007b4e <_dtoa_r+0x93e>
 8007b32:	4631      	mov	r1, r6
 8007b34:	2205      	movs	r2, #5
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 fd68 	bl	800860c <__multadd>
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	4606      	mov	r6, r0
 8007b40:	ee18 0a10 	vmov	r0, s16
 8007b44:	f000 ffcc 	bl	8008ae0 <__mcmp>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	f73f adbb 	bgt.w	80076c4 <_dtoa_r+0x4b4>
 8007b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b50:	9d01      	ldr	r5, [sp, #4]
 8007b52:	43db      	mvns	r3, r3
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	f04f 0800 	mov.w	r8, #0
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fd33 	bl	80085c8 <_Bfree>
 8007b62:	2f00      	cmp	r7, #0
 8007b64:	f43f aea4 	beq.w	80078b0 <_dtoa_r+0x6a0>
 8007b68:	f1b8 0f00 	cmp.w	r8, #0
 8007b6c:	d005      	beq.n	8007b7a <_dtoa_r+0x96a>
 8007b6e:	45b8      	cmp	r8, r7
 8007b70:	d003      	beq.n	8007b7a <_dtoa_r+0x96a>
 8007b72:	4641      	mov	r1, r8
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 fd27 	bl	80085c8 <_Bfree>
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	f000 fd23 	bl	80085c8 <_Bfree>
 8007b82:	e695      	b.n	80078b0 <_dtoa_r+0x6a0>
 8007b84:	2600      	movs	r6, #0
 8007b86:	4637      	mov	r7, r6
 8007b88:	e7e1      	b.n	8007b4e <_dtoa_r+0x93e>
 8007b8a:	9700      	str	r7, [sp, #0]
 8007b8c:	4637      	mov	r7, r6
 8007b8e:	e599      	b.n	80076c4 <_dtoa_r+0x4b4>
 8007b90:	40240000 	.word	0x40240000
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 80ca 	beq.w	8007d30 <_dtoa_r+0xb20>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	dd05      	ble.n	8007bb0 <_dtoa_r+0x9a0>
 8007ba4:	4639      	mov	r1, r7
 8007ba6:	462a      	mov	r2, r5
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 ff29 	bl	8008a00 <__lshift>
 8007bae:	4607      	mov	r7, r0
 8007bb0:	f1b8 0f00 	cmp.w	r8, #0
 8007bb4:	d05b      	beq.n	8007c6e <_dtoa_r+0xa5e>
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fcc5 	bl	8008548 <_Balloc>
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <_dtoa_r+0x9be>
 8007bc2:	4b87      	ldr	r3, [pc, #540]	; (8007de0 <_dtoa_r+0xbd0>)
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007bca:	f7ff bb3b 	b.w	8007244 <_dtoa_r+0x34>
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	3202      	adds	r2, #2
 8007bd2:	0092      	lsls	r2, r2, #2
 8007bd4:	f107 010c 	add.w	r1, r7, #12
 8007bd8:	300c      	adds	r0, #12
 8007bda:	f000 fca7 	bl	800852c <memcpy>
 8007bde:	2201      	movs	r2, #1
 8007be0:	4629      	mov	r1, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 ff0c 	bl	8008a00 <__lshift>
 8007be8:	9b01      	ldr	r3, [sp, #4]
 8007bea:	f103 0901 	add.w	r9, r3, #1
 8007bee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	f00a 0301 	and.w	r3, sl, #1
 8007bfa:	46b8      	mov	r8, r7
 8007bfc:	9304      	str	r3, [sp, #16]
 8007bfe:	4607      	mov	r7, r0
 8007c00:	4631      	mov	r1, r6
 8007c02:	ee18 0a10 	vmov	r0, s16
 8007c06:	f7ff fa75 	bl	80070f4 <quorem>
 8007c0a:	4641      	mov	r1, r8
 8007c0c:	9002      	str	r0, [sp, #8]
 8007c0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c12:	ee18 0a10 	vmov	r0, s16
 8007c16:	f000 ff63 	bl	8008ae0 <__mcmp>
 8007c1a:	463a      	mov	r2, r7
 8007c1c:	9003      	str	r0, [sp, #12]
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 ff79 	bl	8008b18 <__mdiff>
 8007c26:	68c2      	ldr	r2, [r0, #12]
 8007c28:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	bb02      	cbnz	r2, 8007c72 <_dtoa_r+0xa62>
 8007c30:	4601      	mov	r1, r0
 8007c32:	ee18 0a10 	vmov	r0, s16
 8007c36:	f000 ff53 	bl	8008ae0 <__mcmp>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4620      	mov	r0, r4
 8007c40:	9207      	str	r2, [sp, #28]
 8007c42:	f000 fcc1 	bl	80085c8 <_Bfree>
 8007c46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007c4a:	ea43 0102 	orr.w	r1, r3, r2
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	430b      	orrs	r3, r1
 8007c52:	464d      	mov	r5, r9
 8007c54:	d10f      	bne.n	8007c76 <_dtoa_r+0xa66>
 8007c56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c5a:	d02a      	beq.n	8007cb2 <_dtoa_r+0xaa2>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	dd02      	ble.n	8007c68 <_dtoa_r+0xa58>
 8007c62:	9b02      	ldr	r3, [sp, #8]
 8007c64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007c68:	f88b a000 	strb.w	sl, [fp]
 8007c6c:	e775      	b.n	8007b5a <_dtoa_r+0x94a>
 8007c6e:	4638      	mov	r0, r7
 8007c70:	e7ba      	b.n	8007be8 <_dtoa_r+0x9d8>
 8007c72:	2201      	movs	r2, #1
 8007c74:	e7e2      	b.n	8007c3c <_dtoa_r+0xa2c>
 8007c76:	9b03      	ldr	r3, [sp, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	db04      	blt.n	8007c86 <_dtoa_r+0xa76>
 8007c7c:	9906      	ldr	r1, [sp, #24]
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	9904      	ldr	r1, [sp, #16]
 8007c82:	430b      	orrs	r3, r1
 8007c84:	d122      	bne.n	8007ccc <_dtoa_r+0xabc>
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	ddee      	ble.n	8007c68 <_dtoa_r+0xa58>
 8007c8a:	ee18 1a10 	vmov	r1, s16
 8007c8e:	2201      	movs	r2, #1
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 feb5 	bl	8008a00 <__lshift>
 8007c96:	4631      	mov	r1, r6
 8007c98:	ee08 0a10 	vmov	s16, r0
 8007c9c:	f000 ff20 	bl	8008ae0 <__mcmp>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	dc03      	bgt.n	8007cac <_dtoa_r+0xa9c>
 8007ca4:	d1e0      	bne.n	8007c68 <_dtoa_r+0xa58>
 8007ca6:	f01a 0f01 	tst.w	sl, #1
 8007caa:	d0dd      	beq.n	8007c68 <_dtoa_r+0xa58>
 8007cac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007cb0:	d1d7      	bne.n	8007c62 <_dtoa_r+0xa52>
 8007cb2:	2339      	movs	r3, #57	; 0x39
 8007cb4:	f88b 3000 	strb.w	r3, [fp]
 8007cb8:	462b      	mov	r3, r5
 8007cba:	461d      	mov	r5, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007cc2:	2a39      	cmp	r2, #57	; 0x39
 8007cc4:	d071      	beq.n	8007daa <_dtoa_r+0xb9a>
 8007cc6:	3201      	adds	r2, #1
 8007cc8:	701a      	strb	r2, [r3, #0]
 8007cca:	e746      	b.n	8007b5a <_dtoa_r+0x94a>
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	dd07      	ble.n	8007ce0 <_dtoa_r+0xad0>
 8007cd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007cd4:	d0ed      	beq.n	8007cb2 <_dtoa_r+0xaa2>
 8007cd6:	f10a 0301 	add.w	r3, sl, #1
 8007cda:	f88b 3000 	strb.w	r3, [fp]
 8007cde:	e73c      	b.n	8007b5a <_dtoa_r+0x94a>
 8007ce0:	9b05      	ldr	r3, [sp, #20]
 8007ce2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ce6:	4599      	cmp	r9, r3
 8007ce8:	d047      	beq.n	8007d7a <_dtoa_r+0xb6a>
 8007cea:	ee18 1a10 	vmov	r1, s16
 8007cee:	2300      	movs	r3, #0
 8007cf0:	220a      	movs	r2, #10
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 fc8a 	bl	800860c <__multadd>
 8007cf8:	45b8      	cmp	r8, r7
 8007cfa:	ee08 0a10 	vmov	s16, r0
 8007cfe:	f04f 0300 	mov.w	r3, #0
 8007d02:	f04f 020a 	mov.w	r2, #10
 8007d06:	4641      	mov	r1, r8
 8007d08:	4620      	mov	r0, r4
 8007d0a:	d106      	bne.n	8007d1a <_dtoa_r+0xb0a>
 8007d0c:	f000 fc7e 	bl	800860c <__multadd>
 8007d10:	4680      	mov	r8, r0
 8007d12:	4607      	mov	r7, r0
 8007d14:	f109 0901 	add.w	r9, r9, #1
 8007d18:	e772      	b.n	8007c00 <_dtoa_r+0x9f0>
 8007d1a:	f000 fc77 	bl	800860c <__multadd>
 8007d1e:	4639      	mov	r1, r7
 8007d20:	4680      	mov	r8, r0
 8007d22:	2300      	movs	r3, #0
 8007d24:	220a      	movs	r2, #10
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 fc70 	bl	800860c <__multadd>
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	e7f1      	b.n	8007d14 <_dtoa_r+0xb04>
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	9302      	str	r3, [sp, #8]
 8007d34:	9d01      	ldr	r5, [sp, #4]
 8007d36:	ee18 0a10 	vmov	r0, s16
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	f7ff f9da 	bl	80070f4 <quorem>
 8007d40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d44:	9b01      	ldr	r3, [sp, #4]
 8007d46:	f805 ab01 	strb.w	sl, [r5], #1
 8007d4a:	1aea      	subs	r2, r5, r3
 8007d4c:	9b02      	ldr	r3, [sp, #8]
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	dd09      	ble.n	8007d66 <_dtoa_r+0xb56>
 8007d52:	ee18 1a10 	vmov	r1, s16
 8007d56:	2300      	movs	r3, #0
 8007d58:	220a      	movs	r2, #10
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fc56 	bl	800860c <__multadd>
 8007d60:	ee08 0a10 	vmov	s16, r0
 8007d64:	e7e7      	b.n	8007d36 <_dtoa_r+0xb26>
 8007d66:	9b02      	ldr	r3, [sp, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bfc8      	it	gt
 8007d6c:	461d      	movgt	r5, r3
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	bfd8      	it	le
 8007d72:	2501      	movle	r5, #1
 8007d74:	441d      	add	r5, r3
 8007d76:	f04f 0800 	mov.w	r8, #0
 8007d7a:	ee18 1a10 	vmov	r1, s16
 8007d7e:	2201      	movs	r2, #1
 8007d80:	4620      	mov	r0, r4
 8007d82:	f000 fe3d 	bl	8008a00 <__lshift>
 8007d86:	4631      	mov	r1, r6
 8007d88:	ee08 0a10 	vmov	s16, r0
 8007d8c:	f000 fea8 	bl	8008ae0 <__mcmp>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	dc91      	bgt.n	8007cb8 <_dtoa_r+0xaa8>
 8007d94:	d102      	bne.n	8007d9c <_dtoa_r+0xb8c>
 8007d96:	f01a 0f01 	tst.w	sl, #1
 8007d9a:	d18d      	bne.n	8007cb8 <_dtoa_r+0xaa8>
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	461d      	mov	r5, r3
 8007da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007da4:	2a30      	cmp	r2, #48	; 0x30
 8007da6:	d0fa      	beq.n	8007d9e <_dtoa_r+0xb8e>
 8007da8:	e6d7      	b.n	8007b5a <_dtoa_r+0x94a>
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d184      	bne.n	8007cba <_dtoa_r+0xaaa>
 8007db0:	9b00      	ldr	r3, [sp, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	2331      	movs	r3, #49	; 0x31
 8007db8:	7013      	strb	r3, [r2, #0]
 8007dba:	e6ce      	b.n	8007b5a <_dtoa_r+0x94a>
 8007dbc:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <_dtoa_r+0xbd4>)
 8007dbe:	f7ff ba95 	b.w	80072ec <_dtoa_r+0xdc>
 8007dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f47f aa6e 	bne.w	80072a6 <_dtoa_r+0x96>
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <_dtoa_r+0xbd8>)
 8007dcc:	f7ff ba8e 	b.w	80072ec <_dtoa_r+0xdc>
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dcae      	bgt.n	8007d34 <_dtoa_r+0xb24>
 8007dd6:	9b06      	ldr	r3, [sp, #24]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	f73f aea8 	bgt.w	8007b2e <_dtoa_r+0x91e>
 8007dde:	e7a9      	b.n	8007d34 <_dtoa_r+0xb24>
 8007de0:	0800a978 	.word	0x0800a978
 8007de4:	0800ab71 	.word	0x0800ab71
 8007de8:	0800a8f9 	.word	0x0800a8f9

08007dec <rshift>:
 8007dec:	6903      	ldr	r3, [r0, #16]
 8007dee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007df2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007df6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007dfa:	f100 0414 	add.w	r4, r0, #20
 8007dfe:	dd45      	ble.n	8007e8c <rshift+0xa0>
 8007e00:	f011 011f 	ands.w	r1, r1, #31
 8007e04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e0c:	d10c      	bne.n	8007e28 <rshift+0x3c>
 8007e0e:	f100 0710 	add.w	r7, r0, #16
 8007e12:	4629      	mov	r1, r5
 8007e14:	42b1      	cmp	r1, r6
 8007e16:	d334      	bcc.n	8007e82 <rshift+0x96>
 8007e18:	1a9b      	subs	r3, r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	1eea      	subs	r2, r5, #3
 8007e1e:	4296      	cmp	r6, r2
 8007e20:	bf38      	it	cc
 8007e22:	2300      	movcc	r3, #0
 8007e24:	4423      	add	r3, r4
 8007e26:	e015      	b.n	8007e54 <rshift+0x68>
 8007e28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e2c:	f1c1 0820 	rsb	r8, r1, #32
 8007e30:	40cf      	lsrs	r7, r1
 8007e32:	f105 0e04 	add.w	lr, r5, #4
 8007e36:	46a1      	mov	r9, r4
 8007e38:	4576      	cmp	r6, lr
 8007e3a:	46f4      	mov	ip, lr
 8007e3c:	d815      	bhi.n	8007e6a <rshift+0x7e>
 8007e3e:	1a9a      	subs	r2, r3, r2
 8007e40:	0092      	lsls	r2, r2, #2
 8007e42:	3a04      	subs	r2, #4
 8007e44:	3501      	adds	r5, #1
 8007e46:	42ae      	cmp	r6, r5
 8007e48:	bf38      	it	cc
 8007e4a:	2200      	movcc	r2, #0
 8007e4c:	18a3      	adds	r3, r4, r2
 8007e4e:	50a7      	str	r7, [r4, r2]
 8007e50:	b107      	cbz	r7, 8007e54 <rshift+0x68>
 8007e52:	3304      	adds	r3, #4
 8007e54:	1b1a      	subs	r2, r3, r4
 8007e56:	42a3      	cmp	r3, r4
 8007e58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e5c:	bf08      	it	eq
 8007e5e:	2300      	moveq	r3, #0
 8007e60:	6102      	str	r2, [r0, #16]
 8007e62:	bf08      	it	eq
 8007e64:	6143      	streq	r3, [r0, #20]
 8007e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e6a:	f8dc c000 	ldr.w	ip, [ip]
 8007e6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e72:	ea4c 0707 	orr.w	r7, ip, r7
 8007e76:	f849 7b04 	str.w	r7, [r9], #4
 8007e7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e7e:	40cf      	lsrs	r7, r1
 8007e80:	e7da      	b.n	8007e38 <rshift+0x4c>
 8007e82:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e86:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e8a:	e7c3      	b.n	8007e14 <rshift+0x28>
 8007e8c:	4623      	mov	r3, r4
 8007e8e:	e7e1      	b.n	8007e54 <rshift+0x68>

08007e90 <__hexdig_fun>:
 8007e90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e94:	2b09      	cmp	r3, #9
 8007e96:	d802      	bhi.n	8007e9e <__hexdig_fun+0xe>
 8007e98:	3820      	subs	r0, #32
 8007e9a:	b2c0      	uxtb	r0, r0
 8007e9c:	4770      	bx	lr
 8007e9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	d801      	bhi.n	8007eaa <__hexdig_fun+0x1a>
 8007ea6:	3847      	subs	r0, #71	; 0x47
 8007ea8:	e7f7      	b.n	8007e9a <__hexdig_fun+0xa>
 8007eaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d801      	bhi.n	8007eb6 <__hexdig_fun+0x26>
 8007eb2:	3827      	subs	r0, #39	; 0x27
 8007eb4:	e7f1      	b.n	8007e9a <__hexdig_fun+0xa>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	4770      	bx	lr
	...

08007ebc <__gethex>:
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	ed2d 8b02 	vpush	{d8}
 8007ec4:	b089      	sub	sp, #36	; 0x24
 8007ec6:	ee08 0a10 	vmov	s16, r0
 8007eca:	9304      	str	r3, [sp, #16]
 8007ecc:	4bb4      	ldr	r3, [pc, #720]	; (80081a0 <__gethex+0x2e4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	468b      	mov	fp, r1
 8007ed6:	4690      	mov	r8, r2
 8007ed8:	f7f8 f984 	bl	80001e4 <strlen>
 8007edc:	9b01      	ldr	r3, [sp, #4]
 8007ede:	f8db 2000 	ldr.w	r2, [fp]
 8007ee2:	4403      	add	r3, r0
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007eea:	9305      	str	r3, [sp, #20]
 8007eec:	1c93      	adds	r3, r2, #2
 8007eee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007ef2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007ef6:	32fe      	adds	r2, #254	; 0xfe
 8007ef8:	18d1      	adds	r1, r2, r3
 8007efa:	461f      	mov	r7, r3
 8007efc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f00:	9100      	str	r1, [sp, #0]
 8007f02:	2830      	cmp	r0, #48	; 0x30
 8007f04:	d0f8      	beq.n	8007ef8 <__gethex+0x3c>
 8007f06:	f7ff ffc3 	bl	8007e90 <__hexdig_fun>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d13a      	bne.n	8007f86 <__gethex+0xca>
 8007f10:	9901      	ldr	r1, [sp, #4]
 8007f12:	4652      	mov	r2, sl
 8007f14:	4638      	mov	r0, r7
 8007f16:	f001 fdb3 	bl	8009a80 <strncmp>
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d168      	bne.n	8007ff2 <__gethex+0x136>
 8007f20:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007f24:	eb07 060a 	add.w	r6, r7, sl
 8007f28:	f7ff ffb2 	bl	8007e90 <__hexdig_fun>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d062      	beq.n	8007ff6 <__gethex+0x13a>
 8007f30:	4633      	mov	r3, r6
 8007f32:	7818      	ldrb	r0, [r3, #0]
 8007f34:	2830      	cmp	r0, #48	; 0x30
 8007f36:	461f      	mov	r7, r3
 8007f38:	f103 0301 	add.w	r3, r3, #1
 8007f3c:	d0f9      	beq.n	8007f32 <__gethex+0x76>
 8007f3e:	f7ff ffa7 	bl	8007e90 <__hexdig_fun>
 8007f42:	2301      	movs	r3, #1
 8007f44:	fab0 f480 	clz	r4, r0
 8007f48:	0964      	lsrs	r4, r4, #5
 8007f4a:	4635      	mov	r5, r6
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	463a      	mov	r2, r7
 8007f50:	4616      	mov	r6, r2
 8007f52:	3201      	adds	r2, #1
 8007f54:	7830      	ldrb	r0, [r6, #0]
 8007f56:	f7ff ff9b 	bl	8007e90 <__hexdig_fun>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d1f8      	bne.n	8007f50 <__gethex+0x94>
 8007f5e:	9901      	ldr	r1, [sp, #4]
 8007f60:	4652      	mov	r2, sl
 8007f62:	4630      	mov	r0, r6
 8007f64:	f001 fd8c 	bl	8009a80 <strncmp>
 8007f68:	b980      	cbnz	r0, 8007f8c <__gethex+0xd0>
 8007f6a:	b94d      	cbnz	r5, 8007f80 <__gethex+0xc4>
 8007f6c:	eb06 050a 	add.w	r5, r6, sl
 8007f70:	462a      	mov	r2, r5
 8007f72:	4616      	mov	r6, r2
 8007f74:	3201      	adds	r2, #1
 8007f76:	7830      	ldrb	r0, [r6, #0]
 8007f78:	f7ff ff8a 	bl	8007e90 <__hexdig_fun>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d1f8      	bne.n	8007f72 <__gethex+0xb6>
 8007f80:	1bad      	subs	r5, r5, r6
 8007f82:	00ad      	lsls	r5, r5, #2
 8007f84:	e004      	b.n	8007f90 <__gethex+0xd4>
 8007f86:	2400      	movs	r4, #0
 8007f88:	4625      	mov	r5, r4
 8007f8a:	e7e0      	b.n	8007f4e <__gethex+0x92>
 8007f8c:	2d00      	cmp	r5, #0
 8007f8e:	d1f7      	bne.n	8007f80 <__gethex+0xc4>
 8007f90:	7833      	ldrb	r3, [r6, #0]
 8007f92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f96:	2b50      	cmp	r3, #80	; 0x50
 8007f98:	d13b      	bne.n	8008012 <__gethex+0x156>
 8007f9a:	7873      	ldrb	r3, [r6, #1]
 8007f9c:	2b2b      	cmp	r3, #43	; 0x2b
 8007f9e:	d02c      	beq.n	8007ffa <__gethex+0x13e>
 8007fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8007fa2:	d02e      	beq.n	8008002 <__gethex+0x146>
 8007fa4:	1c71      	adds	r1, r6, #1
 8007fa6:	f04f 0900 	mov.w	r9, #0
 8007faa:	7808      	ldrb	r0, [r1, #0]
 8007fac:	f7ff ff70 	bl	8007e90 <__hexdig_fun>
 8007fb0:	1e43      	subs	r3, r0, #1
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b18      	cmp	r3, #24
 8007fb6:	d82c      	bhi.n	8008012 <__gethex+0x156>
 8007fb8:	f1a0 0210 	sub.w	r2, r0, #16
 8007fbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fc0:	f7ff ff66 	bl	8007e90 <__hexdig_fun>
 8007fc4:	1e43      	subs	r3, r0, #1
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b18      	cmp	r3, #24
 8007fca:	d91d      	bls.n	8008008 <__gethex+0x14c>
 8007fcc:	f1b9 0f00 	cmp.w	r9, #0
 8007fd0:	d000      	beq.n	8007fd4 <__gethex+0x118>
 8007fd2:	4252      	negs	r2, r2
 8007fd4:	4415      	add	r5, r2
 8007fd6:	f8cb 1000 	str.w	r1, [fp]
 8007fda:	b1e4      	cbz	r4, 8008016 <__gethex+0x15a>
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bf14      	ite	ne
 8007fe2:	2700      	movne	r7, #0
 8007fe4:	2706      	moveq	r7, #6
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	b009      	add	sp, #36	; 0x24
 8007fea:	ecbd 8b02 	vpop	{d8}
 8007fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff2:	463e      	mov	r6, r7
 8007ff4:	4625      	mov	r5, r4
 8007ff6:	2401      	movs	r4, #1
 8007ff8:	e7ca      	b.n	8007f90 <__gethex+0xd4>
 8007ffa:	f04f 0900 	mov.w	r9, #0
 8007ffe:	1cb1      	adds	r1, r6, #2
 8008000:	e7d3      	b.n	8007faa <__gethex+0xee>
 8008002:	f04f 0901 	mov.w	r9, #1
 8008006:	e7fa      	b.n	8007ffe <__gethex+0x142>
 8008008:	230a      	movs	r3, #10
 800800a:	fb03 0202 	mla	r2, r3, r2, r0
 800800e:	3a10      	subs	r2, #16
 8008010:	e7d4      	b.n	8007fbc <__gethex+0x100>
 8008012:	4631      	mov	r1, r6
 8008014:	e7df      	b.n	8007fd6 <__gethex+0x11a>
 8008016:	1bf3      	subs	r3, r6, r7
 8008018:	3b01      	subs	r3, #1
 800801a:	4621      	mov	r1, r4
 800801c:	2b07      	cmp	r3, #7
 800801e:	dc0b      	bgt.n	8008038 <__gethex+0x17c>
 8008020:	ee18 0a10 	vmov	r0, s16
 8008024:	f000 fa90 	bl	8008548 <_Balloc>
 8008028:	4604      	mov	r4, r0
 800802a:	b940      	cbnz	r0, 800803e <__gethex+0x182>
 800802c:	4b5d      	ldr	r3, [pc, #372]	; (80081a4 <__gethex+0x2e8>)
 800802e:	4602      	mov	r2, r0
 8008030:	21de      	movs	r1, #222	; 0xde
 8008032:	485d      	ldr	r0, [pc, #372]	; (80081a8 <__gethex+0x2ec>)
 8008034:	f001 fdf4 	bl	8009c20 <__assert_func>
 8008038:	3101      	adds	r1, #1
 800803a:	105b      	asrs	r3, r3, #1
 800803c:	e7ee      	b.n	800801c <__gethex+0x160>
 800803e:	f100 0914 	add.w	r9, r0, #20
 8008042:	f04f 0b00 	mov.w	fp, #0
 8008046:	f1ca 0301 	rsb	r3, sl, #1
 800804a:	f8cd 9008 	str.w	r9, [sp, #8]
 800804e:	f8cd b000 	str.w	fp, [sp]
 8008052:	9306      	str	r3, [sp, #24]
 8008054:	42b7      	cmp	r7, r6
 8008056:	d340      	bcc.n	80080da <__gethex+0x21e>
 8008058:	9802      	ldr	r0, [sp, #8]
 800805a:	9b00      	ldr	r3, [sp, #0]
 800805c:	f840 3b04 	str.w	r3, [r0], #4
 8008060:	eba0 0009 	sub.w	r0, r0, r9
 8008064:	1080      	asrs	r0, r0, #2
 8008066:	0146      	lsls	r6, r0, #5
 8008068:	6120      	str	r0, [r4, #16]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fb5e 	bl	800872c <__hi0bits>
 8008070:	1a30      	subs	r0, r6, r0
 8008072:	f8d8 6000 	ldr.w	r6, [r8]
 8008076:	42b0      	cmp	r0, r6
 8008078:	dd63      	ble.n	8008142 <__gethex+0x286>
 800807a:	1b87      	subs	r7, r0, r6
 800807c:	4639      	mov	r1, r7
 800807e:	4620      	mov	r0, r4
 8008080:	f000 ff02 	bl	8008e88 <__any_on>
 8008084:	4682      	mov	sl, r0
 8008086:	b1a8      	cbz	r0, 80080b4 <__gethex+0x1f8>
 8008088:	1e7b      	subs	r3, r7, #1
 800808a:	1159      	asrs	r1, r3, #5
 800808c:	f003 021f 	and.w	r2, r3, #31
 8008090:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008094:	f04f 0a01 	mov.w	sl, #1
 8008098:	fa0a f202 	lsl.w	r2, sl, r2
 800809c:	420a      	tst	r2, r1
 800809e:	d009      	beq.n	80080b4 <__gethex+0x1f8>
 80080a0:	4553      	cmp	r3, sl
 80080a2:	dd05      	ble.n	80080b0 <__gethex+0x1f4>
 80080a4:	1eb9      	subs	r1, r7, #2
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 feee 	bl	8008e88 <__any_on>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d145      	bne.n	800813c <__gethex+0x280>
 80080b0:	f04f 0a02 	mov.w	sl, #2
 80080b4:	4639      	mov	r1, r7
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff fe98 	bl	8007dec <rshift>
 80080bc:	443d      	add	r5, r7
 80080be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080c2:	42ab      	cmp	r3, r5
 80080c4:	da4c      	bge.n	8008160 <__gethex+0x2a4>
 80080c6:	ee18 0a10 	vmov	r0, s16
 80080ca:	4621      	mov	r1, r4
 80080cc:	f000 fa7c 	bl	80085c8 <_Bfree>
 80080d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080d2:	2300      	movs	r3, #0
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	27a3      	movs	r7, #163	; 0xa3
 80080d8:	e785      	b.n	8007fe6 <__gethex+0x12a>
 80080da:	1e73      	subs	r3, r6, #1
 80080dc:	9a05      	ldr	r2, [sp, #20]
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d019      	beq.n	800811c <__gethex+0x260>
 80080e8:	f1bb 0f20 	cmp.w	fp, #32
 80080ec:	d107      	bne.n	80080fe <__gethex+0x242>
 80080ee:	9b02      	ldr	r3, [sp, #8]
 80080f0:	9a00      	ldr	r2, [sp, #0]
 80080f2:	f843 2b04 	str.w	r2, [r3], #4
 80080f6:	9302      	str	r3, [sp, #8]
 80080f8:	2300      	movs	r3, #0
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	469b      	mov	fp, r3
 80080fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008102:	f7ff fec5 	bl	8007e90 <__hexdig_fun>
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	f000 000f 	and.w	r0, r0, #15
 800810c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008110:	4303      	orrs	r3, r0
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	f10b 0b04 	add.w	fp, fp, #4
 8008118:	9b03      	ldr	r3, [sp, #12]
 800811a:	e00d      	b.n	8008138 <__gethex+0x27c>
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	9a06      	ldr	r2, [sp, #24]
 8008120:	4413      	add	r3, r2
 8008122:	42bb      	cmp	r3, r7
 8008124:	d3e0      	bcc.n	80080e8 <__gethex+0x22c>
 8008126:	4618      	mov	r0, r3
 8008128:	9901      	ldr	r1, [sp, #4]
 800812a:	9307      	str	r3, [sp, #28]
 800812c:	4652      	mov	r2, sl
 800812e:	f001 fca7 	bl	8009a80 <strncmp>
 8008132:	9b07      	ldr	r3, [sp, #28]
 8008134:	2800      	cmp	r0, #0
 8008136:	d1d7      	bne.n	80080e8 <__gethex+0x22c>
 8008138:	461e      	mov	r6, r3
 800813a:	e78b      	b.n	8008054 <__gethex+0x198>
 800813c:	f04f 0a03 	mov.w	sl, #3
 8008140:	e7b8      	b.n	80080b4 <__gethex+0x1f8>
 8008142:	da0a      	bge.n	800815a <__gethex+0x29e>
 8008144:	1a37      	subs	r7, r6, r0
 8008146:	4621      	mov	r1, r4
 8008148:	ee18 0a10 	vmov	r0, s16
 800814c:	463a      	mov	r2, r7
 800814e:	f000 fc57 	bl	8008a00 <__lshift>
 8008152:	1bed      	subs	r5, r5, r7
 8008154:	4604      	mov	r4, r0
 8008156:	f100 0914 	add.w	r9, r0, #20
 800815a:	f04f 0a00 	mov.w	sl, #0
 800815e:	e7ae      	b.n	80080be <__gethex+0x202>
 8008160:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008164:	42a8      	cmp	r0, r5
 8008166:	dd72      	ble.n	800824e <__gethex+0x392>
 8008168:	1b45      	subs	r5, r0, r5
 800816a:	42ae      	cmp	r6, r5
 800816c:	dc36      	bgt.n	80081dc <__gethex+0x320>
 800816e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d02a      	beq.n	80081cc <__gethex+0x310>
 8008176:	2b03      	cmp	r3, #3
 8008178:	d02c      	beq.n	80081d4 <__gethex+0x318>
 800817a:	2b01      	cmp	r3, #1
 800817c:	d11c      	bne.n	80081b8 <__gethex+0x2fc>
 800817e:	42ae      	cmp	r6, r5
 8008180:	d11a      	bne.n	80081b8 <__gethex+0x2fc>
 8008182:	2e01      	cmp	r6, #1
 8008184:	d112      	bne.n	80081ac <__gethex+0x2f0>
 8008186:	9a04      	ldr	r2, [sp, #16]
 8008188:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	2301      	movs	r3, #1
 8008190:	6123      	str	r3, [r4, #16]
 8008192:	f8c9 3000 	str.w	r3, [r9]
 8008196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008198:	2762      	movs	r7, #98	; 0x62
 800819a:	601c      	str	r4, [r3, #0]
 800819c:	e723      	b.n	8007fe6 <__gethex+0x12a>
 800819e:	bf00      	nop
 80081a0:	0800a9f0 	.word	0x0800a9f0
 80081a4:	0800a978 	.word	0x0800a978
 80081a8:	0800a989 	.word	0x0800a989
 80081ac:	1e71      	subs	r1, r6, #1
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 fe6a 	bl	8008e88 <__any_on>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d1e6      	bne.n	8008186 <__gethex+0x2ca>
 80081b8:	ee18 0a10 	vmov	r0, s16
 80081bc:	4621      	mov	r1, r4
 80081be:	f000 fa03 	bl	80085c8 <_Bfree>
 80081c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081c4:	2300      	movs	r3, #0
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	2750      	movs	r7, #80	; 0x50
 80081ca:	e70c      	b.n	8007fe6 <__gethex+0x12a>
 80081cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f2      	bne.n	80081b8 <__gethex+0x2fc>
 80081d2:	e7d8      	b.n	8008186 <__gethex+0x2ca>
 80081d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1d5      	bne.n	8008186 <__gethex+0x2ca>
 80081da:	e7ed      	b.n	80081b8 <__gethex+0x2fc>
 80081dc:	1e6f      	subs	r7, r5, #1
 80081de:	f1ba 0f00 	cmp.w	sl, #0
 80081e2:	d131      	bne.n	8008248 <__gethex+0x38c>
 80081e4:	b127      	cbz	r7, 80081f0 <__gethex+0x334>
 80081e6:	4639      	mov	r1, r7
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fe4d 	bl	8008e88 <__any_on>
 80081ee:	4682      	mov	sl, r0
 80081f0:	117b      	asrs	r3, r7, #5
 80081f2:	2101      	movs	r1, #1
 80081f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80081f8:	f007 071f 	and.w	r7, r7, #31
 80081fc:	fa01 f707 	lsl.w	r7, r1, r7
 8008200:	421f      	tst	r7, r3
 8008202:	4629      	mov	r1, r5
 8008204:	4620      	mov	r0, r4
 8008206:	bf18      	it	ne
 8008208:	f04a 0a02 	orrne.w	sl, sl, #2
 800820c:	1b76      	subs	r6, r6, r5
 800820e:	f7ff fded 	bl	8007dec <rshift>
 8008212:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008216:	2702      	movs	r7, #2
 8008218:	f1ba 0f00 	cmp.w	sl, #0
 800821c:	d048      	beq.n	80082b0 <__gethex+0x3f4>
 800821e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d015      	beq.n	8008252 <__gethex+0x396>
 8008226:	2b03      	cmp	r3, #3
 8008228:	d017      	beq.n	800825a <__gethex+0x39e>
 800822a:	2b01      	cmp	r3, #1
 800822c:	d109      	bne.n	8008242 <__gethex+0x386>
 800822e:	f01a 0f02 	tst.w	sl, #2
 8008232:	d006      	beq.n	8008242 <__gethex+0x386>
 8008234:	f8d9 0000 	ldr.w	r0, [r9]
 8008238:	ea4a 0a00 	orr.w	sl, sl, r0
 800823c:	f01a 0f01 	tst.w	sl, #1
 8008240:	d10e      	bne.n	8008260 <__gethex+0x3a4>
 8008242:	f047 0710 	orr.w	r7, r7, #16
 8008246:	e033      	b.n	80082b0 <__gethex+0x3f4>
 8008248:	f04f 0a01 	mov.w	sl, #1
 800824c:	e7d0      	b.n	80081f0 <__gethex+0x334>
 800824e:	2701      	movs	r7, #1
 8008250:	e7e2      	b.n	8008218 <__gethex+0x35c>
 8008252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008254:	f1c3 0301 	rsb	r3, r3, #1
 8008258:	9315      	str	r3, [sp, #84]	; 0x54
 800825a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0f0      	beq.n	8008242 <__gethex+0x386>
 8008260:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008264:	f104 0314 	add.w	r3, r4, #20
 8008268:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800826c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008270:	f04f 0c00 	mov.w	ip, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f853 2b04 	ldr.w	r2, [r3], #4
 800827a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800827e:	d01c      	beq.n	80082ba <__gethex+0x3fe>
 8008280:	3201      	adds	r2, #1
 8008282:	6002      	str	r2, [r0, #0]
 8008284:	2f02      	cmp	r7, #2
 8008286:	f104 0314 	add.w	r3, r4, #20
 800828a:	d13f      	bne.n	800830c <__gethex+0x450>
 800828c:	f8d8 2000 	ldr.w	r2, [r8]
 8008290:	3a01      	subs	r2, #1
 8008292:	42b2      	cmp	r2, r6
 8008294:	d10a      	bne.n	80082ac <__gethex+0x3f0>
 8008296:	1171      	asrs	r1, r6, #5
 8008298:	2201      	movs	r2, #1
 800829a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800829e:	f006 061f 	and.w	r6, r6, #31
 80082a2:	fa02 f606 	lsl.w	r6, r2, r6
 80082a6:	421e      	tst	r6, r3
 80082a8:	bf18      	it	ne
 80082aa:	4617      	movne	r7, r2
 80082ac:	f047 0720 	orr.w	r7, r7, #32
 80082b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082b2:	601c      	str	r4, [r3, #0]
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	601d      	str	r5, [r3, #0]
 80082b8:	e695      	b.n	8007fe6 <__gethex+0x12a>
 80082ba:	4299      	cmp	r1, r3
 80082bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80082c0:	d8d8      	bhi.n	8008274 <__gethex+0x3b8>
 80082c2:	68a3      	ldr	r3, [r4, #8]
 80082c4:	459b      	cmp	fp, r3
 80082c6:	db19      	blt.n	80082fc <__gethex+0x440>
 80082c8:	6861      	ldr	r1, [r4, #4]
 80082ca:	ee18 0a10 	vmov	r0, s16
 80082ce:	3101      	adds	r1, #1
 80082d0:	f000 f93a 	bl	8008548 <_Balloc>
 80082d4:	4681      	mov	r9, r0
 80082d6:	b918      	cbnz	r0, 80082e0 <__gethex+0x424>
 80082d8:	4b1a      	ldr	r3, [pc, #104]	; (8008344 <__gethex+0x488>)
 80082da:	4602      	mov	r2, r0
 80082dc:	2184      	movs	r1, #132	; 0x84
 80082de:	e6a8      	b.n	8008032 <__gethex+0x176>
 80082e0:	6922      	ldr	r2, [r4, #16]
 80082e2:	3202      	adds	r2, #2
 80082e4:	f104 010c 	add.w	r1, r4, #12
 80082e8:	0092      	lsls	r2, r2, #2
 80082ea:	300c      	adds	r0, #12
 80082ec:	f000 f91e 	bl	800852c <memcpy>
 80082f0:	4621      	mov	r1, r4
 80082f2:	ee18 0a10 	vmov	r0, s16
 80082f6:	f000 f967 	bl	80085c8 <_Bfree>
 80082fa:	464c      	mov	r4, r9
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008304:	6122      	str	r2, [r4, #16]
 8008306:	2201      	movs	r2, #1
 8008308:	615a      	str	r2, [r3, #20]
 800830a:	e7bb      	b.n	8008284 <__gethex+0x3c8>
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	455a      	cmp	r2, fp
 8008310:	dd0b      	ble.n	800832a <__gethex+0x46e>
 8008312:	2101      	movs	r1, #1
 8008314:	4620      	mov	r0, r4
 8008316:	f7ff fd69 	bl	8007dec <rshift>
 800831a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800831e:	3501      	adds	r5, #1
 8008320:	42ab      	cmp	r3, r5
 8008322:	f6ff aed0 	blt.w	80080c6 <__gethex+0x20a>
 8008326:	2701      	movs	r7, #1
 8008328:	e7c0      	b.n	80082ac <__gethex+0x3f0>
 800832a:	f016 061f 	ands.w	r6, r6, #31
 800832e:	d0fa      	beq.n	8008326 <__gethex+0x46a>
 8008330:	4453      	add	r3, sl
 8008332:	f1c6 0620 	rsb	r6, r6, #32
 8008336:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800833a:	f000 f9f7 	bl	800872c <__hi0bits>
 800833e:	42b0      	cmp	r0, r6
 8008340:	dbe7      	blt.n	8008312 <__gethex+0x456>
 8008342:	e7f0      	b.n	8008326 <__gethex+0x46a>
 8008344:	0800a978 	.word	0x0800a978

08008348 <L_shift>:
 8008348:	f1c2 0208 	rsb	r2, r2, #8
 800834c:	0092      	lsls	r2, r2, #2
 800834e:	b570      	push	{r4, r5, r6, lr}
 8008350:	f1c2 0620 	rsb	r6, r2, #32
 8008354:	6843      	ldr	r3, [r0, #4]
 8008356:	6804      	ldr	r4, [r0, #0]
 8008358:	fa03 f506 	lsl.w	r5, r3, r6
 800835c:	432c      	orrs	r4, r5
 800835e:	40d3      	lsrs	r3, r2
 8008360:	6004      	str	r4, [r0, #0]
 8008362:	f840 3f04 	str.w	r3, [r0, #4]!
 8008366:	4288      	cmp	r0, r1
 8008368:	d3f4      	bcc.n	8008354 <L_shift+0xc>
 800836a:	bd70      	pop	{r4, r5, r6, pc}

0800836c <__match>:
 800836c:	b530      	push	{r4, r5, lr}
 800836e:	6803      	ldr	r3, [r0, #0]
 8008370:	3301      	adds	r3, #1
 8008372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008376:	b914      	cbnz	r4, 800837e <__match+0x12>
 8008378:	6003      	str	r3, [r0, #0]
 800837a:	2001      	movs	r0, #1
 800837c:	bd30      	pop	{r4, r5, pc}
 800837e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008382:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008386:	2d19      	cmp	r5, #25
 8008388:	bf98      	it	ls
 800838a:	3220      	addls	r2, #32
 800838c:	42a2      	cmp	r2, r4
 800838e:	d0f0      	beq.n	8008372 <__match+0x6>
 8008390:	2000      	movs	r0, #0
 8008392:	e7f3      	b.n	800837c <__match+0x10>

08008394 <__hexnan>:
 8008394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	680b      	ldr	r3, [r1, #0]
 800839a:	115e      	asrs	r6, r3, #5
 800839c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80083a0:	f013 031f 	ands.w	r3, r3, #31
 80083a4:	b087      	sub	sp, #28
 80083a6:	bf18      	it	ne
 80083a8:	3604      	addne	r6, #4
 80083aa:	2500      	movs	r5, #0
 80083ac:	1f37      	subs	r7, r6, #4
 80083ae:	4690      	mov	r8, r2
 80083b0:	6802      	ldr	r2, [r0, #0]
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	4682      	mov	sl, r0
 80083b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80083ba:	46b9      	mov	r9, r7
 80083bc:	463c      	mov	r4, r7
 80083be:	9502      	str	r5, [sp, #8]
 80083c0:	46ab      	mov	fp, r5
 80083c2:	7851      	ldrb	r1, [r2, #1]
 80083c4:	1c53      	adds	r3, r2, #1
 80083c6:	9303      	str	r3, [sp, #12]
 80083c8:	b341      	cbz	r1, 800841c <__hexnan+0x88>
 80083ca:	4608      	mov	r0, r1
 80083cc:	9205      	str	r2, [sp, #20]
 80083ce:	9104      	str	r1, [sp, #16]
 80083d0:	f7ff fd5e 	bl	8007e90 <__hexdig_fun>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d14f      	bne.n	8008478 <__hexnan+0xe4>
 80083d8:	9904      	ldr	r1, [sp, #16]
 80083da:	9a05      	ldr	r2, [sp, #20]
 80083dc:	2920      	cmp	r1, #32
 80083de:	d818      	bhi.n	8008412 <__hexnan+0x7e>
 80083e0:	9b02      	ldr	r3, [sp, #8]
 80083e2:	459b      	cmp	fp, r3
 80083e4:	dd13      	ble.n	800840e <__hexnan+0x7a>
 80083e6:	454c      	cmp	r4, r9
 80083e8:	d206      	bcs.n	80083f8 <__hexnan+0x64>
 80083ea:	2d07      	cmp	r5, #7
 80083ec:	dc04      	bgt.n	80083f8 <__hexnan+0x64>
 80083ee:	462a      	mov	r2, r5
 80083f0:	4649      	mov	r1, r9
 80083f2:	4620      	mov	r0, r4
 80083f4:	f7ff ffa8 	bl	8008348 <L_shift>
 80083f8:	4544      	cmp	r4, r8
 80083fa:	d950      	bls.n	800849e <__hexnan+0x10a>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f1a4 0904 	sub.w	r9, r4, #4
 8008402:	f844 3c04 	str.w	r3, [r4, #-4]
 8008406:	f8cd b008 	str.w	fp, [sp, #8]
 800840a:	464c      	mov	r4, r9
 800840c:	461d      	mov	r5, r3
 800840e:	9a03      	ldr	r2, [sp, #12]
 8008410:	e7d7      	b.n	80083c2 <__hexnan+0x2e>
 8008412:	2929      	cmp	r1, #41	; 0x29
 8008414:	d156      	bne.n	80084c4 <__hexnan+0x130>
 8008416:	3202      	adds	r2, #2
 8008418:	f8ca 2000 	str.w	r2, [sl]
 800841c:	f1bb 0f00 	cmp.w	fp, #0
 8008420:	d050      	beq.n	80084c4 <__hexnan+0x130>
 8008422:	454c      	cmp	r4, r9
 8008424:	d206      	bcs.n	8008434 <__hexnan+0xa0>
 8008426:	2d07      	cmp	r5, #7
 8008428:	dc04      	bgt.n	8008434 <__hexnan+0xa0>
 800842a:	462a      	mov	r2, r5
 800842c:	4649      	mov	r1, r9
 800842e:	4620      	mov	r0, r4
 8008430:	f7ff ff8a 	bl	8008348 <L_shift>
 8008434:	4544      	cmp	r4, r8
 8008436:	d934      	bls.n	80084a2 <__hexnan+0x10e>
 8008438:	f1a8 0204 	sub.w	r2, r8, #4
 800843c:	4623      	mov	r3, r4
 800843e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008442:	f842 1f04 	str.w	r1, [r2, #4]!
 8008446:	429f      	cmp	r7, r3
 8008448:	d2f9      	bcs.n	800843e <__hexnan+0xaa>
 800844a:	1b3b      	subs	r3, r7, r4
 800844c:	f023 0303 	bic.w	r3, r3, #3
 8008450:	3304      	adds	r3, #4
 8008452:	3401      	adds	r4, #1
 8008454:	3e03      	subs	r6, #3
 8008456:	42b4      	cmp	r4, r6
 8008458:	bf88      	it	hi
 800845a:	2304      	movhi	r3, #4
 800845c:	4443      	add	r3, r8
 800845e:	2200      	movs	r2, #0
 8008460:	f843 2b04 	str.w	r2, [r3], #4
 8008464:	429f      	cmp	r7, r3
 8008466:	d2fb      	bcs.n	8008460 <__hexnan+0xcc>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	b91b      	cbnz	r3, 8008474 <__hexnan+0xe0>
 800846c:	4547      	cmp	r7, r8
 800846e:	d127      	bne.n	80084c0 <__hexnan+0x12c>
 8008470:	2301      	movs	r3, #1
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	2005      	movs	r0, #5
 8008476:	e026      	b.n	80084c6 <__hexnan+0x132>
 8008478:	3501      	adds	r5, #1
 800847a:	2d08      	cmp	r5, #8
 800847c:	f10b 0b01 	add.w	fp, fp, #1
 8008480:	dd06      	ble.n	8008490 <__hexnan+0xfc>
 8008482:	4544      	cmp	r4, r8
 8008484:	d9c3      	bls.n	800840e <__hexnan+0x7a>
 8008486:	2300      	movs	r3, #0
 8008488:	f844 3c04 	str.w	r3, [r4, #-4]
 800848c:	2501      	movs	r5, #1
 800848e:	3c04      	subs	r4, #4
 8008490:	6822      	ldr	r2, [r4, #0]
 8008492:	f000 000f 	and.w	r0, r0, #15
 8008496:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800849a:	6022      	str	r2, [r4, #0]
 800849c:	e7b7      	b.n	800840e <__hexnan+0x7a>
 800849e:	2508      	movs	r5, #8
 80084a0:	e7b5      	b.n	800840e <__hexnan+0x7a>
 80084a2:	9b01      	ldr	r3, [sp, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0df      	beq.n	8008468 <__hexnan+0xd4>
 80084a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084ac:	f1c3 0320 	rsb	r3, r3, #32
 80084b0:	fa22 f303 	lsr.w	r3, r2, r3
 80084b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80084b8:	401a      	ands	r2, r3
 80084ba:	f846 2c04 	str.w	r2, [r6, #-4]
 80084be:	e7d3      	b.n	8008468 <__hexnan+0xd4>
 80084c0:	3f04      	subs	r7, #4
 80084c2:	e7d1      	b.n	8008468 <__hexnan+0xd4>
 80084c4:	2004      	movs	r0, #4
 80084c6:	b007      	add	sp, #28
 80084c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084cc <_localeconv_r>:
 80084cc:	4800      	ldr	r0, [pc, #0]	; (80084d0 <_localeconv_r+0x4>)
 80084ce:	4770      	bx	lr
 80084d0:	2000016c 	.word	0x2000016c

080084d4 <_lseek_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d07      	ldr	r5, [pc, #28]	; (80084f4 <_lseek_r+0x20>)
 80084d8:	4604      	mov	r4, r0
 80084da:	4608      	mov	r0, r1
 80084dc:	4611      	mov	r1, r2
 80084de:	2200      	movs	r2, #0
 80084e0:	602a      	str	r2, [r5, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	f7f9 f8fe 	bl	80016e4 <_lseek>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d102      	bne.n	80084f2 <_lseek_r+0x1e>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	b103      	cbz	r3, 80084f2 <_lseek_r+0x1e>
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	2000033c 	.word	0x2000033c

080084f8 <malloc>:
 80084f8:	4b02      	ldr	r3, [pc, #8]	; (8008504 <malloc+0xc>)
 80084fa:	4601      	mov	r1, r0
 80084fc:	6818      	ldr	r0, [r3, #0]
 80084fe:	f000 bd67 	b.w	8008fd0 <_malloc_r>
 8008502:	bf00      	nop
 8008504:	20000014 	.word	0x20000014

08008508 <__ascii_mbtowc>:
 8008508:	b082      	sub	sp, #8
 800850a:	b901      	cbnz	r1, 800850e <__ascii_mbtowc+0x6>
 800850c:	a901      	add	r1, sp, #4
 800850e:	b142      	cbz	r2, 8008522 <__ascii_mbtowc+0x1a>
 8008510:	b14b      	cbz	r3, 8008526 <__ascii_mbtowc+0x1e>
 8008512:	7813      	ldrb	r3, [r2, #0]
 8008514:	600b      	str	r3, [r1, #0]
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	1e10      	subs	r0, r2, #0
 800851a:	bf18      	it	ne
 800851c:	2001      	movne	r0, #1
 800851e:	b002      	add	sp, #8
 8008520:	4770      	bx	lr
 8008522:	4610      	mov	r0, r2
 8008524:	e7fb      	b.n	800851e <__ascii_mbtowc+0x16>
 8008526:	f06f 0001 	mvn.w	r0, #1
 800852a:	e7f8      	b.n	800851e <__ascii_mbtowc+0x16>

0800852c <memcpy>:
 800852c:	440a      	add	r2, r1
 800852e:	4291      	cmp	r1, r2
 8008530:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008534:	d100      	bne.n	8008538 <memcpy+0xc>
 8008536:	4770      	bx	lr
 8008538:	b510      	push	{r4, lr}
 800853a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800853e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008542:	4291      	cmp	r1, r2
 8008544:	d1f9      	bne.n	800853a <memcpy+0xe>
 8008546:	bd10      	pop	{r4, pc}

08008548 <_Balloc>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800854c:	4604      	mov	r4, r0
 800854e:	460d      	mov	r5, r1
 8008550:	b976      	cbnz	r6, 8008570 <_Balloc+0x28>
 8008552:	2010      	movs	r0, #16
 8008554:	f7ff ffd0 	bl	80084f8 <malloc>
 8008558:	4602      	mov	r2, r0
 800855a:	6260      	str	r0, [r4, #36]	; 0x24
 800855c:	b920      	cbnz	r0, 8008568 <_Balloc+0x20>
 800855e:	4b18      	ldr	r3, [pc, #96]	; (80085c0 <_Balloc+0x78>)
 8008560:	4818      	ldr	r0, [pc, #96]	; (80085c4 <_Balloc+0x7c>)
 8008562:	2166      	movs	r1, #102	; 0x66
 8008564:	f001 fb5c 	bl	8009c20 <__assert_func>
 8008568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800856c:	6006      	str	r6, [r0, #0]
 800856e:	60c6      	str	r6, [r0, #12]
 8008570:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008572:	68f3      	ldr	r3, [r6, #12]
 8008574:	b183      	cbz	r3, 8008598 <_Balloc+0x50>
 8008576:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800857e:	b9b8      	cbnz	r0, 80085b0 <_Balloc+0x68>
 8008580:	2101      	movs	r1, #1
 8008582:	fa01 f605 	lsl.w	r6, r1, r5
 8008586:	1d72      	adds	r2, r6, #5
 8008588:	0092      	lsls	r2, r2, #2
 800858a:	4620      	mov	r0, r4
 800858c:	f000 fc9d 	bl	8008eca <_calloc_r>
 8008590:	b160      	cbz	r0, 80085ac <_Balloc+0x64>
 8008592:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008596:	e00e      	b.n	80085b6 <_Balloc+0x6e>
 8008598:	2221      	movs	r2, #33	; 0x21
 800859a:	2104      	movs	r1, #4
 800859c:	4620      	mov	r0, r4
 800859e:	f000 fc94 	bl	8008eca <_calloc_r>
 80085a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a4:	60f0      	str	r0, [r6, #12]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e4      	bne.n	8008576 <_Balloc+0x2e>
 80085ac:	2000      	movs	r0, #0
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	6802      	ldr	r2, [r0, #0]
 80085b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085b6:	2300      	movs	r3, #0
 80085b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085bc:	e7f7      	b.n	80085ae <_Balloc+0x66>
 80085be:	bf00      	nop
 80085c0:	0800a906 	.word	0x0800a906
 80085c4:	0800aa04 	.word	0x0800aa04

080085c8 <_Bfree>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085cc:	4605      	mov	r5, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	b976      	cbnz	r6, 80085f0 <_Bfree+0x28>
 80085d2:	2010      	movs	r0, #16
 80085d4:	f7ff ff90 	bl	80084f8 <malloc>
 80085d8:	4602      	mov	r2, r0
 80085da:	6268      	str	r0, [r5, #36]	; 0x24
 80085dc:	b920      	cbnz	r0, 80085e8 <_Bfree+0x20>
 80085de:	4b09      	ldr	r3, [pc, #36]	; (8008604 <_Bfree+0x3c>)
 80085e0:	4809      	ldr	r0, [pc, #36]	; (8008608 <_Bfree+0x40>)
 80085e2:	218a      	movs	r1, #138	; 0x8a
 80085e4:	f001 fb1c 	bl	8009c20 <__assert_func>
 80085e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085ec:	6006      	str	r6, [r0, #0]
 80085ee:	60c6      	str	r6, [r0, #12]
 80085f0:	b13c      	cbz	r4, 8008602 <_Bfree+0x3a>
 80085f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085f4:	6862      	ldr	r2, [r4, #4]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085fc:	6021      	str	r1, [r4, #0]
 80085fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	0800a906 	.word	0x0800a906
 8008608:	0800aa04 	.word	0x0800aa04

0800860c <__multadd>:
 800860c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008610:	690d      	ldr	r5, [r1, #16]
 8008612:	4607      	mov	r7, r0
 8008614:	460c      	mov	r4, r1
 8008616:	461e      	mov	r6, r3
 8008618:	f101 0c14 	add.w	ip, r1, #20
 800861c:	2000      	movs	r0, #0
 800861e:	f8dc 3000 	ldr.w	r3, [ip]
 8008622:	b299      	uxth	r1, r3
 8008624:	fb02 6101 	mla	r1, r2, r1, r6
 8008628:	0c1e      	lsrs	r6, r3, #16
 800862a:	0c0b      	lsrs	r3, r1, #16
 800862c:	fb02 3306 	mla	r3, r2, r6, r3
 8008630:	b289      	uxth	r1, r1
 8008632:	3001      	adds	r0, #1
 8008634:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008638:	4285      	cmp	r5, r0
 800863a:	f84c 1b04 	str.w	r1, [ip], #4
 800863e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008642:	dcec      	bgt.n	800861e <__multadd+0x12>
 8008644:	b30e      	cbz	r6, 800868a <__multadd+0x7e>
 8008646:	68a3      	ldr	r3, [r4, #8]
 8008648:	42ab      	cmp	r3, r5
 800864a:	dc19      	bgt.n	8008680 <__multadd+0x74>
 800864c:	6861      	ldr	r1, [r4, #4]
 800864e:	4638      	mov	r0, r7
 8008650:	3101      	adds	r1, #1
 8008652:	f7ff ff79 	bl	8008548 <_Balloc>
 8008656:	4680      	mov	r8, r0
 8008658:	b928      	cbnz	r0, 8008666 <__multadd+0x5a>
 800865a:	4602      	mov	r2, r0
 800865c:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <__multadd+0x84>)
 800865e:	480d      	ldr	r0, [pc, #52]	; (8008694 <__multadd+0x88>)
 8008660:	21b5      	movs	r1, #181	; 0xb5
 8008662:	f001 fadd 	bl	8009c20 <__assert_func>
 8008666:	6922      	ldr	r2, [r4, #16]
 8008668:	3202      	adds	r2, #2
 800866a:	f104 010c 	add.w	r1, r4, #12
 800866e:	0092      	lsls	r2, r2, #2
 8008670:	300c      	adds	r0, #12
 8008672:	f7ff ff5b 	bl	800852c <memcpy>
 8008676:	4621      	mov	r1, r4
 8008678:	4638      	mov	r0, r7
 800867a:	f7ff ffa5 	bl	80085c8 <_Bfree>
 800867e:	4644      	mov	r4, r8
 8008680:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008684:	3501      	adds	r5, #1
 8008686:	615e      	str	r6, [r3, #20]
 8008688:	6125      	str	r5, [r4, #16]
 800868a:	4620      	mov	r0, r4
 800868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008690:	0800a978 	.word	0x0800a978
 8008694:	0800aa04 	.word	0x0800aa04

08008698 <__s2b>:
 8008698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800869c:	460c      	mov	r4, r1
 800869e:	4615      	mov	r5, r2
 80086a0:	461f      	mov	r7, r3
 80086a2:	2209      	movs	r2, #9
 80086a4:	3308      	adds	r3, #8
 80086a6:	4606      	mov	r6, r0
 80086a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80086ac:	2100      	movs	r1, #0
 80086ae:	2201      	movs	r2, #1
 80086b0:	429a      	cmp	r2, r3
 80086b2:	db09      	blt.n	80086c8 <__s2b+0x30>
 80086b4:	4630      	mov	r0, r6
 80086b6:	f7ff ff47 	bl	8008548 <_Balloc>
 80086ba:	b940      	cbnz	r0, 80086ce <__s2b+0x36>
 80086bc:	4602      	mov	r2, r0
 80086be:	4b19      	ldr	r3, [pc, #100]	; (8008724 <__s2b+0x8c>)
 80086c0:	4819      	ldr	r0, [pc, #100]	; (8008728 <__s2b+0x90>)
 80086c2:	21ce      	movs	r1, #206	; 0xce
 80086c4:	f001 faac 	bl	8009c20 <__assert_func>
 80086c8:	0052      	lsls	r2, r2, #1
 80086ca:	3101      	adds	r1, #1
 80086cc:	e7f0      	b.n	80086b0 <__s2b+0x18>
 80086ce:	9b08      	ldr	r3, [sp, #32]
 80086d0:	6143      	str	r3, [r0, #20]
 80086d2:	2d09      	cmp	r5, #9
 80086d4:	f04f 0301 	mov.w	r3, #1
 80086d8:	6103      	str	r3, [r0, #16]
 80086da:	dd16      	ble.n	800870a <__s2b+0x72>
 80086dc:	f104 0909 	add.w	r9, r4, #9
 80086e0:	46c8      	mov	r8, r9
 80086e2:	442c      	add	r4, r5
 80086e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80086e8:	4601      	mov	r1, r0
 80086ea:	3b30      	subs	r3, #48	; 0x30
 80086ec:	220a      	movs	r2, #10
 80086ee:	4630      	mov	r0, r6
 80086f0:	f7ff ff8c 	bl	800860c <__multadd>
 80086f4:	45a0      	cmp	r8, r4
 80086f6:	d1f5      	bne.n	80086e4 <__s2b+0x4c>
 80086f8:	f1a5 0408 	sub.w	r4, r5, #8
 80086fc:	444c      	add	r4, r9
 80086fe:	1b2d      	subs	r5, r5, r4
 8008700:	1963      	adds	r3, r4, r5
 8008702:	42bb      	cmp	r3, r7
 8008704:	db04      	blt.n	8008710 <__s2b+0x78>
 8008706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870a:	340a      	adds	r4, #10
 800870c:	2509      	movs	r5, #9
 800870e:	e7f6      	b.n	80086fe <__s2b+0x66>
 8008710:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008714:	4601      	mov	r1, r0
 8008716:	3b30      	subs	r3, #48	; 0x30
 8008718:	220a      	movs	r2, #10
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ff76 	bl	800860c <__multadd>
 8008720:	e7ee      	b.n	8008700 <__s2b+0x68>
 8008722:	bf00      	nop
 8008724:	0800a978 	.word	0x0800a978
 8008728:	0800aa04 	.word	0x0800aa04

0800872c <__hi0bits>:
 800872c:	0c03      	lsrs	r3, r0, #16
 800872e:	041b      	lsls	r3, r3, #16
 8008730:	b9d3      	cbnz	r3, 8008768 <__hi0bits+0x3c>
 8008732:	0400      	lsls	r0, r0, #16
 8008734:	2310      	movs	r3, #16
 8008736:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800873a:	bf04      	itt	eq
 800873c:	0200      	lsleq	r0, r0, #8
 800873e:	3308      	addeq	r3, #8
 8008740:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008744:	bf04      	itt	eq
 8008746:	0100      	lsleq	r0, r0, #4
 8008748:	3304      	addeq	r3, #4
 800874a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800874e:	bf04      	itt	eq
 8008750:	0080      	lsleq	r0, r0, #2
 8008752:	3302      	addeq	r3, #2
 8008754:	2800      	cmp	r0, #0
 8008756:	db05      	blt.n	8008764 <__hi0bits+0x38>
 8008758:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800875c:	f103 0301 	add.w	r3, r3, #1
 8008760:	bf08      	it	eq
 8008762:	2320      	moveq	r3, #32
 8008764:	4618      	mov	r0, r3
 8008766:	4770      	bx	lr
 8008768:	2300      	movs	r3, #0
 800876a:	e7e4      	b.n	8008736 <__hi0bits+0xa>

0800876c <__lo0bits>:
 800876c:	6803      	ldr	r3, [r0, #0]
 800876e:	f013 0207 	ands.w	r2, r3, #7
 8008772:	4601      	mov	r1, r0
 8008774:	d00b      	beq.n	800878e <__lo0bits+0x22>
 8008776:	07da      	lsls	r2, r3, #31
 8008778:	d423      	bmi.n	80087c2 <__lo0bits+0x56>
 800877a:	0798      	lsls	r0, r3, #30
 800877c:	bf49      	itett	mi
 800877e:	085b      	lsrmi	r3, r3, #1
 8008780:	089b      	lsrpl	r3, r3, #2
 8008782:	2001      	movmi	r0, #1
 8008784:	600b      	strmi	r3, [r1, #0]
 8008786:	bf5c      	itt	pl
 8008788:	600b      	strpl	r3, [r1, #0]
 800878a:	2002      	movpl	r0, #2
 800878c:	4770      	bx	lr
 800878e:	b298      	uxth	r0, r3
 8008790:	b9a8      	cbnz	r0, 80087be <__lo0bits+0x52>
 8008792:	0c1b      	lsrs	r3, r3, #16
 8008794:	2010      	movs	r0, #16
 8008796:	b2da      	uxtb	r2, r3
 8008798:	b90a      	cbnz	r2, 800879e <__lo0bits+0x32>
 800879a:	3008      	adds	r0, #8
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	071a      	lsls	r2, r3, #28
 80087a0:	bf04      	itt	eq
 80087a2:	091b      	lsreq	r3, r3, #4
 80087a4:	3004      	addeq	r0, #4
 80087a6:	079a      	lsls	r2, r3, #30
 80087a8:	bf04      	itt	eq
 80087aa:	089b      	lsreq	r3, r3, #2
 80087ac:	3002      	addeq	r0, #2
 80087ae:	07da      	lsls	r2, r3, #31
 80087b0:	d403      	bmi.n	80087ba <__lo0bits+0x4e>
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	f100 0001 	add.w	r0, r0, #1
 80087b8:	d005      	beq.n	80087c6 <__lo0bits+0x5a>
 80087ba:	600b      	str	r3, [r1, #0]
 80087bc:	4770      	bx	lr
 80087be:	4610      	mov	r0, r2
 80087c0:	e7e9      	b.n	8008796 <__lo0bits+0x2a>
 80087c2:	2000      	movs	r0, #0
 80087c4:	4770      	bx	lr
 80087c6:	2020      	movs	r0, #32
 80087c8:	4770      	bx	lr
	...

080087cc <__i2b>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	460c      	mov	r4, r1
 80087d0:	2101      	movs	r1, #1
 80087d2:	f7ff feb9 	bl	8008548 <_Balloc>
 80087d6:	4602      	mov	r2, r0
 80087d8:	b928      	cbnz	r0, 80087e6 <__i2b+0x1a>
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <__i2b+0x24>)
 80087dc:	4805      	ldr	r0, [pc, #20]	; (80087f4 <__i2b+0x28>)
 80087de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80087e2:	f001 fa1d 	bl	8009c20 <__assert_func>
 80087e6:	2301      	movs	r3, #1
 80087e8:	6144      	str	r4, [r0, #20]
 80087ea:	6103      	str	r3, [r0, #16]
 80087ec:	bd10      	pop	{r4, pc}
 80087ee:	bf00      	nop
 80087f0:	0800a978 	.word	0x0800a978
 80087f4:	0800aa04 	.word	0x0800aa04

080087f8 <__multiply>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	4691      	mov	r9, r2
 80087fe:	690a      	ldr	r2, [r1, #16]
 8008800:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008804:	429a      	cmp	r2, r3
 8008806:	bfb8      	it	lt
 8008808:	460b      	movlt	r3, r1
 800880a:	460c      	mov	r4, r1
 800880c:	bfbc      	itt	lt
 800880e:	464c      	movlt	r4, r9
 8008810:	4699      	movlt	r9, r3
 8008812:	6927      	ldr	r7, [r4, #16]
 8008814:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008818:	68a3      	ldr	r3, [r4, #8]
 800881a:	6861      	ldr	r1, [r4, #4]
 800881c:	eb07 060a 	add.w	r6, r7, sl
 8008820:	42b3      	cmp	r3, r6
 8008822:	b085      	sub	sp, #20
 8008824:	bfb8      	it	lt
 8008826:	3101      	addlt	r1, #1
 8008828:	f7ff fe8e 	bl	8008548 <_Balloc>
 800882c:	b930      	cbnz	r0, 800883c <__multiply+0x44>
 800882e:	4602      	mov	r2, r0
 8008830:	4b44      	ldr	r3, [pc, #272]	; (8008944 <__multiply+0x14c>)
 8008832:	4845      	ldr	r0, [pc, #276]	; (8008948 <__multiply+0x150>)
 8008834:	f240 115d 	movw	r1, #349	; 0x15d
 8008838:	f001 f9f2 	bl	8009c20 <__assert_func>
 800883c:	f100 0514 	add.w	r5, r0, #20
 8008840:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008844:	462b      	mov	r3, r5
 8008846:	2200      	movs	r2, #0
 8008848:	4543      	cmp	r3, r8
 800884a:	d321      	bcc.n	8008890 <__multiply+0x98>
 800884c:	f104 0314 	add.w	r3, r4, #20
 8008850:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008854:	f109 0314 	add.w	r3, r9, #20
 8008858:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800885c:	9202      	str	r2, [sp, #8]
 800885e:	1b3a      	subs	r2, r7, r4
 8008860:	3a15      	subs	r2, #21
 8008862:	f022 0203 	bic.w	r2, r2, #3
 8008866:	3204      	adds	r2, #4
 8008868:	f104 0115 	add.w	r1, r4, #21
 800886c:	428f      	cmp	r7, r1
 800886e:	bf38      	it	cc
 8008870:	2204      	movcc	r2, #4
 8008872:	9201      	str	r2, [sp, #4]
 8008874:	9a02      	ldr	r2, [sp, #8]
 8008876:	9303      	str	r3, [sp, #12]
 8008878:	429a      	cmp	r2, r3
 800887a:	d80c      	bhi.n	8008896 <__multiply+0x9e>
 800887c:	2e00      	cmp	r6, #0
 800887e:	dd03      	ble.n	8008888 <__multiply+0x90>
 8008880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008884:	2b00      	cmp	r3, #0
 8008886:	d05a      	beq.n	800893e <__multiply+0x146>
 8008888:	6106      	str	r6, [r0, #16]
 800888a:	b005      	add	sp, #20
 800888c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008890:	f843 2b04 	str.w	r2, [r3], #4
 8008894:	e7d8      	b.n	8008848 <__multiply+0x50>
 8008896:	f8b3 a000 	ldrh.w	sl, [r3]
 800889a:	f1ba 0f00 	cmp.w	sl, #0
 800889e:	d024      	beq.n	80088ea <__multiply+0xf2>
 80088a0:	f104 0e14 	add.w	lr, r4, #20
 80088a4:	46a9      	mov	r9, r5
 80088a6:	f04f 0c00 	mov.w	ip, #0
 80088aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088ae:	f8d9 1000 	ldr.w	r1, [r9]
 80088b2:	fa1f fb82 	uxth.w	fp, r2
 80088b6:	b289      	uxth	r1, r1
 80088b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80088bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088c0:	f8d9 2000 	ldr.w	r2, [r9]
 80088c4:	4461      	add	r1, ip
 80088c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80088ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80088d2:	b289      	uxth	r1, r1
 80088d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80088d8:	4577      	cmp	r7, lr
 80088da:	f849 1b04 	str.w	r1, [r9], #4
 80088de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088e2:	d8e2      	bhi.n	80088aa <__multiply+0xb2>
 80088e4:	9a01      	ldr	r2, [sp, #4]
 80088e6:	f845 c002 	str.w	ip, [r5, r2]
 80088ea:	9a03      	ldr	r2, [sp, #12]
 80088ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80088f0:	3304      	adds	r3, #4
 80088f2:	f1b9 0f00 	cmp.w	r9, #0
 80088f6:	d020      	beq.n	800893a <__multiply+0x142>
 80088f8:	6829      	ldr	r1, [r5, #0]
 80088fa:	f104 0c14 	add.w	ip, r4, #20
 80088fe:	46ae      	mov	lr, r5
 8008900:	f04f 0a00 	mov.w	sl, #0
 8008904:	f8bc b000 	ldrh.w	fp, [ip]
 8008908:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800890c:	fb09 220b 	mla	r2, r9, fp, r2
 8008910:	4492      	add	sl, r2
 8008912:	b289      	uxth	r1, r1
 8008914:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008918:	f84e 1b04 	str.w	r1, [lr], #4
 800891c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008920:	f8be 1000 	ldrh.w	r1, [lr]
 8008924:	0c12      	lsrs	r2, r2, #16
 8008926:	fb09 1102 	mla	r1, r9, r2, r1
 800892a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800892e:	4567      	cmp	r7, ip
 8008930:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008934:	d8e6      	bhi.n	8008904 <__multiply+0x10c>
 8008936:	9a01      	ldr	r2, [sp, #4]
 8008938:	50a9      	str	r1, [r5, r2]
 800893a:	3504      	adds	r5, #4
 800893c:	e79a      	b.n	8008874 <__multiply+0x7c>
 800893e:	3e01      	subs	r6, #1
 8008940:	e79c      	b.n	800887c <__multiply+0x84>
 8008942:	bf00      	nop
 8008944:	0800a978 	.word	0x0800a978
 8008948:	0800aa04 	.word	0x0800aa04

0800894c <__pow5mult>:
 800894c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008950:	4615      	mov	r5, r2
 8008952:	f012 0203 	ands.w	r2, r2, #3
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	d007      	beq.n	800896c <__pow5mult+0x20>
 800895c:	4c25      	ldr	r4, [pc, #148]	; (80089f4 <__pow5mult+0xa8>)
 800895e:	3a01      	subs	r2, #1
 8008960:	2300      	movs	r3, #0
 8008962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008966:	f7ff fe51 	bl	800860c <__multadd>
 800896a:	4607      	mov	r7, r0
 800896c:	10ad      	asrs	r5, r5, #2
 800896e:	d03d      	beq.n	80089ec <__pow5mult+0xa0>
 8008970:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008972:	b97c      	cbnz	r4, 8008994 <__pow5mult+0x48>
 8008974:	2010      	movs	r0, #16
 8008976:	f7ff fdbf 	bl	80084f8 <malloc>
 800897a:	4602      	mov	r2, r0
 800897c:	6270      	str	r0, [r6, #36]	; 0x24
 800897e:	b928      	cbnz	r0, 800898c <__pow5mult+0x40>
 8008980:	4b1d      	ldr	r3, [pc, #116]	; (80089f8 <__pow5mult+0xac>)
 8008982:	481e      	ldr	r0, [pc, #120]	; (80089fc <__pow5mult+0xb0>)
 8008984:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008988:	f001 f94a 	bl	8009c20 <__assert_func>
 800898c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008990:	6004      	str	r4, [r0, #0]
 8008992:	60c4      	str	r4, [r0, #12]
 8008994:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800899c:	b94c      	cbnz	r4, 80089b2 <__pow5mult+0x66>
 800899e:	f240 2171 	movw	r1, #625	; 0x271
 80089a2:	4630      	mov	r0, r6
 80089a4:	f7ff ff12 	bl	80087cc <__i2b>
 80089a8:	2300      	movs	r3, #0
 80089aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80089ae:	4604      	mov	r4, r0
 80089b0:	6003      	str	r3, [r0, #0]
 80089b2:	f04f 0900 	mov.w	r9, #0
 80089b6:	07eb      	lsls	r3, r5, #31
 80089b8:	d50a      	bpl.n	80089d0 <__pow5mult+0x84>
 80089ba:	4639      	mov	r1, r7
 80089bc:	4622      	mov	r2, r4
 80089be:	4630      	mov	r0, r6
 80089c0:	f7ff ff1a 	bl	80087f8 <__multiply>
 80089c4:	4639      	mov	r1, r7
 80089c6:	4680      	mov	r8, r0
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7ff fdfd 	bl	80085c8 <_Bfree>
 80089ce:	4647      	mov	r7, r8
 80089d0:	106d      	asrs	r5, r5, #1
 80089d2:	d00b      	beq.n	80089ec <__pow5mult+0xa0>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	b938      	cbnz	r0, 80089e8 <__pow5mult+0x9c>
 80089d8:	4622      	mov	r2, r4
 80089da:	4621      	mov	r1, r4
 80089dc:	4630      	mov	r0, r6
 80089de:	f7ff ff0b 	bl	80087f8 <__multiply>
 80089e2:	6020      	str	r0, [r4, #0]
 80089e4:	f8c0 9000 	str.w	r9, [r0]
 80089e8:	4604      	mov	r4, r0
 80089ea:	e7e4      	b.n	80089b6 <__pow5mult+0x6a>
 80089ec:	4638      	mov	r0, r7
 80089ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089f2:	bf00      	nop
 80089f4:	0800ab50 	.word	0x0800ab50
 80089f8:	0800a906 	.word	0x0800a906
 80089fc:	0800aa04 	.word	0x0800aa04

08008a00 <__lshift>:
 8008a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	6849      	ldr	r1, [r1, #4]
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	4607      	mov	r7, r0
 8008a12:	4691      	mov	r9, r2
 8008a14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a18:	f108 0601 	add.w	r6, r8, #1
 8008a1c:	42b3      	cmp	r3, r6
 8008a1e:	db0b      	blt.n	8008a38 <__lshift+0x38>
 8008a20:	4638      	mov	r0, r7
 8008a22:	f7ff fd91 	bl	8008548 <_Balloc>
 8008a26:	4605      	mov	r5, r0
 8008a28:	b948      	cbnz	r0, 8008a3e <__lshift+0x3e>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	4b2a      	ldr	r3, [pc, #168]	; (8008ad8 <__lshift+0xd8>)
 8008a2e:	482b      	ldr	r0, [pc, #172]	; (8008adc <__lshift+0xdc>)
 8008a30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a34:	f001 f8f4 	bl	8009c20 <__assert_func>
 8008a38:	3101      	adds	r1, #1
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	e7ee      	b.n	8008a1c <__lshift+0x1c>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f100 0114 	add.w	r1, r0, #20
 8008a44:	f100 0210 	add.w	r2, r0, #16
 8008a48:	4618      	mov	r0, r3
 8008a4a:	4553      	cmp	r3, sl
 8008a4c:	db37      	blt.n	8008abe <__lshift+0xbe>
 8008a4e:	6920      	ldr	r0, [r4, #16]
 8008a50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a54:	f104 0314 	add.w	r3, r4, #20
 8008a58:	f019 091f 	ands.w	r9, r9, #31
 8008a5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a64:	d02f      	beq.n	8008ac6 <__lshift+0xc6>
 8008a66:	f1c9 0e20 	rsb	lr, r9, #32
 8008a6a:	468a      	mov	sl, r1
 8008a6c:	f04f 0c00 	mov.w	ip, #0
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	fa02 f209 	lsl.w	r2, r2, r9
 8008a76:	ea42 020c 	orr.w	r2, r2, ip
 8008a7a:	f84a 2b04 	str.w	r2, [sl], #4
 8008a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a82:	4298      	cmp	r0, r3
 8008a84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a88:	d8f2      	bhi.n	8008a70 <__lshift+0x70>
 8008a8a:	1b03      	subs	r3, r0, r4
 8008a8c:	3b15      	subs	r3, #21
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	3304      	adds	r3, #4
 8008a94:	f104 0215 	add.w	r2, r4, #21
 8008a98:	4290      	cmp	r0, r2
 8008a9a:	bf38      	it	cc
 8008a9c:	2304      	movcc	r3, #4
 8008a9e:	f841 c003 	str.w	ip, [r1, r3]
 8008aa2:	f1bc 0f00 	cmp.w	ip, #0
 8008aa6:	d001      	beq.n	8008aac <__lshift+0xac>
 8008aa8:	f108 0602 	add.w	r6, r8, #2
 8008aac:	3e01      	subs	r6, #1
 8008aae:	4638      	mov	r0, r7
 8008ab0:	612e      	str	r6, [r5, #16]
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	f7ff fd88 	bl	80085c8 <_Bfree>
 8008ab8:	4628      	mov	r0, r5
 8008aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	e7c1      	b.n	8008a4a <__lshift+0x4a>
 8008ac6:	3904      	subs	r1, #4
 8008ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008acc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ad0:	4298      	cmp	r0, r3
 8008ad2:	d8f9      	bhi.n	8008ac8 <__lshift+0xc8>
 8008ad4:	e7ea      	b.n	8008aac <__lshift+0xac>
 8008ad6:	bf00      	nop
 8008ad8:	0800a978 	.word	0x0800a978
 8008adc:	0800aa04 	.word	0x0800aa04

08008ae0 <__mcmp>:
 8008ae0:	b530      	push	{r4, r5, lr}
 8008ae2:	6902      	ldr	r2, [r0, #16]
 8008ae4:	690c      	ldr	r4, [r1, #16]
 8008ae6:	1b12      	subs	r2, r2, r4
 8008ae8:	d10e      	bne.n	8008b08 <__mcmp+0x28>
 8008aea:	f100 0314 	add.w	r3, r0, #20
 8008aee:	3114      	adds	r1, #20
 8008af0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008af4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008af8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008afc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b00:	42a5      	cmp	r5, r4
 8008b02:	d003      	beq.n	8008b0c <__mcmp+0x2c>
 8008b04:	d305      	bcc.n	8008b12 <__mcmp+0x32>
 8008b06:	2201      	movs	r2, #1
 8008b08:	4610      	mov	r0, r2
 8008b0a:	bd30      	pop	{r4, r5, pc}
 8008b0c:	4283      	cmp	r3, r0
 8008b0e:	d3f3      	bcc.n	8008af8 <__mcmp+0x18>
 8008b10:	e7fa      	b.n	8008b08 <__mcmp+0x28>
 8008b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b16:	e7f7      	b.n	8008b08 <__mcmp+0x28>

08008b18 <__mdiff>:
 8008b18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	4606      	mov	r6, r0
 8008b20:	4611      	mov	r1, r2
 8008b22:	4620      	mov	r0, r4
 8008b24:	4690      	mov	r8, r2
 8008b26:	f7ff ffdb 	bl	8008ae0 <__mcmp>
 8008b2a:	1e05      	subs	r5, r0, #0
 8008b2c:	d110      	bne.n	8008b50 <__mdiff+0x38>
 8008b2e:	4629      	mov	r1, r5
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7ff fd09 	bl	8008548 <_Balloc>
 8008b36:	b930      	cbnz	r0, 8008b46 <__mdiff+0x2e>
 8008b38:	4b3a      	ldr	r3, [pc, #232]	; (8008c24 <__mdiff+0x10c>)
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	f240 2132 	movw	r1, #562	; 0x232
 8008b40:	4839      	ldr	r0, [pc, #228]	; (8008c28 <__mdiff+0x110>)
 8008b42:	f001 f86d 	bl	8009c20 <__assert_func>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b50:	bfa4      	itt	ge
 8008b52:	4643      	movge	r3, r8
 8008b54:	46a0      	movge	r8, r4
 8008b56:	4630      	mov	r0, r6
 8008b58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b5c:	bfa6      	itte	ge
 8008b5e:	461c      	movge	r4, r3
 8008b60:	2500      	movge	r5, #0
 8008b62:	2501      	movlt	r5, #1
 8008b64:	f7ff fcf0 	bl	8008548 <_Balloc>
 8008b68:	b920      	cbnz	r0, 8008b74 <__mdiff+0x5c>
 8008b6a:	4b2e      	ldr	r3, [pc, #184]	; (8008c24 <__mdiff+0x10c>)
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b72:	e7e5      	b.n	8008b40 <__mdiff+0x28>
 8008b74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008b78:	6926      	ldr	r6, [r4, #16]
 8008b7a:	60c5      	str	r5, [r0, #12]
 8008b7c:	f104 0914 	add.w	r9, r4, #20
 8008b80:	f108 0514 	add.w	r5, r8, #20
 8008b84:	f100 0e14 	add.w	lr, r0, #20
 8008b88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b90:	f108 0210 	add.w	r2, r8, #16
 8008b94:	46f2      	mov	sl, lr
 8008b96:	2100      	movs	r1, #0
 8008b98:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ba0:	fa1f f883 	uxth.w	r8, r3
 8008ba4:	fa11 f18b 	uxtah	r1, r1, fp
 8008ba8:	0c1b      	lsrs	r3, r3, #16
 8008baa:	eba1 0808 	sub.w	r8, r1, r8
 8008bae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bb6:	fa1f f888 	uxth.w	r8, r8
 8008bba:	1419      	asrs	r1, r3, #16
 8008bbc:	454e      	cmp	r6, r9
 8008bbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bc2:	f84a 3b04 	str.w	r3, [sl], #4
 8008bc6:	d8e7      	bhi.n	8008b98 <__mdiff+0x80>
 8008bc8:	1b33      	subs	r3, r6, r4
 8008bca:	3b15      	subs	r3, #21
 8008bcc:	f023 0303 	bic.w	r3, r3, #3
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	3415      	adds	r4, #21
 8008bd4:	42a6      	cmp	r6, r4
 8008bd6:	bf38      	it	cc
 8008bd8:	2304      	movcc	r3, #4
 8008bda:	441d      	add	r5, r3
 8008bdc:	4473      	add	r3, lr
 8008bde:	469e      	mov	lr, r3
 8008be0:	462e      	mov	r6, r5
 8008be2:	4566      	cmp	r6, ip
 8008be4:	d30e      	bcc.n	8008c04 <__mdiff+0xec>
 8008be6:	f10c 0203 	add.w	r2, ip, #3
 8008bea:	1b52      	subs	r2, r2, r5
 8008bec:	f022 0203 	bic.w	r2, r2, #3
 8008bf0:	3d03      	subs	r5, #3
 8008bf2:	45ac      	cmp	ip, r5
 8008bf4:	bf38      	it	cc
 8008bf6:	2200      	movcc	r2, #0
 8008bf8:	441a      	add	r2, r3
 8008bfa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008bfe:	b17b      	cbz	r3, 8008c20 <__mdiff+0x108>
 8008c00:	6107      	str	r7, [r0, #16]
 8008c02:	e7a3      	b.n	8008b4c <__mdiff+0x34>
 8008c04:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c08:	fa11 f288 	uxtah	r2, r1, r8
 8008c0c:	1414      	asrs	r4, r2, #16
 8008c0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c12:	b292      	uxth	r2, r2
 8008c14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c18:	f84e 2b04 	str.w	r2, [lr], #4
 8008c1c:	1421      	asrs	r1, r4, #16
 8008c1e:	e7e0      	b.n	8008be2 <__mdiff+0xca>
 8008c20:	3f01      	subs	r7, #1
 8008c22:	e7ea      	b.n	8008bfa <__mdiff+0xe2>
 8008c24:	0800a978 	.word	0x0800a978
 8008c28:	0800aa04 	.word	0x0800aa04

08008c2c <__ulp>:
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	ed8d 0b00 	vstr	d0, [sp]
 8008c32:	9b01      	ldr	r3, [sp, #4]
 8008c34:	4912      	ldr	r1, [pc, #72]	; (8008c80 <__ulp+0x54>)
 8008c36:	4019      	ands	r1, r3
 8008c38:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	dd05      	ble.n	8008c4c <__ulp+0x20>
 8008c40:	2200      	movs	r2, #0
 8008c42:	460b      	mov	r3, r1
 8008c44:	ec43 2b10 	vmov	d0, r2, r3
 8008c48:	b002      	add	sp, #8
 8008c4a:	4770      	bx	lr
 8008c4c:	4249      	negs	r1, r1
 8008c4e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008c52:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008c56:	f04f 0200 	mov.w	r2, #0
 8008c5a:	f04f 0300 	mov.w	r3, #0
 8008c5e:	da04      	bge.n	8008c6a <__ulp+0x3e>
 8008c60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008c64:	fa41 f300 	asr.w	r3, r1, r0
 8008c68:	e7ec      	b.n	8008c44 <__ulp+0x18>
 8008c6a:	f1a0 0114 	sub.w	r1, r0, #20
 8008c6e:	291e      	cmp	r1, #30
 8008c70:	bfda      	itte	le
 8008c72:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008c76:	fa20 f101 	lsrle.w	r1, r0, r1
 8008c7a:	2101      	movgt	r1, #1
 8008c7c:	460a      	mov	r2, r1
 8008c7e:	e7e1      	b.n	8008c44 <__ulp+0x18>
 8008c80:	7ff00000 	.word	0x7ff00000

08008c84 <__b2d>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	6905      	ldr	r5, [r0, #16]
 8008c88:	f100 0714 	add.w	r7, r0, #20
 8008c8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008c90:	1f2e      	subs	r6, r5, #4
 8008c92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008c96:	4620      	mov	r0, r4
 8008c98:	f7ff fd48 	bl	800872c <__hi0bits>
 8008c9c:	f1c0 0320 	rsb	r3, r0, #32
 8008ca0:	280a      	cmp	r0, #10
 8008ca2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008d20 <__b2d+0x9c>
 8008ca6:	600b      	str	r3, [r1, #0]
 8008ca8:	dc14      	bgt.n	8008cd4 <__b2d+0x50>
 8008caa:	f1c0 0e0b 	rsb	lr, r0, #11
 8008cae:	fa24 f10e 	lsr.w	r1, r4, lr
 8008cb2:	42b7      	cmp	r7, r6
 8008cb4:	ea41 030c 	orr.w	r3, r1, ip
 8008cb8:	bf34      	ite	cc
 8008cba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008cbe:	2100      	movcs	r1, #0
 8008cc0:	3015      	adds	r0, #21
 8008cc2:	fa04 f000 	lsl.w	r0, r4, r0
 8008cc6:	fa21 f10e 	lsr.w	r1, r1, lr
 8008cca:	ea40 0201 	orr.w	r2, r0, r1
 8008cce:	ec43 2b10 	vmov	d0, r2, r3
 8008cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cd4:	42b7      	cmp	r7, r6
 8008cd6:	bf3a      	itte	cc
 8008cd8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008cdc:	f1a5 0608 	subcc.w	r6, r5, #8
 8008ce0:	2100      	movcs	r1, #0
 8008ce2:	380b      	subs	r0, #11
 8008ce4:	d017      	beq.n	8008d16 <__b2d+0x92>
 8008ce6:	f1c0 0c20 	rsb	ip, r0, #32
 8008cea:	fa04 f500 	lsl.w	r5, r4, r0
 8008cee:	42be      	cmp	r6, r7
 8008cf0:	fa21 f40c 	lsr.w	r4, r1, ip
 8008cf4:	ea45 0504 	orr.w	r5, r5, r4
 8008cf8:	bf8c      	ite	hi
 8008cfa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008cfe:	2400      	movls	r4, #0
 8008d00:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008d04:	fa01 f000 	lsl.w	r0, r1, r0
 8008d08:	fa24 f40c 	lsr.w	r4, r4, ip
 8008d0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d10:	ea40 0204 	orr.w	r2, r0, r4
 8008d14:	e7db      	b.n	8008cce <__b2d+0x4a>
 8008d16:	ea44 030c 	orr.w	r3, r4, ip
 8008d1a:	460a      	mov	r2, r1
 8008d1c:	e7d7      	b.n	8008cce <__b2d+0x4a>
 8008d1e:	bf00      	nop
 8008d20:	3ff00000 	.word	0x3ff00000

08008d24 <__d2b>:
 8008d24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d28:	4689      	mov	r9, r1
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	ec57 6b10 	vmov	r6, r7, d0
 8008d30:	4690      	mov	r8, r2
 8008d32:	f7ff fc09 	bl	8008548 <_Balloc>
 8008d36:	4604      	mov	r4, r0
 8008d38:	b930      	cbnz	r0, 8008d48 <__d2b+0x24>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	4b25      	ldr	r3, [pc, #148]	; (8008dd4 <__d2b+0xb0>)
 8008d3e:	4826      	ldr	r0, [pc, #152]	; (8008dd8 <__d2b+0xb4>)
 8008d40:	f240 310a 	movw	r1, #778	; 0x30a
 8008d44:	f000 ff6c 	bl	8009c20 <__assert_func>
 8008d48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d50:	bb35      	cbnz	r5, 8008da0 <__d2b+0x7c>
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	9301      	str	r3, [sp, #4]
 8008d56:	d028      	beq.n	8008daa <__d2b+0x86>
 8008d58:	4668      	mov	r0, sp
 8008d5a:	9600      	str	r6, [sp, #0]
 8008d5c:	f7ff fd06 	bl	800876c <__lo0bits>
 8008d60:	9900      	ldr	r1, [sp, #0]
 8008d62:	b300      	cbz	r0, 8008da6 <__d2b+0x82>
 8008d64:	9a01      	ldr	r2, [sp, #4]
 8008d66:	f1c0 0320 	rsb	r3, r0, #32
 8008d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6e:	430b      	orrs	r3, r1
 8008d70:	40c2      	lsrs	r2, r0
 8008d72:	6163      	str	r3, [r4, #20]
 8008d74:	9201      	str	r2, [sp, #4]
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	61a3      	str	r3, [r4, #24]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	bf14      	ite	ne
 8008d7e:	2202      	movne	r2, #2
 8008d80:	2201      	moveq	r2, #1
 8008d82:	6122      	str	r2, [r4, #16]
 8008d84:	b1d5      	cbz	r5, 8008dbc <__d2b+0x98>
 8008d86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d8a:	4405      	add	r5, r0
 8008d8c:	f8c9 5000 	str.w	r5, [r9]
 8008d90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d94:	f8c8 0000 	str.w	r0, [r8]
 8008d98:	4620      	mov	r0, r4
 8008d9a:	b003      	add	sp, #12
 8008d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008da0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008da4:	e7d5      	b.n	8008d52 <__d2b+0x2e>
 8008da6:	6161      	str	r1, [r4, #20]
 8008da8:	e7e5      	b.n	8008d76 <__d2b+0x52>
 8008daa:	a801      	add	r0, sp, #4
 8008dac:	f7ff fcde 	bl	800876c <__lo0bits>
 8008db0:	9b01      	ldr	r3, [sp, #4]
 8008db2:	6163      	str	r3, [r4, #20]
 8008db4:	2201      	movs	r2, #1
 8008db6:	6122      	str	r2, [r4, #16]
 8008db8:	3020      	adds	r0, #32
 8008dba:	e7e3      	b.n	8008d84 <__d2b+0x60>
 8008dbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dc4:	f8c9 0000 	str.w	r0, [r9]
 8008dc8:	6918      	ldr	r0, [r3, #16]
 8008dca:	f7ff fcaf 	bl	800872c <__hi0bits>
 8008dce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dd2:	e7df      	b.n	8008d94 <__d2b+0x70>
 8008dd4:	0800a978 	.word	0x0800a978
 8008dd8:	0800aa04 	.word	0x0800aa04

08008ddc <__ratio>:
 8008ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de0:	4688      	mov	r8, r1
 8008de2:	4669      	mov	r1, sp
 8008de4:	4681      	mov	r9, r0
 8008de6:	f7ff ff4d 	bl	8008c84 <__b2d>
 8008dea:	a901      	add	r1, sp, #4
 8008dec:	4640      	mov	r0, r8
 8008dee:	ec55 4b10 	vmov	r4, r5, d0
 8008df2:	f7ff ff47 	bl	8008c84 <__b2d>
 8008df6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008dfa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008dfe:	eba3 0c02 	sub.w	ip, r3, r2
 8008e02:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e0c:	ec51 0b10 	vmov	r0, r1, d0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	bfd6      	itet	le
 8008e14:	460a      	movle	r2, r1
 8008e16:	462a      	movgt	r2, r5
 8008e18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e1c:	468b      	mov	fp, r1
 8008e1e:	462f      	mov	r7, r5
 8008e20:	bfd4      	ite	le
 8008e22:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008e26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	ee10 2a10 	vmov	r2, s0
 8008e30:	465b      	mov	r3, fp
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 fd1a 	bl	800086c <__aeabi_ddiv>
 8008e38:	ec41 0b10 	vmov	d0, r0, r1
 8008e3c:	b003      	add	sp, #12
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e42 <__copybits>:
 8008e42:	3901      	subs	r1, #1
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	1149      	asrs	r1, r1, #5
 8008e48:	6914      	ldr	r4, [r2, #16]
 8008e4a:	3101      	adds	r1, #1
 8008e4c:	f102 0314 	add.w	r3, r2, #20
 8008e50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e58:	1f05      	subs	r5, r0, #4
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	d30c      	bcc.n	8008e78 <__copybits+0x36>
 8008e5e:	1aa3      	subs	r3, r4, r2
 8008e60:	3b11      	subs	r3, #17
 8008e62:	f023 0303 	bic.w	r3, r3, #3
 8008e66:	3211      	adds	r2, #17
 8008e68:	42a2      	cmp	r2, r4
 8008e6a:	bf88      	it	hi
 8008e6c:	2300      	movhi	r3, #0
 8008e6e:	4418      	add	r0, r3
 8008e70:	2300      	movs	r3, #0
 8008e72:	4288      	cmp	r0, r1
 8008e74:	d305      	bcc.n	8008e82 <__copybits+0x40>
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e7c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e80:	e7eb      	b.n	8008e5a <__copybits+0x18>
 8008e82:	f840 3b04 	str.w	r3, [r0], #4
 8008e86:	e7f4      	b.n	8008e72 <__copybits+0x30>

08008e88 <__any_on>:
 8008e88:	f100 0214 	add.w	r2, r0, #20
 8008e8c:	6900      	ldr	r0, [r0, #16]
 8008e8e:	114b      	asrs	r3, r1, #5
 8008e90:	4298      	cmp	r0, r3
 8008e92:	b510      	push	{r4, lr}
 8008e94:	db11      	blt.n	8008eba <__any_on+0x32>
 8008e96:	dd0a      	ble.n	8008eae <__any_on+0x26>
 8008e98:	f011 011f 	ands.w	r1, r1, #31
 8008e9c:	d007      	beq.n	8008eae <__any_on+0x26>
 8008e9e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ea2:	fa24 f001 	lsr.w	r0, r4, r1
 8008ea6:	fa00 f101 	lsl.w	r1, r0, r1
 8008eaa:	428c      	cmp	r4, r1
 8008eac:	d10b      	bne.n	8008ec6 <__any_on+0x3e>
 8008eae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d803      	bhi.n	8008ebe <__any_on+0x36>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	bd10      	pop	{r4, pc}
 8008eba:	4603      	mov	r3, r0
 8008ebc:	e7f7      	b.n	8008eae <__any_on+0x26>
 8008ebe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ec2:	2900      	cmp	r1, #0
 8008ec4:	d0f5      	beq.n	8008eb2 <__any_on+0x2a>
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e7f6      	b.n	8008eb8 <__any_on+0x30>

08008eca <_calloc_r>:
 8008eca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ecc:	fba1 2402 	umull	r2, r4, r1, r2
 8008ed0:	b94c      	cbnz	r4, 8008ee6 <_calloc_r+0x1c>
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	9201      	str	r2, [sp, #4]
 8008ed6:	f000 f87b 	bl	8008fd0 <_malloc_r>
 8008eda:	9a01      	ldr	r2, [sp, #4]
 8008edc:	4605      	mov	r5, r0
 8008ede:	b930      	cbnz	r0, 8008eee <_calloc_r+0x24>
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	b003      	add	sp, #12
 8008ee4:	bd30      	pop	{r4, r5, pc}
 8008ee6:	220c      	movs	r2, #12
 8008ee8:	6002      	str	r2, [r0, #0]
 8008eea:	2500      	movs	r5, #0
 8008eec:	e7f8      	b.n	8008ee0 <_calloc_r+0x16>
 8008eee:	4621      	mov	r1, r4
 8008ef0:	f7fc fb18 	bl	8005524 <memset>
 8008ef4:	e7f4      	b.n	8008ee0 <_calloc_r+0x16>
	...

08008ef8 <_free_r>:
 8008ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008efa:	2900      	cmp	r1, #0
 8008efc:	d044      	beq.n	8008f88 <_free_r+0x90>
 8008efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f02:	9001      	str	r0, [sp, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f1a1 0404 	sub.w	r4, r1, #4
 8008f0a:	bfb8      	it	lt
 8008f0c:	18e4      	addlt	r4, r4, r3
 8008f0e:	f001 f88b 	bl	800a028 <__malloc_lock>
 8008f12:	4a1e      	ldr	r2, [pc, #120]	; (8008f8c <_free_r+0x94>)
 8008f14:	9801      	ldr	r0, [sp, #4]
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	b933      	cbnz	r3, 8008f28 <_free_r+0x30>
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	6014      	str	r4, [r2, #0]
 8008f1e:	b003      	add	sp, #12
 8008f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f24:	f001 b886 	b.w	800a034 <__malloc_unlock>
 8008f28:	42a3      	cmp	r3, r4
 8008f2a:	d908      	bls.n	8008f3e <_free_r+0x46>
 8008f2c:	6825      	ldr	r5, [r4, #0]
 8008f2e:	1961      	adds	r1, r4, r5
 8008f30:	428b      	cmp	r3, r1
 8008f32:	bf01      	itttt	eq
 8008f34:	6819      	ldreq	r1, [r3, #0]
 8008f36:	685b      	ldreq	r3, [r3, #4]
 8008f38:	1949      	addeq	r1, r1, r5
 8008f3a:	6021      	streq	r1, [r4, #0]
 8008f3c:	e7ed      	b.n	8008f1a <_free_r+0x22>
 8008f3e:	461a      	mov	r2, r3
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	b10b      	cbz	r3, 8008f48 <_free_r+0x50>
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	d9fa      	bls.n	8008f3e <_free_r+0x46>
 8008f48:	6811      	ldr	r1, [r2, #0]
 8008f4a:	1855      	adds	r5, r2, r1
 8008f4c:	42a5      	cmp	r5, r4
 8008f4e:	d10b      	bne.n	8008f68 <_free_r+0x70>
 8008f50:	6824      	ldr	r4, [r4, #0]
 8008f52:	4421      	add	r1, r4
 8008f54:	1854      	adds	r4, r2, r1
 8008f56:	42a3      	cmp	r3, r4
 8008f58:	6011      	str	r1, [r2, #0]
 8008f5a:	d1e0      	bne.n	8008f1e <_free_r+0x26>
 8008f5c:	681c      	ldr	r4, [r3, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	6053      	str	r3, [r2, #4]
 8008f62:	4421      	add	r1, r4
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	e7da      	b.n	8008f1e <_free_r+0x26>
 8008f68:	d902      	bls.n	8008f70 <_free_r+0x78>
 8008f6a:	230c      	movs	r3, #12
 8008f6c:	6003      	str	r3, [r0, #0]
 8008f6e:	e7d6      	b.n	8008f1e <_free_r+0x26>
 8008f70:	6825      	ldr	r5, [r4, #0]
 8008f72:	1961      	adds	r1, r4, r5
 8008f74:	428b      	cmp	r3, r1
 8008f76:	bf04      	itt	eq
 8008f78:	6819      	ldreq	r1, [r3, #0]
 8008f7a:	685b      	ldreq	r3, [r3, #4]
 8008f7c:	6063      	str	r3, [r4, #4]
 8008f7e:	bf04      	itt	eq
 8008f80:	1949      	addeq	r1, r1, r5
 8008f82:	6021      	streq	r1, [r4, #0]
 8008f84:	6054      	str	r4, [r2, #4]
 8008f86:	e7ca      	b.n	8008f1e <_free_r+0x26>
 8008f88:	b003      	add	sp, #12
 8008f8a:	bd30      	pop	{r4, r5, pc}
 8008f8c:	20000334 	.word	0x20000334

08008f90 <sbrk_aligned>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	4e0e      	ldr	r6, [pc, #56]	; (8008fcc <sbrk_aligned+0x3c>)
 8008f94:	460c      	mov	r4, r1
 8008f96:	6831      	ldr	r1, [r6, #0]
 8008f98:	4605      	mov	r5, r0
 8008f9a:	b911      	cbnz	r1, 8008fa2 <sbrk_aligned+0x12>
 8008f9c:	f000 fd28 	bl	80099f0 <_sbrk_r>
 8008fa0:	6030      	str	r0, [r6, #0]
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 fd23 	bl	80099f0 <_sbrk_r>
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	d00a      	beq.n	8008fc4 <sbrk_aligned+0x34>
 8008fae:	1cc4      	adds	r4, r0, #3
 8008fb0:	f024 0403 	bic.w	r4, r4, #3
 8008fb4:	42a0      	cmp	r0, r4
 8008fb6:	d007      	beq.n	8008fc8 <sbrk_aligned+0x38>
 8008fb8:	1a21      	subs	r1, r4, r0
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 fd18 	bl	80099f0 <_sbrk_r>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d101      	bne.n	8008fc8 <sbrk_aligned+0x38>
 8008fc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008fc8:	4620      	mov	r0, r4
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	20000338 	.word	0x20000338

08008fd0 <_malloc_r>:
 8008fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd4:	1ccd      	adds	r5, r1, #3
 8008fd6:	f025 0503 	bic.w	r5, r5, #3
 8008fda:	3508      	adds	r5, #8
 8008fdc:	2d0c      	cmp	r5, #12
 8008fde:	bf38      	it	cc
 8008fe0:	250c      	movcc	r5, #12
 8008fe2:	2d00      	cmp	r5, #0
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	db01      	blt.n	8008fec <_malloc_r+0x1c>
 8008fe8:	42a9      	cmp	r1, r5
 8008fea:	d905      	bls.n	8008ff8 <_malloc_r+0x28>
 8008fec:	230c      	movs	r3, #12
 8008fee:	603b      	str	r3, [r7, #0]
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff8:	4e2e      	ldr	r6, [pc, #184]	; (80090b4 <_malloc_r+0xe4>)
 8008ffa:	f001 f815 	bl	800a028 <__malloc_lock>
 8008ffe:	6833      	ldr	r3, [r6, #0]
 8009000:	461c      	mov	r4, r3
 8009002:	bb34      	cbnz	r4, 8009052 <_malloc_r+0x82>
 8009004:	4629      	mov	r1, r5
 8009006:	4638      	mov	r0, r7
 8009008:	f7ff ffc2 	bl	8008f90 <sbrk_aligned>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	4604      	mov	r4, r0
 8009010:	d14d      	bne.n	80090ae <_malloc_r+0xde>
 8009012:	6834      	ldr	r4, [r6, #0]
 8009014:	4626      	mov	r6, r4
 8009016:	2e00      	cmp	r6, #0
 8009018:	d140      	bne.n	800909c <_malloc_r+0xcc>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	4631      	mov	r1, r6
 800901e:	4638      	mov	r0, r7
 8009020:	eb04 0803 	add.w	r8, r4, r3
 8009024:	f000 fce4 	bl	80099f0 <_sbrk_r>
 8009028:	4580      	cmp	r8, r0
 800902a:	d13a      	bne.n	80090a2 <_malloc_r+0xd2>
 800902c:	6821      	ldr	r1, [r4, #0]
 800902e:	3503      	adds	r5, #3
 8009030:	1a6d      	subs	r5, r5, r1
 8009032:	f025 0503 	bic.w	r5, r5, #3
 8009036:	3508      	adds	r5, #8
 8009038:	2d0c      	cmp	r5, #12
 800903a:	bf38      	it	cc
 800903c:	250c      	movcc	r5, #12
 800903e:	4629      	mov	r1, r5
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ffa5 	bl	8008f90 <sbrk_aligned>
 8009046:	3001      	adds	r0, #1
 8009048:	d02b      	beq.n	80090a2 <_malloc_r+0xd2>
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	442b      	add	r3, r5
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	e00e      	b.n	8009070 <_malloc_r+0xa0>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	1b52      	subs	r2, r2, r5
 8009056:	d41e      	bmi.n	8009096 <_malloc_r+0xc6>
 8009058:	2a0b      	cmp	r2, #11
 800905a:	d916      	bls.n	800908a <_malloc_r+0xba>
 800905c:	1961      	adds	r1, r4, r5
 800905e:	42a3      	cmp	r3, r4
 8009060:	6025      	str	r5, [r4, #0]
 8009062:	bf18      	it	ne
 8009064:	6059      	strne	r1, [r3, #4]
 8009066:	6863      	ldr	r3, [r4, #4]
 8009068:	bf08      	it	eq
 800906a:	6031      	streq	r1, [r6, #0]
 800906c:	5162      	str	r2, [r4, r5]
 800906e:	604b      	str	r3, [r1, #4]
 8009070:	4638      	mov	r0, r7
 8009072:	f104 060b 	add.w	r6, r4, #11
 8009076:	f000 ffdd 	bl	800a034 <__malloc_unlock>
 800907a:	f026 0607 	bic.w	r6, r6, #7
 800907e:	1d23      	adds	r3, r4, #4
 8009080:	1af2      	subs	r2, r6, r3
 8009082:	d0b6      	beq.n	8008ff2 <_malloc_r+0x22>
 8009084:	1b9b      	subs	r3, r3, r6
 8009086:	50a3      	str	r3, [r4, r2]
 8009088:	e7b3      	b.n	8008ff2 <_malloc_r+0x22>
 800908a:	6862      	ldr	r2, [r4, #4]
 800908c:	42a3      	cmp	r3, r4
 800908e:	bf0c      	ite	eq
 8009090:	6032      	streq	r2, [r6, #0]
 8009092:	605a      	strne	r2, [r3, #4]
 8009094:	e7ec      	b.n	8009070 <_malloc_r+0xa0>
 8009096:	4623      	mov	r3, r4
 8009098:	6864      	ldr	r4, [r4, #4]
 800909a:	e7b2      	b.n	8009002 <_malloc_r+0x32>
 800909c:	4634      	mov	r4, r6
 800909e:	6876      	ldr	r6, [r6, #4]
 80090a0:	e7b9      	b.n	8009016 <_malloc_r+0x46>
 80090a2:	230c      	movs	r3, #12
 80090a4:	603b      	str	r3, [r7, #0]
 80090a6:	4638      	mov	r0, r7
 80090a8:	f000 ffc4 	bl	800a034 <__malloc_unlock>
 80090ac:	e7a1      	b.n	8008ff2 <_malloc_r+0x22>
 80090ae:	6025      	str	r5, [r4, #0]
 80090b0:	e7de      	b.n	8009070 <_malloc_r+0xa0>
 80090b2:	bf00      	nop
 80090b4:	20000334 	.word	0x20000334

080090b8 <__ssputs_r>:
 80090b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090bc:	688e      	ldr	r6, [r1, #8]
 80090be:	429e      	cmp	r6, r3
 80090c0:	4682      	mov	sl, r0
 80090c2:	460c      	mov	r4, r1
 80090c4:	4690      	mov	r8, r2
 80090c6:	461f      	mov	r7, r3
 80090c8:	d838      	bhi.n	800913c <__ssputs_r+0x84>
 80090ca:	898a      	ldrh	r2, [r1, #12]
 80090cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090d0:	d032      	beq.n	8009138 <__ssputs_r+0x80>
 80090d2:	6825      	ldr	r5, [r4, #0]
 80090d4:	6909      	ldr	r1, [r1, #16]
 80090d6:	eba5 0901 	sub.w	r9, r5, r1
 80090da:	6965      	ldr	r5, [r4, #20]
 80090dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090e4:	3301      	adds	r3, #1
 80090e6:	444b      	add	r3, r9
 80090e8:	106d      	asrs	r5, r5, #1
 80090ea:	429d      	cmp	r5, r3
 80090ec:	bf38      	it	cc
 80090ee:	461d      	movcc	r5, r3
 80090f0:	0553      	lsls	r3, r2, #21
 80090f2:	d531      	bpl.n	8009158 <__ssputs_r+0xa0>
 80090f4:	4629      	mov	r1, r5
 80090f6:	f7ff ff6b 	bl	8008fd0 <_malloc_r>
 80090fa:	4606      	mov	r6, r0
 80090fc:	b950      	cbnz	r0, 8009114 <__ssputs_r+0x5c>
 80090fe:	230c      	movs	r3, #12
 8009100:	f8ca 3000 	str.w	r3, [sl]
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800910a:	81a3      	strh	r3, [r4, #12]
 800910c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009114:	6921      	ldr	r1, [r4, #16]
 8009116:	464a      	mov	r2, r9
 8009118:	f7ff fa08 	bl	800852c <memcpy>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	6126      	str	r6, [r4, #16]
 800912a:	6165      	str	r5, [r4, #20]
 800912c:	444e      	add	r6, r9
 800912e:	eba5 0509 	sub.w	r5, r5, r9
 8009132:	6026      	str	r6, [r4, #0]
 8009134:	60a5      	str	r5, [r4, #8]
 8009136:	463e      	mov	r6, r7
 8009138:	42be      	cmp	r6, r7
 800913a:	d900      	bls.n	800913e <__ssputs_r+0x86>
 800913c:	463e      	mov	r6, r7
 800913e:	6820      	ldr	r0, [r4, #0]
 8009140:	4632      	mov	r2, r6
 8009142:	4641      	mov	r1, r8
 8009144:	f000 ff56 	bl	8009ff4 <memmove>
 8009148:	68a3      	ldr	r3, [r4, #8]
 800914a:	1b9b      	subs	r3, r3, r6
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	4433      	add	r3, r6
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	2000      	movs	r0, #0
 8009156:	e7db      	b.n	8009110 <__ssputs_r+0x58>
 8009158:	462a      	mov	r2, r5
 800915a:	f000 ff71 	bl	800a040 <_realloc_r>
 800915e:	4606      	mov	r6, r0
 8009160:	2800      	cmp	r0, #0
 8009162:	d1e1      	bne.n	8009128 <__ssputs_r+0x70>
 8009164:	6921      	ldr	r1, [r4, #16]
 8009166:	4650      	mov	r0, sl
 8009168:	f7ff fec6 	bl	8008ef8 <_free_r>
 800916c:	e7c7      	b.n	80090fe <__ssputs_r+0x46>
	...

08009170 <_svfiprintf_r>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	4698      	mov	r8, r3
 8009176:	898b      	ldrh	r3, [r1, #12]
 8009178:	061b      	lsls	r3, r3, #24
 800917a:	b09d      	sub	sp, #116	; 0x74
 800917c:	4607      	mov	r7, r0
 800917e:	460d      	mov	r5, r1
 8009180:	4614      	mov	r4, r2
 8009182:	d50e      	bpl.n	80091a2 <_svfiprintf_r+0x32>
 8009184:	690b      	ldr	r3, [r1, #16]
 8009186:	b963      	cbnz	r3, 80091a2 <_svfiprintf_r+0x32>
 8009188:	2140      	movs	r1, #64	; 0x40
 800918a:	f7ff ff21 	bl	8008fd0 <_malloc_r>
 800918e:	6028      	str	r0, [r5, #0]
 8009190:	6128      	str	r0, [r5, #16]
 8009192:	b920      	cbnz	r0, 800919e <_svfiprintf_r+0x2e>
 8009194:	230c      	movs	r3, #12
 8009196:	603b      	str	r3, [r7, #0]
 8009198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800919c:	e0d1      	b.n	8009342 <_svfiprintf_r+0x1d2>
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	616b      	str	r3, [r5, #20]
 80091a2:	2300      	movs	r3, #0
 80091a4:	9309      	str	r3, [sp, #36]	; 0x24
 80091a6:	2320      	movs	r3, #32
 80091a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80091b0:	2330      	movs	r3, #48	; 0x30
 80091b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800935c <_svfiprintf_r+0x1ec>
 80091b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091ba:	f04f 0901 	mov.w	r9, #1
 80091be:	4623      	mov	r3, r4
 80091c0:	469a      	mov	sl, r3
 80091c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c6:	b10a      	cbz	r2, 80091cc <_svfiprintf_r+0x5c>
 80091c8:	2a25      	cmp	r2, #37	; 0x25
 80091ca:	d1f9      	bne.n	80091c0 <_svfiprintf_r+0x50>
 80091cc:	ebba 0b04 	subs.w	fp, sl, r4
 80091d0:	d00b      	beq.n	80091ea <_svfiprintf_r+0x7a>
 80091d2:	465b      	mov	r3, fp
 80091d4:	4622      	mov	r2, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	4638      	mov	r0, r7
 80091da:	f7ff ff6d 	bl	80090b8 <__ssputs_r>
 80091de:	3001      	adds	r0, #1
 80091e0:	f000 80aa 	beq.w	8009338 <_svfiprintf_r+0x1c8>
 80091e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e6:	445a      	add	r2, fp
 80091e8:	9209      	str	r2, [sp, #36]	; 0x24
 80091ea:	f89a 3000 	ldrb.w	r3, [sl]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 80a2 	beq.w	8009338 <_svfiprintf_r+0x1c8>
 80091f4:	2300      	movs	r3, #0
 80091f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091fe:	f10a 0a01 	add.w	sl, sl, #1
 8009202:	9304      	str	r3, [sp, #16]
 8009204:	9307      	str	r3, [sp, #28]
 8009206:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800920a:	931a      	str	r3, [sp, #104]	; 0x68
 800920c:	4654      	mov	r4, sl
 800920e:	2205      	movs	r2, #5
 8009210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009214:	4851      	ldr	r0, [pc, #324]	; (800935c <_svfiprintf_r+0x1ec>)
 8009216:	f7f6 fff3 	bl	8000200 <memchr>
 800921a:	9a04      	ldr	r2, [sp, #16]
 800921c:	b9d8      	cbnz	r0, 8009256 <_svfiprintf_r+0xe6>
 800921e:	06d0      	lsls	r0, r2, #27
 8009220:	bf44      	itt	mi
 8009222:	2320      	movmi	r3, #32
 8009224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009228:	0711      	lsls	r1, r2, #28
 800922a:	bf44      	itt	mi
 800922c:	232b      	movmi	r3, #43	; 0x2b
 800922e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009232:	f89a 3000 	ldrb.w	r3, [sl]
 8009236:	2b2a      	cmp	r3, #42	; 0x2a
 8009238:	d015      	beq.n	8009266 <_svfiprintf_r+0xf6>
 800923a:	9a07      	ldr	r2, [sp, #28]
 800923c:	4654      	mov	r4, sl
 800923e:	2000      	movs	r0, #0
 8009240:	f04f 0c0a 	mov.w	ip, #10
 8009244:	4621      	mov	r1, r4
 8009246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800924a:	3b30      	subs	r3, #48	; 0x30
 800924c:	2b09      	cmp	r3, #9
 800924e:	d94e      	bls.n	80092ee <_svfiprintf_r+0x17e>
 8009250:	b1b0      	cbz	r0, 8009280 <_svfiprintf_r+0x110>
 8009252:	9207      	str	r2, [sp, #28]
 8009254:	e014      	b.n	8009280 <_svfiprintf_r+0x110>
 8009256:	eba0 0308 	sub.w	r3, r0, r8
 800925a:	fa09 f303 	lsl.w	r3, r9, r3
 800925e:	4313      	orrs	r3, r2
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	46a2      	mov	sl, r4
 8009264:	e7d2      	b.n	800920c <_svfiprintf_r+0x9c>
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	1d19      	adds	r1, r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	9103      	str	r1, [sp, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	bfbb      	ittet	lt
 8009272:	425b      	neglt	r3, r3
 8009274:	f042 0202 	orrlt.w	r2, r2, #2
 8009278:	9307      	strge	r3, [sp, #28]
 800927a:	9307      	strlt	r3, [sp, #28]
 800927c:	bfb8      	it	lt
 800927e:	9204      	strlt	r2, [sp, #16]
 8009280:	7823      	ldrb	r3, [r4, #0]
 8009282:	2b2e      	cmp	r3, #46	; 0x2e
 8009284:	d10c      	bne.n	80092a0 <_svfiprintf_r+0x130>
 8009286:	7863      	ldrb	r3, [r4, #1]
 8009288:	2b2a      	cmp	r3, #42	; 0x2a
 800928a:	d135      	bne.n	80092f8 <_svfiprintf_r+0x188>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	1d1a      	adds	r2, r3, #4
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	9203      	str	r2, [sp, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	bfb8      	it	lt
 8009298:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800929c:	3402      	adds	r4, #2
 800929e:	9305      	str	r3, [sp, #20]
 80092a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800936c <_svfiprintf_r+0x1fc>
 80092a4:	7821      	ldrb	r1, [r4, #0]
 80092a6:	2203      	movs	r2, #3
 80092a8:	4650      	mov	r0, sl
 80092aa:	f7f6 ffa9 	bl	8000200 <memchr>
 80092ae:	b140      	cbz	r0, 80092c2 <_svfiprintf_r+0x152>
 80092b0:	2340      	movs	r3, #64	; 0x40
 80092b2:	eba0 000a 	sub.w	r0, r0, sl
 80092b6:	fa03 f000 	lsl.w	r0, r3, r0
 80092ba:	9b04      	ldr	r3, [sp, #16]
 80092bc:	4303      	orrs	r3, r0
 80092be:	3401      	adds	r4, #1
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c6:	4826      	ldr	r0, [pc, #152]	; (8009360 <_svfiprintf_r+0x1f0>)
 80092c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092cc:	2206      	movs	r2, #6
 80092ce:	f7f6 ff97 	bl	8000200 <memchr>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d038      	beq.n	8009348 <_svfiprintf_r+0x1d8>
 80092d6:	4b23      	ldr	r3, [pc, #140]	; (8009364 <_svfiprintf_r+0x1f4>)
 80092d8:	bb1b      	cbnz	r3, 8009322 <_svfiprintf_r+0x1b2>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	3307      	adds	r3, #7
 80092de:	f023 0307 	bic.w	r3, r3, #7
 80092e2:	3308      	adds	r3, #8
 80092e4:	9303      	str	r3, [sp, #12]
 80092e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e8:	4433      	add	r3, r6
 80092ea:	9309      	str	r3, [sp, #36]	; 0x24
 80092ec:	e767      	b.n	80091be <_svfiprintf_r+0x4e>
 80092ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80092f2:	460c      	mov	r4, r1
 80092f4:	2001      	movs	r0, #1
 80092f6:	e7a5      	b.n	8009244 <_svfiprintf_r+0xd4>
 80092f8:	2300      	movs	r3, #0
 80092fa:	3401      	adds	r4, #1
 80092fc:	9305      	str	r3, [sp, #20]
 80092fe:	4619      	mov	r1, r3
 8009300:	f04f 0c0a 	mov.w	ip, #10
 8009304:	4620      	mov	r0, r4
 8009306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800930a:	3a30      	subs	r2, #48	; 0x30
 800930c:	2a09      	cmp	r2, #9
 800930e:	d903      	bls.n	8009318 <_svfiprintf_r+0x1a8>
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0c5      	beq.n	80092a0 <_svfiprintf_r+0x130>
 8009314:	9105      	str	r1, [sp, #20]
 8009316:	e7c3      	b.n	80092a0 <_svfiprintf_r+0x130>
 8009318:	fb0c 2101 	mla	r1, ip, r1, r2
 800931c:	4604      	mov	r4, r0
 800931e:	2301      	movs	r3, #1
 8009320:	e7f0      	b.n	8009304 <_svfiprintf_r+0x194>
 8009322:	ab03      	add	r3, sp, #12
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	462a      	mov	r2, r5
 8009328:	4b0f      	ldr	r3, [pc, #60]	; (8009368 <_svfiprintf_r+0x1f8>)
 800932a:	a904      	add	r1, sp, #16
 800932c:	4638      	mov	r0, r7
 800932e:	f7fc f9a1 	bl	8005674 <_printf_float>
 8009332:	1c42      	adds	r2, r0, #1
 8009334:	4606      	mov	r6, r0
 8009336:	d1d6      	bne.n	80092e6 <_svfiprintf_r+0x176>
 8009338:	89ab      	ldrh	r3, [r5, #12]
 800933a:	065b      	lsls	r3, r3, #25
 800933c:	f53f af2c 	bmi.w	8009198 <_svfiprintf_r+0x28>
 8009340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009342:	b01d      	add	sp, #116	; 0x74
 8009344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009348:	ab03      	add	r3, sp, #12
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	462a      	mov	r2, r5
 800934e:	4b06      	ldr	r3, [pc, #24]	; (8009368 <_svfiprintf_r+0x1f8>)
 8009350:	a904      	add	r1, sp, #16
 8009352:	4638      	mov	r0, r7
 8009354:	f7fc fc32 	bl	8005bbc <_printf_i>
 8009358:	e7eb      	b.n	8009332 <_svfiprintf_r+0x1c2>
 800935a:	bf00      	nop
 800935c:	0800ab5c 	.word	0x0800ab5c
 8009360:	0800ab66 	.word	0x0800ab66
 8009364:	08005675 	.word	0x08005675
 8009368:	080090b9 	.word	0x080090b9
 800936c:	0800ab62 	.word	0x0800ab62

08009370 <_sungetc_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	1c4b      	adds	r3, r1, #1
 8009374:	4614      	mov	r4, r2
 8009376:	d103      	bne.n	8009380 <_sungetc_r+0x10>
 8009378:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800937c:	4628      	mov	r0, r5
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	8993      	ldrh	r3, [r2, #12]
 8009382:	f023 0320 	bic.w	r3, r3, #32
 8009386:	8193      	strh	r3, [r2, #12]
 8009388:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800938a:	6852      	ldr	r2, [r2, #4]
 800938c:	b2cd      	uxtb	r5, r1
 800938e:	b18b      	cbz	r3, 80093b4 <_sungetc_r+0x44>
 8009390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009392:	4293      	cmp	r3, r2
 8009394:	dd08      	ble.n	80093a8 <_sungetc_r+0x38>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	1e5a      	subs	r2, r3, #1
 800939a:	6022      	str	r2, [r4, #0]
 800939c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80093a0:	6863      	ldr	r3, [r4, #4]
 80093a2:	3301      	adds	r3, #1
 80093a4:	6063      	str	r3, [r4, #4]
 80093a6:	e7e9      	b.n	800937c <_sungetc_r+0xc>
 80093a8:	4621      	mov	r1, r4
 80093aa:	f000 fbf1 	bl	8009b90 <__submore>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d0f1      	beq.n	8009396 <_sungetc_r+0x26>
 80093b2:	e7e1      	b.n	8009378 <_sungetc_r+0x8>
 80093b4:	6921      	ldr	r1, [r4, #16]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	b151      	cbz	r1, 80093d0 <_sungetc_r+0x60>
 80093ba:	4299      	cmp	r1, r3
 80093bc:	d208      	bcs.n	80093d0 <_sungetc_r+0x60>
 80093be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80093c2:	42a9      	cmp	r1, r5
 80093c4:	d104      	bne.n	80093d0 <_sungetc_r+0x60>
 80093c6:	3b01      	subs	r3, #1
 80093c8:	3201      	adds	r2, #1
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	6062      	str	r2, [r4, #4]
 80093ce:	e7d5      	b.n	800937c <_sungetc_r+0xc>
 80093d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80093d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d8:	6363      	str	r3, [r4, #52]	; 0x34
 80093da:	2303      	movs	r3, #3
 80093dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80093de:	4623      	mov	r3, r4
 80093e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	2301      	movs	r3, #1
 80093e8:	e7dc      	b.n	80093a4 <_sungetc_r+0x34>

080093ea <__ssrefill_r>:
 80093ea:	b510      	push	{r4, lr}
 80093ec:	460c      	mov	r4, r1
 80093ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80093f0:	b169      	cbz	r1, 800940e <__ssrefill_r+0x24>
 80093f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093f6:	4299      	cmp	r1, r3
 80093f8:	d001      	beq.n	80093fe <__ssrefill_r+0x14>
 80093fa:	f7ff fd7d 	bl	8008ef8 <_free_r>
 80093fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009400:	6063      	str	r3, [r4, #4]
 8009402:	2000      	movs	r0, #0
 8009404:	6360      	str	r0, [r4, #52]	; 0x34
 8009406:	b113      	cbz	r3, 800940e <__ssrefill_r+0x24>
 8009408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800940a:	6023      	str	r3, [r4, #0]
 800940c:	bd10      	pop	{r4, pc}
 800940e:	6923      	ldr	r3, [r4, #16]
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	2300      	movs	r3, #0
 8009414:	6063      	str	r3, [r4, #4]
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	f043 0320 	orr.w	r3, r3, #32
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009422:	e7f3      	b.n	800940c <__ssrefill_r+0x22>

08009424 <__ssvfiscanf_r>:
 8009424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009428:	460c      	mov	r4, r1
 800942a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800942e:	2100      	movs	r1, #0
 8009430:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009434:	49a6      	ldr	r1, [pc, #664]	; (80096d0 <__ssvfiscanf_r+0x2ac>)
 8009436:	91a0      	str	r1, [sp, #640]	; 0x280
 8009438:	f10d 0804 	add.w	r8, sp, #4
 800943c:	49a5      	ldr	r1, [pc, #660]	; (80096d4 <__ssvfiscanf_r+0x2b0>)
 800943e:	4fa6      	ldr	r7, [pc, #664]	; (80096d8 <__ssvfiscanf_r+0x2b4>)
 8009440:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80096dc <__ssvfiscanf_r+0x2b8>
 8009444:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009448:	4606      	mov	r6, r0
 800944a:	91a1      	str	r1, [sp, #644]	; 0x284
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	7813      	ldrb	r3, [r2, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 815a 	beq.w	800970a <__ssvfiscanf_r+0x2e6>
 8009456:	5dd9      	ldrb	r1, [r3, r7]
 8009458:	f011 0108 	ands.w	r1, r1, #8
 800945c:	f102 0501 	add.w	r5, r2, #1
 8009460:	d019      	beq.n	8009496 <__ssvfiscanf_r+0x72>
 8009462:	6863      	ldr	r3, [r4, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	dd0f      	ble.n	8009488 <__ssvfiscanf_r+0x64>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	5cba      	ldrb	r2, [r7, r2]
 800946e:	0712      	lsls	r2, r2, #28
 8009470:	d401      	bmi.n	8009476 <__ssvfiscanf_r+0x52>
 8009472:	462a      	mov	r2, r5
 8009474:	e7eb      	b.n	800944e <__ssvfiscanf_r+0x2a>
 8009476:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009478:	3201      	adds	r2, #1
 800947a:	9245      	str	r2, [sp, #276]	; 0x114
 800947c:	6862      	ldr	r2, [r4, #4]
 800947e:	3301      	adds	r3, #1
 8009480:	3a01      	subs	r2, #1
 8009482:	6062      	str	r2, [r4, #4]
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	e7ec      	b.n	8009462 <__ssvfiscanf_r+0x3e>
 8009488:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800948a:	4621      	mov	r1, r4
 800948c:	4630      	mov	r0, r6
 800948e:	4798      	blx	r3
 8009490:	2800      	cmp	r0, #0
 8009492:	d0e9      	beq.n	8009468 <__ssvfiscanf_r+0x44>
 8009494:	e7ed      	b.n	8009472 <__ssvfiscanf_r+0x4e>
 8009496:	2b25      	cmp	r3, #37	; 0x25
 8009498:	d012      	beq.n	80094c0 <__ssvfiscanf_r+0x9c>
 800949a:	469a      	mov	sl, r3
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f340 8091 	ble.w	80095c6 <__ssvfiscanf_r+0x1a2>
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	7813      	ldrb	r3, [r2, #0]
 80094a8:	4553      	cmp	r3, sl
 80094aa:	f040 812e 	bne.w	800970a <__ssvfiscanf_r+0x2e6>
 80094ae:	6863      	ldr	r3, [r4, #4]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	6063      	str	r3, [r4, #4]
 80094b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80094b6:	3201      	adds	r2, #1
 80094b8:	3301      	adds	r3, #1
 80094ba:	6022      	str	r2, [r4, #0]
 80094bc:	9345      	str	r3, [sp, #276]	; 0x114
 80094be:	e7d8      	b.n	8009472 <__ssvfiscanf_r+0x4e>
 80094c0:	9141      	str	r1, [sp, #260]	; 0x104
 80094c2:	9143      	str	r1, [sp, #268]	; 0x10c
 80094c4:	7853      	ldrb	r3, [r2, #1]
 80094c6:	2b2a      	cmp	r3, #42	; 0x2a
 80094c8:	bf02      	ittt	eq
 80094ca:	2310      	moveq	r3, #16
 80094cc:	1c95      	addeq	r5, r2, #2
 80094ce:	9341      	streq	r3, [sp, #260]	; 0x104
 80094d0:	220a      	movs	r2, #10
 80094d2:	46aa      	mov	sl, r5
 80094d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80094d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80094dc:	2b09      	cmp	r3, #9
 80094de:	d91d      	bls.n	800951c <__ssvfiscanf_r+0xf8>
 80094e0:	487e      	ldr	r0, [pc, #504]	; (80096dc <__ssvfiscanf_r+0x2b8>)
 80094e2:	2203      	movs	r2, #3
 80094e4:	f7f6 fe8c 	bl	8000200 <memchr>
 80094e8:	b140      	cbz	r0, 80094fc <__ssvfiscanf_r+0xd8>
 80094ea:	2301      	movs	r3, #1
 80094ec:	eba0 0009 	sub.w	r0, r0, r9
 80094f0:	fa03 f000 	lsl.w	r0, r3, r0
 80094f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80094f6:	4318      	orrs	r0, r3
 80094f8:	9041      	str	r0, [sp, #260]	; 0x104
 80094fa:	4655      	mov	r5, sl
 80094fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009500:	2b78      	cmp	r3, #120	; 0x78
 8009502:	d806      	bhi.n	8009512 <__ssvfiscanf_r+0xee>
 8009504:	2b57      	cmp	r3, #87	; 0x57
 8009506:	d810      	bhi.n	800952a <__ssvfiscanf_r+0x106>
 8009508:	2b25      	cmp	r3, #37	; 0x25
 800950a:	d0c6      	beq.n	800949a <__ssvfiscanf_r+0x76>
 800950c:	d856      	bhi.n	80095bc <__ssvfiscanf_r+0x198>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d064      	beq.n	80095dc <__ssvfiscanf_r+0x1b8>
 8009512:	2303      	movs	r3, #3
 8009514:	9347      	str	r3, [sp, #284]	; 0x11c
 8009516:	230a      	movs	r3, #10
 8009518:	9342      	str	r3, [sp, #264]	; 0x108
 800951a:	e071      	b.n	8009600 <__ssvfiscanf_r+0x1dc>
 800951c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800951e:	fb02 1103 	mla	r1, r2, r3, r1
 8009522:	3930      	subs	r1, #48	; 0x30
 8009524:	9143      	str	r1, [sp, #268]	; 0x10c
 8009526:	4655      	mov	r5, sl
 8009528:	e7d3      	b.n	80094d2 <__ssvfiscanf_r+0xae>
 800952a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800952e:	2a20      	cmp	r2, #32
 8009530:	d8ef      	bhi.n	8009512 <__ssvfiscanf_r+0xee>
 8009532:	a101      	add	r1, pc, #4	; (adr r1, 8009538 <__ssvfiscanf_r+0x114>)
 8009534:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009538:	080095eb 	.word	0x080095eb
 800953c:	08009513 	.word	0x08009513
 8009540:	08009513 	.word	0x08009513
 8009544:	08009649 	.word	0x08009649
 8009548:	08009513 	.word	0x08009513
 800954c:	08009513 	.word	0x08009513
 8009550:	08009513 	.word	0x08009513
 8009554:	08009513 	.word	0x08009513
 8009558:	08009513 	.word	0x08009513
 800955c:	08009513 	.word	0x08009513
 8009560:	08009513 	.word	0x08009513
 8009564:	0800965f 	.word	0x0800965f
 8009568:	08009635 	.word	0x08009635
 800956c:	080095c3 	.word	0x080095c3
 8009570:	080095c3 	.word	0x080095c3
 8009574:	080095c3 	.word	0x080095c3
 8009578:	08009513 	.word	0x08009513
 800957c:	08009639 	.word	0x08009639
 8009580:	08009513 	.word	0x08009513
 8009584:	08009513 	.word	0x08009513
 8009588:	08009513 	.word	0x08009513
 800958c:	08009513 	.word	0x08009513
 8009590:	0800966f 	.word	0x0800966f
 8009594:	08009641 	.word	0x08009641
 8009598:	080095e3 	.word	0x080095e3
 800959c:	08009513 	.word	0x08009513
 80095a0:	08009513 	.word	0x08009513
 80095a4:	0800966b 	.word	0x0800966b
 80095a8:	08009513 	.word	0x08009513
 80095ac:	08009635 	.word	0x08009635
 80095b0:	08009513 	.word	0x08009513
 80095b4:	08009513 	.word	0x08009513
 80095b8:	080095eb 	.word	0x080095eb
 80095bc:	3b45      	subs	r3, #69	; 0x45
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d8a7      	bhi.n	8009512 <__ssvfiscanf_r+0xee>
 80095c2:	2305      	movs	r3, #5
 80095c4:	e01b      	b.n	80095fe <__ssvfiscanf_r+0x1da>
 80095c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80095c8:	4621      	mov	r1, r4
 80095ca:	4630      	mov	r0, r6
 80095cc:	4798      	blx	r3
 80095ce:	2800      	cmp	r0, #0
 80095d0:	f43f af68 	beq.w	80094a4 <__ssvfiscanf_r+0x80>
 80095d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f040 808d 	bne.w	80096f6 <__ssvfiscanf_r+0x2d2>
 80095dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095e0:	e08f      	b.n	8009702 <__ssvfiscanf_r+0x2de>
 80095e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80095e4:	f042 0220 	orr.w	r2, r2, #32
 80095e8:	9241      	str	r2, [sp, #260]	; 0x104
 80095ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80095ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095f0:	9241      	str	r2, [sp, #260]	; 0x104
 80095f2:	2210      	movs	r2, #16
 80095f4:	2b6f      	cmp	r3, #111	; 0x6f
 80095f6:	9242      	str	r2, [sp, #264]	; 0x108
 80095f8:	bf34      	ite	cc
 80095fa:	2303      	movcc	r3, #3
 80095fc:	2304      	movcs	r3, #4
 80095fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8009600:	6863      	ldr	r3, [r4, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	dd42      	ble.n	800968c <__ssvfiscanf_r+0x268>
 8009606:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009608:	0659      	lsls	r1, r3, #25
 800960a:	d404      	bmi.n	8009616 <__ssvfiscanf_r+0x1f2>
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	781a      	ldrb	r2, [r3, #0]
 8009610:	5cba      	ldrb	r2, [r7, r2]
 8009612:	0712      	lsls	r2, r2, #28
 8009614:	d441      	bmi.n	800969a <__ssvfiscanf_r+0x276>
 8009616:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009618:	2b02      	cmp	r3, #2
 800961a:	dc50      	bgt.n	80096be <__ssvfiscanf_r+0x29a>
 800961c:	466b      	mov	r3, sp
 800961e:	4622      	mov	r2, r4
 8009620:	a941      	add	r1, sp, #260	; 0x104
 8009622:	4630      	mov	r0, r6
 8009624:	f000 f876 	bl	8009714 <_scanf_chars>
 8009628:	2801      	cmp	r0, #1
 800962a:	d06e      	beq.n	800970a <__ssvfiscanf_r+0x2e6>
 800962c:	2802      	cmp	r0, #2
 800962e:	f47f af20 	bne.w	8009472 <__ssvfiscanf_r+0x4e>
 8009632:	e7cf      	b.n	80095d4 <__ssvfiscanf_r+0x1b0>
 8009634:	220a      	movs	r2, #10
 8009636:	e7dd      	b.n	80095f4 <__ssvfiscanf_r+0x1d0>
 8009638:	2300      	movs	r3, #0
 800963a:	9342      	str	r3, [sp, #264]	; 0x108
 800963c:	2303      	movs	r3, #3
 800963e:	e7de      	b.n	80095fe <__ssvfiscanf_r+0x1da>
 8009640:	2308      	movs	r3, #8
 8009642:	9342      	str	r3, [sp, #264]	; 0x108
 8009644:	2304      	movs	r3, #4
 8009646:	e7da      	b.n	80095fe <__ssvfiscanf_r+0x1da>
 8009648:	4629      	mov	r1, r5
 800964a:	4640      	mov	r0, r8
 800964c:	f000 f9e0 	bl	8009a10 <__sccl>
 8009650:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009656:	9341      	str	r3, [sp, #260]	; 0x104
 8009658:	4605      	mov	r5, r0
 800965a:	2301      	movs	r3, #1
 800965c:	e7cf      	b.n	80095fe <__ssvfiscanf_r+0x1da>
 800965e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009664:	9341      	str	r3, [sp, #260]	; 0x104
 8009666:	2300      	movs	r3, #0
 8009668:	e7c9      	b.n	80095fe <__ssvfiscanf_r+0x1da>
 800966a:	2302      	movs	r3, #2
 800966c:	e7c7      	b.n	80095fe <__ssvfiscanf_r+0x1da>
 800966e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009670:	06c3      	lsls	r3, r0, #27
 8009672:	f53f aefe 	bmi.w	8009472 <__ssvfiscanf_r+0x4e>
 8009676:	9b00      	ldr	r3, [sp, #0]
 8009678:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800967a:	1d19      	adds	r1, r3, #4
 800967c:	9100      	str	r1, [sp, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f010 0f01 	tst.w	r0, #1
 8009684:	bf14      	ite	ne
 8009686:	801a      	strhne	r2, [r3, #0]
 8009688:	601a      	streq	r2, [r3, #0]
 800968a:	e6f2      	b.n	8009472 <__ssvfiscanf_r+0x4e>
 800968c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800968e:	4621      	mov	r1, r4
 8009690:	4630      	mov	r0, r6
 8009692:	4798      	blx	r3
 8009694:	2800      	cmp	r0, #0
 8009696:	d0b6      	beq.n	8009606 <__ssvfiscanf_r+0x1e2>
 8009698:	e79c      	b.n	80095d4 <__ssvfiscanf_r+0x1b0>
 800969a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800969c:	3201      	adds	r2, #1
 800969e:	9245      	str	r2, [sp, #276]	; 0x114
 80096a0:	6862      	ldr	r2, [r4, #4]
 80096a2:	3a01      	subs	r2, #1
 80096a4:	2a00      	cmp	r2, #0
 80096a6:	6062      	str	r2, [r4, #4]
 80096a8:	dd02      	ble.n	80096b0 <__ssvfiscanf_r+0x28c>
 80096aa:	3301      	adds	r3, #1
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	e7ad      	b.n	800960c <__ssvfiscanf_r+0x1e8>
 80096b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80096b2:	4621      	mov	r1, r4
 80096b4:	4630      	mov	r0, r6
 80096b6:	4798      	blx	r3
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d0a7      	beq.n	800960c <__ssvfiscanf_r+0x1e8>
 80096bc:	e78a      	b.n	80095d4 <__ssvfiscanf_r+0x1b0>
 80096be:	2b04      	cmp	r3, #4
 80096c0:	dc0e      	bgt.n	80096e0 <__ssvfiscanf_r+0x2bc>
 80096c2:	466b      	mov	r3, sp
 80096c4:	4622      	mov	r2, r4
 80096c6:	a941      	add	r1, sp, #260	; 0x104
 80096c8:	4630      	mov	r0, r6
 80096ca:	f000 f87d 	bl	80097c8 <_scanf_i>
 80096ce:	e7ab      	b.n	8009628 <__ssvfiscanf_r+0x204>
 80096d0:	08009371 	.word	0x08009371
 80096d4:	080093eb 	.word	0x080093eb
 80096d8:	0800a7f9 	.word	0x0800a7f9
 80096dc:	0800ab62 	.word	0x0800ab62
 80096e0:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <__ssvfiscanf_r+0x2ec>)
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f43f aec5 	beq.w	8009472 <__ssvfiscanf_r+0x4e>
 80096e8:	466b      	mov	r3, sp
 80096ea:	4622      	mov	r2, r4
 80096ec:	a941      	add	r1, sp, #260	; 0x104
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7fc fb8a 	bl	8005e08 <_scanf_float>
 80096f4:	e798      	b.n	8009628 <__ssvfiscanf_r+0x204>
 80096f6:	89a3      	ldrh	r3, [r4, #12]
 80096f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80096fc:	bf18      	it	ne
 80096fe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009702:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800970c:	e7f9      	b.n	8009702 <__ssvfiscanf_r+0x2de>
 800970e:	bf00      	nop
 8009710:	08005e09 	.word	0x08005e09

08009714 <_scanf_chars>:
 8009714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009718:	4615      	mov	r5, r2
 800971a:	688a      	ldr	r2, [r1, #8]
 800971c:	4680      	mov	r8, r0
 800971e:	460c      	mov	r4, r1
 8009720:	b932      	cbnz	r2, 8009730 <_scanf_chars+0x1c>
 8009722:	698a      	ldr	r2, [r1, #24]
 8009724:	2a00      	cmp	r2, #0
 8009726:	bf0c      	ite	eq
 8009728:	2201      	moveq	r2, #1
 800972a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800972e:	608a      	str	r2, [r1, #8]
 8009730:	6822      	ldr	r2, [r4, #0]
 8009732:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80097c4 <_scanf_chars+0xb0>
 8009736:	06d1      	lsls	r1, r2, #27
 8009738:	bf5f      	itttt	pl
 800973a:	681a      	ldrpl	r2, [r3, #0]
 800973c:	1d11      	addpl	r1, r2, #4
 800973e:	6019      	strpl	r1, [r3, #0]
 8009740:	6816      	ldrpl	r6, [r2, #0]
 8009742:	2700      	movs	r7, #0
 8009744:	69a0      	ldr	r0, [r4, #24]
 8009746:	b188      	cbz	r0, 800976c <_scanf_chars+0x58>
 8009748:	2801      	cmp	r0, #1
 800974a:	d107      	bne.n	800975c <_scanf_chars+0x48>
 800974c:	682a      	ldr	r2, [r5, #0]
 800974e:	7811      	ldrb	r1, [r2, #0]
 8009750:	6962      	ldr	r2, [r4, #20]
 8009752:	5c52      	ldrb	r2, [r2, r1]
 8009754:	b952      	cbnz	r2, 800976c <_scanf_chars+0x58>
 8009756:	2f00      	cmp	r7, #0
 8009758:	d031      	beq.n	80097be <_scanf_chars+0xaa>
 800975a:	e022      	b.n	80097a2 <_scanf_chars+0x8e>
 800975c:	2802      	cmp	r0, #2
 800975e:	d120      	bne.n	80097a2 <_scanf_chars+0x8e>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009768:	071b      	lsls	r3, r3, #28
 800976a:	d41a      	bmi.n	80097a2 <_scanf_chars+0x8e>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	06da      	lsls	r2, r3, #27
 8009770:	bf5e      	ittt	pl
 8009772:	682b      	ldrpl	r3, [r5, #0]
 8009774:	781b      	ldrbpl	r3, [r3, #0]
 8009776:	f806 3b01 	strbpl.w	r3, [r6], #1
 800977a:	682a      	ldr	r2, [r5, #0]
 800977c:	686b      	ldr	r3, [r5, #4]
 800977e:	3201      	adds	r2, #1
 8009780:	602a      	str	r2, [r5, #0]
 8009782:	68a2      	ldr	r2, [r4, #8]
 8009784:	3b01      	subs	r3, #1
 8009786:	3a01      	subs	r2, #1
 8009788:	606b      	str	r3, [r5, #4]
 800978a:	3701      	adds	r7, #1
 800978c:	60a2      	str	r2, [r4, #8]
 800978e:	b142      	cbz	r2, 80097a2 <_scanf_chars+0x8e>
 8009790:	2b00      	cmp	r3, #0
 8009792:	dcd7      	bgt.n	8009744 <_scanf_chars+0x30>
 8009794:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009798:	4629      	mov	r1, r5
 800979a:	4640      	mov	r0, r8
 800979c:	4798      	blx	r3
 800979e:	2800      	cmp	r0, #0
 80097a0:	d0d0      	beq.n	8009744 <_scanf_chars+0x30>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	f013 0310 	ands.w	r3, r3, #16
 80097a8:	d105      	bne.n	80097b6 <_scanf_chars+0xa2>
 80097aa:	68e2      	ldr	r2, [r4, #12]
 80097ac:	3201      	adds	r2, #1
 80097ae:	60e2      	str	r2, [r4, #12]
 80097b0:	69a2      	ldr	r2, [r4, #24]
 80097b2:	b102      	cbz	r2, 80097b6 <_scanf_chars+0xa2>
 80097b4:	7033      	strb	r3, [r6, #0]
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	443b      	add	r3, r7
 80097ba:	6123      	str	r3, [r4, #16]
 80097bc:	2000      	movs	r0, #0
 80097be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c2:	bf00      	nop
 80097c4:	0800a7f9 	.word	0x0800a7f9

080097c8 <_scanf_i>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	4698      	mov	r8, r3
 80097ce:	4b76      	ldr	r3, [pc, #472]	; (80099a8 <_scanf_i+0x1e0>)
 80097d0:	460c      	mov	r4, r1
 80097d2:	4682      	mov	sl, r0
 80097d4:	4616      	mov	r6, r2
 80097d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097da:	b087      	sub	sp, #28
 80097dc:	ab03      	add	r3, sp, #12
 80097de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80097e2:	4b72      	ldr	r3, [pc, #456]	; (80099ac <_scanf_i+0x1e4>)
 80097e4:	69a1      	ldr	r1, [r4, #24]
 80097e6:	4a72      	ldr	r2, [pc, #456]	; (80099b0 <_scanf_i+0x1e8>)
 80097e8:	2903      	cmp	r1, #3
 80097ea:	bf18      	it	ne
 80097ec:	461a      	movne	r2, r3
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	9201      	str	r2, [sp, #4]
 80097f2:	1e5a      	subs	r2, r3, #1
 80097f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80097f8:	bf88      	it	hi
 80097fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80097fe:	4627      	mov	r7, r4
 8009800:	bf82      	ittt	hi
 8009802:	eb03 0905 	addhi.w	r9, r3, r5
 8009806:	f240 135d 	movwhi	r3, #349	; 0x15d
 800980a:	60a3      	strhi	r3, [r4, #8]
 800980c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009810:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009814:	bf98      	it	ls
 8009816:	f04f 0900 	movls.w	r9, #0
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	463d      	mov	r5, r7
 800981e:	f04f 0b00 	mov.w	fp, #0
 8009822:	6831      	ldr	r1, [r6, #0]
 8009824:	ab03      	add	r3, sp, #12
 8009826:	7809      	ldrb	r1, [r1, #0]
 8009828:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800982c:	2202      	movs	r2, #2
 800982e:	f7f6 fce7 	bl	8000200 <memchr>
 8009832:	b328      	cbz	r0, 8009880 <_scanf_i+0xb8>
 8009834:	f1bb 0f01 	cmp.w	fp, #1
 8009838:	d159      	bne.n	80098ee <_scanf_i+0x126>
 800983a:	6862      	ldr	r2, [r4, #4]
 800983c:	b92a      	cbnz	r2, 800984a <_scanf_i+0x82>
 800983e:	6822      	ldr	r2, [r4, #0]
 8009840:	2308      	movs	r3, #8
 8009842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	6022      	str	r2, [r4, #0]
 800984a:	6822      	ldr	r2, [r4, #0]
 800984c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009850:	6022      	str	r2, [r4, #0]
 8009852:	68a2      	ldr	r2, [r4, #8]
 8009854:	1e51      	subs	r1, r2, #1
 8009856:	60a1      	str	r1, [r4, #8]
 8009858:	b192      	cbz	r2, 8009880 <_scanf_i+0xb8>
 800985a:	6832      	ldr	r2, [r6, #0]
 800985c:	1c51      	adds	r1, r2, #1
 800985e:	6031      	str	r1, [r6, #0]
 8009860:	7812      	ldrb	r2, [r2, #0]
 8009862:	f805 2b01 	strb.w	r2, [r5], #1
 8009866:	6872      	ldr	r2, [r6, #4]
 8009868:	3a01      	subs	r2, #1
 800986a:	2a00      	cmp	r2, #0
 800986c:	6072      	str	r2, [r6, #4]
 800986e:	dc07      	bgt.n	8009880 <_scanf_i+0xb8>
 8009870:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009874:	4631      	mov	r1, r6
 8009876:	4650      	mov	r0, sl
 8009878:	4790      	blx	r2
 800987a:	2800      	cmp	r0, #0
 800987c:	f040 8085 	bne.w	800998a <_scanf_i+0x1c2>
 8009880:	f10b 0b01 	add.w	fp, fp, #1
 8009884:	f1bb 0f03 	cmp.w	fp, #3
 8009888:	d1cb      	bne.n	8009822 <_scanf_i+0x5a>
 800988a:	6863      	ldr	r3, [r4, #4]
 800988c:	b90b      	cbnz	r3, 8009892 <_scanf_i+0xca>
 800988e:	230a      	movs	r3, #10
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	6863      	ldr	r3, [r4, #4]
 8009894:	4947      	ldr	r1, [pc, #284]	; (80099b4 <_scanf_i+0x1ec>)
 8009896:	6960      	ldr	r0, [r4, #20]
 8009898:	1ac9      	subs	r1, r1, r3
 800989a:	f000 f8b9 	bl	8009a10 <__sccl>
 800989e:	f04f 0b00 	mov.w	fp, #0
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	6822      	ldr	r2, [r4, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d03d      	beq.n	8009926 <_scanf_i+0x15e>
 80098aa:	6831      	ldr	r1, [r6, #0]
 80098ac:	6960      	ldr	r0, [r4, #20]
 80098ae:	f891 c000 	ldrb.w	ip, [r1]
 80098b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d035      	beq.n	8009926 <_scanf_i+0x15e>
 80098ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80098be:	d124      	bne.n	800990a <_scanf_i+0x142>
 80098c0:	0510      	lsls	r0, r2, #20
 80098c2:	d522      	bpl.n	800990a <_scanf_i+0x142>
 80098c4:	f10b 0b01 	add.w	fp, fp, #1
 80098c8:	f1b9 0f00 	cmp.w	r9, #0
 80098cc:	d003      	beq.n	80098d6 <_scanf_i+0x10e>
 80098ce:	3301      	adds	r3, #1
 80098d0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80098d4:	60a3      	str	r3, [r4, #8]
 80098d6:	6873      	ldr	r3, [r6, #4]
 80098d8:	3b01      	subs	r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	6073      	str	r3, [r6, #4]
 80098de:	dd1b      	ble.n	8009918 <_scanf_i+0x150>
 80098e0:	6833      	ldr	r3, [r6, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	6033      	str	r3, [r6, #0]
 80098e6:	68a3      	ldr	r3, [r4, #8]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	60a3      	str	r3, [r4, #8]
 80098ec:	e7d9      	b.n	80098a2 <_scanf_i+0xda>
 80098ee:	f1bb 0f02 	cmp.w	fp, #2
 80098f2:	d1ae      	bne.n	8009852 <_scanf_i+0x8a>
 80098f4:	6822      	ldr	r2, [r4, #0]
 80098f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80098fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80098fe:	d1bf      	bne.n	8009880 <_scanf_i+0xb8>
 8009900:	2310      	movs	r3, #16
 8009902:	6063      	str	r3, [r4, #4]
 8009904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009908:	e7a2      	b.n	8009850 <_scanf_i+0x88>
 800990a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800990e:	6022      	str	r2, [r4, #0]
 8009910:	780b      	ldrb	r3, [r1, #0]
 8009912:	f805 3b01 	strb.w	r3, [r5], #1
 8009916:	e7de      	b.n	80098d6 <_scanf_i+0x10e>
 8009918:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800991c:	4631      	mov	r1, r6
 800991e:	4650      	mov	r0, sl
 8009920:	4798      	blx	r3
 8009922:	2800      	cmp	r0, #0
 8009924:	d0df      	beq.n	80098e6 <_scanf_i+0x11e>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	05db      	lsls	r3, r3, #23
 800992a:	d50d      	bpl.n	8009948 <_scanf_i+0x180>
 800992c:	42bd      	cmp	r5, r7
 800992e:	d909      	bls.n	8009944 <_scanf_i+0x17c>
 8009930:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009934:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009938:	4632      	mov	r2, r6
 800993a:	4650      	mov	r0, sl
 800993c:	4798      	blx	r3
 800993e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009942:	464d      	mov	r5, r9
 8009944:	42bd      	cmp	r5, r7
 8009946:	d02d      	beq.n	80099a4 <_scanf_i+0x1dc>
 8009948:	6822      	ldr	r2, [r4, #0]
 800994a:	f012 0210 	ands.w	r2, r2, #16
 800994e:	d113      	bne.n	8009978 <_scanf_i+0x1b0>
 8009950:	702a      	strb	r2, [r5, #0]
 8009952:	6863      	ldr	r3, [r4, #4]
 8009954:	9e01      	ldr	r6, [sp, #4]
 8009956:	4639      	mov	r1, r7
 8009958:	4650      	mov	r0, sl
 800995a:	47b0      	blx	r6
 800995c:	6821      	ldr	r1, [r4, #0]
 800995e:	f8d8 3000 	ldr.w	r3, [r8]
 8009962:	f011 0f20 	tst.w	r1, #32
 8009966:	d013      	beq.n	8009990 <_scanf_i+0x1c8>
 8009968:	1d1a      	adds	r2, r3, #4
 800996a:	f8c8 2000 	str.w	r2, [r8]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6018      	str	r0, [r3, #0]
 8009972:	68e3      	ldr	r3, [r4, #12]
 8009974:	3301      	adds	r3, #1
 8009976:	60e3      	str	r3, [r4, #12]
 8009978:	1bed      	subs	r5, r5, r7
 800997a:	44ab      	add	fp, r5
 800997c:	6925      	ldr	r5, [r4, #16]
 800997e:	445d      	add	r5, fp
 8009980:	6125      	str	r5, [r4, #16]
 8009982:	2000      	movs	r0, #0
 8009984:	b007      	add	sp, #28
 8009986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998a:	f04f 0b00 	mov.w	fp, #0
 800998e:	e7ca      	b.n	8009926 <_scanf_i+0x15e>
 8009990:	1d1a      	adds	r2, r3, #4
 8009992:	f8c8 2000 	str.w	r2, [r8]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f011 0f01 	tst.w	r1, #1
 800999c:	bf14      	ite	ne
 800999e:	8018      	strhne	r0, [r3, #0]
 80099a0:	6018      	streq	r0, [r3, #0]
 80099a2:	e7e6      	b.n	8009972 <_scanf_i+0x1aa>
 80099a4:	2001      	movs	r0, #1
 80099a6:	e7ed      	b.n	8009984 <_scanf_i+0x1bc>
 80099a8:	0800a728 	.word	0x0800a728
 80099ac:	08009b8d 	.word	0x08009b8d
 80099b0:	080070ad 	.word	0x080070ad
 80099b4:	0800ab86 	.word	0x0800ab86

080099b8 <_read_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d07      	ldr	r5, [pc, #28]	; (80099d8 <_read_r+0x20>)
 80099bc:	4604      	mov	r4, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7f7 fe2c 	bl	8001624 <_read>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_read_r+0x1e>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_read_r+0x1e>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	2000033c 	.word	0x2000033c
 80099dc:	00000000 	.word	0x00000000

080099e0 <nan>:
 80099e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80099e8 <nan+0x8>
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	00000000 	.word	0x00000000
 80099ec:	7ff80000 	.word	0x7ff80000

080099f0 <_sbrk_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d06      	ldr	r5, [pc, #24]	; (8009a0c <_sbrk_r+0x1c>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	602b      	str	r3, [r5, #0]
 80099fc:	f7f7 fe80 	bl	8001700 <_sbrk>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_sbrk_r+0x1a>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_sbrk_r+0x1a>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	2000033c 	.word	0x2000033c

08009a10 <__sccl>:
 8009a10:	b570      	push	{r4, r5, r6, lr}
 8009a12:	780b      	ldrb	r3, [r1, #0]
 8009a14:	4604      	mov	r4, r0
 8009a16:	2b5e      	cmp	r3, #94	; 0x5e
 8009a18:	bf0b      	itete	eq
 8009a1a:	784b      	ldrbeq	r3, [r1, #1]
 8009a1c:	1c48      	addne	r0, r1, #1
 8009a1e:	1c88      	addeq	r0, r1, #2
 8009a20:	2200      	movne	r2, #0
 8009a22:	bf08      	it	eq
 8009a24:	2201      	moveq	r2, #1
 8009a26:	1e61      	subs	r1, r4, #1
 8009a28:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009a2c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009a30:	42a9      	cmp	r1, r5
 8009a32:	d1fb      	bne.n	8009a2c <__sccl+0x1c>
 8009a34:	b90b      	cbnz	r3, 8009a3a <__sccl+0x2a>
 8009a36:	3801      	subs	r0, #1
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	f082 0201 	eor.w	r2, r2, #1
 8009a3e:	54e2      	strb	r2, [r4, r3]
 8009a40:	4605      	mov	r5, r0
 8009a42:	4628      	mov	r0, r5
 8009a44:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009a48:	292d      	cmp	r1, #45	; 0x2d
 8009a4a:	d006      	beq.n	8009a5a <__sccl+0x4a>
 8009a4c:	295d      	cmp	r1, #93	; 0x5d
 8009a4e:	d0f3      	beq.n	8009a38 <__sccl+0x28>
 8009a50:	b909      	cbnz	r1, 8009a56 <__sccl+0x46>
 8009a52:	4628      	mov	r0, r5
 8009a54:	e7f0      	b.n	8009a38 <__sccl+0x28>
 8009a56:	460b      	mov	r3, r1
 8009a58:	e7f1      	b.n	8009a3e <__sccl+0x2e>
 8009a5a:	786e      	ldrb	r6, [r5, #1]
 8009a5c:	2e5d      	cmp	r6, #93	; 0x5d
 8009a5e:	d0fa      	beq.n	8009a56 <__sccl+0x46>
 8009a60:	42b3      	cmp	r3, r6
 8009a62:	dcf8      	bgt.n	8009a56 <__sccl+0x46>
 8009a64:	3502      	adds	r5, #2
 8009a66:	4619      	mov	r1, r3
 8009a68:	3101      	adds	r1, #1
 8009a6a:	428e      	cmp	r6, r1
 8009a6c:	5462      	strb	r2, [r4, r1]
 8009a6e:	dcfb      	bgt.n	8009a68 <__sccl+0x58>
 8009a70:	1af1      	subs	r1, r6, r3
 8009a72:	3901      	subs	r1, #1
 8009a74:	1c58      	adds	r0, r3, #1
 8009a76:	42b3      	cmp	r3, r6
 8009a78:	bfa8      	it	ge
 8009a7a:	2100      	movge	r1, #0
 8009a7c:	1843      	adds	r3, r0, r1
 8009a7e:	e7e0      	b.n	8009a42 <__sccl+0x32>

08009a80 <strncmp>:
 8009a80:	b510      	push	{r4, lr}
 8009a82:	b17a      	cbz	r2, 8009aa4 <strncmp+0x24>
 8009a84:	4603      	mov	r3, r0
 8009a86:	3901      	subs	r1, #1
 8009a88:	1884      	adds	r4, r0, r2
 8009a8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009a92:	4290      	cmp	r0, r2
 8009a94:	d101      	bne.n	8009a9a <strncmp+0x1a>
 8009a96:	42a3      	cmp	r3, r4
 8009a98:	d101      	bne.n	8009a9e <strncmp+0x1e>
 8009a9a:	1a80      	subs	r0, r0, r2
 8009a9c:	bd10      	pop	{r4, pc}
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	d1f3      	bne.n	8009a8a <strncmp+0xa>
 8009aa2:	e7fa      	b.n	8009a9a <strncmp+0x1a>
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	e7f9      	b.n	8009a9c <strncmp+0x1c>

08009aa8 <_strtoul_l.constprop.0>:
 8009aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aac:	4f36      	ldr	r7, [pc, #216]	; (8009b88 <_strtoul_l.constprop.0+0xe0>)
 8009aae:	4686      	mov	lr, r0
 8009ab0:	460d      	mov	r5, r1
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ab8:	5de6      	ldrb	r6, [r4, r7]
 8009aba:	f016 0608 	ands.w	r6, r6, #8
 8009abe:	d1f8      	bne.n	8009ab2 <_strtoul_l.constprop.0+0xa>
 8009ac0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ac2:	d12f      	bne.n	8009b24 <_strtoul_l.constprop.0+0x7c>
 8009ac4:	782c      	ldrb	r4, [r5, #0]
 8009ac6:	2601      	movs	r6, #1
 8009ac8:	1c85      	adds	r5, r0, #2
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d057      	beq.n	8009b7e <_strtoul_l.constprop.0+0xd6>
 8009ace:	2b10      	cmp	r3, #16
 8009ad0:	d109      	bne.n	8009ae6 <_strtoul_l.constprop.0+0x3e>
 8009ad2:	2c30      	cmp	r4, #48	; 0x30
 8009ad4:	d107      	bne.n	8009ae6 <_strtoul_l.constprop.0+0x3e>
 8009ad6:	7828      	ldrb	r0, [r5, #0]
 8009ad8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009adc:	2858      	cmp	r0, #88	; 0x58
 8009ade:	d149      	bne.n	8009b74 <_strtoul_l.constprop.0+0xcc>
 8009ae0:	786c      	ldrb	r4, [r5, #1]
 8009ae2:	2310      	movs	r3, #16
 8009ae4:	3502      	adds	r5, #2
 8009ae6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009aea:	2700      	movs	r7, #0
 8009aec:	fbb8 f8f3 	udiv	r8, r8, r3
 8009af0:	fb03 f908 	mul.w	r9, r3, r8
 8009af4:	ea6f 0909 	mvn.w	r9, r9
 8009af8:	4638      	mov	r0, r7
 8009afa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009afe:	f1bc 0f09 	cmp.w	ip, #9
 8009b02:	d814      	bhi.n	8009b2e <_strtoul_l.constprop.0+0x86>
 8009b04:	4664      	mov	r4, ip
 8009b06:	42a3      	cmp	r3, r4
 8009b08:	dd22      	ble.n	8009b50 <_strtoul_l.constprop.0+0xa8>
 8009b0a:	2f00      	cmp	r7, #0
 8009b0c:	db1d      	blt.n	8009b4a <_strtoul_l.constprop.0+0xa2>
 8009b0e:	4580      	cmp	r8, r0
 8009b10:	d31b      	bcc.n	8009b4a <_strtoul_l.constprop.0+0xa2>
 8009b12:	d101      	bne.n	8009b18 <_strtoul_l.constprop.0+0x70>
 8009b14:	45a1      	cmp	r9, r4
 8009b16:	db18      	blt.n	8009b4a <_strtoul_l.constprop.0+0xa2>
 8009b18:	fb00 4003 	mla	r0, r0, r3, r4
 8009b1c:	2701      	movs	r7, #1
 8009b1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b22:	e7ea      	b.n	8009afa <_strtoul_l.constprop.0+0x52>
 8009b24:	2c2b      	cmp	r4, #43	; 0x2b
 8009b26:	bf04      	itt	eq
 8009b28:	782c      	ldrbeq	r4, [r5, #0]
 8009b2a:	1c85      	addeq	r5, r0, #2
 8009b2c:	e7cd      	b.n	8009aca <_strtoul_l.constprop.0+0x22>
 8009b2e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009b32:	f1bc 0f19 	cmp.w	ip, #25
 8009b36:	d801      	bhi.n	8009b3c <_strtoul_l.constprop.0+0x94>
 8009b38:	3c37      	subs	r4, #55	; 0x37
 8009b3a:	e7e4      	b.n	8009b06 <_strtoul_l.constprop.0+0x5e>
 8009b3c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009b40:	f1bc 0f19 	cmp.w	ip, #25
 8009b44:	d804      	bhi.n	8009b50 <_strtoul_l.constprop.0+0xa8>
 8009b46:	3c57      	subs	r4, #87	; 0x57
 8009b48:	e7dd      	b.n	8009b06 <_strtoul_l.constprop.0+0x5e>
 8009b4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b4e:	e7e6      	b.n	8009b1e <_strtoul_l.constprop.0+0x76>
 8009b50:	2f00      	cmp	r7, #0
 8009b52:	da07      	bge.n	8009b64 <_strtoul_l.constprop.0+0xbc>
 8009b54:	2322      	movs	r3, #34	; 0x22
 8009b56:	f8ce 3000 	str.w	r3, [lr]
 8009b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b5e:	b932      	cbnz	r2, 8009b6e <_strtoul_l.constprop.0+0xc6>
 8009b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b64:	b106      	cbz	r6, 8009b68 <_strtoul_l.constprop.0+0xc0>
 8009b66:	4240      	negs	r0, r0
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	d0f9      	beq.n	8009b60 <_strtoul_l.constprop.0+0xb8>
 8009b6c:	b107      	cbz	r7, 8009b70 <_strtoul_l.constprop.0+0xc8>
 8009b6e:	1e69      	subs	r1, r5, #1
 8009b70:	6011      	str	r1, [r2, #0]
 8009b72:	e7f5      	b.n	8009b60 <_strtoul_l.constprop.0+0xb8>
 8009b74:	2430      	movs	r4, #48	; 0x30
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1b5      	bne.n	8009ae6 <_strtoul_l.constprop.0+0x3e>
 8009b7a:	2308      	movs	r3, #8
 8009b7c:	e7b3      	b.n	8009ae6 <_strtoul_l.constprop.0+0x3e>
 8009b7e:	2c30      	cmp	r4, #48	; 0x30
 8009b80:	d0a9      	beq.n	8009ad6 <_strtoul_l.constprop.0+0x2e>
 8009b82:	230a      	movs	r3, #10
 8009b84:	e7af      	b.n	8009ae6 <_strtoul_l.constprop.0+0x3e>
 8009b86:	bf00      	nop
 8009b88:	0800a7f9 	.word	0x0800a7f9

08009b8c <_strtoul_r>:
 8009b8c:	f7ff bf8c 	b.w	8009aa8 <_strtoul_l.constprop.0>

08009b90 <__submore>:
 8009b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b94:	460c      	mov	r4, r1
 8009b96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b9c:	4299      	cmp	r1, r3
 8009b9e:	d11d      	bne.n	8009bdc <__submore+0x4c>
 8009ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ba4:	f7ff fa14 	bl	8008fd0 <_malloc_r>
 8009ba8:	b918      	cbnz	r0, 8009bb2 <__submore+0x22>
 8009baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb6:	63a3      	str	r3, [r4, #56]	; 0x38
 8009bb8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8009bbe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009bc2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009bc6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009bca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009bce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009bd2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009bd6:	6020      	str	r0, [r4, #0]
 8009bd8:	2000      	movs	r0, #0
 8009bda:	e7e8      	b.n	8009bae <__submore+0x1e>
 8009bdc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009bde:	0077      	lsls	r7, r6, #1
 8009be0:	463a      	mov	r2, r7
 8009be2:	f000 fa2d 	bl	800a040 <_realloc_r>
 8009be6:	4605      	mov	r5, r0
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d0de      	beq.n	8009baa <__submore+0x1a>
 8009bec:	eb00 0806 	add.w	r8, r0, r6
 8009bf0:	4601      	mov	r1, r0
 8009bf2:	4632      	mov	r2, r6
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	f7fe fc99 	bl	800852c <memcpy>
 8009bfa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009bfe:	f8c4 8000 	str.w	r8, [r4]
 8009c02:	e7e9      	b.n	8009bd8 <__submore+0x48>

08009c04 <__ascii_wctomb>:
 8009c04:	b149      	cbz	r1, 8009c1a <__ascii_wctomb+0x16>
 8009c06:	2aff      	cmp	r2, #255	; 0xff
 8009c08:	bf85      	ittet	hi
 8009c0a:	238a      	movhi	r3, #138	; 0x8a
 8009c0c:	6003      	strhi	r3, [r0, #0]
 8009c0e:	700a      	strbls	r2, [r1, #0]
 8009c10:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009c14:	bf98      	it	ls
 8009c16:	2001      	movls	r0, #1
 8009c18:	4770      	bx	lr
 8009c1a:	4608      	mov	r0, r1
 8009c1c:	4770      	bx	lr
	...

08009c20 <__assert_func>:
 8009c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c22:	4614      	mov	r4, r2
 8009c24:	461a      	mov	r2, r3
 8009c26:	4b09      	ldr	r3, [pc, #36]	; (8009c4c <__assert_func+0x2c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	68d8      	ldr	r0, [r3, #12]
 8009c2e:	b14c      	cbz	r4, 8009c44 <__assert_func+0x24>
 8009c30:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <__assert_func+0x30>)
 8009c32:	9100      	str	r1, [sp, #0]
 8009c34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c38:	4906      	ldr	r1, [pc, #24]	; (8009c54 <__assert_func+0x34>)
 8009c3a:	462b      	mov	r3, r5
 8009c3c:	f000 f9a6 	bl	8009f8c <fiprintf>
 8009c40:	f000 fc46 	bl	800a4d0 <abort>
 8009c44:	4b04      	ldr	r3, [pc, #16]	; (8009c58 <__assert_func+0x38>)
 8009c46:	461c      	mov	r4, r3
 8009c48:	e7f3      	b.n	8009c32 <__assert_func+0x12>
 8009c4a:	bf00      	nop
 8009c4c:	20000014 	.word	0x20000014
 8009c50:	0800ab88 	.word	0x0800ab88
 8009c54:	0800ab95 	.word	0x0800ab95
 8009c58:	0800abc3 	.word	0x0800abc3

08009c5c <__sflush_r>:
 8009c5c:	898a      	ldrh	r2, [r1, #12]
 8009c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c62:	4605      	mov	r5, r0
 8009c64:	0710      	lsls	r0, r2, #28
 8009c66:	460c      	mov	r4, r1
 8009c68:	d458      	bmi.n	8009d1c <__sflush_r+0xc0>
 8009c6a:	684b      	ldr	r3, [r1, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dc05      	bgt.n	8009c7c <__sflush_r+0x20>
 8009c70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	dc02      	bgt.n	8009c7c <__sflush_r+0x20>
 8009c76:	2000      	movs	r0, #0
 8009c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c7e:	2e00      	cmp	r6, #0
 8009c80:	d0f9      	beq.n	8009c76 <__sflush_r+0x1a>
 8009c82:	2300      	movs	r3, #0
 8009c84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c88:	682f      	ldr	r7, [r5, #0]
 8009c8a:	602b      	str	r3, [r5, #0]
 8009c8c:	d032      	beq.n	8009cf4 <__sflush_r+0x98>
 8009c8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	075a      	lsls	r2, r3, #29
 8009c94:	d505      	bpl.n	8009ca2 <__sflush_r+0x46>
 8009c96:	6863      	ldr	r3, [r4, #4]
 8009c98:	1ac0      	subs	r0, r0, r3
 8009c9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c9c:	b10b      	cbz	r3, 8009ca2 <__sflush_r+0x46>
 8009c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ca0:	1ac0      	subs	r0, r0, r3
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ca8:	6a21      	ldr	r1, [r4, #32]
 8009caa:	4628      	mov	r0, r5
 8009cac:	47b0      	blx	r6
 8009cae:	1c43      	adds	r3, r0, #1
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	d106      	bne.n	8009cc2 <__sflush_r+0x66>
 8009cb4:	6829      	ldr	r1, [r5, #0]
 8009cb6:	291d      	cmp	r1, #29
 8009cb8:	d82c      	bhi.n	8009d14 <__sflush_r+0xb8>
 8009cba:	4a2a      	ldr	r2, [pc, #168]	; (8009d64 <__sflush_r+0x108>)
 8009cbc:	40ca      	lsrs	r2, r1
 8009cbe:	07d6      	lsls	r6, r2, #31
 8009cc0:	d528      	bpl.n	8009d14 <__sflush_r+0xb8>
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	6062      	str	r2, [r4, #4]
 8009cc6:	04d9      	lsls	r1, r3, #19
 8009cc8:	6922      	ldr	r2, [r4, #16]
 8009cca:	6022      	str	r2, [r4, #0]
 8009ccc:	d504      	bpl.n	8009cd8 <__sflush_r+0x7c>
 8009cce:	1c42      	adds	r2, r0, #1
 8009cd0:	d101      	bne.n	8009cd6 <__sflush_r+0x7a>
 8009cd2:	682b      	ldr	r3, [r5, #0]
 8009cd4:	b903      	cbnz	r3, 8009cd8 <__sflush_r+0x7c>
 8009cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8009cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cda:	602f      	str	r7, [r5, #0]
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	d0ca      	beq.n	8009c76 <__sflush_r+0x1a>
 8009ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	d002      	beq.n	8009cee <__sflush_r+0x92>
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f7ff f905 	bl	8008ef8 <_free_r>
 8009cee:	2000      	movs	r0, #0
 8009cf0:	6360      	str	r0, [r4, #52]	; 0x34
 8009cf2:	e7c1      	b.n	8009c78 <__sflush_r+0x1c>
 8009cf4:	6a21      	ldr	r1, [r4, #32]
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	47b0      	blx	r6
 8009cfc:	1c41      	adds	r1, r0, #1
 8009cfe:	d1c7      	bne.n	8009c90 <__sflush_r+0x34>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0c4      	beq.n	8009c90 <__sflush_r+0x34>
 8009d06:	2b1d      	cmp	r3, #29
 8009d08:	d001      	beq.n	8009d0e <__sflush_r+0xb2>
 8009d0a:	2b16      	cmp	r3, #22
 8009d0c:	d101      	bne.n	8009d12 <__sflush_r+0xb6>
 8009d0e:	602f      	str	r7, [r5, #0]
 8009d10:	e7b1      	b.n	8009c76 <__sflush_r+0x1a>
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d18:	81a3      	strh	r3, [r4, #12]
 8009d1a:	e7ad      	b.n	8009c78 <__sflush_r+0x1c>
 8009d1c:	690f      	ldr	r7, [r1, #16]
 8009d1e:	2f00      	cmp	r7, #0
 8009d20:	d0a9      	beq.n	8009c76 <__sflush_r+0x1a>
 8009d22:	0793      	lsls	r3, r2, #30
 8009d24:	680e      	ldr	r6, [r1, #0]
 8009d26:	bf08      	it	eq
 8009d28:	694b      	ldreq	r3, [r1, #20]
 8009d2a:	600f      	str	r7, [r1, #0]
 8009d2c:	bf18      	it	ne
 8009d2e:	2300      	movne	r3, #0
 8009d30:	eba6 0807 	sub.w	r8, r6, r7
 8009d34:	608b      	str	r3, [r1, #8]
 8009d36:	f1b8 0f00 	cmp.w	r8, #0
 8009d3a:	dd9c      	ble.n	8009c76 <__sflush_r+0x1a>
 8009d3c:	6a21      	ldr	r1, [r4, #32]
 8009d3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d40:	4643      	mov	r3, r8
 8009d42:	463a      	mov	r2, r7
 8009d44:	4628      	mov	r0, r5
 8009d46:	47b0      	blx	r6
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	dc06      	bgt.n	8009d5a <__sflush_r+0xfe>
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d58:	e78e      	b.n	8009c78 <__sflush_r+0x1c>
 8009d5a:	4407      	add	r7, r0
 8009d5c:	eba8 0800 	sub.w	r8, r8, r0
 8009d60:	e7e9      	b.n	8009d36 <__sflush_r+0xda>
 8009d62:	bf00      	nop
 8009d64:	20400001 	.word	0x20400001

08009d68 <_fflush_r>:
 8009d68:	b538      	push	{r3, r4, r5, lr}
 8009d6a:	690b      	ldr	r3, [r1, #16]
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	460c      	mov	r4, r1
 8009d70:	b913      	cbnz	r3, 8009d78 <_fflush_r+0x10>
 8009d72:	2500      	movs	r5, #0
 8009d74:	4628      	mov	r0, r5
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	b118      	cbz	r0, 8009d82 <_fflush_r+0x1a>
 8009d7a:	6983      	ldr	r3, [r0, #24]
 8009d7c:	b90b      	cbnz	r3, 8009d82 <_fflush_r+0x1a>
 8009d7e:	f000 f887 	bl	8009e90 <__sinit>
 8009d82:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <_fflush_r+0x6c>)
 8009d84:	429c      	cmp	r4, r3
 8009d86:	d11b      	bne.n	8009dc0 <_fflush_r+0x58>
 8009d88:	686c      	ldr	r4, [r5, #4]
 8009d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0ef      	beq.n	8009d72 <_fflush_r+0xa>
 8009d92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d94:	07d0      	lsls	r0, r2, #31
 8009d96:	d404      	bmi.n	8009da2 <_fflush_r+0x3a>
 8009d98:	0599      	lsls	r1, r3, #22
 8009d9a:	d402      	bmi.n	8009da2 <_fflush_r+0x3a>
 8009d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d9e:	f000 f927 	bl	8009ff0 <__retarget_lock_acquire_recursive>
 8009da2:	4628      	mov	r0, r5
 8009da4:	4621      	mov	r1, r4
 8009da6:	f7ff ff59 	bl	8009c5c <__sflush_r>
 8009daa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dac:	07da      	lsls	r2, r3, #31
 8009dae:	4605      	mov	r5, r0
 8009db0:	d4e0      	bmi.n	8009d74 <_fflush_r+0xc>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	059b      	lsls	r3, r3, #22
 8009db6:	d4dd      	bmi.n	8009d74 <_fflush_r+0xc>
 8009db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dba:	f000 f91a 	bl	8009ff2 <__retarget_lock_release_recursive>
 8009dbe:	e7d9      	b.n	8009d74 <_fflush_r+0xc>
 8009dc0:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <_fflush_r+0x70>)
 8009dc2:	429c      	cmp	r4, r3
 8009dc4:	d101      	bne.n	8009dca <_fflush_r+0x62>
 8009dc6:	68ac      	ldr	r4, [r5, #8]
 8009dc8:	e7df      	b.n	8009d8a <_fflush_r+0x22>
 8009dca:	4b04      	ldr	r3, [pc, #16]	; (8009ddc <_fflush_r+0x74>)
 8009dcc:	429c      	cmp	r4, r3
 8009dce:	bf08      	it	eq
 8009dd0:	68ec      	ldreq	r4, [r5, #12]
 8009dd2:	e7da      	b.n	8009d8a <_fflush_r+0x22>
 8009dd4:	0800abe4 	.word	0x0800abe4
 8009dd8:	0800ac04 	.word	0x0800ac04
 8009ddc:	0800abc4 	.word	0x0800abc4

08009de0 <std>:
 8009de0:	2300      	movs	r3, #0
 8009de2:	b510      	push	{r4, lr}
 8009de4:	4604      	mov	r4, r0
 8009de6:	e9c0 3300 	strd	r3, r3, [r0]
 8009dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dee:	6083      	str	r3, [r0, #8]
 8009df0:	8181      	strh	r1, [r0, #12]
 8009df2:	6643      	str	r3, [r0, #100]	; 0x64
 8009df4:	81c2      	strh	r2, [r0, #14]
 8009df6:	6183      	str	r3, [r0, #24]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	2208      	movs	r2, #8
 8009dfc:	305c      	adds	r0, #92	; 0x5c
 8009dfe:	f7fb fb91 	bl	8005524 <memset>
 8009e02:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <std+0x38>)
 8009e04:	6263      	str	r3, [r4, #36]	; 0x24
 8009e06:	4b05      	ldr	r3, [pc, #20]	; (8009e1c <std+0x3c>)
 8009e08:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e0a:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <std+0x40>)
 8009e0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e0e:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <std+0x44>)
 8009e10:	6224      	str	r4, [r4, #32]
 8009e12:	6323      	str	r3, [r4, #48]	; 0x30
 8009e14:	bd10      	pop	{r4, pc}
 8009e16:	bf00      	nop
 8009e18:	080062cd 	.word	0x080062cd
 8009e1c:	080062f3 	.word	0x080062f3
 8009e20:	0800632b 	.word	0x0800632b
 8009e24:	0800634f 	.word	0x0800634f

08009e28 <_cleanup_r>:
 8009e28:	4901      	ldr	r1, [pc, #4]	; (8009e30 <_cleanup_r+0x8>)
 8009e2a:	f000 b8c1 	b.w	8009fb0 <_fwalk_reent>
 8009e2e:	bf00      	nop
 8009e30:	08009d69 	.word	0x08009d69

08009e34 <__sfmoreglue>:
 8009e34:	b570      	push	{r4, r5, r6, lr}
 8009e36:	2268      	movs	r2, #104	; 0x68
 8009e38:	1e4d      	subs	r5, r1, #1
 8009e3a:	4355      	muls	r5, r2
 8009e3c:	460e      	mov	r6, r1
 8009e3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e42:	f7ff f8c5 	bl	8008fd0 <_malloc_r>
 8009e46:	4604      	mov	r4, r0
 8009e48:	b140      	cbz	r0, 8009e5c <__sfmoreglue+0x28>
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	e9c0 1600 	strd	r1, r6, [r0]
 8009e50:	300c      	adds	r0, #12
 8009e52:	60a0      	str	r0, [r4, #8]
 8009e54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e58:	f7fb fb64 	bl	8005524 <memset>
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}

08009e60 <__sfp_lock_acquire>:
 8009e60:	4801      	ldr	r0, [pc, #4]	; (8009e68 <__sfp_lock_acquire+0x8>)
 8009e62:	f000 b8c5 	b.w	8009ff0 <__retarget_lock_acquire_recursive>
 8009e66:	bf00      	nop
 8009e68:	20000341 	.word	0x20000341

08009e6c <__sfp_lock_release>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	; (8009e74 <__sfp_lock_release+0x8>)
 8009e6e:	f000 b8c0 	b.w	8009ff2 <__retarget_lock_release_recursive>
 8009e72:	bf00      	nop
 8009e74:	20000341 	.word	0x20000341

08009e78 <__sinit_lock_acquire>:
 8009e78:	4801      	ldr	r0, [pc, #4]	; (8009e80 <__sinit_lock_acquire+0x8>)
 8009e7a:	f000 b8b9 	b.w	8009ff0 <__retarget_lock_acquire_recursive>
 8009e7e:	bf00      	nop
 8009e80:	20000342 	.word	0x20000342

08009e84 <__sinit_lock_release>:
 8009e84:	4801      	ldr	r0, [pc, #4]	; (8009e8c <__sinit_lock_release+0x8>)
 8009e86:	f000 b8b4 	b.w	8009ff2 <__retarget_lock_release_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	20000342 	.word	0x20000342

08009e90 <__sinit>:
 8009e90:	b510      	push	{r4, lr}
 8009e92:	4604      	mov	r4, r0
 8009e94:	f7ff fff0 	bl	8009e78 <__sinit_lock_acquire>
 8009e98:	69a3      	ldr	r3, [r4, #24]
 8009e9a:	b11b      	cbz	r3, 8009ea4 <__sinit+0x14>
 8009e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea0:	f7ff bff0 	b.w	8009e84 <__sinit_lock_release>
 8009ea4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ea8:	6523      	str	r3, [r4, #80]	; 0x50
 8009eaa:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <__sinit+0x68>)
 8009eac:	4a13      	ldr	r2, [pc, #76]	; (8009efc <__sinit+0x6c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	bf04      	itt	eq
 8009eb6:	2301      	moveq	r3, #1
 8009eb8:	61a3      	streq	r3, [r4, #24]
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f000 f820 	bl	8009f00 <__sfp>
 8009ec0:	6060      	str	r0, [r4, #4]
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f000 f81c 	bl	8009f00 <__sfp>
 8009ec8:	60a0      	str	r0, [r4, #8]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f000 f818 	bl	8009f00 <__sfp>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	60e0      	str	r0, [r4, #12]
 8009ed4:	2104      	movs	r1, #4
 8009ed6:	6860      	ldr	r0, [r4, #4]
 8009ed8:	f7ff ff82 	bl	8009de0 <std>
 8009edc:	68a0      	ldr	r0, [r4, #8]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	2109      	movs	r1, #9
 8009ee2:	f7ff ff7d 	bl	8009de0 <std>
 8009ee6:	68e0      	ldr	r0, [r4, #12]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	2112      	movs	r1, #18
 8009eec:	f7ff ff78 	bl	8009de0 <std>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	61a3      	str	r3, [r4, #24]
 8009ef4:	e7d2      	b.n	8009e9c <__sinit+0xc>
 8009ef6:	bf00      	nop
 8009ef8:	0800a76c 	.word	0x0800a76c
 8009efc:	08009e29 	.word	0x08009e29

08009f00 <__sfp>:
 8009f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f02:	4607      	mov	r7, r0
 8009f04:	f7ff ffac 	bl	8009e60 <__sfp_lock_acquire>
 8009f08:	4b1e      	ldr	r3, [pc, #120]	; (8009f84 <__sfp+0x84>)
 8009f0a:	681e      	ldr	r6, [r3, #0]
 8009f0c:	69b3      	ldr	r3, [r6, #24]
 8009f0e:	b913      	cbnz	r3, 8009f16 <__sfp+0x16>
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff ffbd 	bl	8009e90 <__sinit>
 8009f16:	3648      	adds	r6, #72	; 0x48
 8009f18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	d503      	bpl.n	8009f28 <__sfp+0x28>
 8009f20:	6833      	ldr	r3, [r6, #0]
 8009f22:	b30b      	cbz	r3, 8009f68 <__sfp+0x68>
 8009f24:	6836      	ldr	r6, [r6, #0]
 8009f26:	e7f7      	b.n	8009f18 <__sfp+0x18>
 8009f28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f2c:	b9d5      	cbnz	r5, 8009f64 <__sfp+0x64>
 8009f2e:	4b16      	ldr	r3, [pc, #88]	; (8009f88 <__sfp+0x88>)
 8009f30:	60e3      	str	r3, [r4, #12]
 8009f32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f36:	6665      	str	r5, [r4, #100]	; 0x64
 8009f38:	f000 f859 	bl	8009fee <__retarget_lock_init_recursive>
 8009f3c:	f7ff ff96 	bl	8009e6c <__sfp_lock_release>
 8009f40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f48:	6025      	str	r5, [r4, #0]
 8009f4a:	61a5      	str	r5, [r4, #24]
 8009f4c:	2208      	movs	r2, #8
 8009f4e:	4629      	mov	r1, r5
 8009f50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f54:	f7fb fae6 	bl	8005524 <memset>
 8009f58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f60:	4620      	mov	r0, r4
 8009f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f64:	3468      	adds	r4, #104	; 0x68
 8009f66:	e7d9      	b.n	8009f1c <__sfp+0x1c>
 8009f68:	2104      	movs	r1, #4
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	f7ff ff62 	bl	8009e34 <__sfmoreglue>
 8009f70:	4604      	mov	r4, r0
 8009f72:	6030      	str	r0, [r6, #0]
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d1d5      	bne.n	8009f24 <__sfp+0x24>
 8009f78:	f7ff ff78 	bl	8009e6c <__sfp_lock_release>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	e7ee      	b.n	8009f60 <__sfp+0x60>
 8009f82:	bf00      	nop
 8009f84:	0800a76c 	.word	0x0800a76c
 8009f88:	ffff0001 	.word	0xffff0001

08009f8c <fiprintf>:
 8009f8c:	b40e      	push	{r1, r2, r3}
 8009f8e:	b503      	push	{r0, r1, lr}
 8009f90:	4601      	mov	r1, r0
 8009f92:	ab03      	add	r3, sp, #12
 8009f94:	4805      	ldr	r0, [pc, #20]	; (8009fac <fiprintf+0x20>)
 8009f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f9a:	6800      	ldr	r0, [r0, #0]
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	f000 f8a7 	bl	800a0f0 <_vfiprintf_r>
 8009fa2:	b002      	add	sp, #8
 8009fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa8:	b003      	add	sp, #12
 8009faa:	4770      	bx	lr
 8009fac:	20000014 	.word	0x20000014

08009fb0 <_fwalk_reent>:
 8009fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	4688      	mov	r8, r1
 8009fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fbc:	2700      	movs	r7, #0
 8009fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8009fc6:	d505      	bpl.n	8009fd4 <_fwalk_reent+0x24>
 8009fc8:	6824      	ldr	r4, [r4, #0]
 8009fca:	2c00      	cmp	r4, #0
 8009fcc:	d1f7      	bne.n	8009fbe <_fwalk_reent+0xe>
 8009fce:	4638      	mov	r0, r7
 8009fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd4:	89ab      	ldrh	r3, [r5, #12]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d907      	bls.n	8009fea <_fwalk_reent+0x3a>
 8009fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	d003      	beq.n	8009fea <_fwalk_reent+0x3a>
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	47c0      	blx	r8
 8009fe8:	4307      	orrs	r7, r0
 8009fea:	3568      	adds	r5, #104	; 0x68
 8009fec:	e7e9      	b.n	8009fc2 <_fwalk_reent+0x12>

08009fee <__retarget_lock_init_recursive>:
 8009fee:	4770      	bx	lr

08009ff0 <__retarget_lock_acquire_recursive>:
 8009ff0:	4770      	bx	lr

08009ff2 <__retarget_lock_release_recursive>:
 8009ff2:	4770      	bx	lr

08009ff4 <memmove>:
 8009ff4:	4288      	cmp	r0, r1
 8009ff6:	b510      	push	{r4, lr}
 8009ff8:	eb01 0402 	add.w	r4, r1, r2
 8009ffc:	d902      	bls.n	800a004 <memmove+0x10>
 8009ffe:	4284      	cmp	r4, r0
 800a000:	4623      	mov	r3, r4
 800a002:	d807      	bhi.n	800a014 <memmove+0x20>
 800a004:	1e43      	subs	r3, r0, #1
 800a006:	42a1      	cmp	r1, r4
 800a008:	d008      	beq.n	800a01c <memmove+0x28>
 800a00a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a00e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a012:	e7f8      	b.n	800a006 <memmove+0x12>
 800a014:	4402      	add	r2, r0
 800a016:	4601      	mov	r1, r0
 800a018:	428a      	cmp	r2, r1
 800a01a:	d100      	bne.n	800a01e <memmove+0x2a>
 800a01c:	bd10      	pop	{r4, pc}
 800a01e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a026:	e7f7      	b.n	800a018 <memmove+0x24>

0800a028 <__malloc_lock>:
 800a028:	4801      	ldr	r0, [pc, #4]	; (800a030 <__malloc_lock+0x8>)
 800a02a:	f7ff bfe1 	b.w	8009ff0 <__retarget_lock_acquire_recursive>
 800a02e:	bf00      	nop
 800a030:	20000340 	.word	0x20000340

0800a034 <__malloc_unlock>:
 800a034:	4801      	ldr	r0, [pc, #4]	; (800a03c <__malloc_unlock+0x8>)
 800a036:	f7ff bfdc 	b.w	8009ff2 <__retarget_lock_release_recursive>
 800a03a:	bf00      	nop
 800a03c:	20000340 	.word	0x20000340

0800a040 <_realloc_r>:
 800a040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a044:	4680      	mov	r8, r0
 800a046:	4614      	mov	r4, r2
 800a048:	460e      	mov	r6, r1
 800a04a:	b921      	cbnz	r1, 800a056 <_realloc_r+0x16>
 800a04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a050:	4611      	mov	r1, r2
 800a052:	f7fe bfbd 	b.w	8008fd0 <_malloc_r>
 800a056:	b92a      	cbnz	r2, 800a064 <_realloc_r+0x24>
 800a058:	f7fe ff4e 	bl	8008ef8 <_free_r>
 800a05c:	4625      	mov	r5, r4
 800a05e:	4628      	mov	r0, r5
 800a060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a064:	f000 faa0 	bl	800a5a8 <_malloc_usable_size_r>
 800a068:	4284      	cmp	r4, r0
 800a06a:	4607      	mov	r7, r0
 800a06c:	d802      	bhi.n	800a074 <_realloc_r+0x34>
 800a06e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a072:	d812      	bhi.n	800a09a <_realloc_r+0x5a>
 800a074:	4621      	mov	r1, r4
 800a076:	4640      	mov	r0, r8
 800a078:	f7fe ffaa 	bl	8008fd0 <_malloc_r>
 800a07c:	4605      	mov	r5, r0
 800a07e:	2800      	cmp	r0, #0
 800a080:	d0ed      	beq.n	800a05e <_realloc_r+0x1e>
 800a082:	42bc      	cmp	r4, r7
 800a084:	4622      	mov	r2, r4
 800a086:	4631      	mov	r1, r6
 800a088:	bf28      	it	cs
 800a08a:	463a      	movcs	r2, r7
 800a08c:	f7fe fa4e 	bl	800852c <memcpy>
 800a090:	4631      	mov	r1, r6
 800a092:	4640      	mov	r0, r8
 800a094:	f7fe ff30 	bl	8008ef8 <_free_r>
 800a098:	e7e1      	b.n	800a05e <_realloc_r+0x1e>
 800a09a:	4635      	mov	r5, r6
 800a09c:	e7df      	b.n	800a05e <_realloc_r+0x1e>

0800a09e <__sfputc_r>:
 800a09e:	6893      	ldr	r3, [r2, #8]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	b410      	push	{r4}
 800a0a6:	6093      	str	r3, [r2, #8]
 800a0a8:	da08      	bge.n	800a0bc <__sfputc_r+0x1e>
 800a0aa:	6994      	ldr	r4, [r2, #24]
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	db01      	blt.n	800a0b4 <__sfputc_r+0x16>
 800a0b0:	290a      	cmp	r1, #10
 800a0b2:	d103      	bne.n	800a0bc <__sfputc_r+0x1e>
 800a0b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0b8:	f000 b94a 	b.w	800a350 <__swbuf_r>
 800a0bc:	6813      	ldr	r3, [r2, #0]
 800a0be:	1c58      	adds	r0, r3, #1
 800a0c0:	6010      	str	r0, [r2, #0]
 800a0c2:	7019      	strb	r1, [r3, #0]
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <__sfputs_r>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460f      	mov	r7, r1
 800a0d2:	4614      	mov	r4, r2
 800a0d4:	18d5      	adds	r5, r2, r3
 800a0d6:	42ac      	cmp	r4, r5
 800a0d8:	d101      	bne.n	800a0de <__sfputs_r+0x12>
 800a0da:	2000      	movs	r0, #0
 800a0dc:	e007      	b.n	800a0ee <__sfputs_r+0x22>
 800a0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e2:	463a      	mov	r2, r7
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff ffda 	bl	800a09e <__sfputc_r>
 800a0ea:	1c43      	adds	r3, r0, #1
 800a0ec:	d1f3      	bne.n	800a0d6 <__sfputs_r+0xa>
 800a0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0f0 <_vfiprintf_r>:
 800a0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	460d      	mov	r5, r1
 800a0f6:	b09d      	sub	sp, #116	; 0x74
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	4698      	mov	r8, r3
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	b118      	cbz	r0, 800a108 <_vfiprintf_r+0x18>
 800a100:	6983      	ldr	r3, [r0, #24]
 800a102:	b90b      	cbnz	r3, 800a108 <_vfiprintf_r+0x18>
 800a104:	f7ff fec4 	bl	8009e90 <__sinit>
 800a108:	4b89      	ldr	r3, [pc, #548]	; (800a330 <_vfiprintf_r+0x240>)
 800a10a:	429d      	cmp	r5, r3
 800a10c:	d11b      	bne.n	800a146 <_vfiprintf_r+0x56>
 800a10e:	6875      	ldr	r5, [r6, #4]
 800a110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a112:	07d9      	lsls	r1, r3, #31
 800a114:	d405      	bmi.n	800a122 <_vfiprintf_r+0x32>
 800a116:	89ab      	ldrh	r3, [r5, #12]
 800a118:	059a      	lsls	r2, r3, #22
 800a11a:	d402      	bmi.n	800a122 <_vfiprintf_r+0x32>
 800a11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a11e:	f7ff ff67 	bl	8009ff0 <__retarget_lock_acquire_recursive>
 800a122:	89ab      	ldrh	r3, [r5, #12]
 800a124:	071b      	lsls	r3, r3, #28
 800a126:	d501      	bpl.n	800a12c <_vfiprintf_r+0x3c>
 800a128:	692b      	ldr	r3, [r5, #16]
 800a12a:	b9eb      	cbnz	r3, 800a168 <_vfiprintf_r+0x78>
 800a12c:	4629      	mov	r1, r5
 800a12e:	4630      	mov	r0, r6
 800a130:	f000 f960 	bl	800a3f4 <__swsetup_r>
 800a134:	b1c0      	cbz	r0, 800a168 <_vfiprintf_r+0x78>
 800a136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a138:	07dc      	lsls	r4, r3, #31
 800a13a:	d50e      	bpl.n	800a15a <_vfiprintf_r+0x6a>
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a140:	b01d      	add	sp, #116	; 0x74
 800a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a146:	4b7b      	ldr	r3, [pc, #492]	; (800a334 <_vfiprintf_r+0x244>)
 800a148:	429d      	cmp	r5, r3
 800a14a:	d101      	bne.n	800a150 <_vfiprintf_r+0x60>
 800a14c:	68b5      	ldr	r5, [r6, #8]
 800a14e:	e7df      	b.n	800a110 <_vfiprintf_r+0x20>
 800a150:	4b79      	ldr	r3, [pc, #484]	; (800a338 <_vfiprintf_r+0x248>)
 800a152:	429d      	cmp	r5, r3
 800a154:	bf08      	it	eq
 800a156:	68f5      	ldreq	r5, [r6, #12]
 800a158:	e7da      	b.n	800a110 <_vfiprintf_r+0x20>
 800a15a:	89ab      	ldrh	r3, [r5, #12]
 800a15c:	0598      	lsls	r0, r3, #22
 800a15e:	d4ed      	bmi.n	800a13c <_vfiprintf_r+0x4c>
 800a160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a162:	f7ff ff46 	bl	8009ff2 <__retarget_lock_release_recursive>
 800a166:	e7e9      	b.n	800a13c <_vfiprintf_r+0x4c>
 800a168:	2300      	movs	r3, #0
 800a16a:	9309      	str	r3, [sp, #36]	; 0x24
 800a16c:	2320      	movs	r3, #32
 800a16e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a172:	f8cd 800c 	str.w	r8, [sp, #12]
 800a176:	2330      	movs	r3, #48	; 0x30
 800a178:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a33c <_vfiprintf_r+0x24c>
 800a17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a180:	f04f 0901 	mov.w	r9, #1
 800a184:	4623      	mov	r3, r4
 800a186:	469a      	mov	sl, r3
 800a188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a18c:	b10a      	cbz	r2, 800a192 <_vfiprintf_r+0xa2>
 800a18e:	2a25      	cmp	r2, #37	; 0x25
 800a190:	d1f9      	bne.n	800a186 <_vfiprintf_r+0x96>
 800a192:	ebba 0b04 	subs.w	fp, sl, r4
 800a196:	d00b      	beq.n	800a1b0 <_vfiprintf_r+0xc0>
 800a198:	465b      	mov	r3, fp
 800a19a:	4622      	mov	r2, r4
 800a19c:	4629      	mov	r1, r5
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7ff ff94 	bl	800a0cc <__sfputs_r>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	f000 80aa 	beq.w	800a2fe <_vfiprintf_r+0x20e>
 800a1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ac:	445a      	add	r2, fp
 800a1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 80a2 	beq.w	800a2fe <_vfiprintf_r+0x20e>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1c4:	f10a 0a01 	add.w	sl, sl, #1
 800a1c8:	9304      	str	r3, [sp, #16]
 800a1ca:	9307      	str	r3, [sp, #28]
 800a1cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a1d2:	4654      	mov	r4, sl
 800a1d4:	2205      	movs	r2, #5
 800a1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1da:	4858      	ldr	r0, [pc, #352]	; (800a33c <_vfiprintf_r+0x24c>)
 800a1dc:	f7f6 f810 	bl	8000200 <memchr>
 800a1e0:	9a04      	ldr	r2, [sp, #16]
 800a1e2:	b9d8      	cbnz	r0, 800a21c <_vfiprintf_r+0x12c>
 800a1e4:	06d1      	lsls	r1, r2, #27
 800a1e6:	bf44      	itt	mi
 800a1e8:	2320      	movmi	r3, #32
 800a1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ee:	0713      	lsls	r3, r2, #28
 800a1f0:	bf44      	itt	mi
 800a1f2:	232b      	movmi	r3, #43	; 0x2b
 800a1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a1fe:	d015      	beq.n	800a22c <_vfiprintf_r+0x13c>
 800a200:	9a07      	ldr	r2, [sp, #28]
 800a202:	4654      	mov	r4, sl
 800a204:	2000      	movs	r0, #0
 800a206:	f04f 0c0a 	mov.w	ip, #10
 800a20a:	4621      	mov	r1, r4
 800a20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a210:	3b30      	subs	r3, #48	; 0x30
 800a212:	2b09      	cmp	r3, #9
 800a214:	d94e      	bls.n	800a2b4 <_vfiprintf_r+0x1c4>
 800a216:	b1b0      	cbz	r0, 800a246 <_vfiprintf_r+0x156>
 800a218:	9207      	str	r2, [sp, #28]
 800a21a:	e014      	b.n	800a246 <_vfiprintf_r+0x156>
 800a21c:	eba0 0308 	sub.w	r3, r0, r8
 800a220:	fa09 f303 	lsl.w	r3, r9, r3
 800a224:	4313      	orrs	r3, r2
 800a226:	9304      	str	r3, [sp, #16]
 800a228:	46a2      	mov	sl, r4
 800a22a:	e7d2      	b.n	800a1d2 <_vfiprintf_r+0xe2>
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	1d19      	adds	r1, r3, #4
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	9103      	str	r1, [sp, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	bfbb      	ittet	lt
 800a238:	425b      	neglt	r3, r3
 800a23a:	f042 0202 	orrlt.w	r2, r2, #2
 800a23e:	9307      	strge	r3, [sp, #28]
 800a240:	9307      	strlt	r3, [sp, #28]
 800a242:	bfb8      	it	lt
 800a244:	9204      	strlt	r2, [sp, #16]
 800a246:	7823      	ldrb	r3, [r4, #0]
 800a248:	2b2e      	cmp	r3, #46	; 0x2e
 800a24a:	d10c      	bne.n	800a266 <_vfiprintf_r+0x176>
 800a24c:	7863      	ldrb	r3, [r4, #1]
 800a24e:	2b2a      	cmp	r3, #42	; 0x2a
 800a250:	d135      	bne.n	800a2be <_vfiprintf_r+0x1ce>
 800a252:	9b03      	ldr	r3, [sp, #12]
 800a254:	1d1a      	adds	r2, r3, #4
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	9203      	str	r2, [sp, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfb8      	it	lt
 800a25e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a262:	3402      	adds	r4, #2
 800a264:	9305      	str	r3, [sp, #20]
 800a266:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a34c <_vfiprintf_r+0x25c>
 800a26a:	7821      	ldrb	r1, [r4, #0]
 800a26c:	2203      	movs	r2, #3
 800a26e:	4650      	mov	r0, sl
 800a270:	f7f5 ffc6 	bl	8000200 <memchr>
 800a274:	b140      	cbz	r0, 800a288 <_vfiprintf_r+0x198>
 800a276:	2340      	movs	r3, #64	; 0x40
 800a278:	eba0 000a 	sub.w	r0, r0, sl
 800a27c:	fa03 f000 	lsl.w	r0, r3, r0
 800a280:	9b04      	ldr	r3, [sp, #16]
 800a282:	4303      	orrs	r3, r0
 800a284:	3401      	adds	r4, #1
 800a286:	9304      	str	r3, [sp, #16]
 800a288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28c:	482c      	ldr	r0, [pc, #176]	; (800a340 <_vfiprintf_r+0x250>)
 800a28e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a292:	2206      	movs	r2, #6
 800a294:	f7f5 ffb4 	bl	8000200 <memchr>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d03f      	beq.n	800a31c <_vfiprintf_r+0x22c>
 800a29c:	4b29      	ldr	r3, [pc, #164]	; (800a344 <_vfiprintf_r+0x254>)
 800a29e:	bb1b      	cbnz	r3, 800a2e8 <_vfiprintf_r+0x1f8>
 800a2a0:	9b03      	ldr	r3, [sp, #12]
 800a2a2:	3307      	adds	r3, #7
 800a2a4:	f023 0307 	bic.w	r3, r3, #7
 800a2a8:	3308      	adds	r3, #8
 800a2aa:	9303      	str	r3, [sp, #12]
 800a2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ae:	443b      	add	r3, r7
 800a2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b2:	e767      	b.n	800a184 <_vfiprintf_r+0x94>
 800a2b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	e7a5      	b.n	800a20a <_vfiprintf_r+0x11a>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	3401      	adds	r4, #1
 800a2c2:	9305      	str	r3, [sp, #20]
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	f04f 0c0a 	mov.w	ip, #10
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d0:	3a30      	subs	r2, #48	; 0x30
 800a2d2:	2a09      	cmp	r2, #9
 800a2d4:	d903      	bls.n	800a2de <_vfiprintf_r+0x1ee>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0c5      	beq.n	800a266 <_vfiprintf_r+0x176>
 800a2da:	9105      	str	r1, [sp, #20]
 800a2dc:	e7c3      	b.n	800a266 <_vfiprintf_r+0x176>
 800a2de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e7f0      	b.n	800a2ca <_vfiprintf_r+0x1da>
 800a2e8:	ab03      	add	r3, sp, #12
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4b16      	ldr	r3, [pc, #88]	; (800a348 <_vfiprintf_r+0x258>)
 800a2f0:	a904      	add	r1, sp, #16
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7fb f9be 	bl	8005674 <_printf_float>
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	1c78      	adds	r0, r7, #1
 800a2fc:	d1d6      	bne.n	800a2ac <_vfiprintf_r+0x1bc>
 800a2fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a300:	07d9      	lsls	r1, r3, #31
 800a302:	d405      	bmi.n	800a310 <_vfiprintf_r+0x220>
 800a304:	89ab      	ldrh	r3, [r5, #12]
 800a306:	059a      	lsls	r2, r3, #22
 800a308:	d402      	bmi.n	800a310 <_vfiprintf_r+0x220>
 800a30a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30c:	f7ff fe71 	bl	8009ff2 <__retarget_lock_release_recursive>
 800a310:	89ab      	ldrh	r3, [r5, #12]
 800a312:	065b      	lsls	r3, r3, #25
 800a314:	f53f af12 	bmi.w	800a13c <_vfiprintf_r+0x4c>
 800a318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a31a:	e711      	b.n	800a140 <_vfiprintf_r+0x50>
 800a31c:	ab03      	add	r3, sp, #12
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	462a      	mov	r2, r5
 800a322:	4b09      	ldr	r3, [pc, #36]	; (800a348 <_vfiprintf_r+0x258>)
 800a324:	a904      	add	r1, sp, #16
 800a326:	4630      	mov	r0, r6
 800a328:	f7fb fc48 	bl	8005bbc <_printf_i>
 800a32c:	e7e4      	b.n	800a2f8 <_vfiprintf_r+0x208>
 800a32e:	bf00      	nop
 800a330:	0800abe4 	.word	0x0800abe4
 800a334:	0800ac04 	.word	0x0800ac04
 800a338:	0800abc4 	.word	0x0800abc4
 800a33c:	0800ab5c 	.word	0x0800ab5c
 800a340:	0800ab66 	.word	0x0800ab66
 800a344:	08005675 	.word	0x08005675
 800a348:	0800a0cd 	.word	0x0800a0cd
 800a34c:	0800ab62 	.word	0x0800ab62

0800a350 <__swbuf_r>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	460e      	mov	r6, r1
 800a354:	4614      	mov	r4, r2
 800a356:	4605      	mov	r5, r0
 800a358:	b118      	cbz	r0, 800a362 <__swbuf_r+0x12>
 800a35a:	6983      	ldr	r3, [r0, #24]
 800a35c:	b90b      	cbnz	r3, 800a362 <__swbuf_r+0x12>
 800a35e:	f7ff fd97 	bl	8009e90 <__sinit>
 800a362:	4b21      	ldr	r3, [pc, #132]	; (800a3e8 <__swbuf_r+0x98>)
 800a364:	429c      	cmp	r4, r3
 800a366:	d12b      	bne.n	800a3c0 <__swbuf_r+0x70>
 800a368:	686c      	ldr	r4, [r5, #4]
 800a36a:	69a3      	ldr	r3, [r4, #24]
 800a36c:	60a3      	str	r3, [r4, #8]
 800a36e:	89a3      	ldrh	r3, [r4, #12]
 800a370:	071a      	lsls	r2, r3, #28
 800a372:	d52f      	bpl.n	800a3d4 <__swbuf_r+0x84>
 800a374:	6923      	ldr	r3, [r4, #16]
 800a376:	b36b      	cbz	r3, 800a3d4 <__swbuf_r+0x84>
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	6820      	ldr	r0, [r4, #0]
 800a37c:	1ac0      	subs	r0, r0, r3
 800a37e:	6963      	ldr	r3, [r4, #20]
 800a380:	b2f6      	uxtb	r6, r6
 800a382:	4283      	cmp	r3, r0
 800a384:	4637      	mov	r7, r6
 800a386:	dc04      	bgt.n	800a392 <__swbuf_r+0x42>
 800a388:	4621      	mov	r1, r4
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7ff fcec 	bl	8009d68 <_fflush_r>
 800a390:	bb30      	cbnz	r0, 800a3e0 <__swbuf_r+0x90>
 800a392:	68a3      	ldr	r3, [r4, #8]
 800a394:	3b01      	subs	r3, #1
 800a396:	60a3      	str	r3, [r4, #8]
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	1c5a      	adds	r2, r3, #1
 800a39c:	6022      	str	r2, [r4, #0]
 800a39e:	701e      	strb	r6, [r3, #0]
 800a3a0:	6963      	ldr	r3, [r4, #20]
 800a3a2:	3001      	adds	r0, #1
 800a3a4:	4283      	cmp	r3, r0
 800a3a6:	d004      	beq.n	800a3b2 <__swbuf_r+0x62>
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	07db      	lsls	r3, r3, #31
 800a3ac:	d506      	bpl.n	800a3bc <__swbuf_r+0x6c>
 800a3ae:	2e0a      	cmp	r6, #10
 800a3b0:	d104      	bne.n	800a3bc <__swbuf_r+0x6c>
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f7ff fcd7 	bl	8009d68 <_fflush_r>
 800a3ba:	b988      	cbnz	r0, 800a3e0 <__swbuf_r+0x90>
 800a3bc:	4638      	mov	r0, r7
 800a3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <__swbuf_r+0x9c>)
 800a3c2:	429c      	cmp	r4, r3
 800a3c4:	d101      	bne.n	800a3ca <__swbuf_r+0x7a>
 800a3c6:	68ac      	ldr	r4, [r5, #8]
 800a3c8:	e7cf      	b.n	800a36a <__swbuf_r+0x1a>
 800a3ca:	4b09      	ldr	r3, [pc, #36]	; (800a3f0 <__swbuf_r+0xa0>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	bf08      	it	eq
 800a3d0:	68ec      	ldreq	r4, [r5, #12]
 800a3d2:	e7ca      	b.n	800a36a <__swbuf_r+0x1a>
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f000 f80c 	bl	800a3f4 <__swsetup_r>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d0cb      	beq.n	800a378 <__swbuf_r+0x28>
 800a3e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a3e4:	e7ea      	b.n	800a3bc <__swbuf_r+0x6c>
 800a3e6:	bf00      	nop
 800a3e8:	0800abe4 	.word	0x0800abe4
 800a3ec:	0800ac04 	.word	0x0800ac04
 800a3f0:	0800abc4 	.word	0x0800abc4

0800a3f4 <__swsetup_r>:
 800a3f4:	4b32      	ldr	r3, [pc, #200]	; (800a4c0 <__swsetup_r+0xcc>)
 800a3f6:	b570      	push	{r4, r5, r6, lr}
 800a3f8:	681d      	ldr	r5, [r3, #0]
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	b125      	cbz	r5, 800a40a <__swsetup_r+0x16>
 800a400:	69ab      	ldr	r3, [r5, #24]
 800a402:	b913      	cbnz	r3, 800a40a <__swsetup_r+0x16>
 800a404:	4628      	mov	r0, r5
 800a406:	f7ff fd43 	bl	8009e90 <__sinit>
 800a40a:	4b2e      	ldr	r3, [pc, #184]	; (800a4c4 <__swsetup_r+0xd0>)
 800a40c:	429c      	cmp	r4, r3
 800a40e:	d10f      	bne.n	800a430 <__swsetup_r+0x3c>
 800a410:	686c      	ldr	r4, [r5, #4]
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a418:	0719      	lsls	r1, r3, #28
 800a41a:	d42c      	bmi.n	800a476 <__swsetup_r+0x82>
 800a41c:	06dd      	lsls	r5, r3, #27
 800a41e:	d411      	bmi.n	800a444 <__swsetup_r+0x50>
 800a420:	2309      	movs	r3, #9
 800a422:	6033      	str	r3, [r6, #0]
 800a424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a42e:	e03e      	b.n	800a4ae <__swsetup_r+0xba>
 800a430:	4b25      	ldr	r3, [pc, #148]	; (800a4c8 <__swsetup_r+0xd4>)
 800a432:	429c      	cmp	r4, r3
 800a434:	d101      	bne.n	800a43a <__swsetup_r+0x46>
 800a436:	68ac      	ldr	r4, [r5, #8]
 800a438:	e7eb      	b.n	800a412 <__swsetup_r+0x1e>
 800a43a:	4b24      	ldr	r3, [pc, #144]	; (800a4cc <__swsetup_r+0xd8>)
 800a43c:	429c      	cmp	r4, r3
 800a43e:	bf08      	it	eq
 800a440:	68ec      	ldreq	r4, [r5, #12]
 800a442:	e7e6      	b.n	800a412 <__swsetup_r+0x1e>
 800a444:	0758      	lsls	r0, r3, #29
 800a446:	d512      	bpl.n	800a46e <__swsetup_r+0x7a>
 800a448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a44a:	b141      	cbz	r1, 800a45e <__swsetup_r+0x6a>
 800a44c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a450:	4299      	cmp	r1, r3
 800a452:	d002      	beq.n	800a45a <__swsetup_r+0x66>
 800a454:	4630      	mov	r0, r6
 800a456:	f7fe fd4f 	bl	8008ef8 <_free_r>
 800a45a:	2300      	movs	r3, #0
 800a45c:	6363      	str	r3, [r4, #52]	; 0x34
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	2300      	movs	r3, #0
 800a468:	6063      	str	r3, [r4, #4]
 800a46a:	6923      	ldr	r3, [r4, #16]
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	89a3      	ldrh	r3, [r4, #12]
 800a470:	f043 0308 	orr.w	r3, r3, #8
 800a474:	81a3      	strh	r3, [r4, #12]
 800a476:	6923      	ldr	r3, [r4, #16]
 800a478:	b94b      	cbnz	r3, 800a48e <__swsetup_r+0x9a>
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a484:	d003      	beq.n	800a48e <__swsetup_r+0x9a>
 800a486:	4621      	mov	r1, r4
 800a488:	4630      	mov	r0, r6
 800a48a:	f000 f84d 	bl	800a528 <__smakebuf_r>
 800a48e:	89a0      	ldrh	r0, [r4, #12]
 800a490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a494:	f010 0301 	ands.w	r3, r0, #1
 800a498:	d00a      	beq.n	800a4b0 <__swsetup_r+0xbc>
 800a49a:	2300      	movs	r3, #0
 800a49c:	60a3      	str	r3, [r4, #8]
 800a49e:	6963      	ldr	r3, [r4, #20]
 800a4a0:	425b      	negs	r3, r3
 800a4a2:	61a3      	str	r3, [r4, #24]
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	b943      	cbnz	r3, 800a4ba <__swsetup_r+0xc6>
 800a4a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4ac:	d1ba      	bne.n	800a424 <__swsetup_r+0x30>
 800a4ae:	bd70      	pop	{r4, r5, r6, pc}
 800a4b0:	0781      	lsls	r1, r0, #30
 800a4b2:	bf58      	it	pl
 800a4b4:	6963      	ldrpl	r3, [r4, #20]
 800a4b6:	60a3      	str	r3, [r4, #8]
 800a4b8:	e7f4      	b.n	800a4a4 <__swsetup_r+0xb0>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e7f7      	b.n	800a4ae <__swsetup_r+0xba>
 800a4be:	bf00      	nop
 800a4c0:	20000014 	.word	0x20000014
 800a4c4:	0800abe4 	.word	0x0800abe4
 800a4c8:	0800ac04 	.word	0x0800ac04
 800a4cc:	0800abc4 	.word	0x0800abc4

0800a4d0 <abort>:
 800a4d0:	b508      	push	{r3, lr}
 800a4d2:	2006      	movs	r0, #6
 800a4d4:	f000 f898 	bl	800a608 <raise>
 800a4d8:	2001      	movs	r0, #1
 800a4da:	f7f7 f899 	bl	8001610 <_exit>

0800a4de <__swhatbuf_r>:
 800a4de:	b570      	push	{r4, r5, r6, lr}
 800a4e0:	460e      	mov	r6, r1
 800a4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e6:	2900      	cmp	r1, #0
 800a4e8:	b096      	sub	sp, #88	; 0x58
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	461d      	mov	r5, r3
 800a4ee:	da08      	bge.n	800a502 <__swhatbuf_r+0x24>
 800a4f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	602a      	str	r2, [r5, #0]
 800a4f8:	061a      	lsls	r2, r3, #24
 800a4fa:	d410      	bmi.n	800a51e <__swhatbuf_r+0x40>
 800a4fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a500:	e00e      	b.n	800a520 <__swhatbuf_r+0x42>
 800a502:	466a      	mov	r2, sp
 800a504:	f000 f89c 	bl	800a640 <_fstat_r>
 800a508:	2800      	cmp	r0, #0
 800a50a:	dbf1      	blt.n	800a4f0 <__swhatbuf_r+0x12>
 800a50c:	9a01      	ldr	r2, [sp, #4]
 800a50e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a512:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a516:	425a      	negs	r2, r3
 800a518:	415a      	adcs	r2, r3
 800a51a:	602a      	str	r2, [r5, #0]
 800a51c:	e7ee      	b.n	800a4fc <__swhatbuf_r+0x1e>
 800a51e:	2340      	movs	r3, #64	; 0x40
 800a520:	2000      	movs	r0, #0
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	b016      	add	sp, #88	; 0x58
 800a526:	bd70      	pop	{r4, r5, r6, pc}

0800a528 <__smakebuf_r>:
 800a528:	898b      	ldrh	r3, [r1, #12]
 800a52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a52c:	079d      	lsls	r5, r3, #30
 800a52e:	4606      	mov	r6, r0
 800a530:	460c      	mov	r4, r1
 800a532:	d507      	bpl.n	800a544 <__smakebuf_r+0x1c>
 800a534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	6123      	str	r3, [r4, #16]
 800a53c:	2301      	movs	r3, #1
 800a53e:	6163      	str	r3, [r4, #20]
 800a540:	b002      	add	sp, #8
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	ab01      	add	r3, sp, #4
 800a546:	466a      	mov	r2, sp
 800a548:	f7ff ffc9 	bl	800a4de <__swhatbuf_r>
 800a54c:	9900      	ldr	r1, [sp, #0]
 800a54e:	4605      	mov	r5, r0
 800a550:	4630      	mov	r0, r6
 800a552:	f7fe fd3d 	bl	8008fd0 <_malloc_r>
 800a556:	b948      	cbnz	r0, 800a56c <__smakebuf_r+0x44>
 800a558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a55c:	059a      	lsls	r2, r3, #22
 800a55e:	d4ef      	bmi.n	800a540 <__smakebuf_r+0x18>
 800a560:	f023 0303 	bic.w	r3, r3, #3
 800a564:	f043 0302 	orr.w	r3, r3, #2
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	e7e3      	b.n	800a534 <__smakebuf_r+0xc>
 800a56c:	4b0d      	ldr	r3, [pc, #52]	; (800a5a4 <__smakebuf_r+0x7c>)
 800a56e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	6020      	str	r0, [r4, #0]
 800a574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a578:	81a3      	strh	r3, [r4, #12]
 800a57a:	9b00      	ldr	r3, [sp, #0]
 800a57c:	6163      	str	r3, [r4, #20]
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	6120      	str	r0, [r4, #16]
 800a582:	b15b      	cbz	r3, 800a59c <__smakebuf_r+0x74>
 800a584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a588:	4630      	mov	r0, r6
 800a58a:	f000 f86b 	bl	800a664 <_isatty_r>
 800a58e:	b128      	cbz	r0, 800a59c <__smakebuf_r+0x74>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f023 0303 	bic.w	r3, r3, #3
 800a596:	f043 0301 	orr.w	r3, r3, #1
 800a59a:	81a3      	strh	r3, [r4, #12]
 800a59c:	89a0      	ldrh	r0, [r4, #12]
 800a59e:	4305      	orrs	r5, r0
 800a5a0:	81a5      	strh	r5, [r4, #12]
 800a5a2:	e7cd      	b.n	800a540 <__smakebuf_r+0x18>
 800a5a4:	08009e29 	.word	0x08009e29

0800a5a8 <_malloc_usable_size_r>:
 800a5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ac:	1f18      	subs	r0, r3, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	bfbc      	itt	lt
 800a5b2:	580b      	ldrlt	r3, [r1, r0]
 800a5b4:	18c0      	addlt	r0, r0, r3
 800a5b6:	4770      	bx	lr

0800a5b8 <_raise_r>:
 800a5b8:	291f      	cmp	r1, #31
 800a5ba:	b538      	push	{r3, r4, r5, lr}
 800a5bc:	4604      	mov	r4, r0
 800a5be:	460d      	mov	r5, r1
 800a5c0:	d904      	bls.n	800a5cc <_raise_r+0x14>
 800a5c2:	2316      	movs	r3, #22
 800a5c4:	6003      	str	r3, [r0, #0]
 800a5c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5ce:	b112      	cbz	r2, 800a5d6 <_raise_r+0x1e>
 800a5d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5d4:	b94b      	cbnz	r3, 800a5ea <_raise_r+0x32>
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f000 f830 	bl	800a63c <_getpid_r>
 800a5dc:	462a      	mov	r2, r5
 800a5de:	4601      	mov	r1, r0
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5e6:	f000 b817 	b.w	800a618 <_kill_r>
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d00a      	beq.n	800a604 <_raise_r+0x4c>
 800a5ee:	1c59      	adds	r1, r3, #1
 800a5f0:	d103      	bne.n	800a5fa <_raise_r+0x42>
 800a5f2:	2316      	movs	r3, #22
 800a5f4:	6003      	str	r3, [r0, #0]
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	e7e7      	b.n	800a5ca <_raise_r+0x12>
 800a5fa:	2400      	movs	r4, #0
 800a5fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a600:	4628      	mov	r0, r5
 800a602:	4798      	blx	r3
 800a604:	2000      	movs	r0, #0
 800a606:	e7e0      	b.n	800a5ca <_raise_r+0x12>

0800a608 <raise>:
 800a608:	4b02      	ldr	r3, [pc, #8]	; (800a614 <raise+0xc>)
 800a60a:	4601      	mov	r1, r0
 800a60c:	6818      	ldr	r0, [r3, #0]
 800a60e:	f7ff bfd3 	b.w	800a5b8 <_raise_r>
 800a612:	bf00      	nop
 800a614:	20000014 	.word	0x20000014

0800a618 <_kill_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d07      	ldr	r5, [pc, #28]	; (800a638 <_kill_r+0x20>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	602b      	str	r3, [r5, #0]
 800a626:	f7f6 ffe3 	bl	80015f0 <_kill>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	d102      	bne.n	800a634 <_kill_r+0x1c>
 800a62e:	682b      	ldr	r3, [r5, #0]
 800a630:	b103      	cbz	r3, 800a634 <_kill_r+0x1c>
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	bf00      	nop
 800a638:	2000033c 	.word	0x2000033c

0800a63c <_getpid_r>:
 800a63c:	f7f6 bfd0 	b.w	80015e0 <_getpid>

0800a640 <_fstat_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4d07      	ldr	r5, [pc, #28]	; (800a660 <_fstat_r+0x20>)
 800a644:	2300      	movs	r3, #0
 800a646:	4604      	mov	r4, r0
 800a648:	4608      	mov	r0, r1
 800a64a:	4611      	mov	r1, r2
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	f7f7 f82e 	bl	80016ae <_fstat>
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	d102      	bne.n	800a65c <_fstat_r+0x1c>
 800a656:	682b      	ldr	r3, [r5, #0]
 800a658:	b103      	cbz	r3, 800a65c <_fstat_r+0x1c>
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
 800a65e:	bf00      	nop
 800a660:	2000033c 	.word	0x2000033c

0800a664 <_isatty_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4d06      	ldr	r5, [pc, #24]	; (800a680 <_isatty_r+0x1c>)
 800a668:	2300      	movs	r3, #0
 800a66a:	4604      	mov	r4, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	602b      	str	r3, [r5, #0]
 800a670:	f7f7 f82d 	bl	80016ce <_isatty>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_isatty_r+0x1a>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_isatty_r+0x1a>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	2000033c 	.word	0x2000033c

0800a684 <_init>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	bf00      	nop
 800a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a68a:	bc08      	pop	{r3}
 800a68c:	469e      	mov	lr, r3
 800a68e:	4770      	bx	lr

0800a690 <_fini>:
 800a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a692:	bf00      	nop
 800a694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a696:	bc08      	pop	{r3}
 800a698:	469e      	mov	lr, r3
 800a69a:	4770      	bx	lr
