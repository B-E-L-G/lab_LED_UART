
lab_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800a788  0800a788  0001a788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad0c  0800ad0c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad0c  0800ad0c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad0c  0800ad0c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad0c  0800ad0c  0001ad0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad10  0800ad10  0001ad10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ad14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000015c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000344  20000344  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001077b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002268  00000000  00000000  00030993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00032c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d08  00000000  00000000  000339e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211c3  00000000  00000000  000346e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fd9  00000000  00000000  000558ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4a0f  00000000  00000000  00066884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b293  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051f8  00000000  00000000  0012b2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a76c 	.word	0x0800a76c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a76c 	.word	0x0800a76c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0c      	blt.n	8000d40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_ClearPendingIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	3360      	adds	r3, #96	; 0x60
 8000d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0c2      	sub	sp, #264	; 0x108
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fd95 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f8db 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 f9bb 	bl	80010d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d62:	f000 f989 	bl	8001078 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d66:	f000 f933 	bl	8000fd0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ring_init(&uart_ring, buff, sizeof(buff) / sizeof(buff[0]) ); // Initialize UART receiver ring buffer.
 8000d6a:	2220      	movs	r2, #32
 8000d6c:	495a      	ldr	r1, [pc, #360]	; (8000ed8 <main+0x188>)
 8000d6e:	485b      	ldr	r0, [pc, #364]	; (8000edc <main+0x18c>)
 8000d70:	f000 faa6 	bl	80012c0 <ring_init>
  sprintf((char*)tstring,"UART IT Enter command 'F = ' \r\n");
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4959      	ldr	r1, [pc, #356]	; (8000ee0 <main+0x190>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f005 face 	bl	800631c <siprintf>
  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fa2d 	bl	80001e4 <strlen>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	4853      	ldr	r0, [pc, #332]	; (8000ee4 <main+0x194>)
 8000d96:	f003 f9fd 	bl	8004194 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2,uart_ring.buffer,1);						 // Start UART receiver in the non blocking mode
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <main+0x18c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4619      	mov	r1, r3
 8000da2:	4850      	ldr	r0, [pc, #320]	; (8000ee4 <main+0x194>)
 8000da4:	f003 fa64 	bl	8004270 <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */
   //btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);


  if (ring_get_message(&uart_ring, rstring)){
 8000da8:	494f      	ldr	r1, [pc, #316]	; (8000ee8 <main+0x198>)
 8000daa:	484c      	ldr	r0, [pc, #304]	; (8000edc <main+0x18c>)
 8000dac:	f000 faf5 	bl	800139a <ring_get_message>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d035      	beq.n	8000e22 <main+0xd2>
	  sscanf((char*)rstring,"%4[F = ]" ,string);
 8000db6:	463b      	mov	r3, r7
 8000db8:	461a      	mov	r2, r3
 8000dba:	494c      	ldr	r1, [pc, #304]	; (8000eec <main+0x19c>)
 8000dbc:	484a      	ldr	r0, [pc, #296]	; (8000ee8 <main+0x198>)
 8000dbe:	f005 facd 	bl	800635c <siscanf>
	  sscanf((char*)&rstring[strlen(string)],"%f" ,&Freq);
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fa0d 	bl	80001e4 <strlen>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a46      	ldr	r2, [pc, #280]	; (8000ee8 <main+0x198>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a47      	ldr	r2, [pc, #284]	; (8000ef0 <main+0x1a0>)
 8000dd2:	4948      	ldr	r1, [pc, #288]	; (8000ef4 <main+0x1a4>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 fac1 	bl	800635c <siscanf>

	  if(!strcmp(string,"F = "))
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4946      	ldr	r1, [pc, #280]	; (8000ef8 <main+0x1a8>)
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff f9f6 	bl	80001d0 <strcmp>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d107      	bne.n	8000dfa <main+0xaa>
	  {
		  sprintf((char*)tstring,"F = %f \r\n",&Freq);
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	4a40      	ldr	r2, [pc, #256]	; (8000ef0 <main+0x1a0>)
 8000df0:	4942      	ldr	r1, [pc, #264]	; (8000efc <main+0x1ac>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f005 fa92 	bl	800631c <siprintf>
 8000df8:	e006      	b.n	8000e08 <main+0xb8>
	  }

	  else
	  {
		  // Transmit (in non blocking mode) back to the UART the last entered line and prompt for the next input
		  sprintf((char*)tstring,"Incorrect command Echo: %s\n" "Enter the correct command 'F = x.x'\r\n",rstring);
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	4a3a      	ldr	r2, [pc, #232]	; (8000ee8 <main+0x198>)
 8000e00:	493f      	ldr	r1, [pc, #252]	; (8000f00 <main+0x1b0>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fa8a 	bl	800631c <siprintf>
	  }

	  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff f9e9 	bl	80001e4 <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4831      	ldr	r0, [pc, #196]	; (8000ee4 <main+0x194>)
 8000e1e:	f003 f9b9 	bl	8004194 <HAL_UART_Transmit_IT>
//		  }
//		  HAL_UART_Transmit_IT(&huart2,tstring,strlen((char*)tstring));
//	  }


  Delay = (float)1000/Freq;//T = 1c/F ; період.
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <main+0x1a0>)
 8000e24:	ed93 7a00 	vldr	s14, [r3]
 8000e28:	eddf 6a36 	vldr	s13, [pc, #216]	; 8000f04 <main+0x1b4>
 8000e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e34:	ee17 3a90 	vmov	r3, s15
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <main+0x1b8>)
 8000e3c:	801a      	strh	r2, [r3, #0]
  //Delay = (uint16_t)delay;

  if(btn_state == 0)
 8000e3e:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <main+0x1bc>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d11e      	bne.n	8000e84 <main+0x134>
      {
        HAL_GPIO_WritePin(GPIOC, Led1_Pin, 1);//
 8000e46:	2201      	movs	r2, #1
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4831      	ldr	r0, [pc, #196]	; (8000f10 <main+0x1c0>)
 8000e4c:	f001 f8e8 	bl	8002020 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000e50:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <main+0x1b8>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fd7b 	bl	8001950 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, Led1_Pin, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	482c      	ldr	r0, [pc, #176]	; (8000f10 <main+0x1c0>)
 8000e60:	f001 f8de 	bl	8002020 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, Led2_Pin, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2102      	movs	r1, #2
 8000e68:	4829      	ldr	r0, [pc, #164]	; (8000f10 <main+0x1c0>)
 8000e6a:	f001 f8d9 	bl	8002020 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <main+0x1b8>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fd6c 	bl	8001950 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOC, Led2_Pin, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4824      	ldr	r0, [pc, #144]	; (8000f10 <main+0x1c0>)
 8000e7e:	f001 f8cf 	bl	8002020 <HAL_GPIO_WritePin>
 8000e82:	e791      	b.n	8000da8 <main+0x58>
      }
      else
      {
        HAL_GPIO_WritePin(GPIOC, Led1_Pin, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2101      	movs	r1, #1
 8000e88:	4821      	ldr	r0, [pc, #132]	; (8000f10 <main+0x1c0>)
 8000e8a:	f001 f8c9 	bl	8002020 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <main+0x1b8>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fd5c 	bl	8001950 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOC, Led2_Pin, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	481c      	ldr	r0, [pc, #112]	; (8000f10 <main+0x1c0>)
 8000e9e:	f001 f8bf 	bl	8002020 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <main+0x1b8>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fd52 	bl	8001950 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOC, Led1_Pin, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4817      	ldr	r0, [pc, #92]	; (8000f10 <main+0x1c0>)
 8000eb2:	f001 f8b5 	bl	8002020 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <main+0x1b8>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 fd48 	bl	8001950 <HAL_Delay>

        HAL_GPIO_WritePin(GPIOC, Led2_Pin, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2102      	movs	r1, #2
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <main+0x1c0>)
 8000ec6:	f001 f8ab 	bl	8002020 <HAL_GPIO_WritePin>
        HAL_Delay(Delay);
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <main+0x1b8>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fd3e 	bl	8001950 <HAL_Delay>
  if (ring_get_message(&uart_ring, rstring)){
 8000ed4:	e768      	b.n	8000da8 <main+0x58>
 8000ed6:	bf00      	nop
 8000ed8:	200002d8 	.word	0x200002d8
 8000edc:	200002f8 	.word	0x200002f8
 8000ee0:	0800a788 	.word	0x0800a788
 8000ee4:	20000250 	.word	0x20000250
 8000ee8:	20000308 	.word	0x20000308
 8000eec:	0800a7a8 	.word	0x0800a7a8
 8000ef0:	20000004 	.word	0x20000004
 8000ef4:	0800a7b4 	.word	0x0800a7b4
 8000ef8:	0800a7b8 	.word	0x0800a7b8
 8000efc:	0800a7c0 	.word	0x0800a7c0
 8000f00:	0800a7cc 	.word	0x0800a7cc
 8000f04:	447a0000 	.word	0x447a0000
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	200002d4 	.word	0x200002d4
 8000f10:	48000800 	.word	0x48000800

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b096      	sub	sp, #88	; 0x58
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f1e:	2228      	movs	r2, #40	; 0x28
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 fb72 	bl	800560c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]
 8000f46:	615a      	str	r2, [r3, #20]
 8000f48:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f4e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000f66:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000f6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 f885 	bl	8002080 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000f7c:	f000 fa6b 	bl	8001456 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 f8ad 	bl	80030fc <HAL_RCC_ClockConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fa8:	f000 fa55 	bl	8001456 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fad5 	bl	8003568 <HAL_RCCEx_PeriphCLKConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fc4:	f000 fa47 	bl	8001456 <Error_Handler>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3758      	adds	r7, #88	; 0x58
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <MX_TIM1_Init+0xa0>)
 8000ff0:	4a20      	ldr	r2, [pc, #128]	; (8001074 <MX_TIM1_Init+0xa4>)
 8000ff2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 320-1;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_TIM1_Init+0xa0>)
 8000ff6:	f240 123f 	movw	r2, #319	; 0x13f
 8000ffa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_TIM1_Init+0xa0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_TIM1_Init+0xa0>)
 8001004:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001008:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_TIM1_Init+0xa0>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_TIM1_Init+0xa0>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_TIM1_Init+0xa0>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <MX_TIM1_Init+0xa0>)
 800101e:	f002 fbd9 	bl	80037d4 <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001028:	f000 fa15 	bl	8001456 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_TIM1_Init+0xa0>)
 800103a:	f002 fdcd 	bl	8003bd8 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001044:	f000 fa07 	bl	8001456 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_TIM1_Init+0xa0>)
 800105a:	f002 ffc1 	bl	8003fe0 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001064:	f000 f9f7 	bl	8001456 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000204 	.word	0x20000204
 8001074:	40012c00 	.word	0x40012c00

08001078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <MX_USART2_UART_Init+0x5c>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART2_UART_Init+0x58>)
 80010bc:	f003 f81c 	bl	80040f8 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f000 f9c6 	bl	8001456 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000250 	.word	0x20000250
 80010d4:	40004400 	.word	0x40004400

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <MX_GPIO_Init+0xb8>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <MX_GPIO_Init+0xb8>)
 80010f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <MX_GPIO_Init+0xb8>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a21      	ldr	r2, [pc, #132]	; (8001190 <MX_GPIO_Init+0xb8>)
 800110c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_GPIO_Init+0xb8>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2103      	movs	r1, #3
 800113a:	4816      	ldr	r0, [pc, #88]	; (8001194 <MX_GPIO_Init+0xbc>)
 800113c:	f000 ff70 	bl	8002020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001146:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4619      	mov	r1, r3
 8001156:	480f      	ldr	r0, [pc, #60]	; (8001194 <MX_GPIO_Init+0xbc>)
 8001158:	f000 fdd8 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led1_Pin Led2_Pin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin;
 800115c:	2303      	movs	r3, #3
 800115e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	4808      	ldr	r0, [pc, #32]	; (8001194 <MX_GPIO_Init+0xbc>)
 8001174:	f000 fdca 	bl	8001d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2028      	movs	r0, #40	; 0x28
 800117e:	f000 fd0a 	bl	8001b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001182:	2028      	movs	r0, #40	; 0x28
 8001184:	f000 fd23 	bl	8001bce <HAL_NVIC_EnableIRQ>

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000
 8001194:	48000800 	.word	0x48000800

08001198 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a8:	d105      	bne.n	80011b6 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // сразу же отключаем прерывания на этом пине
 80011aa:	2028      	movs	r0, #40	; 0x28
 80011ac:	f000 fd1d 	bl	8001bea <HAL_NVIC_DisableIRQ>
		// либо выполняем какое-то действие прямо тут, либо поднимаем флажок
		HAL_TIM_Base_Start_IT(&htim1); // запускаем таймер
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80011b2:	f002 fb67 	bl	8003884 <HAL_TIM_Base_Start_IT>
	}
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000204 	.word	0x20000204

080011c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a13      	ldr	r2, [pc, #76]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d11f      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		HAL_TIM_Base_Stop_IT(&htim1); // останавливаем таймер
 80011d6:	4813      	ldr	r0, [pc, #76]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011d8:	f002 fbb0 	bl	800393c <HAL_TIM_Base_Stop_IT>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);  // очищаем бит EXTI_PR (бит прерывания)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e2:	615a      	str	r2, [r3, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 80011e4:	2028      	movs	r0, #40	; 0x28
 80011e6:	f7ff fd95 	bl	8000d14 <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 80011ea:	2028      	movs	r0, #40	; 0x28
 80011ec:	f000 fcef 	bl	8001bce <HAL_NVIC_EnableIRQ>
		//btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 80011f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80011f6:	f000 fefb 	bl	8001ff0 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d10a      	bne.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if(btn_state == 0)
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d103      	bne.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				btn_state = 1;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
		}
		/*if((btn_prev == 0) && (btn_cur != 0))
		{
		}*/
	}
}
 800120e:	e002      	b.n	8001216 <HAL_TIM_PeriodElapsedCallback+0x52>
			else btn_state = 0;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40012c00 	.word	0x40012c00
 8001224:	20000204 	.word	0x20000204
 8001228:	40010400 	.word	0x40010400
 800122c:	48000800 	.word	0x48000800
 8001230:	200002d4 	.word	0x200002d4

08001234 <HAL_UART_RxCpltCallback>:
//////////////////////////////////////////////////////////UART_IT////////////////////////////////////////////////////////////////
// UART receive interrupt callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	// Check that interrupt caused by UART1
	if (huart == &huart2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <HAL_UART_RxCpltCallback+0x84>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d134      	bne.n	80012ae <HAL_UART_RxCpltCallback+0x7a>
		{
			// Put new character from the UART receiver data register (RDR) to the ring buffer
			ring_putchar(&uart_ring,huart->Instance->RDR);              //питання RDR чи DR?
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800124a:	b29b      	uxth	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4619      	mov	r1, r3
 8001250:	481a      	ldr	r0, [pc, #104]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 8001252:	f000 f863 	bl	800131c <ring_putchar>
			// Set the overrun flag if the message is longer than ring buffer can hold
			if (uart_ring.end == uart_ring.start) uart_ring.flag.BufferOverrun = 1;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 8001258:	88da      	ldrh	r2, [r3, #6]
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 800125c:	889b      	ldrh	r3, [r3, #4]
 800125e:	429a      	cmp	r2, r3
 8001260:	d104      	bne.n	800126c <HAL_UART_RxCpltCallback+0x38>
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 8001264:	7b13      	ldrb	r3, [r2, #12]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	7313      	strb	r3, [r2, #12]
			// Set the message ready flag if the end of line character has been received
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 8001272:	88db      	ldrh	r3, [r3, #6]
 8001274:	3b01      	subs	r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b0d      	cmp	r3, #13
 800127c:	d008      	beq.n	8001290 <HAL_UART_RxCpltCallback+0x5c>
					(uart_ring.buffer[uart_ring.end -1] == '\n'))
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 8001284:	88db      	ldrh	r3, [r3, #6]
 8001286:	3b01      	subs	r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	781b      	ldrb	r3, [r3, #0]
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 800128c:	2b0a      	cmp	r3, #10
 800128e:	d104      	bne.n	800129a <HAL_UART_RxCpltCallback+0x66>
				uart_ring.flag.MessageReady = 1;
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 8001292:	7b13      	ldrb	r3, [r2, #12]
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	7313      	strb	r3, [r2, #12]
			// Receive the next character from UART in non blocking mode
			HAL_UART_Receive_IT(&huart2,&uart_ring.buffer[uart_ring.end],1);
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_UART_RxCpltCallback+0x88>)
 80012a0:	88d2      	ldrh	r2, [r2, #6]
 80012a2:	4413      	add	r3, r2
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <HAL_UART_RxCpltCallback+0x84>)
 80012aa:	f002 ffe1 	bl	8004270 <HAL_UART_Receive_IT>
		}
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000250 	.word	0x20000250
 80012bc:	200002f8 	.word	0x200002f8

080012c0 <ring_init>:
// Initializes the ring buffer
void ring_init(uart_ring_buff_t * uart_ring, uint8_t * buff, uint16_t buff_size)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	4613      	mov	r3, r2
 80012cc:	80fb      	strh	r3, [r7, #6]
	uart_ring->buffer = buff;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	601a      	str	r2, [r3, #0]
	uart_ring->size = buff_size;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	811a      	strh	r2, [r3, #8]
	ring_clear(uart_ring);
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f804 	bl	80012e8 <ring_clear>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <ring_clear>:
// Clears the ring buffer
void ring_clear(uart_ring_buff_t * uart_ring)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	uart_ring->start = 0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	809a      	strh	r2, [r3, #4]
	uart_ring->end = 0;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	80da      	strh	r2, [r3, #6]
	uart_ring->flag.BufferOverrun = 0;
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	7b13      	ldrb	r3, [r2, #12]
 8001300:	f36f 0341 	bfc	r3, #1, #1
 8001304:	7313      	strb	r3, [r2, #12]
	uart_ring->flag.MessageReady = 0;
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	7b13      	ldrb	r3, [r2, #12]
 800130a:	f36f 0300 	bfc	r3, #0, #1
 800130e:	7313      	strb	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <ring_putchar>:
// Puts a new character to the ring buffer
void ring_putchar(uart_ring_buff_t * uart_ring, uint8_t ch)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
	uart_ring->buffer[uart_ring->end++] = ch;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	88db      	ldrh	r3, [r3, #6]
 8001330:	1c59      	adds	r1, r3, #1
 8001332:	b288      	uxth	r0, r1
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	80c8      	strh	r0, [r1, #6]
 8001338:	4413      	add	r3, r2
 800133a:	78fa      	ldrb	r2, [r7, #3]
 800133c:	701a      	strb	r2, [r3, #0]
	if (uart_ring->end >= uart_ring->size) uart_ring->end = 0;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	88da      	ldrh	r2, [r3, #6]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	891b      	ldrh	r3, [r3, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d302      	bcc.n	8001350 <ring_putchar+0x34>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	80da      	strh	r2, [r3, #6]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <ring_getchar>:
// Gets one character from the ring buffer
uint8_t ring_getchar(uart_ring_buff_t * uart_ring)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	uint8_t ch = uart_ring->buffer[uart_ring->start++];
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	1c59      	adds	r1, r3, #1
 800136e:	b288      	uxth	r0, r1
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	8088      	strh	r0, [r1, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	73fb      	strb	r3, [r7, #15]
	if (uart_ring->start >= uart_ring->size) uart_ring->start = 0;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	889a      	ldrh	r2, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	891b      	ldrh	r3, [r3, #8]
 8001382:	429a      	cmp	r2, r3
 8001384:	d302      	bcc.n	800138c <ring_getchar+0x30>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	809a      	strh	r2, [r3, #4]
	return ch;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <ring_get_message>:
// Reads full message from the ring buffer and clears appropriate flags
uint8_t ring_get_message(uart_ring_buff_t * uart_ring, uint8_t * string)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
	uint16_t char_count = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	81fb      	strh	r3, [r7, #14]
	// Check if the message has been received
	if (uart_ring->flag.MessageReady)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7b1b      	ldrb	r3, [r3, #12]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d049      	beq.n	800144a <ring_get_message+0xb0>
		{
			if (uart_ring->flag.BufferOverrun)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7b1b      	ldrb	r3, [r3, #12]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d016      	beq.n	80013f2 <ring_get_message+0x58>
				{
					uart_ring->start = uart_ring->end;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	88da      	ldrh	r2, [r3, #6]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	809a      	strh	r2, [r3, #4]
					uart_ring->flag.BufferOverrun = 0;
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	7b13      	ldrb	r3, [r2, #12]
 80013d0:	f36f 0341 	bfc	r3, #1, #1
 80013d4:	7313      	strb	r3, [r2, #12]
				}
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 80013d6:	e00c      	b.n	80013f2 <ring_get_message+0x58>
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
						 (uart_ring->size != char_count - 1))
				{
					*string =  ring_getchar(uart_ring);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ffbf 	bl	800135c <ring_getchar>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	701a      	strb	r2, [r3, #0]
					string++;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	603b      	str	r3, [r7, #0]
					char_count++;
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	3301      	adds	r3, #1
 80013f0:	81fb      	strh	r3, [r7, #14]
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	8892      	ldrh	r2, [r2, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b0d      	cmp	r3, #13
 8001400:	d00e      	beq.n	8001420 <ring_get_message+0x86>
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	8892      	ldrh	r2, [r2, #4]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 800140e:	2b0a      	cmp	r3, #10
 8001410:	d006      	beq.n	8001420 <ring_get_message+0x86>
						 (uart_ring->size != char_count - 1))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	891b      	ldrh	r3, [r3, #8]
 8001416:	461a      	mov	r2, r3
 8001418:	89fb      	ldrh	r3, [r7, #14]
 800141a:	3b01      	subs	r3, #1
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
 800141c:	429a      	cmp	r2, r3
 800141e:	d1db      	bne.n	80013d8 <ring_get_message+0x3e>
				}
			*string =  ring_getchar(uart_ring);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff9b 	bl	800135c <ring_getchar>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	701a      	strb	r2, [r3, #0]
			string++;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	603b      	str	r3, [r7, #0]
			char_count++;
 8001434:	89fb      	ldrh	r3, [r7, #14]
 8001436:	3301      	adds	r3, #1
 8001438:	81fb      	strh	r3, [r7, #14]
			*string = '\0';
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
			uart_ring->flag.MessageReady = 0;
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	7b13      	ldrb	r3, [r2, #12]
 8001444:	f36f 0300 	bfc	r3, #0, #1
 8001448:	7313      	strb	r3, [r2, #12]
		}
	return char_count;
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	b2db      	uxtb	r3, r3
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145a:	b672      	cpsid	i
}
 800145c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145e:	e7fe      	b.n	800145e <Error_Handler+0x8>

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_MspInit+0x44>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_MspInit+0x44>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6193      	str	r3, [r2, #24]
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_MspInit+0x44>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_MspInit+0x44>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_MspInit+0x44>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_MspInit+0x44>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001496:	2007      	movs	r0, #7
 8001498:	f000 fb72 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_TIM_Base_MspInit+0x74>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12b      	bne.n	8001512 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_TIM_Base_MspInit+0x78>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <HAL_TIM_Base_MspInit+0x78>)
 80014c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_TIM_Base_MspInit+0x78>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	2018      	movs	r0, #24
 80014d8:	f000 fb5d 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80014dc:	2018      	movs	r0, #24
 80014de:	f000 fb76 	bl	8001bce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2019      	movs	r0, #25
 80014e8:	f000 fb55 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014ec:	2019      	movs	r0, #25
 80014ee:	f000 fb6e 	bl	8001bce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	201a      	movs	r0, #26
 80014f8:	f000 fb4d 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80014fc:	201a      	movs	r0, #26
 80014fe:	f000 fb66 	bl	8001bce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	201b      	movs	r0, #27
 8001508:	f000 fb45 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800150c:	201b      	movs	r0, #27
 800150e:	f000 fb5e 	bl	8001bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40012c00 	.word	0x40012c00
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <HAL_UART_MspInit+0x8c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d130      	bne.n	80015a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_UART_MspInit+0x90>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <HAL_UART_MspInit+0x90>)
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_UART_MspInit+0x90>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_UART_MspInit+0x90>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_UART_MspInit+0x90>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	6153      	str	r3, [r2, #20]
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_UART_MspInit+0x90>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001576:	230c      	movs	r3, #12
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001586:	2307      	movs	r3, #7
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f000 fbba 	bl	8001d0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	2026      	movs	r0, #38	; 0x26
 800159e:	f000 fafa 	bl	8001b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015a2:	2026      	movs	r0, #38	; 0x26
 80015a4:	f000 fb13 	bl	8001bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40004400 	.word	0x40004400
 80015b4:	40021000 	.word	0x40021000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001604:	f000 f984 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001612:	f002 f9c2 	bl	800399a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000204 	.word	0x20000204

08001620 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001626:	f002 f9b8 	bl	800399a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000204 	.word	0x20000204

08001634 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800163a:	f002 f9ae 	bl	800399a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000204 	.word	0x20000204

08001648 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM1_CC_IRQHandler+0x10>)
 800164e:	f002 f9a4 	bl	800399a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000204 	.word	0x20000204

0800165c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <USART2_IRQHandler+0x10>)
 8001662:	f002 fe53 	bl	800430c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000250 	.word	0x20000250

08001670 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001674:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001678:	f000 fcea 	bl	8002050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	return 1;
 8001684:	2301      	movs	r3, #1
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_kill>:

int _kill(int pid, int sig)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800169a:	f003 ff8d 	bl	80055b8 <__errno>
 800169e:	4603      	mov	r3, r0
 80016a0:	2216      	movs	r2, #22
 80016a2:	601a      	str	r2, [r3, #0]
	return -1;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_exit>:

void _exit (int status)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ffe7 	bl	8001690 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016c2:	e7fe      	b.n	80016c2 <_exit+0x12>

080016c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e00a      	b.n	80016ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016d6:	f3af 8000 	nop.w
 80016da:	4601      	mov	r1, r0
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	60ba      	str	r2, [r7, #8]
 80016e2:	b2ca      	uxtb	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf0      	blt.n	80016d6 <_read+0x12>
	}

return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e009      	b.n	8001724 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf1      	blt.n	8001710 <_write+0x12>
	}
	return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_close>:

int _close(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175e:	605a      	str	r2, [r3, #4]
	return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_isatty>:

int _isatty(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
	return 1;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
	return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f003 fef2 	bl	80055b8 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20003000 	.word	0x20003000
 8001800:	00000400 	.word	0x00000400
 8001804:	2000032c 	.word	0x2000032c
 8001808:	20000348 	.word	0x20000348

0800180c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001868 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <LoopForever+0x6>)
  ldr r1, =_edata
 8001836:	490e      	ldr	r1, [pc, #56]	; (8001870 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <LoopForever+0xe>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <LoopForever+0x12>)
  ldr r4, =_ebss
 800184c:	4c0b      	ldr	r4, [pc, #44]	; (800187c <LoopForever+0x16>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800185a:	f7ff ffd7 	bl	800180c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185e:	f003 feb1 	bl	80055c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001862:	f7ff fa75 	bl	8000d50 <main>

08001866 <LoopForever>:

LoopForever:
    b LoopForever
 8001866:	e7fe      	b.n	8001866 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001868:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001874:	0800ad14 	.word	0x0800ad14
  ldr r2, =_sbss
 8001878:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800187c:	20000344 	.word	0x20000344

08001880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_2_IRQHandler>
	...

08001884 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x28>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x28>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f973 	bl	8001b80 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fdde 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000

080018b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f999 	bl	8001c06 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018ec:	f000 f953 	bl	8001b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000008 	.word	0x20000008
 8001908:	20000010 	.word	0x20000010
 800190c:	2000000c 	.word	0x2000000c

08001910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000010 	.word	0x20000010
 8001934:	20000330 	.word	0x20000330

08001938 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;  
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000330 	.word	0x20000330

08001950 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000010 	.word	0x20000010

08001998 <__NVIC_SetPriorityGrouping>:
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_DisableIRQ>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db12      	blt.n	8001a70 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	490a      	ldr	r1, [pc, #40]	; (8001a7c <__NVIC_DisableIRQ+0x44>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	3320      	adds	r3, #32
 8001a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a64:	f3bf 8f4f 	dsb	sy
}
 8001a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a6a:	f3bf 8f6f 	isb	sy
}
 8001a6e:	bf00      	nop
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4c:	d301      	bcc.n	8001b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00f      	b.n	8001b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <SysTick_Config+0x40>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b60:	f7ff ff8e 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <SysTick_Config+0x40>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <SysTick_Config+0x40>)
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	e000e010 	.word	0xe000e010

08001b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff05 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba8:	f7ff ff1a 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff5d 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff0d 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff1d 	bl	8001a38 <__NVIC_DisableIRQ>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ff94 	bl	8001b3c <SysTick_Config>
 8001c14:	4603      	mov	r3, r0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d008      	beq.n	8001c42 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2204      	movs	r2, #4
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e020      	b.n	8001c84 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 020e 	bic.w	r2, r2, #14
 8001c50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d005      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e027      	b.n	8001d02 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 020e 	bic.w	r2, r2, #14
 8001cc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
    } 
  }
  return status;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1a:	e14e      	b.n	8001fba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8140 	beq.w	8001fb4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d005      	beq.n	8001d4c <HAL_GPIO_Init+0x40>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d130      	bne.n	8001dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d82:	2201      	movs	r2, #1
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	f003 0201 	and.w	r2, r3, #1
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d017      	beq.n	8001dea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d123      	bne.n	8001e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	08da      	lsrs	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3208      	adds	r2, #8
 8001e38:	6939      	ldr	r1, [r7, #16]
 8001e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	2203      	movs	r2, #3
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0203 	and.w	r2, r3, #3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 809a 	beq.w	8001fb4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e80:	4b55      	ldr	r3, [pc, #340]	; (8001fd8 <HAL_GPIO_Init+0x2cc>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a54      	ldr	r2, [pc, #336]	; (8001fd8 <HAL_GPIO_Init+0x2cc>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b52      	ldr	r3, [pc, #328]	; (8001fd8 <HAL_GPIO_Init+0x2cc>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e98:	4a50      	ldr	r2, [pc, #320]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ec2:	d013      	beq.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a46      	ldr	r2, [pc, #280]	; (8001fe0 <HAL_GPIO_Init+0x2d4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_GPIO_Init+0x1dc>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a45      	ldr	r2, [pc, #276]	; (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_GPIO_Init+0x1d8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a44      	ldr	r2, [pc, #272]	; (8001fe8 <HAL_GPIO_Init+0x2dc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_GPIO_Init+0x1d4>
 8001edc:	2303      	movs	r3, #3
 8001ede:	e006      	b.n	8001eee <HAL_GPIO_Init+0x1e2>
 8001ee0:	2305      	movs	r3, #5
 8001ee2:	e004      	b.n	8001eee <HAL_GPIO_Init+0x1e2>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e002      	b.n	8001eee <HAL_GPIO_Init+0x1e2>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_GPIO_Init+0x1e2>
 8001eec:	2300      	movs	r3, #0
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	f002 0203 	and.w	r2, r2, #3
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	4093      	lsls	r3, r2
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001efe:	4937      	ldr	r1, [pc, #220]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_GPIO_Init+0x2e0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f30:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <HAL_GPIO_Init+0x2e0>)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_GPIO_Init+0x2e0>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f5a:	4a24      	ldr	r2, [pc, #144]	; (8001fec <HAL_GPIO_Init+0x2e0>)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_GPIO_Init+0x2e0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_GPIO_Init+0x2e0>)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_GPIO_Init+0x2e0>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fae:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <HAL_GPIO_Init+0x2e0>)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f47f aea9 	bne.w	8001d1c <HAL_GPIO_Init+0x10>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bf00      	nop
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	48000400 	.word	0x48000400
 8001fe4:	48000800 	.word	0x48000800
 8001fe8:	48000c00 	.word	0x48000c00
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	887b      	ldrh	r3, [r7, #2]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e001      	b.n	8002012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
 800202c:	4613      	mov	r3, r2
 800202e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002030:	787b      	ldrb	r3, [r7, #1]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800203c:	e002      	b.n	8002044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f892 	bl	8001198 <HAL_GPIO_EXTI_Callback>
  }
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002086:	af00      	add	r7, sp, #0
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002090:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f001 b823 	b.w	80030ec <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 817d 	beq.w	80023b6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020bc:	4bbc      	ldr	r3, [pc, #752]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d00c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c8:	4bb9      	ldr	r3, [pc, #740]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d15c      	bne.n	800218e <HAL_RCC_OscConfig+0x10e>
 80020d4:	4bb6      	ldr	r3, [pc, #728]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e0:	d155      	bne.n	800218e <HAL_RCC_OscConfig+0x10e>
 80020e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020f6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_RCC_OscConfig+0x94>
 800210e:	4ba8      	ldr	r3, [pc, #672]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	e015      	b.n	8002140 <HAL_RCC_OscConfig+0xc0>
 8002114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002118:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002130:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800213c:	4b9c      	ldr	r3, [pc, #624]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002144:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002148:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002154:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002158:	fab2 f282 	clz	r2, r2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	f042 0220 	orr.w	r2, r2, #32
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	f002 021f 	and.w	r2, r2, #31
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f202 	lsl.w	r2, r1, r2
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 811f 	beq.w	80023b4 <HAL_RCC_OscConfig+0x334>
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 8116 	bne.w	80023b4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	f000 bfaf 	b.w	80030ec <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x12e>
 80021a0:	4b83      	ldr	r3, [pc, #524]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a82      	ldr	r2, [pc, #520]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	e036      	b.n	800221c <HAL_RCC_OscConfig+0x19c>
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x158>
 80021be:	4b7c      	ldr	r3, [pc, #496]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7b      	ldr	r2, [pc, #492]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a78      	ldr	r2, [pc, #480]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e021      	b.n	800221c <HAL_RCC_OscConfig+0x19c>
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x184>
 80021ea:	4b71      	ldr	r3, [pc, #452]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a70      	ldr	r2, [pc, #448]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b6e      	ldr	r3, [pc, #440]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a6d      	ldr	r2, [pc, #436]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0x19c>
 8002204:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a69      	ldr	r2, [pc, #420]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	4b67      	ldr	r3, [pc, #412]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a66      	ldr	r2, [pc, #408]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 8002216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800221c:	4b64      	ldr	r3, [pc, #400]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f023 020f 	bic.w	r2, r3, #15
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	495f      	ldr	r1, [pc, #380]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 8002232:	4313      	orrs	r3, r2
 8002234:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d059      	beq.n	80022fa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7ff fb77 	bl	8001938 <HAL_GetTick>
 800224a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff fb72 	bl	8001938 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d902      	bls.n	8002266 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	f000 bf43 	b.w	80030ec <HAL_RCC_OscConfig+0x106c>
 8002266:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800226a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800227a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d102      	bne.n	8002298 <HAL_RCC_OscConfig+0x218>
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	e015      	b.n	80022c4 <HAL_RCC_OscConfig+0x244>
 8002298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80022b4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80022c0:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80022cc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80022d0:	fa92 f2a2 	rbit	r2, r2
 80022d4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80022d8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f042 0220 	orr.w	r2, r2, #32
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f002 021f 	and.w	r2, r2, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f202 	lsl.w	r2, r1, r2
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ab      	beq.n	8002250 <HAL_RCC_OscConfig+0x1d0>
 80022f8:	e05d      	b.n	80023b6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff fb1d 	bl	8001938 <HAL_GetTick>
 80022fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fb18 	bl	8001938 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	; 0x64
 8002312:	d902      	bls.n	800231a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	f000 bee9 	b.w	80030ec <HAL_RCC_OscConfig+0x106c>
 800231a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800232e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <HAL_RCC_OscConfig+0x2cc>
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	e015      	b.n	8002378 <HAL_RCC_OscConfig+0x2f8>
 800234c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002350:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002364:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002368:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_RCC_OscConfig+0x330>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800237c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002380:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002384:	fa92 f2a2 	rbit	r2, r2
 8002388:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800238c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002390:	fab2 f282 	clz	r2, r2
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f042 0220 	orr.w	r2, r2, #32
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f002 021f 	and.w	r2, r2, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ab      	bne.n	8002304 <HAL_RCC_OscConfig+0x284>
 80023ac:	e003      	b.n	80023b6 <HAL_RCC_OscConfig+0x336>
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 817d 	beq.w	80026c6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80023cc:	4ba6      	ldr	r3, [pc, #664]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80023d8:	4ba3      	ldr	r3, [pc, #652]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d172      	bne.n	80024ca <HAL_RCC_OscConfig+0x44a>
 80023e4:	4ba0      	ldr	r3, [pc, #640]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d16c      	bne.n	80024ca <HAL_RCC_OscConfig+0x44a>
 80023f0:	2302      	movs	r3, #2
 80023f2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002402:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d102      	bne.n	8002420 <HAL_RCC_OscConfig+0x3a0>
 800241a:	4b93      	ldr	r3, [pc, #588]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	e013      	b.n	8002448 <HAL_RCC_OscConfig+0x3c8>
 8002420:	2302      	movs	r3, #2
 8002422:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002432:	2302      	movs	r3, #2
 8002434:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002438:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002444:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2202      	movs	r2, #2
 800244a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800244e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002452:	fa92 f2a2 	rbit	r2, r2
 8002456:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800245a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800245e:	fab2 f282 	clz	r2, r2
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f042 0220 	orr.w	r2, r2, #32
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f002 021f 	and.w	r2, r2, #31
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f202 	lsl.w	r2, r1, r2
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCC_OscConfig+0x410>
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d002      	beq.n	8002490 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	f000 be2e 	b.w	80030ec <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b75      	ldr	r3, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	21f8      	movs	r1, #248	; 0xf8
 80024a6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024ae:	fa91 f1a1 	rbit	r1, r1
 80024b2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80024b6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80024ba:	fab1 f181 	clz	r1, r1
 80024be:	b2c9      	uxtb	r1, r1
 80024c0:	408b      	lsls	r3, r1
 80024c2:	4969      	ldr	r1, [pc, #420]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c8:	e0fd      	b.n	80026c6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8088 	beq.w	80025ec <HAL_RCC_OscConfig+0x56c>
 80024dc:	2301      	movs	r3, #1
 80024de:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80024ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	461a      	mov	r2, r3
 8002504:	2301      	movs	r3, #1
 8002506:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff fa16 	bl	8001938 <HAL_GetTick>
 800250c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002512:	f7ff fa11 	bl	8001938 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d902      	bls.n	8002528 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	f000 bde2 	b.w	80030ec <HAL_RCC_OscConfig+0x106c>
 8002528:	2302      	movs	r3, #2
 800252a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800253a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_RCC_OscConfig+0x4d8>
 8002552:	4b45      	ldr	r3, [pc, #276]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	e013      	b.n	8002580 <HAL_RCC_OscConfig+0x500>
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800256a:	2302      	movs	r3, #2
 800256c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002570:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800257c:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	2202      	movs	r2, #2
 8002582:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002586:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800258a:	fa92 f2a2 	rbit	r2, r2
 800258e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002592:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002596:	fab2 f282 	clz	r2, r2
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f002 021f 	and.w	r2, r2, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0af      	beq.n	8002512 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	21f8      	movs	r1, #248	; 0xf8
 80025c8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80025d0:	fa91 f1a1 	rbit	r1, r1
 80025d4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80025d8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80025dc:	fab1 f181 	clz	r1, r1
 80025e0:	b2c9      	uxtb	r1, r1
 80025e2:	408b      	lsls	r3, r1
 80025e4:	4920      	ldr	r1, [pc, #128]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
 80025ea:	e06c      	b.n	80026c6 <HAL_RCC_OscConfig+0x646>
 80025ec:	2301      	movs	r3, #1
 80025ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80025fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800260c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	461a      	mov	r2, r3
 8002614:	2300      	movs	r3, #0
 8002616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff f98e 	bl	8001938 <HAL_GetTick>
 800261c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002622:	f7ff f989 	bl	8001938 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d902      	bls.n	8002638 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	f000 bd5a 	b.w	80030ec <HAL_RCC_OscConfig+0x106c>
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800264a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d104      	bne.n	800266c <HAL_RCC_OscConfig+0x5ec>
 8002662:	4b01      	ldr	r3, [pc, #4]	; (8002668 <HAL_RCC_OscConfig+0x5e8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	e015      	b.n	8002694 <HAL_RCC_OscConfig+0x614>
 8002668:	40021000 	.word	0x40021000
 800266c:	2302      	movs	r3, #2
 800266e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800267e:	2302      	movs	r3, #2
 8002680:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002684:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002690:	4bc8      	ldr	r3, [pc, #800]	; (80029b4 <HAL_RCC_OscConfig+0x934>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	2202      	movs	r2, #2
 8002696:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800269a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800269e:	fa92 f2a2 	rbit	r2, r2
 80026a2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80026a6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80026aa:	fab2 f282 	clz	r2, r2
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	f042 0220 	orr.w	r2, r2, #32
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	f002 021f 	and.w	r2, r2, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f202 	lsl.w	r2, r1, r2
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ad      	bne.n	8002622 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8110 	beq.w	80028fc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d079      	beq.n	80027e0 <HAL_RCC_OscConfig+0x760>
 80026ec:	2301      	movs	r3, #1
 80026ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80026fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	4bab      	ldr	r3, [pc, #684]	; (80029b8 <HAL_RCC_OscConfig+0x938>)
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	461a      	mov	r2, r3
 8002712:	2301      	movs	r3, #1
 8002714:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002716:	f7ff f90f 	bl	8001938 <HAL_GetTick>
 800271a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002720:	f7ff f90a 	bl	8001938 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d902      	bls.n	8002736 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	f000 bcdb 	b.w	80030ec <HAL_RCC_OscConfig+0x106c>
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002740:	fa93 f3a3 	rbit	r3, r3
 8002744:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	fa93 f2a3 	rbit	r2, r3
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002774:	2202      	movs	r2, #2
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fa93 f2a3 	rbit	r2, r3
 8002786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800278e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002790:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <HAL_RCC_OscConfig+0x934>)
 8002792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800279c:	2102      	movs	r1, #2
 800279e:	6019      	str	r1, [r3, #0]
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	fa93 f1a3 	rbit	r1, r3
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027b6:	6019      	str	r1, [r3, #0]
  return result;
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0a0      	beq.n	8002720 <HAL_RCC_OscConfig+0x6a0>
 80027de:	e08d      	b.n	80028fc <HAL_RCC_OscConfig+0x87c>
 80027e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	fa93 f2a3 	rbit	r2, r3
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002802:	601a      	str	r2, [r3, #0]
  return result;
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800280c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x938>)
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	461a      	mov	r2, r3
 800281e:	2300      	movs	r3, #0
 8002820:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7ff f889 	bl	8001938 <HAL_GetTick>
 8002826:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7ff f884 	bl	8001938 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d902      	bls.n	8002842 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	f000 bc55 	b.w	80030ec <HAL_RCC_OscConfig+0x106c>
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800284a:	2202      	movs	r2, #2
 800284c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800286e:	2202      	movs	r2, #2
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	fa93 f2a3 	rbit	r2, r3
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002892:	2202      	movs	r2, #2
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	fa93 f2a3 	rbit	r2, r3
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ae:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <HAL_RCC_OscConfig+0x934>)
 80028b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028ba:	2102      	movs	r1, #2
 80028bc:	6019      	str	r1, [r3, #0]
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f1a3 	rbit	r1, r3
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028d4:	6019      	str	r1, [r3, #0]
  return result;
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d197      	bne.n	800282c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 81a1 	beq.w	8002c54 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002918:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <HAL_RCC_OscConfig+0x934>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d116      	bne.n	8002952 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_RCC_OscConfig+0x934>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <HAL_RCC_OscConfig+0x934>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	61d3      	str	r3, [r2, #28]
 8002930:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCC_OscConfig+0x934>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800294a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800294c:	2301      	movs	r3, #1
 800294e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCC_OscConfig+0x93c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d11a      	bne.n	8002994 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x93c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a16      	ldr	r2, [pc, #88]	; (80029bc <HAL_RCC_OscConfig+0x93c>)
 8002964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002968:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296a:	f7fe ffe5 	bl	8001938 <HAL_GetTick>
 800296e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	e009      	b.n	8002988 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002974:	f7fe ffe0 	bl	8001938 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b64      	cmp	r3, #100	; 0x64
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e3b1      	b.n	80030ec <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_RCC_OscConfig+0x93c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ef      	beq.n	8002974 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d10d      	bne.n	80029c0 <HAL_RCC_OscConfig+0x940>
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_RCC_OscConfig+0x934>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a02      	ldr	r2, [pc, #8]	; (80029b4 <HAL_RCC_OscConfig+0x934>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6213      	str	r3, [r2, #32]
 80029b0:	e03c      	b.n	8002a2c <HAL_RCC_OscConfig+0x9ac>
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	10908120 	.word	0x10908120
 80029bc:	40007000 	.word	0x40007000
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10c      	bne.n	80029ea <HAL_RCC_OscConfig+0x96a>
 80029d0:	4bc1      	ldr	r3, [pc, #772]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4ac0      	ldr	r2, [pc, #768]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6213      	str	r3, [r2, #32]
 80029dc:	4bbe      	ldr	r3, [pc, #760]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4abd      	ldr	r2, [pc, #756]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	6213      	str	r3, [r2, #32]
 80029e8:	e020      	b.n	8002a2c <HAL_RCC_OscConfig+0x9ac>
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x994>
 80029fa:	4bb7      	ldr	r3, [pc, #732]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4ab6      	ldr	r2, [pc, #728]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	4bb4      	ldr	r3, [pc, #720]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4ab3      	ldr	r2, [pc, #716]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	e00b      	b.n	8002a2c <HAL_RCC_OscConfig+0x9ac>
 8002a14:	4bb0      	ldr	r3, [pc, #704]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4aaf      	ldr	r2, [pc, #700]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	6213      	str	r3, [r2, #32]
 8002a20:	4bad      	ldr	r3, [pc, #692]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4aac      	ldr	r2, [pc, #688]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002a26:	f023 0304 	bic.w	r3, r3, #4
 8002a2a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8081 	beq.w	8002b40 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe ff7b 	bl	8001938 <HAL_GetTick>
 8002a42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe ff76 	bl	8001938 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e345      	b.n	80030ec <HAL_RCC_OscConfig+0x106c>
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a68:	2202      	movs	r2, #2
 8002a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	fa93 f2a3 	rbit	r2, r3
 8002a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002aa6:	601a      	str	r2, [r3, #0]
  return result;
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ab0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_OscConfig+0xa4c>
 8002ac6:	4b84      	ldr	r3, [pc, #528]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	e013      	b.n	8002af4 <HAL_RCC_OscConfig+0xa74>
 8002acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fa93 f2a3 	rbit	r2, r3
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	4b79      	ldr	r3, [pc, #484]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002af8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002afc:	2102      	movs	r1, #2
 8002afe:	6011      	str	r1, [r2, #0]
 8002b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	fa92 f1a2 	rbit	r1, r2
 8002b0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b16:	6011      	str	r1, [r2, #0]
  return result;
 8002b18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b1c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	fab2 f282 	clz	r2, r2
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	f002 021f 	and.w	r2, r2, #31
 8002b32:	2101      	movs	r1, #1
 8002b34:	fa01 f202 	lsl.w	r2, r1, r2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d084      	beq.n	8002a48 <HAL_RCC_OscConfig+0x9c8>
 8002b3e:	e07f      	b.n	8002c40 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7fe fefa 	bl	8001938 <HAL_GetTick>
 8002b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b48:	e00b      	b.n	8002b62 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fef5 	bl	8001938 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e2c4      	b.n	80030ec <HAL_RCC_OscConfig+0x106c>
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	fa93 f2a3 	rbit	r2, r3
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b8e:	2202      	movs	r2, #2
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ba8:	601a      	str	r2, [r3, #0]
  return result;
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bb2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_OscConfig+0xb4e>
 8002bc8:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	e013      	b.n	8002bf6 <HAL_RCC_OscConfig+0xb76>
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	fa93 f2a3 	rbit	r2, r3
 8002be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bfa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002bfe:	2102      	movs	r1, #2
 8002c00:	6011      	str	r1, [r2, #0]
 8002c02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	fa92 f1a2 	rbit	r1, r2
 8002c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c18:	6011      	str	r1, [r2, #0]
  return result;
 8002c1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c1e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	fab2 f282 	clz	r2, r2
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f002 021f 	and.w	r2, r2, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d184      	bne.n	8002b4a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c40:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c48:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a22      	ldr	r2, [pc, #136]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c52:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8242 	beq.w	80030ea <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <HAL_RCC_OscConfig+0xc58>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	f000 8213 	beq.w	800309a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	f040 8162 	bne.w	8002f4a <HAL_RCC_OscConfig+0xeca>
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	fa93 f2a3 	rbit	r2, r3
 8002ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002caa:	601a      	str	r2, [r3, #0]
  return result;
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cb4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2300      	movs	r3, #0
 8002cca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fe34 	bl	8001938 <HAL_GetTick>
 8002cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd4:	e00c      	b.n	8002cf0 <HAL_RCC_OscConfig+0xc70>
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe fe2c 	bl	8001938 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1fd      	b.n	80030ec <HAL_RCC_OscConfig+0x106c>
 8002cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f2a3 	rbit	r2, r3
 8002d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d10:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d14:	601a      	str	r2, [r3, #0]
  return result;
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_OscConfig+0xcba>
 8002d34:	4bb0      	ldr	r3, [pc, #704]	; (8002ff8 <HAL_RCC_OscConfig+0xf78>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	e027      	b.n	8002d8a <HAL_RCC_OscConfig+0xd0a>
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	fa93 f2a3 	rbit	r2, r3
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	fa93 f2a3 	rbit	r2, r3
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	4b9c      	ldr	r3, [pc, #624]	; (8002ff8 <HAL_RCC_OscConfig+0xf78>)
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d8e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d96:	6011      	str	r1, [r2, #0]
 8002d98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d9c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	fa92 f1a2 	rbit	r1, r2
 8002da6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002daa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dae:	6011      	str	r1, [r2, #0]
  return result;
 8002db0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002db4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	fab2 f282 	clz	r2, r2
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	f042 0220 	orr.w	r2, r2, #32
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f002 021f 	and.w	r2, r2, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d182      	bne.n	8002cdc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <HAL_RCC_OscConfig+0xf78>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	430b      	orrs	r3, r1
 8002df8:	497f      	ldr	r1, [pc, #508]	; (8002ff8 <HAL_RCC_OscConfig+0xf78>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e22:	601a      	str	r2, [r3, #0]
  return result;
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e2c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2301      	movs	r3, #1
 8002e42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fd78 	bl	8001938 <HAL_GetTick>
 8002e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e4c:	e009      	b.n	8002e62 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fd73 	bl	8001938 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e144      	b.n	80030ec <HAL_RCC_OscConfig+0x106c>
 8002e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e66:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f2a3 	rbit	r2, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e86:	601a      	str	r2, [r3, #0]
  return result;
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_RCC_OscConfig+0xe2c>
 8002ea6:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <HAL_RCC_OscConfig+0xf78>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	e027      	b.n	8002efc <HAL_RCC_OscConfig+0xe7c>
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	fa93 f2a3 	rbit	r2, r3
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	fa93 f2a3 	rbit	r2, r3
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <HAL_RCC_OscConfig+0xf78>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f00:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f0e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	fa92 f1a2 	rbit	r1, r2
 8002f18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f1c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f20:	6011      	str	r1, [r2, #0]
  return result;
 8002f22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f26:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f042 0220 	orr.w	r2, r2, #32
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f002 021f 	and.w	r2, r2, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d082      	beq.n	8002e4e <HAL_RCC_OscConfig+0xdce>
 8002f48:	e0cf      	b.n	80030ea <HAL_RCC_OscConfig+0x106a>
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f6e:	601a      	str	r2, [r3, #0]
  return result;
 8002f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f74:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe fcd2 	bl	8001938 <HAL_GetTick>
 8002f94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f98:	e009      	b.n	8002fae <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe fccd 	bl	8001938 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e09e      	b.n	80030ec <HAL_RCC_OscConfig+0x106c>
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002fb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fd2:	601a      	str	r2, [r3, #0]
  return result;
 8002fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002fdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d104      	bne.n	8002ffc <HAL_RCC_OscConfig+0xf7c>
 8002ff2:	4b01      	ldr	r3, [pc, #4]	; (8002ff8 <HAL_RCC_OscConfig+0xf78>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	e029      	b.n	800304c <HAL_RCC_OscConfig+0xfcc>
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003026:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800302a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f2a3 	rbit	r2, r3
 800303e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003042:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_RCC_OscConfig+0x1078>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003050:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003054:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003058:	6011      	str	r1, [r2, #0]
 800305a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800305e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	fa92 f1a2 	rbit	r1, r2
 8003068:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800306c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003070:	6011      	str	r1, [r2, #0]
  return result;
 8003072:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003076:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	fab2 f282 	clz	r2, r2
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	f042 0220 	orr.w	r2, r2, #32
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	f002 021f 	and.w	r2, r2, #31
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f202 	lsl.w	r2, r1, r2
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d180      	bne.n	8002f9a <HAL_RCC_OscConfig+0xf1a>
 8003098:	e027      	b.n	80030ea <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e01e      	b.n	80030ec <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_OscConfig+0x1078>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030b6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d10b      	bne.n	80030e6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80030ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80030d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b09e      	sub	sp, #120	; 0x78
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e162      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003114:	4b90      	ldr	r3, [pc, #576]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d910      	bls.n	8003144 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b8d      	ldr	r3, [pc, #564]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 0207 	bic.w	r2, r3, #7
 800312a:	498b      	ldr	r1, [pc, #556]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b89      	ldr	r3, [pc, #548]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e14a      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b82      	ldr	r3, [pc, #520]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	497f      	ldr	r1, [pc, #508]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80dc 	beq.w	8003328 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d13c      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xf6>
 8003178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xa6>
 800319c:	4b6f      	ldr	r3, [pc, #444]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	e00f      	b.n	80031c2 <HAL_RCC_ClockConfig+0xc6>
 80031a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	667b      	str	r3, [r7, #100]	; 0x64
 80031b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b4:	663b      	str	r3, [r7, #96]	; 0x60
 80031b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b8:	fa93 f3a3 	rbit	r3, r3
 80031bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031be:	4b67      	ldr	r3, [pc, #412]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80031c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ca:	fa92 f2a2 	rbit	r2, r2
 80031ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80031d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031d2:	fab2 f282 	clz	r2, r2
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f042 0220 	orr.w	r2, r2, #32
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	f002 021f 	and.w	r2, r2, #31
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d17b      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e0f3      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d13c      	bne.n	8003274 <HAL_RCC_ClockConfig+0x178>
 80031fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d102      	bne.n	8003224 <HAL_RCC_ClockConfig+0x128>
 800321e:	4b4f      	ldr	r3, [pc, #316]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	e00f      	b.n	8003244 <HAL_RCC_ClockConfig+0x148>
 8003224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003228:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	647b      	str	r3, [r7, #68]	; 0x44
 8003232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
 8003238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003240:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003248:	63ba      	str	r2, [r7, #56]	; 0x38
 800324a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800324c:	fa92 f2a2 	rbit	r2, r2
 8003250:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f042 0220 	orr.w	r2, r2, #32
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f002 021f 	and.w	r2, r2, #31
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d13a      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0b2      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
 8003274:	2302      	movs	r3, #2
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <HAL_RCC_ClockConfig+0x1a0>
 8003296:	4b31      	ldr	r3, [pc, #196]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	e00d      	b.n	80032b8 <HAL_RCC_ClockConfig+0x1bc>
 800329c:	2302      	movs	r3, #2
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	2302      	movs	r3, #2
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	4b29      	ldr	r3, [pc, #164]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2202      	movs	r2, #2
 80032ba:	61ba      	str	r2, [r7, #24]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	fa92 f2a2 	rbit	r2, r2
 80032c2:	617a      	str	r2, [r7, #20]
  return result;
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	fab2 f282 	clz	r2, r2
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	f042 0220 	orr.w	r2, r2, #32
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	f002 021f 	and.w	r2, r2, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f202 	lsl.w	r2, r1, r2
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e079      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e6:	4b1d      	ldr	r3, [pc, #116]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	491a      	ldr	r1, [pc, #104]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f8:	f7fe fb1e 	bl	8001938 <HAL_GetTick>
 80032fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fe fb1a 	bl	8001938 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	; 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e061      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_RCC_ClockConfig+0x260>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 020c 	and.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1eb      	bne.n	8003300 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d214      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 0207 	bic.w	r2, r3, #7
 800333e:	4906      	ldr	r1, [pc, #24]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_RCC_ClockConfig+0x25c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e040      	b.n	80033da <HAL_RCC_ClockConfig+0x2de>
 8003358:	40022000 	.word	0x40022000
 800335c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	491a      	ldr	r1, [pc, #104]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338a:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4912      	ldr	r1, [pc, #72]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800339e:	f000 f829 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80033a2:	4601      	mov	r1, r0
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <HAL_RCC_ClockConfig+0x2e8>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ac:	22f0      	movs	r2, #240	; 0xf0
 80033ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	fa92 f2a2 	rbit	r2, r2
 80033b6:	60fa      	str	r2, [r7, #12]
  return result;
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	fab2 f282 	clz	r2, r2
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	40d3      	lsrs	r3, r2
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x2ec>)
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
 80033c6:	fa21 f303 	lsr.w	r3, r1, r3
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_RCC_ClockConfig+0x2f0>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_RCC_ClockConfig+0x2f4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fa6c 	bl	80018b0 <HAL_InitTick>
  
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3778      	adds	r7, #120	; 0x78
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	0800a81c 	.word	0x0800a81c
 80033ec:	20000008 	.word	0x20000008
 80033f0:	2000000c 	.word	0x2000000c

080033f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b08b      	sub	sp, #44	; 0x2c
 80033f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d002      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x30>
 800341e:	2b08      	cmp	r3, #8
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x36>
 8003422:	e03c      	b.n	800349e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003426:	623b      	str	r3, [r7, #32]
      break;
 8003428:	e03c      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003430:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003434:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	fa92 f2a2 	rbit	r2, r2
 800343c:	607a      	str	r2, [r7, #4]
  return result;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	fab2 f282 	clz	r2, r2
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	40d3      	lsrs	r3, r2
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800344e:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	220f      	movs	r2, #15
 8003458:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	fa92 f2a2 	rbit	r2, r2
 8003460:	60fa      	str	r2, [r7, #12]
  return result;
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	fab2 f282 	clz	r2, r2
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	40d3      	lsrs	r3, r2
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800347c:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	fbb2 f2f3 	udiv	r2, r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	e004      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	623b      	str	r3, [r7, #32]
      break;
 800349c:	e002      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034a0:	623b      	str	r3, [r7, #32]
      break;
 80034a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a4:	6a3b      	ldr	r3, [r7, #32]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	372c      	adds	r7, #44	; 0x2c
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	007a1200 	.word	0x007a1200
 80034bc:	0800a834 	.word	0x0800a834
 80034c0:	0800a844 	.word	0x0800a844
 80034c4:	003d0900 	.word	0x003d0900

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000008 	.word	0x20000008

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034e6:	f7ff ffef 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034ea:	4601      	mov	r1, r0
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034f4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	fa92 f2a2 	rbit	r2, r2
 8003500:	603a      	str	r2, [r7, #0]
  return result;
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	fab2 f282 	clz	r2, r2
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	40d3      	lsrs	r3, r2
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x40>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	0800a82c 	.word	0x0800a82c

08003524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800352a:	f7ff ffcd 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 800352e:	4601      	mov	r1, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003538:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800353c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	603a      	str	r2, [r7, #0]
  return result;
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	0800a82c 	.word	0x0800a82c

08003568 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b092      	sub	sp, #72	; 0x48
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80cd 	beq.w	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358c:	4b8e      	ldr	r3, [pc, #568]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10e      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003598:	4b8b      	ldr	r3, [pc, #556]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	4a8a      	ldr	r2, [pc, #552]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a2:	61d3      	str	r3, [r2, #28]
 80035a4:	4b88      	ldr	r3, [pc, #544]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b6:	4b85      	ldr	r3, [pc, #532]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d118      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c2:	4b82      	ldr	r3, [pc, #520]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a81      	ldr	r2, [pc, #516]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7fe f9b3 	bl	8001938 <HAL_GetTick>
 80035d2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	e008      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7fe f9af 	bl	8001938 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b64      	cmp	r3, #100	; 0x64
 80035e2:	d901      	bls.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e0ea      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	4b78      	ldr	r3, [pc, #480]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035f4:	4b74      	ldr	r3, [pc, #464]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d07d      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800360e:	429a      	cmp	r2, r3
 8003610:	d076      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003612:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800361c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003620:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362c:	fab3 f383 	clz	r3, r3
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	4b66      	ldr	r3, [pc, #408]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	461a      	mov	r2, r3
 800363c:	2301      	movs	r3, #1
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003644:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800364e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	4b5d      	ldr	r3, [pc, #372]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	461a      	mov	r2, r3
 8003660:	2300      	movs	r3, #0
 8003662:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003664:	4a58      	ldr	r2, [pc, #352]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003668:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800366a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d045      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe f960 	bl	8001938 <HAL_GetTick>
 8003678:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	e00a      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fe f95c 	bl	8001938 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e095      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003692:	2302      	movs	r3, #2
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	2302      	movs	r3, #2
 80036a0:	623b      	str	r3, [r7, #32]
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	61fb      	str	r3, [r7, #28]
  return result;
 80036aa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f043 0302 	orr.w	r3, r3, #2
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d102      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80036c0:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	e007      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80036c6:	2302      	movs	r3, #2
 80036c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2202      	movs	r2, #2
 80036d8:	613a      	str	r2, [r7, #16]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	fa92 f2a2 	rbit	r2, r2
 80036e0:	60fa      	str	r2, [r7, #12]
  return result;
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	fab2 f282 	clz	r2, r2
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	f002 021f 	and.w	r2, r2, #31
 80036f4:	2101      	movs	r1, #1
 80036f6:	fa01 f202 	lsl.w	r2, r1, r2
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0bd      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003700:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	492e      	ldr	r1, [pc, #184]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	4313      	orrs	r3, r2
 8003710:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003712:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4a2a      	ldr	r2, [pc, #168]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003732:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	4922      	ldr	r1, [pc, #136]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003740:	4313      	orrs	r3, r2
 8003742:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	f023 0210 	bic.w	r2, r3, #16
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	491a      	ldr	r1, [pc, #104]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	4313      	orrs	r3, r2
 8003760:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	4913      	ldr	r1, [pc, #76]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377c:	4313      	orrs	r3, r2
 800377e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	490b      	ldr	r1, [pc, #44]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	4313      	orrs	r3, r2
 800379c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	4904      	ldr	r1, [pc, #16]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3748      	adds	r7, #72	; 0x48
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40007000 	.word	0x40007000
 80037d0:	10908100 	.word	0x10908100

080037d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e049      	b.n	800387a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fe54 	bl	80014a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f000 fad2 	bl	8003dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d001      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e040      	b.n	800391e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1c      	ldr	r2, [pc, #112]	; (800392c <HAL_TIM_Base_Start_IT+0xa8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00e      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x58>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c6:	d009      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x58>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_TIM_Base_Start_IT+0xac>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_TIM_Base_Start_IT+0x58>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a17      	ldr	r2, [pc, #92]	; (8003934 <HAL_TIM_Base_Start_IT+0xb0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d115      	bne.n	8003908 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	4b15      	ldr	r3, [pc, #84]	; (8003938 <HAL_TIM_Base_Start_IT+0xb4>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d015      	beq.n	800391a <HAL_TIM_Base_Start_IT+0x96>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d011      	beq.n	800391a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	e008      	b.n	800391a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e000      	b.n	800391c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40000400 	.word	0x40000400
 8003934:	40014000 	.word	0x40014000
 8003938:	00010007 	.word	0x00010007

0800393c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	f241 1311 	movw	r3, #4369	; 0x1111
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10f      	bne.n	8003984 <HAL_TIM_Base_Stop_IT+0x48>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	f240 4344 	movw	r3, #1092	; 0x444
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_TIM_Base_Stop_IT+0x48>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d122      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d11b      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f06f 0202 	mvn.w	r2, #2
 80039c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f9ce 	bl	8003d7e <HAL_TIM_IC_CaptureCallback>
 80039e2:	e005      	b.n	80039f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f9c0 	bl	8003d6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f9d1 	bl	8003d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d122      	bne.n	8003a4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d11b      	bne.n	8003a4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f06f 0204 	mvn.w	r2, #4
 8003a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f9a4 	bl	8003d7e <HAL_TIM_IC_CaptureCallback>
 8003a36:	e005      	b.n	8003a44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f996 	bl	8003d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f9a7 	bl	8003d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d122      	bne.n	8003a9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d11b      	bne.n	8003a9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0208 	mvn.w	r2, #8
 8003a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2204      	movs	r2, #4
 8003a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f97a 	bl	8003d7e <HAL_TIM_IC_CaptureCallback>
 8003a8a:	e005      	b.n	8003a98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f96c 	bl	8003d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f97d 	bl	8003d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d122      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d11b      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0210 	mvn.w	r2, #16
 8003ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f950 	bl	8003d7e <HAL_TIM_IC_CaptureCallback>
 8003ade:	e005      	b.n	8003aec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f942 	bl	8003d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f953 	bl	8003d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d10e      	bne.n	8003b1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f06f 0201 	mvn.w	r2, #1
 8003b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fd fb53 	bl	80011c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b80      	cmp	r3, #128	; 0x80
 8003b2a:	d10e      	bne.n	8003b4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b80      	cmp	r3, #128	; 0x80
 8003b38:	d107      	bne.n	8003b4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fac3 	bl	80040d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b58:	d10e      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	2b80      	cmp	r3, #128	; 0x80
 8003b66:	d107      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fab6 	bl	80040e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	d10e      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	d107      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f901 	bl	8003da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d10e      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d107      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0220 	mvn.w	r2, #32
 8003bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa76 	bl	80040bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e0b6      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x18a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c30:	d03e      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0xd8>
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c36:	f200 8087 	bhi.w	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	f000 8086 	beq.w	8003d4e <HAL_TIM_ConfigClockSource+0x176>
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	d87f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c48:	2b70      	cmp	r3, #112	; 0x70
 8003c4a:	d01a      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0xaa>
 8003c4c:	2b70      	cmp	r3, #112	; 0x70
 8003c4e:	d87b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c50:	2b60      	cmp	r3, #96	; 0x60
 8003c52:	d050      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0x11e>
 8003c54:	2b60      	cmp	r3, #96	; 0x60
 8003c56:	d877      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c58:	2b50      	cmp	r3, #80	; 0x50
 8003c5a:	d03c      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0xfe>
 8003c5c:	2b50      	cmp	r3, #80	; 0x50
 8003c5e:	d873      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d058      	beq.n	8003d16 <HAL_TIM_ConfigClockSource+0x13e>
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d86f      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c68:	2b30      	cmp	r3, #48	; 0x30
 8003c6a:	d064      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15e>
 8003c6c:	2b30      	cmp	r3, #48	; 0x30
 8003c6e:	d86b      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d060      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15e>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d867      	bhi.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d05c      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15e>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d05a      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0x15e>
 8003c80:	e062      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6899      	ldr	r1, [r3, #8]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f000 f985 	bl	8003fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	609a      	str	r2, [r3, #8]
      break;
 8003cae:	e04f      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f000 f96e 	bl	8003fa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cd2:	609a      	str	r2, [r3, #8]
      break;
 8003cd4:	e03c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f000 f8e2 	bl	8003eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2150      	movs	r1, #80	; 0x50
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f93b 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003cf4:	e02c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f000 f901 	bl	8003f0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2160      	movs	r1, #96	; 0x60
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f92b 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003d14:	e01c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f000 f8c2 	bl	8003eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f91b 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f000 f912 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003d46:	e003      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4c:	e000      	b.n	8003d50 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
	...

08003dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a32      	ldr	r2, [pc, #200]	; (8003e98 <TIM_Base_SetConfig+0xdc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d007      	beq.n	8003de4 <TIM_Base_SetConfig+0x28>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dda:	d003      	beq.n	8003de4 <TIM_Base_SetConfig+0x28>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a2f      	ldr	r2, [pc, #188]	; (8003e9c <TIM_Base_SetConfig+0xe0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d108      	bne.n	8003df6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <TIM_Base_SetConfig+0xdc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e04:	d00f      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a24      	ldr	r2, [pc, #144]	; (8003e9c <TIM_Base_SetConfig+0xe0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a23      	ldr	r2, [pc, #140]	; (8003ea0 <TIM_Base_SetConfig+0xe4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <TIM_Base_SetConfig+0xe8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_Base_SetConfig+0x6a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <TIM_Base_SetConfig+0xec>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	; (8003e98 <TIM_Base_SetConfig+0xdc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00b      	beq.n	8003e7c <TIM_Base_SetConfig+0xc0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <TIM_Base_SetConfig+0xe4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0xc0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <TIM_Base_SetConfig+0xe8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0xc0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <TIM_Base_SetConfig+0xec>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d103      	bne.n	8003e84 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	615a      	str	r2, [r3, #20]
}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800

08003eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f023 0201 	bic.w	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f023 030a 	bic.w	r3, r3, #10
 8003ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	621a      	str	r2, [r3, #32]
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b087      	sub	sp, #28
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0210 	bic.w	r2, r3, #16
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f043 0307 	orr.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	021a      	lsls	r2, r3, #8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e054      	b.n	80040a2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a24      	ldr	r2, [pc, #144]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d108      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004028:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004060:	d009      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10c      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800407c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	4313      	orrs	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	40000400 	.word	0x40000400
 80040b8:	40014000 	.word	0x40014000

080040bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e040      	b.n	800418c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd fa02 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	; 0x24
 8004124:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fbe6 	bl	8004908 <UART_SetConfig>
 800413c:	4603      	mov	r3, r0
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e022      	b.n	800418c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fd10 	bl	8004b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fd97 	bl	8004cb8 <UART_CheckIdleState>
 800418a:	4603      	mov	r3, r0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004194:	b480      	push	{r7}
 8004196:	b08b      	sub	sp, #44	; 0x2c
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d156      	bne.n	8004258 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_UART_Transmit_IT+0x22>
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e04f      	b.n	800425a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_UART_Transmit_IT+0x34>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e048      	b.n	800425a <HAL_UART_Transmit_IT+0xc6>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2221      	movs	r2, #33	; 0x21
 80041f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004202:	d107      	bne.n	8004214 <HAL_UART_Transmit_IT+0x80>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d103      	bne.n	8004214 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_UART_Transmit_IT+0xd4>)
 8004210:	669a      	str	r2, [r3, #104]	; 0x68
 8004212:	e002      	b.n	800421a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a15      	ldr	r2, [pc, #84]	; (800426c <HAL_UART_Transmit_IT+0xd8>)
 8004218:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	613b      	str	r3, [r7, #16]
   return(result);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69f9      	ldr	r1, [r7, #28]
 8004246:	6a3a      	ldr	r2, [r7, #32]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	61bb      	str	r3, [r7, #24]
   return(result);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e6      	bne.n	8004222 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	372c      	adds	r7, #44	; 0x2c
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	080051d7 	.word	0x080051d7
 800426c:	0800511f 	.word	0x0800511f

08004270 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004282:	2b20      	cmp	r3, #32
 8004284:	d13d      	bne.n	8004302 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <HAL_UART_Receive_IT+0x22>
 800428c:	88fb      	ldrh	r3, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e036      	b.n	8004304 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Receive_IT+0x34>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e02f      	b.n	8004304 <HAL_UART_Receive_IT+0x94>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d018      	beq.n	80042f2 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	613b      	str	r3, [r7, #16]
   return(result);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	69f9      	ldr	r1, [r7, #28]
 80042e4:	6a3a      	ldr	r2, [r7, #32]
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e6      	bne.n	80042c0 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	461a      	mov	r2, r3
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fdeb 	bl	8004ed4 <UART_Start_Receive_IT>
 80042fe:	4603      	mov	r3, r0
 8004300:	e000      	b.n	8004304 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3728      	adds	r7, #40	; 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b0ba      	sub	sp, #232	; 0xe8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004332:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004336:	f640 030f 	movw	r3, #2063	; 0x80f
 800433a:	4013      	ands	r3, r2
 800433c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d115      	bne.n	8004374 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00f      	beq.n	8004374 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 82a3 	beq.w	80048b0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
      }
      return;
 8004372:	e29d      	b.n	80048b0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8117 	beq.w	80045ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800437e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800438a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800438e:	4b85      	ldr	r3, [pc, #532]	; (80045a4 <HAL_UART_IRQHandler+0x298>)
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 810a 	beq.w	80045ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d011      	beq.n	80043c8 <HAL_UART_IRQHandler+0xbc>
 80043a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043be:	f043 0201 	orr.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d011      	beq.n	80043f8 <HAL_UART_IRQHandler+0xec>
 80043d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2202      	movs	r2, #2
 80043e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ee:	f043 0204 	orr.w	r2, r3, #4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d011      	beq.n	8004428 <HAL_UART_IRQHandler+0x11c>
 8004404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00b      	beq.n	8004428 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2204      	movs	r2, #4
 8004416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441e:	f043 0202 	orr.w	r2, r3, #2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d017      	beq.n	8004464 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004444:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00b      	beq.n	8004464 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2208      	movs	r2, #8
 8004452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445a:	f043 0208 	orr.w	r2, r3, #8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446c:	2b00      	cmp	r3, #0
 800446e:	d012      	beq.n	8004496 <HAL_UART_IRQHandler+0x18a>
 8004470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8209 	beq.w	80048b4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d005      	beq.n	80044ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d04f      	beq.n	800458e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fd9c 	bl	800502c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d141      	bne.n	8004586 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3308      	adds	r3, #8
 8004508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004518:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800451c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800452e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800453a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1d9      	bne.n	8004502 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	2b00      	cmp	r3, #0
 8004554:	d013      	beq.n	800457e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <HAL_UART_IRQHandler+0x29c>)
 800455c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4618      	mov	r0, r3
 8004564:	f7fd fb94 	bl	8001c90 <HAL_DMA_Abort_IT>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d017      	beq.n	800459e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004578:	4610      	mov	r0, r2
 800457a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457c:	e00f      	b.n	800459e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9ac 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004584:	e00b      	b.n	800459e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f9a8 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	e007      	b.n	800459e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9a4 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800459c:	e18a      	b.n	80048b4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459e:	bf00      	nop
    return;
 80045a0:	e188      	b.n	80048b4 <HAL_UART_IRQHandler+0x5a8>
 80045a2:	bf00      	nop
 80045a4:	04000120 	.word	0x04000120
 80045a8:	080050f3 	.word	0x080050f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	f040 8143 	bne.w	800483c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 813c 	beq.w	800483c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8135 	beq.w	800483c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2210      	movs	r2, #16
 80045d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	f040 80b1 	bne.w	800474c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 815c 	beq.w	80048b8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800460a:	429a      	cmp	r2, r3
 800460c:	f080 8154 	bcs.w	80048b8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004616:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b20      	cmp	r3, #32
 8004622:	f000 8085 	beq.w	8004730 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800463a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800463e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004650:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004654:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800465c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1da      	bne.n	8004626 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3308      	adds	r3, #8
 8004690:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004694:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004698:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800469c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e1      	bne.n	8004670 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3308      	adds	r3, #8
 80046b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	3308      	adds	r3, #8
 80046cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e3      	bne.n	80046ac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004700:	f023 0310 	bic.w	r3, r3, #16
 8004704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004712:	65bb      	str	r3, [r7, #88]	; 0x58
 8004714:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e4      	bne.n	80046f0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4618      	mov	r0, r3
 800472c:	f7fd fa77 	bl	8001c1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800473c:	b29b      	uxth	r3, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	b29b      	uxth	r3, r3
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8d3 	bl	80048f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800474a:	e0b5      	b.n	80048b8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004758:	b29b      	uxth	r3, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80a7 	beq.w	80048bc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800476e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80a2 	beq.w	80048bc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800478c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
 800479c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e4      	bne.n	8004778 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3308      	adds	r3, #8
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	623b      	str	r3, [r7, #32]
   return(result);
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047d2:	633a      	str	r2, [r7, #48]	; 0x30
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e3      	bne.n	80047ae <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	60fb      	str	r3, [r7, #12]
   return(result);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f023 0310 	bic.w	r3, r3, #16
 800480c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	617b      	str	r3, [r7, #20]
   return(result);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e4      	bne.n	80047f8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800482e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f85b 	bl	80048f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800483a:	e03f      	b.n	80048bc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00e      	beq.n	8004866 <HAL_UART_IRQHandler+0x55a>
 8004848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800484c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800485c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fe9f 	bl	80055a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004864:	e02d      	b.n	80048c2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00e      	beq.n	8004890 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01c      	beq.n	80048c0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
    }
    return;
 800488e:	e017      	b.n	80048c0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d012      	beq.n	80048c2 <HAL_UART_IRQHandler+0x5b6>
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00c      	beq.n	80048c2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fcf4 	bl	8005296 <UART_EndTransmit_IT>
    return;
 80048ae:	e008      	b.n	80048c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80048b0:	bf00      	nop
 80048b2:	e006      	b.n	80048c2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80048b4:	bf00      	nop
 80048b6:	e004      	b.n	80048c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80048b8:	bf00      	nop
 80048ba:	e002      	b.n	80048c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80048bc:	bf00      	nop
 80048be:	e000      	b.n	80048c2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80048c0:	bf00      	nop
  }

}
 80048c2:	37e8      	adds	r7, #232	; 0xe8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b8a      	ldr	r3, [pc, #552]	; (8004b5c <UART_SetConfig+0x254>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	6979      	ldr	r1, [r7, #20]
 800493c:	430b      	orrs	r3, r1
 800493e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a78      	ldr	r2, [pc, #480]	; (8004b60 <UART_SetConfig+0x258>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d120      	bne.n	80049c6 <UART_SetConfig+0xbe>
 8004984:	4b77      	ldr	r3, [pc, #476]	; (8004b64 <UART_SetConfig+0x25c>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	2b03      	cmp	r3, #3
 800498e:	d817      	bhi.n	80049c0 <UART_SetConfig+0xb8>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x90>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049b5 	.word	0x080049b5
 80049a0:	080049bb 	.word	0x080049bb
 80049a4:	080049af 	.word	0x080049af
 80049a8:	2300      	movs	r3, #0
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e01d      	b.n	80049ea <UART_SetConfig+0xe2>
 80049ae:	2302      	movs	r3, #2
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e01a      	b.n	80049ea <UART_SetConfig+0xe2>
 80049b4:	2304      	movs	r3, #4
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e017      	b.n	80049ea <UART_SetConfig+0xe2>
 80049ba:	2308      	movs	r3, #8
 80049bc:	77fb      	strb	r3, [r7, #31]
 80049be:	e014      	b.n	80049ea <UART_SetConfig+0xe2>
 80049c0:	2310      	movs	r3, #16
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e011      	b.n	80049ea <UART_SetConfig+0xe2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a67      	ldr	r2, [pc, #412]	; (8004b68 <UART_SetConfig+0x260>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d102      	bne.n	80049d6 <UART_SetConfig+0xce>
 80049d0:	2300      	movs	r3, #0
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e009      	b.n	80049ea <UART_SetConfig+0xe2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a64      	ldr	r2, [pc, #400]	; (8004b6c <UART_SetConfig+0x264>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d102      	bne.n	80049e6 <UART_SetConfig+0xde>
 80049e0:	2300      	movs	r3, #0
 80049e2:	77fb      	strb	r3, [r7, #31]
 80049e4:	e001      	b.n	80049ea <UART_SetConfig+0xe2>
 80049e6:	2310      	movs	r3, #16
 80049e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f2:	d15b      	bne.n	8004aac <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80049f4:	7ffb      	ldrb	r3, [r7, #31]
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d827      	bhi.n	8004a4a <UART_SetConfig+0x142>
 80049fa:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0xf8>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a25 	.word	0x08004a25
 8004a04:	08004a2d 	.word	0x08004a2d
 8004a08:	08004a35 	.word	0x08004a35
 8004a0c:	08004a4b 	.word	0x08004a4b
 8004a10:	08004a3b 	.word	0x08004a3b
 8004a14:	08004a4b 	.word	0x08004a4b
 8004a18:	08004a4b 	.word	0x08004a4b
 8004a1c:	08004a4b 	.word	0x08004a4b
 8004a20:	08004a43 	.word	0x08004a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a24:	f7fe fd5c 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8004a28:	61b8      	str	r0, [r7, #24]
        break;
 8004a2a:	e013      	b.n	8004a54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a2c:	f7fe fd7a 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8004a30:	61b8      	str	r0, [r7, #24]
        break;
 8004a32:	e00f      	b.n	8004a54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a34:	4b4e      	ldr	r3, [pc, #312]	; (8004b70 <UART_SetConfig+0x268>)
 8004a36:	61bb      	str	r3, [r7, #24]
        break;
 8004a38:	e00c      	b.n	8004a54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a3a:	f7fe fcdb 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 8004a3e:	61b8      	str	r0, [r7, #24]
        break;
 8004a40:	e008      	b.n	8004a54 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a46:	61bb      	str	r3, [r7, #24]
        break;
 8004a48:	e004      	b.n	8004a54 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	77bb      	strb	r3, [r7, #30]
        break;
 8004a52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d074      	beq.n	8004b44 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	005a      	lsls	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	441a      	add	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b0f      	cmp	r3, #15
 8004a76:	d916      	bls.n	8004aa6 <UART_SetConfig+0x19e>
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7e:	d212      	bcs.n	8004aa6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f023 030f 	bic.w	r3, r3, #15
 8004a88:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	89fb      	ldrh	r3, [r7, #14]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	89fa      	ldrh	r2, [r7, #14]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	e04e      	b.n	8004b44 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	77bb      	strb	r3, [r7, #30]
 8004aaa:	e04b      	b.n	8004b44 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aac:	7ffb      	ldrb	r3, [r7, #31]
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d827      	bhi.n	8004b02 <UART_SetConfig+0x1fa>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0x1b0>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004ae5 	.word	0x08004ae5
 8004ac0:	08004aed 	.word	0x08004aed
 8004ac4:	08004b03 	.word	0x08004b03
 8004ac8:	08004af3 	.word	0x08004af3
 8004acc:	08004b03 	.word	0x08004b03
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b03 	.word	0x08004b03
 8004ad8:	08004afb 	.word	0x08004afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004adc:	f7fe fd00 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8004ae0:	61b8      	str	r0, [r7, #24]
        break;
 8004ae2:	e013      	b.n	8004b0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae4:	f7fe fd1e 	bl	8003524 <HAL_RCC_GetPCLK2Freq>
 8004ae8:	61b8      	str	r0, [r7, #24]
        break;
 8004aea:	e00f      	b.n	8004b0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aec:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <UART_SetConfig+0x268>)
 8004aee:	61bb      	str	r3, [r7, #24]
        break;
 8004af0:	e00c      	b.n	8004b0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af2:	f7fe fc7f 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 8004af6:	61b8      	str	r0, [r7, #24]
        break;
 8004af8:	e008      	b.n	8004b0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afe:	61bb      	str	r3, [r7, #24]
        break;
 8004b00:	e004      	b.n	8004b0c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	77bb      	strb	r3, [r7, #30]
        break;
 8004b0a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d018      	beq.n	8004b44 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	085a      	lsrs	r2, r3, #1
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b0f      	cmp	r3, #15
 8004b2c:	d908      	bls.n	8004b40 <UART_SetConfig+0x238>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b34:	d204      	bcs.n	8004b40 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	e001      	b.n	8004b44 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b50:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	efff69f3 	.word	0xefff69f3
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40004400 	.word	0x40004400
 8004b6c:	40004800 	.word	0x40004800
 8004b70:	007a1200 	.word	0x007a1200

08004b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01a      	beq.n	8004c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c72:	d10a      	bne.n	8004c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
  }
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cc8:	f7fc fe36 	bl	8001938 <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d10e      	bne.n	8004cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f82d 	bl	8004d4a <UART_WaitOnFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e023      	b.n	8004d42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d10e      	bne.n	8004d26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f817 	bl	8004d4a <UART_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e00d      	b.n	8004d42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b09c      	sub	sp, #112	; 0x70
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d5a:	e0a5      	b.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d62:	f000 80a1 	beq.w	8004ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d66:	f7fc fde7 	bl	8001938 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d302      	bcc.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x32>
 8004d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d13e      	bne.n	8004dfa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d90:	667b      	str	r3, [r7, #100]	; 0x64
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004da0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e6      	bne.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3308      	adds	r3, #8
 8004dcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dce:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e5      	bne.n	8004dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e067      	b.n	8004eca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d04f      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e16:	d147      	bne.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
 8004e42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e6      	bne.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	613b      	str	r3, [r7, #16]
   return(result);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f023 0301 	bic.w	r3, r3, #1
 8004e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3308      	adds	r3, #8
 8004e72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e74:	623a      	str	r2, [r7, #32]
 8004e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	69f9      	ldr	r1, [r7, #28]
 8004e7a:	6a3a      	ldr	r2, [r7, #32]
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e5      	bne.n	8004e54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e010      	b.n	8004eca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	f43f af4a 	beq.w	8004d5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3770      	adds	r7, #112	; 0x70
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b091      	sub	sp, #68	; 0x44
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	88fa      	ldrh	r2, [r7, #6]
 8004eec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f06:	d10e      	bne.n	8004f26 <UART_Start_Receive_IT+0x52>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d105      	bne.n	8004f1c <UART_Start_Receive_IT+0x48>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004f16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f1a:	e02d      	b.n	8004f78 <UART_Start_Receive_IT+0xa4>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	22ff      	movs	r2, #255	; 0xff
 8004f20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f24:	e028      	b.n	8004f78 <UART_Start_Receive_IT+0xa4>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10d      	bne.n	8004f4a <UART_Start_Receive_IT+0x76>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <UART_Start_Receive_IT+0x6c>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	22ff      	movs	r2, #255	; 0xff
 8004f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f3e:	e01b      	b.n	8004f78 <UART_Start_Receive_IT+0xa4>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	227f      	movs	r2, #127	; 0x7f
 8004f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f48:	e016      	b.n	8004f78 <UART_Start_Receive_IT+0xa4>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f52:	d10d      	bne.n	8004f70 <UART_Start_Receive_IT+0x9c>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d104      	bne.n	8004f66 <UART_Start_Receive_IT+0x92>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	227f      	movs	r2, #127	; 0x7f
 8004f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f64:	e008      	b.n	8004f78 <UART_Start_Receive_IT+0xa4>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	223f      	movs	r2, #63	; 0x3f
 8004f6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004f6e:	e003      	b.n	8004f78 <UART_Start_Receive_IT+0xa4>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2222      	movs	r2, #34	; 0x22
 8004f84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fa6:	637a      	str	r2, [r7, #52]	; 0x34
 8004fa8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e5      	bne.n	8004f86 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc2:	d107      	bne.n	8004fd4 <UART_Start_Receive_IT+0x100>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d103      	bne.n	8004fd4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a15      	ldr	r2, [pc, #84]	; (8005024 <UART_Start_Receive_IT+0x150>)
 8004fd0:	665a      	str	r2, [r3, #100]	; 0x64
 8004fd2:	e002      	b.n	8004fda <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4a14      	ldr	r2, [pc, #80]	; (8005028 <UART_Start_Receive_IT+0x154>)
 8004fd8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	61bb      	str	r3, [r7, #24]
   return(result);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e6      	bne.n	8004fe2 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3744      	adds	r7, #68	; 0x44
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	08005447 	.word	0x08005447
 8005028:	080052eb 	.word	0x080052eb

0800502c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b095      	sub	sp, #84	; 0x54
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005048:	64fb      	str	r3, [r7, #76]	; 0x4c
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005052:	643b      	str	r3, [r7, #64]	; 0x40
 8005054:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005058:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e6      	bne.n	8005034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	61fb      	str	r3, [r7, #28]
   return(result);
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	64bb      	str	r3, [r7, #72]	; 0x48
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800508c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d118      	bne.n	80050d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f023 0310 	bic.w	r3, r3, #16
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	613b      	str	r3, [r7, #16]
   return(result);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e6      	bne.n	80050a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80050e6:	bf00      	nop
 80050e8:	3754      	adds	r7, #84	; 0x54
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff fbe3 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800511e:	b480      	push	{r7}
 8005120:	b08f      	sub	sp, #60	; 0x3c
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800512a:	2b21      	cmp	r3, #33	; 0x21
 800512c:	d14d      	bne.n	80051ca <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d132      	bne.n	80051a0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	61fb      	str	r3, [r7, #28]
   return(result);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e6      	bne.n	800513a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	60bb      	str	r3, [r7, #8]
   return(result);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005180:	633b      	str	r3, [r7, #48]	; 0x30
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	6979      	ldr	r1, [r7, #20]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	613b      	str	r3, [r7, #16]
   return(result);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e6      	bne.n	800516c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800519e:	e014      	b.n	80051ca <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b292      	uxth	r2, r2
 80051ac:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80051ca:	bf00      	nop
 80051cc:	373c      	adds	r7, #60	; 0x3c
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b091      	sub	sp, #68	; 0x44
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e2:	2b21      	cmp	r3, #33	; 0x21
 80051e4:	d151      	bne.n	800528a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d132      	bne.n	8005258 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	633b      	str	r3, [r7, #48]	; 0x30
 8005212:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	60fb      	str	r3, [r7, #12]
   return(result);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	69b9      	ldr	r1, [r7, #24]
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	617b      	str	r3, [r7, #20]
   return(result);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e6      	bne.n	8005224 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005256:	e018      	b.n	800528a <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800525e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005260:	881a      	ldrh	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800526a:	b292      	uxth	r2, r2
 800526c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005272:	1c9a      	adds	r2, r3, #2
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800528a:	bf00      	nop
 800528c:	3744      	adds	r7, #68	; 0x44
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b088      	sub	sp, #32
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6979      	ldr	r1, [r7, #20]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e6      	bne.n	800529e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff faf3 	bl	80048c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052e2:	bf00      	nop
 80052e4:	3720      	adds	r7, #32
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b096      	sub	sp, #88	; 0x58
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005300:	2b22      	cmp	r3, #34	; 0x22
 8005302:	f040 8094 	bne.w	800542e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800530c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005310:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005314:	b2d9      	uxtb	r1, r3
 8005316:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800531a:	b2da      	uxtb	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	400a      	ands	r2, r1
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d177      	bne.n	800543e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005362:	653b      	str	r3, [r7, #80]	; 0x50
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
 800536e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e6      	bne.n	800534e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3308      	adds	r3, #8
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	623b      	str	r3, [r7, #32]
   return(result);
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3308      	adds	r3, #8
 800539e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053a0:	633a      	str	r2, [r7, #48]	; 0x30
 80053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e5      	bne.n	8005380 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d12e      	bne.n	8005426 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	60fb      	str	r3, [r7, #12]
   return(result);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0310 	bic.w	r3, r3, #16
 80053e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	69b9      	ldr	r1, [r7, #24]
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	617b      	str	r3, [r7, #20]
   return(result);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e6      	bne.n	80053ce <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b10      	cmp	r3, #16
 800540c:	d103      	bne.n	8005416 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2210      	movs	r2, #16
 8005414:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff fa66 	bl	80048f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005424:	e00b      	b.n	800543e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fb ff04 	bl	8001234 <HAL_UART_RxCpltCallback>
}
 800542c:	e007      	b.n	800543e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0208 	orr.w	r2, r2, #8
 800543c:	619a      	str	r2, [r3, #24]
}
 800543e:	bf00      	nop
 8005440:	3758      	adds	r7, #88	; 0x58
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b096      	sub	sp, #88	; 0x58
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005454:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800545c:	2b22      	cmp	r3, #34	; 0x22
 800545e:	f040 8094 	bne.w	800558a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005468:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005472:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005476:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800547a:	4013      	ands	r3, r2
 800547c:	b29a      	uxth	r2, r3
 800547e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005480:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	1c9a      	adds	r2, r3, #2
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d177      	bne.n	800559a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	643b      	str	r3, [r7, #64]	; 0x40
 80054ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3308      	adds	r3, #8
 80054fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e5      	bne.n	80054dc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005520:	2b01      	cmp	r3, #1
 8005522:	d12e      	bne.n	8005582 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60bb      	str	r3, [r7, #8]
   return(result);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 0310 	bic.w	r3, r3, #16
 800553e:	647b      	str	r3, [r7, #68]	; 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b10      	cmp	r3, #16
 8005568:	d103      	bne.n	8005572 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2210      	movs	r2, #16
 8005570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff f9b8 	bl	80048f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005580:	e00b      	b.n	800559a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fb fe56 	bl	8001234 <HAL_UART_RxCpltCallback>
}
 8005588:	e007      	b.n	800559a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0208 	orr.w	r2, r2, #8
 8005598:	619a      	str	r2, [r3, #24]
}
 800559a:	bf00      	nop
 800559c:	3758      	adds	r7, #88	; 0x58
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <__errno>:
 80055b8:	4b01      	ldr	r3, [pc, #4]	; (80055c0 <__errno+0x8>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000014 	.word	0x20000014

080055c4 <__libc_init_array>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4d0d      	ldr	r5, [pc, #52]	; (80055fc <__libc_init_array+0x38>)
 80055c8:	4c0d      	ldr	r4, [pc, #52]	; (8005600 <__libc_init_array+0x3c>)
 80055ca:	1b64      	subs	r4, r4, r5
 80055cc:	10a4      	asrs	r4, r4, #2
 80055ce:	2600      	movs	r6, #0
 80055d0:	42a6      	cmp	r6, r4
 80055d2:	d109      	bne.n	80055e8 <__libc_init_array+0x24>
 80055d4:	4d0b      	ldr	r5, [pc, #44]	; (8005604 <__libc_init_array+0x40>)
 80055d6:	4c0c      	ldr	r4, [pc, #48]	; (8005608 <__libc_init_array+0x44>)
 80055d8:	f005 f8c8 	bl	800a76c <_init>
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	2600      	movs	r6, #0
 80055e2:	42a6      	cmp	r6, r4
 80055e4:	d105      	bne.n	80055f2 <__libc_init_array+0x2e>
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ec:	4798      	blx	r3
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7ee      	b.n	80055d0 <__libc_init_array+0xc>
 80055f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f6:	4798      	blx	r3
 80055f8:	3601      	adds	r6, #1
 80055fa:	e7f2      	b.n	80055e2 <__libc_init_array+0x1e>
 80055fc:	0800ad0c 	.word	0x0800ad0c
 8005600:	0800ad0c 	.word	0x0800ad0c
 8005604:	0800ad0c 	.word	0x0800ad0c
 8005608:	0800ad10 	.word	0x0800ad10

0800560c <memset>:
 800560c:	4402      	add	r2, r0
 800560e:	4603      	mov	r3, r0
 8005610:	4293      	cmp	r3, r2
 8005612:	d100      	bne.n	8005616 <memset+0xa>
 8005614:	4770      	bx	lr
 8005616:	f803 1b01 	strb.w	r1, [r3], #1
 800561a:	e7f9      	b.n	8005610 <memset+0x4>

0800561c <__cvt>:
 800561c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	ec55 4b10 	vmov	r4, r5, d0
 8005624:	2d00      	cmp	r5, #0
 8005626:	460e      	mov	r6, r1
 8005628:	4619      	mov	r1, r3
 800562a:	462b      	mov	r3, r5
 800562c:	bfbb      	ittet	lt
 800562e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005632:	461d      	movlt	r5, r3
 8005634:	2300      	movge	r3, #0
 8005636:	232d      	movlt	r3, #45	; 0x2d
 8005638:	700b      	strb	r3, [r1, #0]
 800563a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800563c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005640:	4691      	mov	r9, r2
 8005642:	f023 0820 	bic.w	r8, r3, #32
 8005646:	bfbc      	itt	lt
 8005648:	4622      	movlt	r2, r4
 800564a:	4614      	movlt	r4, r2
 800564c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005650:	d005      	beq.n	800565e <__cvt+0x42>
 8005652:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005656:	d100      	bne.n	800565a <__cvt+0x3e>
 8005658:	3601      	adds	r6, #1
 800565a:	2102      	movs	r1, #2
 800565c:	e000      	b.n	8005660 <__cvt+0x44>
 800565e:	2103      	movs	r1, #3
 8005660:	ab03      	add	r3, sp, #12
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	ab02      	add	r3, sp, #8
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	ec45 4b10 	vmov	d0, r4, r5
 800566c:	4653      	mov	r3, sl
 800566e:	4632      	mov	r2, r6
 8005670:	f001 fe42 	bl	80072f8 <_dtoa_r>
 8005674:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005678:	4607      	mov	r7, r0
 800567a:	d102      	bne.n	8005682 <__cvt+0x66>
 800567c:	f019 0f01 	tst.w	r9, #1
 8005680:	d022      	beq.n	80056c8 <__cvt+0xac>
 8005682:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005686:	eb07 0906 	add.w	r9, r7, r6
 800568a:	d110      	bne.n	80056ae <__cvt+0x92>
 800568c:	783b      	ldrb	r3, [r7, #0]
 800568e:	2b30      	cmp	r3, #48	; 0x30
 8005690:	d10a      	bne.n	80056a8 <__cvt+0x8c>
 8005692:	2200      	movs	r2, #0
 8005694:	2300      	movs	r3, #0
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	f7fb fa25 	bl	8000ae8 <__aeabi_dcmpeq>
 800569e:	b918      	cbnz	r0, 80056a8 <__cvt+0x8c>
 80056a0:	f1c6 0601 	rsb	r6, r6, #1
 80056a4:	f8ca 6000 	str.w	r6, [sl]
 80056a8:	f8da 3000 	ldr.w	r3, [sl]
 80056ac:	4499      	add	r9, r3
 80056ae:	2200      	movs	r2, #0
 80056b0:	2300      	movs	r3, #0
 80056b2:	4620      	mov	r0, r4
 80056b4:	4629      	mov	r1, r5
 80056b6:	f7fb fa17 	bl	8000ae8 <__aeabi_dcmpeq>
 80056ba:	b108      	cbz	r0, 80056c0 <__cvt+0xa4>
 80056bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80056c0:	2230      	movs	r2, #48	; 0x30
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	454b      	cmp	r3, r9
 80056c6:	d307      	bcc.n	80056d8 <__cvt+0xbc>
 80056c8:	9b03      	ldr	r3, [sp, #12]
 80056ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056cc:	1bdb      	subs	r3, r3, r7
 80056ce:	4638      	mov	r0, r7
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	b004      	add	sp, #16
 80056d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d8:	1c59      	adds	r1, r3, #1
 80056da:	9103      	str	r1, [sp, #12]
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e7f0      	b.n	80056c2 <__cvt+0xa6>

080056e0 <__exponent>:
 80056e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056e2:	4603      	mov	r3, r0
 80056e4:	2900      	cmp	r1, #0
 80056e6:	bfb8      	it	lt
 80056e8:	4249      	neglt	r1, r1
 80056ea:	f803 2b02 	strb.w	r2, [r3], #2
 80056ee:	bfb4      	ite	lt
 80056f0:	222d      	movlt	r2, #45	; 0x2d
 80056f2:	222b      	movge	r2, #43	; 0x2b
 80056f4:	2909      	cmp	r1, #9
 80056f6:	7042      	strb	r2, [r0, #1]
 80056f8:	dd2a      	ble.n	8005750 <__exponent+0x70>
 80056fa:	f10d 0407 	add.w	r4, sp, #7
 80056fe:	46a4      	mov	ip, r4
 8005700:	270a      	movs	r7, #10
 8005702:	46a6      	mov	lr, r4
 8005704:	460a      	mov	r2, r1
 8005706:	fb91 f6f7 	sdiv	r6, r1, r7
 800570a:	fb07 1516 	mls	r5, r7, r6, r1
 800570e:	3530      	adds	r5, #48	; 0x30
 8005710:	2a63      	cmp	r2, #99	; 0x63
 8005712:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005716:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800571a:	4631      	mov	r1, r6
 800571c:	dcf1      	bgt.n	8005702 <__exponent+0x22>
 800571e:	3130      	adds	r1, #48	; 0x30
 8005720:	f1ae 0502 	sub.w	r5, lr, #2
 8005724:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005728:	1c44      	adds	r4, r0, #1
 800572a:	4629      	mov	r1, r5
 800572c:	4561      	cmp	r1, ip
 800572e:	d30a      	bcc.n	8005746 <__exponent+0x66>
 8005730:	f10d 0209 	add.w	r2, sp, #9
 8005734:	eba2 020e 	sub.w	r2, r2, lr
 8005738:	4565      	cmp	r5, ip
 800573a:	bf88      	it	hi
 800573c:	2200      	movhi	r2, #0
 800573e:	4413      	add	r3, r2
 8005740:	1a18      	subs	r0, r3, r0
 8005742:	b003      	add	sp, #12
 8005744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800574a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800574e:	e7ed      	b.n	800572c <__exponent+0x4c>
 8005750:	2330      	movs	r3, #48	; 0x30
 8005752:	3130      	adds	r1, #48	; 0x30
 8005754:	7083      	strb	r3, [r0, #2]
 8005756:	70c1      	strb	r1, [r0, #3]
 8005758:	1d03      	adds	r3, r0, #4
 800575a:	e7f1      	b.n	8005740 <__exponent+0x60>

0800575c <_printf_float>:
 800575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005760:	ed2d 8b02 	vpush	{d8}
 8005764:	b08d      	sub	sp, #52	; 0x34
 8005766:	460c      	mov	r4, r1
 8005768:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800576c:	4616      	mov	r6, r2
 800576e:	461f      	mov	r7, r3
 8005770:	4605      	mov	r5, r0
 8005772:	f002 ff1f 	bl	80085b4 <_localeconv_r>
 8005776:	f8d0 a000 	ldr.w	sl, [r0]
 800577a:	4650      	mov	r0, sl
 800577c:	f7fa fd32 	bl	80001e4 <strlen>
 8005780:	2300      	movs	r3, #0
 8005782:	930a      	str	r3, [sp, #40]	; 0x28
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	9305      	str	r3, [sp, #20]
 8005788:	f8d8 3000 	ldr.w	r3, [r8]
 800578c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005790:	3307      	adds	r3, #7
 8005792:	f023 0307 	bic.w	r3, r3, #7
 8005796:	f103 0208 	add.w	r2, r3, #8
 800579a:	f8c8 2000 	str.w	r2, [r8]
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057ae:	9307      	str	r3, [sp, #28]
 80057b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80057b4:	ee08 0a10 	vmov	s16, r0
 80057b8:	4b9f      	ldr	r3, [pc, #636]	; (8005a38 <_printf_float+0x2dc>)
 80057ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057c2:	f7fb f9c3 	bl	8000b4c <__aeabi_dcmpun>
 80057c6:	bb88      	cbnz	r0, 800582c <_printf_float+0xd0>
 80057c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057cc:	4b9a      	ldr	r3, [pc, #616]	; (8005a38 <_printf_float+0x2dc>)
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057d2:	f7fb f99d 	bl	8000b10 <__aeabi_dcmple>
 80057d6:	bb48      	cbnz	r0, 800582c <_printf_float+0xd0>
 80057d8:	2200      	movs	r2, #0
 80057da:	2300      	movs	r3, #0
 80057dc:	4640      	mov	r0, r8
 80057de:	4649      	mov	r1, r9
 80057e0:	f7fb f98c 	bl	8000afc <__aeabi_dcmplt>
 80057e4:	b110      	cbz	r0, 80057ec <_printf_float+0x90>
 80057e6:	232d      	movs	r3, #45	; 0x2d
 80057e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ec:	4b93      	ldr	r3, [pc, #588]	; (8005a3c <_printf_float+0x2e0>)
 80057ee:	4894      	ldr	r0, [pc, #592]	; (8005a40 <_printf_float+0x2e4>)
 80057f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057f4:	bf94      	ite	ls
 80057f6:	4698      	movls	r8, r3
 80057f8:	4680      	movhi	r8, r0
 80057fa:	2303      	movs	r3, #3
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	9b05      	ldr	r3, [sp, #20]
 8005800:	f023 0204 	bic.w	r2, r3, #4
 8005804:	6022      	str	r2, [r4, #0]
 8005806:	f04f 0900 	mov.w	r9, #0
 800580a:	9700      	str	r7, [sp, #0]
 800580c:	4633      	mov	r3, r6
 800580e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f000 f9d8 	bl	8005bc8 <_printf_common>
 8005818:	3001      	adds	r0, #1
 800581a:	f040 8090 	bne.w	800593e <_printf_float+0x1e2>
 800581e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005822:	b00d      	add	sp, #52	; 0x34
 8005824:	ecbd 8b02 	vpop	{d8}
 8005828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582c:	4642      	mov	r2, r8
 800582e:	464b      	mov	r3, r9
 8005830:	4640      	mov	r0, r8
 8005832:	4649      	mov	r1, r9
 8005834:	f7fb f98a 	bl	8000b4c <__aeabi_dcmpun>
 8005838:	b140      	cbz	r0, 800584c <_printf_float+0xf0>
 800583a:	464b      	mov	r3, r9
 800583c:	2b00      	cmp	r3, #0
 800583e:	bfbc      	itt	lt
 8005840:	232d      	movlt	r3, #45	; 0x2d
 8005842:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005846:	487f      	ldr	r0, [pc, #508]	; (8005a44 <_printf_float+0x2e8>)
 8005848:	4b7f      	ldr	r3, [pc, #508]	; (8005a48 <_printf_float+0x2ec>)
 800584a:	e7d1      	b.n	80057f0 <_printf_float+0x94>
 800584c:	6863      	ldr	r3, [r4, #4]
 800584e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005852:	9206      	str	r2, [sp, #24]
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	d13f      	bne.n	80058d8 <_printf_float+0x17c>
 8005858:	2306      	movs	r3, #6
 800585a:	6063      	str	r3, [r4, #4]
 800585c:	9b05      	ldr	r3, [sp, #20]
 800585e:	6861      	ldr	r1, [r4, #4]
 8005860:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005864:	2300      	movs	r3, #0
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	ab0a      	add	r3, sp, #40	; 0x28
 800586a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800586e:	ab09      	add	r3, sp, #36	; 0x24
 8005870:	ec49 8b10 	vmov	d0, r8, r9
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	6022      	str	r2, [r4, #0]
 8005878:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800587c:	4628      	mov	r0, r5
 800587e:	f7ff fecd 	bl	800561c <__cvt>
 8005882:	9b06      	ldr	r3, [sp, #24]
 8005884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005886:	2b47      	cmp	r3, #71	; 0x47
 8005888:	4680      	mov	r8, r0
 800588a:	d108      	bne.n	800589e <_printf_float+0x142>
 800588c:	1cc8      	adds	r0, r1, #3
 800588e:	db02      	blt.n	8005896 <_printf_float+0x13a>
 8005890:	6863      	ldr	r3, [r4, #4]
 8005892:	4299      	cmp	r1, r3
 8005894:	dd41      	ble.n	800591a <_printf_float+0x1be>
 8005896:	f1ab 0b02 	sub.w	fp, fp, #2
 800589a:	fa5f fb8b 	uxtb.w	fp, fp
 800589e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058a2:	d820      	bhi.n	80058e6 <_printf_float+0x18a>
 80058a4:	3901      	subs	r1, #1
 80058a6:	465a      	mov	r2, fp
 80058a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058ac:	9109      	str	r1, [sp, #36]	; 0x24
 80058ae:	f7ff ff17 	bl	80056e0 <__exponent>
 80058b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058b4:	1813      	adds	r3, r2, r0
 80058b6:	2a01      	cmp	r2, #1
 80058b8:	4681      	mov	r9, r0
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	dc02      	bgt.n	80058c4 <_printf_float+0x168>
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	07d2      	lsls	r2, r2, #31
 80058c2:	d501      	bpl.n	80058c8 <_printf_float+0x16c>
 80058c4:	3301      	adds	r3, #1
 80058c6:	6123      	str	r3, [r4, #16]
 80058c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d09c      	beq.n	800580a <_printf_float+0xae>
 80058d0:	232d      	movs	r3, #45	; 0x2d
 80058d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d6:	e798      	b.n	800580a <_printf_float+0xae>
 80058d8:	9a06      	ldr	r2, [sp, #24]
 80058da:	2a47      	cmp	r2, #71	; 0x47
 80058dc:	d1be      	bne.n	800585c <_printf_float+0x100>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1bc      	bne.n	800585c <_printf_float+0x100>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e7b9      	b.n	800585a <_printf_float+0xfe>
 80058e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058ea:	d118      	bne.n	800591e <_printf_float+0x1c2>
 80058ec:	2900      	cmp	r1, #0
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	dd0b      	ble.n	800590a <_printf_float+0x1ae>
 80058f2:	6121      	str	r1, [r4, #16]
 80058f4:	b913      	cbnz	r3, 80058fc <_printf_float+0x1a0>
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	07d0      	lsls	r0, r2, #31
 80058fa:	d502      	bpl.n	8005902 <_printf_float+0x1a6>
 80058fc:	3301      	adds	r3, #1
 80058fe:	440b      	add	r3, r1
 8005900:	6123      	str	r3, [r4, #16]
 8005902:	65a1      	str	r1, [r4, #88]	; 0x58
 8005904:	f04f 0900 	mov.w	r9, #0
 8005908:	e7de      	b.n	80058c8 <_printf_float+0x16c>
 800590a:	b913      	cbnz	r3, 8005912 <_printf_float+0x1b6>
 800590c:	6822      	ldr	r2, [r4, #0]
 800590e:	07d2      	lsls	r2, r2, #31
 8005910:	d501      	bpl.n	8005916 <_printf_float+0x1ba>
 8005912:	3302      	adds	r3, #2
 8005914:	e7f4      	b.n	8005900 <_printf_float+0x1a4>
 8005916:	2301      	movs	r3, #1
 8005918:	e7f2      	b.n	8005900 <_printf_float+0x1a4>
 800591a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800591e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005920:	4299      	cmp	r1, r3
 8005922:	db05      	blt.n	8005930 <_printf_float+0x1d4>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	6121      	str	r1, [r4, #16]
 8005928:	07d8      	lsls	r0, r3, #31
 800592a:	d5ea      	bpl.n	8005902 <_printf_float+0x1a6>
 800592c:	1c4b      	adds	r3, r1, #1
 800592e:	e7e7      	b.n	8005900 <_printf_float+0x1a4>
 8005930:	2900      	cmp	r1, #0
 8005932:	bfd4      	ite	le
 8005934:	f1c1 0202 	rsble	r2, r1, #2
 8005938:	2201      	movgt	r2, #1
 800593a:	4413      	add	r3, r2
 800593c:	e7e0      	b.n	8005900 <_printf_float+0x1a4>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	055a      	lsls	r2, r3, #21
 8005942:	d407      	bmi.n	8005954 <_printf_float+0x1f8>
 8005944:	6923      	ldr	r3, [r4, #16]
 8005946:	4642      	mov	r2, r8
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	d12c      	bne.n	80059ac <_printf_float+0x250>
 8005952:	e764      	b.n	800581e <_printf_float+0xc2>
 8005954:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005958:	f240 80e0 	bls.w	8005b1c <_printf_float+0x3c0>
 800595c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005960:	2200      	movs	r2, #0
 8005962:	2300      	movs	r3, #0
 8005964:	f7fb f8c0 	bl	8000ae8 <__aeabi_dcmpeq>
 8005968:	2800      	cmp	r0, #0
 800596a:	d034      	beq.n	80059d6 <_printf_float+0x27a>
 800596c:	4a37      	ldr	r2, [pc, #220]	; (8005a4c <_printf_float+0x2f0>)
 800596e:	2301      	movs	r3, #1
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	f43f af51 	beq.w	800581e <_printf_float+0xc2>
 800597c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005980:	429a      	cmp	r2, r3
 8005982:	db02      	blt.n	800598a <_printf_float+0x22e>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	07d8      	lsls	r0, r3, #31
 8005988:	d510      	bpl.n	80059ac <_printf_float+0x250>
 800598a:	ee18 3a10 	vmov	r3, s16
 800598e:	4652      	mov	r2, sl
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f af41 	beq.w	800581e <_printf_float+0xc2>
 800599c:	f04f 0800 	mov.w	r8, #0
 80059a0:	f104 091a 	add.w	r9, r4, #26
 80059a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a6:	3b01      	subs	r3, #1
 80059a8:	4543      	cmp	r3, r8
 80059aa:	dc09      	bgt.n	80059c0 <_printf_float+0x264>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	079b      	lsls	r3, r3, #30
 80059b0:	f100 8105 	bmi.w	8005bbe <_printf_float+0x462>
 80059b4:	68e0      	ldr	r0, [r4, #12]
 80059b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b8:	4298      	cmp	r0, r3
 80059ba:	bfb8      	it	lt
 80059bc:	4618      	movlt	r0, r3
 80059be:	e730      	b.n	8005822 <_printf_float+0xc6>
 80059c0:	2301      	movs	r3, #1
 80059c2:	464a      	mov	r2, r9
 80059c4:	4631      	mov	r1, r6
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b8      	blx	r7
 80059ca:	3001      	adds	r0, #1
 80059cc:	f43f af27 	beq.w	800581e <_printf_float+0xc2>
 80059d0:	f108 0801 	add.w	r8, r8, #1
 80059d4:	e7e6      	b.n	80059a4 <_printf_float+0x248>
 80059d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	dc39      	bgt.n	8005a50 <_printf_float+0x2f4>
 80059dc:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <_printf_float+0x2f0>)
 80059de:	2301      	movs	r3, #1
 80059e0:	4631      	mov	r1, r6
 80059e2:	4628      	mov	r0, r5
 80059e4:	47b8      	blx	r7
 80059e6:	3001      	adds	r0, #1
 80059e8:	f43f af19 	beq.w	800581e <_printf_float+0xc2>
 80059ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059f0:	4313      	orrs	r3, r2
 80059f2:	d102      	bne.n	80059fa <_printf_float+0x29e>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07d9      	lsls	r1, r3, #31
 80059f8:	d5d8      	bpl.n	80059ac <_printf_float+0x250>
 80059fa:	ee18 3a10 	vmov	r3, s16
 80059fe:	4652      	mov	r2, sl
 8005a00:	4631      	mov	r1, r6
 8005a02:	4628      	mov	r0, r5
 8005a04:	47b8      	blx	r7
 8005a06:	3001      	adds	r0, #1
 8005a08:	f43f af09 	beq.w	800581e <_printf_float+0xc2>
 8005a0c:	f04f 0900 	mov.w	r9, #0
 8005a10:	f104 0a1a 	add.w	sl, r4, #26
 8005a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a16:	425b      	negs	r3, r3
 8005a18:	454b      	cmp	r3, r9
 8005a1a:	dc01      	bgt.n	8005a20 <_printf_float+0x2c4>
 8005a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a1e:	e792      	b.n	8005946 <_printf_float+0x1ea>
 8005a20:	2301      	movs	r3, #1
 8005a22:	4652      	mov	r2, sl
 8005a24:	4631      	mov	r1, r6
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b8      	blx	r7
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	f43f aef7 	beq.w	800581e <_printf_float+0xc2>
 8005a30:	f109 0901 	add.w	r9, r9, #1
 8005a34:	e7ee      	b.n	8005a14 <_printf_float+0x2b8>
 8005a36:	bf00      	nop
 8005a38:	7fefffff 	.word	0x7fefffff
 8005a3c:	0800a858 	.word	0x0800a858
 8005a40:	0800a85c 	.word	0x0800a85c
 8005a44:	0800a864 	.word	0x0800a864
 8005a48:	0800a860 	.word	0x0800a860
 8005a4c:	0800ac59 	.word	0x0800ac59
 8005a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a54:	429a      	cmp	r2, r3
 8005a56:	bfa8      	it	ge
 8005a58:	461a      	movge	r2, r3
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	4691      	mov	r9, r2
 8005a5e:	dc37      	bgt.n	8005ad0 <_printf_float+0x374>
 8005a60:	f04f 0b00 	mov.w	fp, #0
 8005a64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a68:	f104 021a 	add.w	r2, r4, #26
 8005a6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a6e:	9305      	str	r3, [sp, #20]
 8005a70:	eba3 0309 	sub.w	r3, r3, r9
 8005a74:	455b      	cmp	r3, fp
 8005a76:	dc33      	bgt.n	8005ae0 <_printf_float+0x384>
 8005a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	db3b      	blt.n	8005af8 <_printf_float+0x39c>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	07da      	lsls	r2, r3, #31
 8005a84:	d438      	bmi.n	8005af8 <_printf_float+0x39c>
 8005a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a88:	9a05      	ldr	r2, [sp, #20]
 8005a8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a8c:	1a9a      	subs	r2, r3, r2
 8005a8e:	eba3 0901 	sub.w	r9, r3, r1
 8005a92:	4591      	cmp	r9, r2
 8005a94:	bfa8      	it	ge
 8005a96:	4691      	movge	r9, r2
 8005a98:	f1b9 0f00 	cmp.w	r9, #0
 8005a9c:	dc35      	bgt.n	8005b0a <_printf_float+0x3ae>
 8005a9e:	f04f 0800 	mov.w	r8, #0
 8005aa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aa6:	f104 0a1a 	add.w	sl, r4, #26
 8005aaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	eba3 0309 	sub.w	r3, r3, r9
 8005ab4:	4543      	cmp	r3, r8
 8005ab6:	f77f af79 	ble.w	80059ac <_printf_float+0x250>
 8005aba:	2301      	movs	r3, #1
 8005abc:	4652      	mov	r2, sl
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	f43f aeaa 	beq.w	800581e <_printf_float+0xc2>
 8005aca:	f108 0801 	add.w	r8, r8, #1
 8005ace:	e7ec      	b.n	8005aaa <_printf_float+0x34e>
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	47b8      	blx	r7
 8005ada:	3001      	adds	r0, #1
 8005adc:	d1c0      	bne.n	8005a60 <_printf_float+0x304>
 8005ade:	e69e      	b.n	800581e <_printf_float+0xc2>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	9205      	str	r2, [sp, #20]
 8005ae8:	47b8      	blx	r7
 8005aea:	3001      	adds	r0, #1
 8005aec:	f43f ae97 	beq.w	800581e <_printf_float+0xc2>
 8005af0:	9a05      	ldr	r2, [sp, #20]
 8005af2:	f10b 0b01 	add.w	fp, fp, #1
 8005af6:	e7b9      	b.n	8005a6c <_printf_float+0x310>
 8005af8:	ee18 3a10 	vmov	r3, s16
 8005afc:	4652      	mov	r2, sl
 8005afe:	4631      	mov	r1, r6
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	d1be      	bne.n	8005a86 <_printf_float+0x32a>
 8005b08:	e689      	b.n	800581e <_printf_float+0xc2>
 8005b0a:	9a05      	ldr	r2, [sp, #20]
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	4442      	add	r2, r8
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	d1c1      	bne.n	8005a9e <_printf_float+0x342>
 8005b1a:	e680      	b.n	800581e <_printf_float+0xc2>
 8005b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b1e:	2a01      	cmp	r2, #1
 8005b20:	dc01      	bgt.n	8005b26 <_printf_float+0x3ca>
 8005b22:	07db      	lsls	r3, r3, #31
 8005b24:	d538      	bpl.n	8005b98 <_printf_float+0x43c>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4642      	mov	r2, r8
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	f43f ae74 	beq.w	800581e <_printf_float+0xc2>
 8005b36:	ee18 3a10 	vmov	r3, s16
 8005b3a:	4652      	mov	r2, sl
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4628      	mov	r0, r5
 8005b40:	47b8      	blx	r7
 8005b42:	3001      	adds	r0, #1
 8005b44:	f43f ae6b 	beq.w	800581e <_printf_float+0xc2>
 8005b48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f7fa ffca 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b54:	b9d8      	cbnz	r0, 8005b8e <_printf_float+0x432>
 8005b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b58:	f108 0201 	add.w	r2, r8, #1
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	47b8      	blx	r7
 8005b64:	3001      	adds	r0, #1
 8005b66:	d10e      	bne.n	8005b86 <_printf_float+0x42a>
 8005b68:	e659      	b.n	800581e <_printf_float+0xc2>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4652      	mov	r2, sl
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f ae52 	beq.w	800581e <_printf_float+0xc2>
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4543      	cmp	r3, r8
 8005b84:	dcf1      	bgt.n	8005b6a <_printf_float+0x40e>
 8005b86:	464b      	mov	r3, r9
 8005b88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b8c:	e6dc      	b.n	8005948 <_printf_float+0x1ec>
 8005b8e:	f04f 0800 	mov.w	r8, #0
 8005b92:	f104 0a1a 	add.w	sl, r4, #26
 8005b96:	e7f2      	b.n	8005b7e <_printf_float+0x422>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	4642      	mov	r2, r8
 8005b9c:	e7df      	b.n	8005b5e <_printf_float+0x402>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	464a      	mov	r2, r9
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f ae38 	beq.w	800581e <_printf_float+0xc2>
 8005bae:	f108 0801 	add.w	r8, r8, #1
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	4543      	cmp	r3, r8
 8005bba:	dcf0      	bgt.n	8005b9e <_printf_float+0x442>
 8005bbc:	e6fa      	b.n	80059b4 <_printf_float+0x258>
 8005bbe:	f04f 0800 	mov.w	r8, #0
 8005bc2:	f104 0919 	add.w	r9, r4, #25
 8005bc6:	e7f4      	b.n	8005bb2 <_printf_float+0x456>

08005bc8 <_printf_common>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	4616      	mov	r6, r2
 8005bce:	4699      	mov	r9, r3
 8005bd0:	688a      	ldr	r2, [r1, #8]
 8005bd2:	690b      	ldr	r3, [r1, #16]
 8005bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bfb8      	it	lt
 8005bdc:	4613      	movlt	r3, r2
 8005bde:	6033      	str	r3, [r6, #0]
 8005be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be4:	4607      	mov	r7, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	b10a      	cbz	r2, 8005bee <_printf_common+0x26>
 8005bea:	3301      	adds	r3, #1
 8005bec:	6033      	str	r3, [r6, #0]
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	0699      	lsls	r1, r3, #26
 8005bf2:	bf42      	ittt	mi
 8005bf4:	6833      	ldrmi	r3, [r6, #0]
 8005bf6:	3302      	addmi	r3, #2
 8005bf8:	6033      	strmi	r3, [r6, #0]
 8005bfa:	6825      	ldr	r5, [r4, #0]
 8005bfc:	f015 0506 	ands.w	r5, r5, #6
 8005c00:	d106      	bne.n	8005c10 <_printf_common+0x48>
 8005c02:	f104 0a19 	add.w	sl, r4, #25
 8005c06:	68e3      	ldr	r3, [r4, #12]
 8005c08:	6832      	ldr	r2, [r6, #0]
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	42ab      	cmp	r3, r5
 8005c0e:	dc26      	bgt.n	8005c5e <_printf_common+0x96>
 8005c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c14:	1e13      	subs	r3, r2, #0
 8005c16:	6822      	ldr	r2, [r4, #0]
 8005c18:	bf18      	it	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	0692      	lsls	r2, r2, #26
 8005c1e:	d42b      	bmi.n	8005c78 <_printf_common+0xb0>
 8005c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c24:	4649      	mov	r1, r9
 8005c26:	4638      	mov	r0, r7
 8005c28:	47c0      	blx	r8
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d01e      	beq.n	8005c6c <_printf_common+0xa4>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	68e5      	ldr	r5, [r4, #12]
 8005c32:	6832      	ldr	r2, [r6, #0]
 8005c34:	f003 0306 	and.w	r3, r3, #6
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	bf08      	it	eq
 8005c3c:	1aad      	subeq	r5, r5, r2
 8005c3e:	68a3      	ldr	r3, [r4, #8]
 8005c40:	6922      	ldr	r2, [r4, #16]
 8005c42:	bf0c      	ite	eq
 8005c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c48:	2500      	movne	r5, #0
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	bfc4      	itt	gt
 8005c4e:	1a9b      	subgt	r3, r3, r2
 8005c50:	18ed      	addgt	r5, r5, r3
 8005c52:	2600      	movs	r6, #0
 8005c54:	341a      	adds	r4, #26
 8005c56:	42b5      	cmp	r5, r6
 8005c58:	d11a      	bne.n	8005c90 <_printf_common+0xc8>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	e008      	b.n	8005c70 <_printf_common+0xa8>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4652      	mov	r2, sl
 8005c62:	4649      	mov	r1, r9
 8005c64:	4638      	mov	r0, r7
 8005c66:	47c0      	blx	r8
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d103      	bne.n	8005c74 <_printf_common+0xac>
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c74:	3501      	adds	r5, #1
 8005c76:	e7c6      	b.n	8005c06 <_printf_common+0x3e>
 8005c78:	18e1      	adds	r1, r4, r3
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	2030      	movs	r0, #48	; 0x30
 8005c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c82:	4422      	add	r2, r4
 8005c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	e7c7      	b.n	8005c20 <_printf_common+0x58>
 8005c90:	2301      	movs	r3, #1
 8005c92:	4622      	mov	r2, r4
 8005c94:	4649      	mov	r1, r9
 8005c96:	4638      	mov	r0, r7
 8005c98:	47c0      	blx	r8
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d0e6      	beq.n	8005c6c <_printf_common+0xa4>
 8005c9e:	3601      	adds	r6, #1
 8005ca0:	e7d9      	b.n	8005c56 <_printf_common+0x8e>
	...

08005ca4 <_printf_i>:
 8005ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca8:	7e0f      	ldrb	r7, [r1, #24]
 8005caa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cac:	2f78      	cmp	r7, #120	; 0x78
 8005cae:	4691      	mov	r9, r2
 8005cb0:	4680      	mov	r8, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	469a      	mov	sl, r3
 8005cb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cba:	d807      	bhi.n	8005ccc <_printf_i+0x28>
 8005cbc:	2f62      	cmp	r7, #98	; 0x62
 8005cbe:	d80a      	bhi.n	8005cd6 <_printf_i+0x32>
 8005cc0:	2f00      	cmp	r7, #0
 8005cc2:	f000 80d8 	beq.w	8005e76 <_printf_i+0x1d2>
 8005cc6:	2f58      	cmp	r7, #88	; 0x58
 8005cc8:	f000 80a3 	beq.w	8005e12 <_printf_i+0x16e>
 8005ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cd4:	e03a      	b.n	8005d4c <_printf_i+0xa8>
 8005cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cda:	2b15      	cmp	r3, #21
 8005cdc:	d8f6      	bhi.n	8005ccc <_printf_i+0x28>
 8005cde:	a101      	add	r1, pc, #4	; (adr r1, 8005ce4 <_printf_i+0x40>)
 8005ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ce4:	08005d3d 	.word	0x08005d3d
 8005ce8:	08005d51 	.word	0x08005d51
 8005cec:	08005ccd 	.word	0x08005ccd
 8005cf0:	08005ccd 	.word	0x08005ccd
 8005cf4:	08005ccd 	.word	0x08005ccd
 8005cf8:	08005ccd 	.word	0x08005ccd
 8005cfc:	08005d51 	.word	0x08005d51
 8005d00:	08005ccd 	.word	0x08005ccd
 8005d04:	08005ccd 	.word	0x08005ccd
 8005d08:	08005ccd 	.word	0x08005ccd
 8005d0c:	08005ccd 	.word	0x08005ccd
 8005d10:	08005e5d 	.word	0x08005e5d
 8005d14:	08005d81 	.word	0x08005d81
 8005d18:	08005e3f 	.word	0x08005e3f
 8005d1c:	08005ccd 	.word	0x08005ccd
 8005d20:	08005ccd 	.word	0x08005ccd
 8005d24:	08005e7f 	.word	0x08005e7f
 8005d28:	08005ccd 	.word	0x08005ccd
 8005d2c:	08005d81 	.word	0x08005d81
 8005d30:	08005ccd 	.word	0x08005ccd
 8005d34:	08005ccd 	.word	0x08005ccd
 8005d38:	08005e47 	.word	0x08005e47
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	602a      	str	r2, [r5, #0]
 8005d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0a3      	b.n	8005e98 <_printf_i+0x1f4>
 8005d50:	6820      	ldr	r0, [r4, #0]
 8005d52:	6829      	ldr	r1, [r5, #0]
 8005d54:	0606      	lsls	r6, r0, #24
 8005d56:	f101 0304 	add.w	r3, r1, #4
 8005d5a:	d50a      	bpl.n	8005d72 <_printf_i+0xce>
 8005d5c:	680e      	ldr	r6, [r1, #0]
 8005d5e:	602b      	str	r3, [r5, #0]
 8005d60:	2e00      	cmp	r6, #0
 8005d62:	da03      	bge.n	8005d6c <_printf_i+0xc8>
 8005d64:	232d      	movs	r3, #45	; 0x2d
 8005d66:	4276      	negs	r6, r6
 8005d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6c:	485e      	ldr	r0, [pc, #376]	; (8005ee8 <_printf_i+0x244>)
 8005d6e:	230a      	movs	r3, #10
 8005d70:	e019      	b.n	8005da6 <_printf_i+0x102>
 8005d72:	680e      	ldr	r6, [r1, #0]
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d7a:	bf18      	it	ne
 8005d7c:	b236      	sxthne	r6, r6
 8005d7e:	e7ef      	b.n	8005d60 <_printf_i+0xbc>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	1d19      	adds	r1, r3, #4
 8005d86:	6029      	str	r1, [r5, #0]
 8005d88:	0601      	lsls	r1, r0, #24
 8005d8a:	d501      	bpl.n	8005d90 <_printf_i+0xec>
 8005d8c:	681e      	ldr	r6, [r3, #0]
 8005d8e:	e002      	b.n	8005d96 <_printf_i+0xf2>
 8005d90:	0646      	lsls	r6, r0, #25
 8005d92:	d5fb      	bpl.n	8005d8c <_printf_i+0xe8>
 8005d94:	881e      	ldrh	r6, [r3, #0]
 8005d96:	4854      	ldr	r0, [pc, #336]	; (8005ee8 <_printf_i+0x244>)
 8005d98:	2f6f      	cmp	r7, #111	; 0x6f
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2308      	moveq	r3, #8
 8005d9e:	230a      	movne	r3, #10
 8005da0:	2100      	movs	r1, #0
 8005da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005da6:	6865      	ldr	r5, [r4, #4]
 8005da8:	60a5      	str	r5, [r4, #8]
 8005daa:	2d00      	cmp	r5, #0
 8005dac:	bfa2      	ittt	ge
 8005dae:	6821      	ldrge	r1, [r4, #0]
 8005db0:	f021 0104 	bicge.w	r1, r1, #4
 8005db4:	6021      	strge	r1, [r4, #0]
 8005db6:	b90e      	cbnz	r6, 8005dbc <_printf_i+0x118>
 8005db8:	2d00      	cmp	r5, #0
 8005dba:	d04d      	beq.n	8005e58 <_printf_i+0x1b4>
 8005dbc:	4615      	mov	r5, r2
 8005dbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dc2:	fb03 6711 	mls	r7, r3, r1, r6
 8005dc6:	5dc7      	ldrb	r7, [r0, r7]
 8005dc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dcc:	4637      	mov	r7, r6
 8005dce:	42bb      	cmp	r3, r7
 8005dd0:	460e      	mov	r6, r1
 8005dd2:	d9f4      	bls.n	8005dbe <_printf_i+0x11a>
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d10b      	bne.n	8005df0 <_printf_i+0x14c>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	07de      	lsls	r6, r3, #31
 8005ddc:	d508      	bpl.n	8005df0 <_printf_i+0x14c>
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	6861      	ldr	r1, [r4, #4]
 8005de2:	4299      	cmp	r1, r3
 8005de4:	bfde      	ittt	le
 8005de6:	2330      	movle	r3, #48	; 0x30
 8005de8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005df0:	1b52      	subs	r2, r2, r5
 8005df2:	6122      	str	r2, [r4, #16]
 8005df4:	f8cd a000 	str.w	sl, [sp]
 8005df8:	464b      	mov	r3, r9
 8005dfa:	aa03      	add	r2, sp, #12
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4640      	mov	r0, r8
 8005e00:	f7ff fee2 	bl	8005bc8 <_printf_common>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d14c      	bne.n	8005ea2 <_printf_i+0x1fe>
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e0c:	b004      	add	sp, #16
 8005e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e12:	4835      	ldr	r0, [pc, #212]	; (8005ee8 <_printf_i+0x244>)
 8005e14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e18:	6829      	ldr	r1, [r5, #0]
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e20:	6029      	str	r1, [r5, #0]
 8005e22:	061d      	lsls	r5, r3, #24
 8005e24:	d514      	bpl.n	8005e50 <_printf_i+0x1ac>
 8005e26:	07df      	lsls	r7, r3, #31
 8005e28:	bf44      	itt	mi
 8005e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8005e2e:	6023      	strmi	r3, [r4, #0]
 8005e30:	b91e      	cbnz	r6, 8005e3a <_printf_i+0x196>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	f023 0320 	bic.w	r3, r3, #32
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	e7b0      	b.n	8005da0 <_printf_i+0xfc>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	f043 0320 	orr.w	r3, r3, #32
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	2378      	movs	r3, #120	; 0x78
 8005e48:	4828      	ldr	r0, [pc, #160]	; (8005eec <_printf_i+0x248>)
 8005e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e4e:	e7e3      	b.n	8005e18 <_printf_i+0x174>
 8005e50:	0659      	lsls	r1, r3, #25
 8005e52:	bf48      	it	mi
 8005e54:	b2b6      	uxthmi	r6, r6
 8005e56:	e7e6      	b.n	8005e26 <_printf_i+0x182>
 8005e58:	4615      	mov	r5, r2
 8005e5a:	e7bb      	b.n	8005dd4 <_printf_i+0x130>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	6826      	ldr	r6, [r4, #0]
 8005e60:	6961      	ldr	r1, [r4, #20]
 8005e62:	1d18      	adds	r0, r3, #4
 8005e64:	6028      	str	r0, [r5, #0]
 8005e66:	0635      	lsls	r5, r6, #24
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	d501      	bpl.n	8005e70 <_printf_i+0x1cc>
 8005e6c:	6019      	str	r1, [r3, #0]
 8005e6e:	e002      	b.n	8005e76 <_printf_i+0x1d2>
 8005e70:	0670      	lsls	r0, r6, #25
 8005e72:	d5fb      	bpl.n	8005e6c <_printf_i+0x1c8>
 8005e74:	8019      	strh	r1, [r3, #0]
 8005e76:	2300      	movs	r3, #0
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	4615      	mov	r5, r2
 8005e7c:	e7ba      	b.n	8005df4 <_printf_i+0x150>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	1d1a      	adds	r2, r3, #4
 8005e82:	602a      	str	r2, [r5, #0]
 8005e84:	681d      	ldr	r5, [r3, #0]
 8005e86:	6862      	ldr	r2, [r4, #4]
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f7fa f9b8 	bl	8000200 <memchr>
 8005e90:	b108      	cbz	r0, 8005e96 <_printf_i+0x1f2>
 8005e92:	1b40      	subs	r0, r0, r5
 8005e94:	6060      	str	r0, [r4, #4]
 8005e96:	6863      	ldr	r3, [r4, #4]
 8005e98:	6123      	str	r3, [r4, #16]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea0:	e7a8      	b.n	8005df4 <_printf_i+0x150>
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	47d0      	blx	sl
 8005eac:	3001      	adds	r0, #1
 8005eae:	d0ab      	beq.n	8005e08 <_printf_i+0x164>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	079b      	lsls	r3, r3, #30
 8005eb4:	d413      	bmi.n	8005ede <_printf_i+0x23a>
 8005eb6:	68e0      	ldr	r0, [r4, #12]
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	4298      	cmp	r0, r3
 8005ebc:	bfb8      	it	lt
 8005ebe:	4618      	movlt	r0, r3
 8005ec0:	e7a4      	b.n	8005e0c <_printf_i+0x168>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	4640      	mov	r0, r8
 8005eca:	47d0      	blx	sl
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d09b      	beq.n	8005e08 <_printf_i+0x164>
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	68e3      	ldr	r3, [r4, #12]
 8005ed4:	9903      	ldr	r1, [sp, #12]
 8005ed6:	1a5b      	subs	r3, r3, r1
 8005ed8:	42ab      	cmp	r3, r5
 8005eda:	dcf2      	bgt.n	8005ec2 <_printf_i+0x21e>
 8005edc:	e7eb      	b.n	8005eb6 <_printf_i+0x212>
 8005ede:	2500      	movs	r5, #0
 8005ee0:	f104 0619 	add.w	r6, r4, #25
 8005ee4:	e7f5      	b.n	8005ed2 <_printf_i+0x22e>
 8005ee6:	bf00      	nop
 8005ee8:	0800a868 	.word	0x0800a868
 8005eec:	0800a879 	.word	0x0800a879

08005ef0 <_scanf_float>:
 8005ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef4:	b087      	sub	sp, #28
 8005ef6:	4617      	mov	r7, r2
 8005ef8:	9303      	str	r3, [sp, #12]
 8005efa:	688b      	ldr	r3, [r1, #8]
 8005efc:	1e5a      	subs	r2, r3, #1
 8005efe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f02:	bf83      	ittte	hi
 8005f04:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f08:	195b      	addhi	r3, r3, r5
 8005f0a:	9302      	strhi	r3, [sp, #8]
 8005f0c:	2300      	movls	r3, #0
 8005f0e:	bf86      	itte	hi
 8005f10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f14:	608b      	strhi	r3, [r1, #8]
 8005f16:	9302      	strls	r3, [sp, #8]
 8005f18:	680b      	ldr	r3, [r1, #0]
 8005f1a:	468b      	mov	fp, r1
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f22:	f84b 3b1c 	str.w	r3, [fp], #28
 8005f26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	465e      	mov	r6, fp
 8005f30:	46aa      	mov	sl, r5
 8005f32:	46a9      	mov	r9, r5
 8005f34:	9501      	str	r5, [sp, #4]
 8005f36:	68a2      	ldr	r2, [r4, #8]
 8005f38:	b152      	cbz	r2, 8005f50 <_scanf_float+0x60>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b4e      	cmp	r3, #78	; 0x4e
 8005f40:	d864      	bhi.n	800600c <_scanf_float+0x11c>
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d83c      	bhi.n	8005fc0 <_scanf_float+0xd0>
 8005f46:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005f4a:	b2c8      	uxtb	r0, r1
 8005f4c:	280e      	cmp	r0, #14
 8005f4e:	d93a      	bls.n	8005fc6 <_scanf_float+0xd6>
 8005f50:	f1b9 0f00 	cmp.w	r9, #0
 8005f54:	d003      	beq.n	8005f5e <_scanf_float+0x6e>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f62:	f1ba 0f01 	cmp.w	sl, #1
 8005f66:	f200 8113 	bhi.w	8006190 <_scanf_float+0x2a0>
 8005f6a:	455e      	cmp	r6, fp
 8005f6c:	f200 8105 	bhi.w	800617a <_scanf_float+0x28a>
 8005f70:	2501      	movs	r5, #1
 8005f72:	4628      	mov	r0, r5
 8005f74:	b007      	add	sp, #28
 8005f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005f7e:	2a0d      	cmp	r2, #13
 8005f80:	d8e6      	bhi.n	8005f50 <_scanf_float+0x60>
 8005f82:	a101      	add	r1, pc, #4	; (adr r1, 8005f88 <_scanf_float+0x98>)
 8005f84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f88:	080060c7 	.word	0x080060c7
 8005f8c:	08005f51 	.word	0x08005f51
 8005f90:	08005f51 	.word	0x08005f51
 8005f94:	08005f51 	.word	0x08005f51
 8005f98:	08006127 	.word	0x08006127
 8005f9c:	080060ff 	.word	0x080060ff
 8005fa0:	08005f51 	.word	0x08005f51
 8005fa4:	08005f51 	.word	0x08005f51
 8005fa8:	080060d5 	.word	0x080060d5
 8005fac:	08005f51 	.word	0x08005f51
 8005fb0:	08005f51 	.word	0x08005f51
 8005fb4:	08005f51 	.word	0x08005f51
 8005fb8:	08005f51 	.word	0x08005f51
 8005fbc:	0800608d 	.word	0x0800608d
 8005fc0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005fc4:	e7db      	b.n	8005f7e <_scanf_float+0x8e>
 8005fc6:	290e      	cmp	r1, #14
 8005fc8:	d8c2      	bhi.n	8005f50 <_scanf_float+0x60>
 8005fca:	a001      	add	r0, pc, #4	; (adr r0, 8005fd0 <_scanf_float+0xe0>)
 8005fcc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005fd0:	0800607f 	.word	0x0800607f
 8005fd4:	08005f51 	.word	0x08005f51
 8005fd8:	0800607f 	.word	0x0800607f
 8005fdc:	08006113 	.word	0x08006113
 8005fe0:	08005f51 	.word	0x08005f51
 8005fe4:	0800602d 	.word	0x0800602d
 8005fe8:	08006069 	.word	0x08006069
 8005fec:	08006069 	.word	0x08006069
 8005ff0:	08006069 	.word	0x08006069
 8005ff4:	08006069 	.word	0x08006069
 8005ff8:	08006069 	.word	0x08006069
 8005ffc:	08006069 	.word	0x08006069
 8006000:	08006069 	.word	0x08006069
 8006004:	08006069 	.word	0x08006069
 8006008:	08006069 	.word	0x08006069
 800600c:	2b6e      	cmp	r3, #110	; 0x6e
 800600e:	d809      	bhi.n	8006024 <_scanf_float+0x134>
 8006010:	2b60      	cmp	r3, #96	; 0x60
 8006012:	d8b2      	bhi.n	8005f7a <_scanf_float+0x8a>
 8006014:	2b54      	cmp	r3, #84	; 0x54
 8006016:	d077      	beq.n	8006108 <_scanf_float+0x218>
 8006018:	2b59      	cmp	r3, #89	; 0x59
 800601a:	d199      	bne.n	8005f50 <_scanf_float+0x60>
 800601c:	2d07      	cmp	r5, #7
 800601e:	d197      	bne.n	8005f50 <_scanf_float+0x60>
 8006020:	2508      	movs	r5, #8
 8006022:	e029      	b.n	8006078 <_scanf_float+0x188>
 8006024:	2b74      	cmp	r3, #116	; 0x74
 8006026:	d06f      	beq.n	8006108 <_scanf_float+0x218>
 8006028:	2b79      	cmp	r3, #121	; 0x79
 800602a:	e7f6      	b.n	800601a <_scanf_float+0x12a>
 800602c:	6821      	ldr	r1, [r4, #0]
 800602e:	05c8      	lsls	r0, r1, #23
 8006030:	d51a      	bpl.n	8006068 <_scanf_float+0x178>
 8006032:	9b02      	ldr	r3, [sp, #8]
 8006034:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006038:	6021      	str	r1, [r4, #0]
 800603a:	f109 0901 	add.w	r9, r9, #1
 800603e:	b11b      	cbz	r3, 8006048 <_scanf_float+0x158>
 8006040:	3b01      	subs	r3, #1
 8006042:	3201      	adds	r2, #1
 8006044:	9302      	str	r3, [sp, #8]
 8006046:	60a2      	str	r2, [r4, #8]
 8006048:	68a3      	ldr	r3, [r4, #8]
 800604a:	3b01      	subs	r3, #1
 800604c:	60a3      	str	r3, [r4, #8]
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	3301      	adds	r3, #1
 8006052:	6123      	str	r3, [r4, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3b01      	subs	r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	607b      	str	r3, [r7, #4]
 800605c:	f340 8084 	ble.w	8006168 <_scanf_float+0x278>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	603b      	str	r3, [r7, #0]
 8006066:	e766      	b.n	8005f36 <_scanf_float+0x46>
 8006068:	eb1a 0f05 	cmn.w	sl, r5
 800606c:	f47f af70 	bne.w	8005f50 <_scanf_float+0x60>
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006076:	6022      	str	r2, [r4, #0]
 8006078:	f806 3b01 	strb.w	r3, [r6], #1
 800607c:	e7e4      	b.n	8006048 <_scanf_float+0x158>
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	0610      	lsls	r0, r2, #24
 8006082:	f57f af65 	bpl.w	8005f50 <_scanf_float+0x60>
 8006086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800608a:	e7f4      	b.n	8006076 <_scanf_float+0x186>
 800608c:	f1ba 0f00 	cmp.w	sl, #0
 8006090:	d10e      	bne.n	80060b0 <_scanf_float+0x1c0>
 8006092:	f1b9 0f00 	cmp.w	r9, #0
 8006096:	d10e      	bne.n	80060b6 <_scanf_float+0x1c6>
 8006098:	6822      	ldr	r2, [r4, #0]
 800609a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800609e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060a2:	d108      	bne.n	80060b6 <_scanf_float+0x1c6>
 80060a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060a8:	6022      	str	r2, [r4, #0]
 80060aa:	f04f 0a01 	mov.w	sl, #1
 80060ae:	e7e3      	b.n	8006078 <_scanf_float+0x188>
 80060b0:	f1ba 0f02 	cmp.w	sl, #2
 80060b4:	d055      	beq.n	8006162 <_scanf_float+0x272>
 80060b6:	2d01      	cmp	r5, #1
 80060b8:	d002      	beq.n	80060c0 <_scanf_float+0x1d0>
 80060ba:	2d04      	cmp	r5, #4
 80060bc:	f47f af48 	bne.w	8005f50 <_scanf_float+0x60>
 80060c0:	3501      	adds	r5, #1
 80060c2:	b2ed      	uxtb	r5, r5
 80060c4:	e7d8      	b.n	8006078 <_scanf_float+0x188>
 80060c6:	f1ba 0f01 	cmp.w	sl, #1
 80060ca:	f47f af41 	bne.w	8005f50 <_scanf_float+0x60>
 80060ce:	f04f 0a02 	mov.w	sl, #2
 80060d2:	e7d1      	b.n	8006078 <_scanf_float+0x188>
 80060d4:	b97d      	cbnz	r5, 80060f6 <_scanf_float+0x206>
 80060d6:	f1b9 0f00 	cmp.w	r9, #0
 80060da:	f47f af3c 	bne.w	8005f56 <_scanf_float+0x66>
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060e8:	f47f af39 	bne.w	8005f5e <_scanf_float+0x6e>
 80060ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060f0:	6022      	str	r2, [r4, #0]
 80060f2:	2501      	movs	r5, #1
 80060f4:	e7c0      	b.n	8006078 <_scanf_float+0x188>
 80060f6:	2d03      	cmp	r5, #3
 80060f8:	d0e2      	beq.n	80060c0 <_scanf_float+0x1d0>
 80060fa:	2d05      	cmp	r5, #5
 80060fc:	e7de      	b.n	80060bc <_scanf_float+0x1cc>
 80060fe:	2d02      	cmp	r5, #2
 8006100:	f47f af26 	bne.w	8005f50 <_scanf_float+0x60>
 8006104:	2503      	movs	r5, #3
 8006106:	e7b7      	b.n	8006078 <_scanf_float+0x188>
 8006108:	2d06      	cmp	r5, #6
 800610a:	f47f af21 	bne.w	8005f50 <_scanf_float+0x60>
 800610e:	2507      	movs	r5, #7
 8006110:	e7b2      	b.n	8006078 <_scanf_float+0x188>
 8006112:	6822      	ldr	r2, [r4, #0]
 8006114:	0591      	lsls	r1, r2, #22
 8006116:	f57f af1b 	bpl.w	8005f50 <_scanf_float+0x60>
 800611a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800611e:	6022      	str	r2, [r4, #0]
 8006120:	f8cd 9004 	str.w	r9, [sp, #4]
 8006124:	e7a8      	b.n	8006078 <_scanf_float+0x188>
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800612c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006130:	d006      	beq.n	8006140 <_scanf_float+0x250>
 8006132:	0550      	lsls	r0, r2, #21
 8006134:	f57f af0c 	bpl.w	8005f50 <_scanf_float+0x60>
 8006138:	f1b9 0f00 	cmp.w	r9, #0
 800613c:	f43f af0f 	beq.w	8005f5e <_scanf_float+0x6e>
 8006140:	0591      	lsls	r1, r2, #22
 8006142:	bf58      	it	pl
 8006144:	9901      	ldrpl	r1, [sp, #4]
 8006146:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800614a:	bf58      	it	pl
 800614c:	eba9 0101 	subpl.w	r1, r9, r1
 8006150:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006154:	bf58      	it	pl
 8006156:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800615a:	6022      	str	r2, [r4, #0]
 800615c:	f04f 0900 	mov.w	r9, #0
 8006160:	e78a      	b.n	8006078 <_scanf_float+0x188>
 8006162:	f04f 0a03 	mov.w	sl, #3
 8006166:	e787      	b.n	8006078 <_scanf_float+0x188>
 8006168:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800616c:	4639      	mov	r1, r7
 800616e:	4640      	mov	r0, r8
 8006170:	4798      	blx	r3
 8006172:	2800      	cmp	r0, #0
 8006174:	f43f aedf 	beq.w	8005f36 <_scanf_float+0x46>
 8006178:	e6ea      	b.n	8005f50 <_scanf_float+0x60>
 800617a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800617e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006182:	463a      	mov	r2, r7
 8006184:	4640      	mov	r0, r8
 8006186:	4798      	blx	r3
 8006188:	6923      	ldr	r3, [r4, #16]
 800618a:	3b01      	subs	r3, #1
 800618c:	6123      	str	r3, [r4, #16]
 800618e:	e6ec      	b.n	8005f6a <_scanf_float+0x7a>
 8006190:	1e6b      	subs	r3, r5, #1
 8006192:	2b06      	cmp	r3, #6
 8006194:	d825      	bhi.n	80061e2 <_scanf_float+0x2f2>
 8006196:	2d02      	cmp	r5, #2
 8006198:	d836      	bhi.n	8006208 <_scanf_float+0x318>
 800619a:	455e      	cmp	r6, fp
 800619c:	f67f aee8 	bls.w	8005f70 <_scanf_float+0x80>
 80061a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061a8:	463a      	mov	r2, r7
 80061aa:	4640      	mov	r0, r8
 80061ac:	4798      	blx	r3
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	6123      	str	r3, [r4, #16]
 80061b4:	e7f1      	b.n	800619a <_scanf_float+0x2aa>
 80061b6:	9802      	ldr	r0, [sp, #8]
 80061b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80061c0:	9002      	str	r0, [sp, #8]
 80061c2:	463a      	mov	r2, r7
 80061c4:	4640      	mov	r0, r8
 80061c6:	4798      	blx	r3
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80061d2:	fa5f fa8a 	uxtb.w	sl, sl
 80061d6:	f1ba 0f02 	cmp.w	sl, #2
 80061da:	d1ec      	bne.n	80061b6 <_scanf_float+0x2c6>
 80061dc:	3d03      	subs	r5, #3
 80061de:	b2ed      	uxtb	r5, r5
 80061e0:	1b76      	subs	r6, r6, r5
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	05da      	lsls	r2, r3, #23
 80061e6:	d52f      	bpl.n	8006248 <_scanf_float+0x358>
 80061e8:	055b      	lsls	r3, r3, #21
 80061ea:	d510      	bpl.n	800620e <_scanf_float+0x31e>
 80061ec:	455e      	cmp	r6, fp
 80061ee:	f67f aebf 	bls.w	8005f70 <_scanf_float+0x80>
 80061f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061fa:	463a      	mov	r2, r7
 80061fc:	4640      	mov	r0, r8
 80061fe:	4798      	blx	r3
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	3b01      	subs	r3, #1
 8006204:	6123      	str	r3, [r4, #16]
 8006206:	e7f1      	b.n	80061ec <_scanf_float+0x2fc>
 8006208:	46aa      	mov	sl, r5
 800620a:	9602      	str	r6, [sp, #8]
 800620c:	e7df      	b.n	80061ce <_scanf_float+0x2de>
 800620e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	2965      	cmp	r1, #101	; 0x65
 8006216:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800621a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800621e:	6123      	str	r3, [r4, #16]
 8006220:	d00c      	beq.n	800623c <_scanf_float+0x34c>
 8006222:	2945      	cmp	r1, #69	; 0x45
 8006224:	d00a      	beq.n	800623c <_scanf_float+0x34c>
 8006226:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800622a:	463a      	mov	r2, r7
 800622c:	4640      	mov	r0, r8
 800622e:	4798      	blx	r3
 8006230:	6923      	ldr	r3, [r4, #16]
 8006232:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006236:	3b01      	subs	r3, #1
 8006238:	1eb5      	subs	r5, r6, #2
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006240:	463a      	mov	r2, r7
 8006242:	4640      	mov	r0, r8
 8006244:	4798      	blx	r3
 8006246:	462e      	mov	r6, r5
 8006248:	6825      	ldr	r5, [r4, #0]
 800624a:	f015 0510 	ands.w	r5, r5, #16
 800624e:	d159      	bne.n	8006304 <_scanf_float+0x414>
 8006250:	7035      	strb	r5, [r6, #0]
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625c:	d11b      	bne.n	8006296 <_scanf_float+0x3a6>
 800625e:	9b01      	ldr	r3, [sp, #4]
 8006260:	454b      	cmp	r3, r9
 8006262:	eba3 0209 	sub.w	r2, r3, r9
 8006266:	d123      	bne.n	80062b0 <_scanf_float+0x3c0>
 8006268:	2200      	movs	r2, #0
 800626a:	4659      	mov	r1, fp
 800626c:	4640      	mov	r0, r8
 800626e:	f000 ff09 	bl	8007084 <_strtod_r>
 8006272:	6822      	ldr	r2, [r4, #0]
 8006274:	9b03      	ldr	r3, [sp, #12]
 8006276:	f012 0f02 	tst.w	r2, #2
 800627a:	ec57 6b10 	vmov	r6, r7, d0
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	d021      	beq.n	80062c6 <_scanf_float+0x3d6>
 8006282:	9903      	ldr	r1, [sp, #12]
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	600a      	str	r2, [r1, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	e9c3 6700 	strd	r6, r7, [r3]
 800628e:	68e3      	ldr	r3, [r4, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	60e3      	str	r3, [r4, #12]
 8006294:	e66d      	b.n	8005f72 <_scanf_float+0x82>
 8006296:	9b04      	ldr	r3, [sp, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0e5      	beq.n	8006268 <_scanf_float+0x378>
 800629c:	9905      	ldr	r1, [sp, #20]
 800629e:	230a      	movs	r3, #10
 80062a0:	462a      	mov	r2, r5
 80062a2:	3101      	adds	r1, #1
 80062a4:	4640      	mov	r0, r8
 80062a6:	f000 ff75 	bl	8007194 <_strtol_r>
 80062aa:	9b04      	ldr	r3, [sp, #16]
 80062ac:	9e05      	ldr	r6, [sp, #20]
 80062ae:	1ac2      	subs	r2, r0, r3
 80062b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80062b4:	429e      	cmp	r6, r3
 80062b6:	bf28      	it	cs
 80062b8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80062bc:	4912      	ldr	r1, [pc, #72]	; (8006308 <_scanf_float+0x418>)
 80062be:	4630      	mov	r0, r6
 80062c0:	f000 f82c 	bl	800631c <siprintf>
 80062c4:	e7d0      	b.n	8006268 <_scanf_float+0x378>
 80062c6:	9903      	ldr	r1, [sp, #12]
 80062c8:	f012 0f04 	tst.w	r2, #4
 80062cc:	f103 0204 	add.w	r2, r3, #4
 80062d0:	600a      	str	r2, [r1, #0]
 80062d2:	d1d9      	bne.n	8006288 <_scanf_float+0x398>
 80062d4:	f8d3 8000 	ldr.w	r8, [r3]
 80062d8:	ee10 2a10 	vmov	r2, s0
 80062dc:	ee10 0a10 	vmov	r0, s0
 80062e0:	463b      	mov	r3, r7
 80062e2:	4639      	mov	r1, r7
 80062e4:	f7fa fc32 	bl	8000b4c <__aeabi_dcmpun>
 80062e8:	b128      	cbz	r0, 80062f6 <_scanf_float+0x406>
 80062ea:	4808      	ldr	r0, [pc, #32]	; (800630c <_scanf_float+0x41c>)
 80062ec:	f000 f810 	bl	8006310 <nanf>
 80062f0:	ed88 0a00 	vstr	s0, [r8]
 80062f4:	e7cb      	b.n	800628e <_scanf_float+0x39e>
 80062f6:	4630      	mov	r0, r6
 80062f8:	4639      	mov	r1, r7
 80062fa:	f7fa fc85 	bl	8000c08 <__aeabi_d2f>
 80062fe:	f8c8 0000 	str.w	r0, [r8]
 8006302:	e7c4      	b.n	800628e <_scanf_float+0x39e>
 8006304:	2500      	movs	r5, #0
 8006306:	e634      	b.n	8005f72 <_scanf_float+0x82>
 8006308:	0800a88a 	.word	0x0800a88a
 800630c:	0800acab 	.word	0x0800acab

08006310 <nanf>:
 8006310:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006318 <nanf+0x8>
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	7fc00000 	.word	0x7fc00000

0800631c <siprintf>:
 800631c:	b40e      	push	{r1, r2, r3}
 800631e:	b500      	push	{lr}
 8006320:	b09c      	sub	sp, #112	; 0x70
 8006322:	ab1d      	add	r3, sp, #116	; 0x74
 8006324:	9002      	str	r0, [sp, #8]
 8006326:	9006      	str	r0, [sp, #24]
 8006328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800632c:	4809      	ldr	r0, [pc, #36]	; (8006354 <siprintf+0x38>)
 800632e:	9107      	str	r1, [sp, #28]
 8006330:	9104      	str	r1, [sp, #16]
 8006332:	4909      	ldr	r1, [pc, #36]	; (8006358 <siprintf+0x3c>)
 8006334:	f853 2b04 	ldr.w	r2, [r3], #4
 8006338:	9105      	str	r1, [sp, #20]
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	a902      	add	r1, sp, #8
 8006340:	f002 ff8a 	bl	8009258 <_svfiprintf_r>
 8006344:	9b02      	ldr	r3, [sp, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	b01c      	add	sp, #112	; 0x70
 800634c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006350:	b003      	add	sp, #12
 8006352:	4770      	bx	lr
 8006354:	20000014 	.word	0x20000014
 8006358:	ffff0208 	.word	0xffff0208

0800635c <siscanf>:
 800635c:	b40e      	push	{r1, r2, r3}
 800635e:	b510      	push	{r4, lr}
 8006360:	b09f      	sub	sp, #124	; 0x7c
 8006362:	ac21      	add	r4, sp, #132	; 0x84
 8006364:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006368:	f854 2b04 	ldr.w	r2, [r4], #4
 800636c:	9201      	str	r2, [sp, #4]
 800636e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006372:	9004      	str	r0, [sp, #16]
 8006374:	9008      	str	r0, [sp, #32]
 8006376:	f7f9 ff35 	bl	80001e4 <strlen>
 800637a:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <siscanf+0x50>)
 800637c:	9005      	str	r0, [sp, #20]
 800637e:	9009      	str	r0, [sp, #36]	; 0x24
 8006380:	930d      	str	r3, [sp, #52]	; 0x34
 8006382:	480b      	ldr	r0, [pc, #44]	; (80063b0 <siscanf+0x54>)
 8006384:	9a01      	ldr	r2, [sp, #4]
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	9403      	str	r4, [sp, #12]
 800638a:	2300      	movs	r3, #0
 800638c:	9311      	str	r3, [sp, #68]	; 0x44
 800638e:	9316      	str	r3, [sp, #88]	; 0x58
 8006390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006394:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006398:	a904      	add	r1, sp, #16
 800639a:	4623      	mov	r3, r4
 800639c:	f003 f8b6 	bl	800950c <__ssvfiscanf_r>
 80063a0:	b01f      	add	sp, #124	; 0x7c
 80063a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063a6:	b003      	add	sp, #12
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	080063d7 	.word	0x080063d7
 80063b0:	20000014 	.word	0x20000014

080063b4 <__sread>:
 80063b4:	b510      	push	{r4, lr}
 80063b6:	460c      	mov	r4, r1
 80063b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063bc:	f003 fb70 	bl	8009aa0 <_read_r>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	bfab      	itete	ge
 80063c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063c6:	89a3      	ldrhlt	r3, [r4, #12]
 80063c8:	181b      	addge	r3, r3, r0
 80063ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063ce:	bfac      	ite	ge
 80063d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80063d2:	81a3      	strhlt	r3, [r4, #12]
 80063d4:	bd10      	pop	{r4, pc}

080063d6 <__seofread>:
 80063d6:	2000      	movs	r0, #0
 80063d8:	4770      	bx	lr

080063da <__swrite>:
 80063da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063de:	461f      	mov	r7, r3
 80063e0:	898b      	ldrh	r3, [r1, #12]
 80063e2:	05db      	lsls	r3, r3, #23
 80063e4:	4605      	mov	r5, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	4616      	mov	r6, r2
 80063ea:	d505      	bpl.n	80063f8 <__swrite+0x1e>
 80063ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f0:	2302      	movs	r3, #2
 80063f2:	2200      	movs	r2, #0
 80063f4:	f002 f8e2 	bl	80085bc <_lseek_r>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	4632      	mov	r2, r6
 8006406:	463b      	mov	r3, r7
 8006408:	4628      	mov	r0, r5
 800640a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800640e:	f000 bec3 	b.w	8007198 <_write_r>

08006412 <__sseek>:
 8006412:	b510      	push	{r4, lr}
 8006414:	460c      	mov	r4, r1
 8006416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800641a:	f002 f8cf 	bl	80085bc <_lseek_r>
 800641e:	1c43      	adds	r3, r0, #1
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	bf15      	itete	ne
 8006424:	6560      	strne	r0, [r4, #84]	; 0x54
 8006426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800642a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800642e:	81a3      	strheq	r3, [r4, #12]
 8006430:	bf18      	it	ne
 8006432:	81a3      	strhne	r3, [r4, #12]
 8006434:	bd10      	pop	{r4, pc}

08006436 <__sclose>:
 8006436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800643a:	f000 bebf 	b.w	80071bc <_close_r>

0800643e <sulp>:
 800643e:	b570      	push	{r4, r5, r6, lr}
 8006440:	4604      	mov	r4, r0
 8006442:	460d      	mov	r5, r1
 8006444:	ec45 4b10 	vmov	d0, r4, r5
 8006448:	4616      	mov	r6, r2
 800644a:	f002 fc63 	bl	8008d14 <__ulp>
 800644e:	ec51 0b10 	vmov	r0, r1, d0
 8006452:	b17e      	cbz	r6, 8006474 <sulp+0x36>
 8006454:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006458:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd09      	ble.n	8006474 <sulp+0x36>
 8006460:	051b      	lsls	r3, r3, #20
 8006462:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006466:	2400      	movs	r4, #0
 8006468:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800646c:	4622      	mov	r2, r4
 800646e:	462b      	mov	r3, r5
 8006470:	f7fa f8d2 	bl	8000618 <__aeabi_dmul>
 8006474:	bd70      	pop	{r4, r5, r6, pc}
	...

08006478 <_strtod_l>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	ed2d 8b02 	vpush	{d8}
 8006480:	b09d      	sub	sp, #116	; 0x74
 8006482:	461f      	mov	r7, r3
 8006484:	2300      	movs	r3, #0
 8006486:	9318      	str	r3, [sp, #96]	; 0x60
 8006488:	4ba2      	ldr	r3, [pc, #648]	; (8006714 <_strtod_l+0x29c>)
 800648a:	9213      	str	r2, [sp, #76]	; 0x4c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	9305      	str	r3, [sp, #20]
 8006490:	4604      	mov	r4, r0
 8006492:	4618      	mov	r0, r3
 8006494:	4688      	mov	r8, r1
 8006496:	f7f9 fea5 	bl	80001e4 <strlen>
 800649a:	f04f 0a00 	mov.w	sl, #0
 800649e:	4605      	mov	r5, r0
 80064a0:	f04f 0b00 	mov.w	fp, #0
 80064a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80064a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	2a2b      	cmp	r2, #43	; 0x2b
 80064ae:	d04e      	beq.n	800654e <_strtod_l+0xd6>
 80064b0:	d83b      	bhi.n	800652a <_strtod_l+0xb2>
 80064b2:	2a0d      	cmp	r2, #13
 80064b4:	d834      	bhi.n	8006520 <_strtod_l+0xa8>
 80064b6:	2a08      	cmp	r2, #8
 80064b8:	d834      	bhi.n	8006524 <_strtod_l+0xac>
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	d03e      	beq.n	800653c <_strtod_l+0xc4>
 80064be:	2300      	movs	r3, #0
 80064c0:	930a      	str	r3, [sp, #40]	; 0x28
 80064c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80064c4:	7833      	ldrb	r3, [r6, #0]
 80064c6:	2b30      	cmp	r3, #48	; 0x30
 80064c8:	f040 80b0 	bne.w	800662c <_strtod_l+0x1b4>
 80064cc:	7873      	ldrb	r3, [r6, #1]
 80064ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064d2:	2b58      	cmp	r3, #88	; 0x58
 80064d4:	d168      	bne.n	80065a8 <_strtod_l+0x130>
 80064d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	ab18      	add	r3, sp, #96	; 0x60
 80064dc:	9702      	str	r7, [sp, #8]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4a8d      	ldr	r2, [pc, #564]	; (8006718 <_strtod_l+0x2a0>)
 80064e2:	ab19      	add	r3, sp, #100	; 0x64
 80064e4:	a917      	add	r1, sp, #92	; 0x5c
 80064e6:	4620      	mov	r0, r4
 80064e8:	f001 fd5c 	bl	8007fa4 <__gethex>
 80064ec:	f010 0707 	ands.w	r7, r0, #7
 80064f0:	4605      	mov	r5, r0
 80064f2:	d005      	beq.n	8006500 <_strtod_l+0x88>
 80064f4:	2f06      	cmp	r7, #6
 80064f6:	d12c      	bne.n	8006552 <_strtod_l+0xda>
 80064f8:	3601      	adds	r6, #1
 80064fa:	2300      	movs	r3, #0
 80064fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80064fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 8590 	bne.w	8007028 <_strtod_l+0xbb0>
 8006508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650a:	b1eb      	cbz	r3, 8006548 <_strtod_l+0xd0>
 800650c:	4652      	mov	r2, sl
 800650e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006512:	ec43 2b10 	vmov	d0, r2, r3
 8006516:	b01d      	add	sp, #116	; 0x74
 8006518:	ecbd 8b02 	vpop	{d8}
 800651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	2a20      	cmp	r2, #32
 8006522:	d1cc      	bne.n	80064be <_strtod_l+0x46>
 8006524:	3301      	adds	r3, #1
 8006526:	9317      	str	r3, [sp, #92]	; 0x5c
 8006528:	e7be      	b.n	80064a8 <_strtod_l+0x30>
 800652a:	2a2d      	cmp	r2, #45	; 0x2d
 800652c:	d1c7      	bne.n	80064be <_strtod_l+0x46>
 800652e:	2201      	movs	r2, #1
 8006530:	920a      	str	r2, [sp, #40]	; 0x28
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	9217      	str	r2, [sp, #92]	; 0x5c
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1c2      	bne.n	80064c2 <_strtod_l+0x4a>
 800653c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800653e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006542:	2b00      	cmp	r3, #0
 8006544:	f040 856e 	bne.w	8007024 <_strtod_l+0xbac>
 8006548:	4652      	mov	r2, sl
 800654a:	465b      	mov	r3, fp
 800654c:	e7e1      	b.n	8006512 <_strtod_l+0x9a>
 800654e:	2200      	movs	r2, #0
 8006550:	e7ee      	b.n	8006530 <_strtod_l+0xb8>
 8006552:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006554:	b13a      	cbz	r2, 8006566 <_strtod_l+0xee>
 8006556:	2135      	movs	r1, #53	; 0x35
 8006558:	a81a      	add	r0, sp, #104	; 0x68
 800655a:	f002 fce6 	bl	8008f2a <__copybits>
 800655e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006560:	4620      	mov	r0, r4
 8006562:	f002 f8a5 	bl	80086b0 <_Bfree>
 8006566:	3f01      	subs	r7, #1
 8006568:	2f04      	cmp	r7, #4
 800656a:	d806      	bhi.n	800657a <_strtod_l+0x102>
 800656c:	e8df f007 	tbb	[pc, r7]
 8006570:	1714030a 	.word	0x1714030a
 8006574:	0a          	.byte	0x0a
 8006575:	00          	.byte	0x00
 8006576:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800657a:	0728      	lsls	r0, r5, #28
 800657c:	d5c0      	bpl.n	8006500 <_strtod_l+0x88>
 800657e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006582:	e7bd      	b.n	8006500 <_strtod_l+0x88>
 8006584:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006588:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800658a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800658e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006592:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006596:	e7f0      	b.n	800657a <_strtod_l+0x102>
 8006598:	f8df b180 	ldr.w	fp, [pc, #384]	; 800671c <_strtod_l+0x2a4>
 800659c:	e7ed      	b.n	800657a <_strtod_l+0x102>
 800659e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80065a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80065a6:	e7e8      	b.n	800657a <_strtod_l+0x102>
 80065a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b30      	cmp	r3, #48	; 0x30
 80065b2:	d0f9      	beq.n	80065a8 <_strtod_l+0x130>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0a3      	beq.n	8006500 <_strtod_l+0x88>
 80065b8:	2301      	movs	r3, #1
 80065ba:	f04f 0900 	mov.w	r9, #0
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065c2:	9308      	str	r3, [sp, #32]
 80065c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80065c8:	464f      	mov	r7, r9
 80065ca:	220a      	movs	r2, #10
 80065cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80065ce:	7806      	ldrb	r6, [r0, #0]
 80065d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80065d4:	b2d9      	uxtb	r1, r3
 80065d6:	2909      	cmp	r1, #9
 80065d8:	d92a      	bls.n	8006630 <_strtod_l+0x1b8>
 80065da:	9905      	ldr	r1, [sp, #20]
 80065dc:	462a      	mov	r2, r5
 80065de:	f003 fac3 	bl	8009b68 <strncmp>
 80065e2:	b398      	cbz	r0, 800664c <_strtod_l+0x1d4>
 80065e4:	2000      	movs	r0, #0
 80065e6:	4632      	mov	r2, r6
 80065e8:	463d      	mov	r5, r7
 80065ea:	9005      	str	r0, [sp, #20]
 80065ec:	4603      	mov	r3, r0
 80065ee:	2a65      	cmp	r2, #101	; 0x65
 80065f0:	d001      	beq.n	80065f6 <_strtod_l+0x17e>
 80065f2:	2a45      	cmp	r2, #69	; 0x45
 80065f4:	d118      	bne.n	8006628 <_strtod_l+0x1b0>
 80065f6:	b91d      	cbnz	r5, 8006600 <_strtod_l+0x188>
 80065f8:	9a04      	ldr	r2, [sp, #16]
 80065fa:	4302      	orrs	r2, r0
 80065fc:	d09e      	beq.n	800653c <_strtod_l+0xc4>
 80065fe:	2500      	movs	r5, #0
 8006600:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006604:	f108 0201 	add.w	r2, r8, #1
 8006608:	9217      	str	r2, [sp, #92]	; 0x5c
 800660a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800660e:	2a2b      	cmp	r2, #43	; 0x2b
 8006610:	d075      	beq.n	80066fe <_strtod_l+0x286>
 8006612:	2a2d      	cmp	r2, #45	; 0x2d
 8006614:	d07b      	beq.n	800670e <_strtod_l+0x296>
 8006616:	f04f 0c00 	mov.w	ip, #0
 800661a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800661e:	2909      	cmp	r1, #9
 8006620:	f240 8082 	bls.w	8006728 <_strtod_l+0x2b0>
 8006624:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006628:	2600      	movs	r6, #0
 800662a:	e09d      	b.n	8006768 <_strtod_l+0x2f0>
 800662c:	2300      	movs	r3, #0
 800662e:	e7c4      	b.n	80065ba <_strtod_l+0x142>
 8006630:	2f08      	cmp	r7, #8
 8006632:	bfd8      	it	le
 8006634:	9907      	ldrle	r1, [sp, #28]
 8006636:	f100 0001 	add.w	r0, r0, #1
 800663a:	bfda      	itte	le
 800663c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006640:	9307      	strle	r3, [sp, #28]
 8006642:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006646:	3701      	adds	r7, #1
 8006648:	9017      	str	r0, [sp, #92]	; 0x5c
 800664a:	e7bf      	b.n	80065cc <_strtod_l+0x154>
 800664c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800664e:	195a      	adds	r2, r3, r5
 8006650:	9217      	str	r2, [sp, #92]	; 0x5c
 8006652:	5d5a      	ldrb	r2, [r3, r5]
 8006654:	2f00      	cmp	r7, #0
 8006656:	d037      	beq.n	80066c8 <_strtod_l+0x250>
 8006658:	9005      	str	r0, [sp, #20]
 800665a:	463d      	mov	r5, r7
 800665c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006660:	2b09      	cmp	r3, #9
 8006662:	d912      	bls.n	800668a <_strtod_l+0x212>
 8006664:	2301      	movs	r3, #1
 8006666:	e7c2      	b.n	80065ee <_strtod_l+0x176>
 8006668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	9217      	str	r2, [sp, #92]	; 0x5c
 800666e:	785a      	ldrb	r2, [r3, #1]
 8006670:	3001      	adds	r0, #1
 8006672:	2a30      	cmp	r2, #48	; 0x30
 8006674:	d0f8      	beq.n	8006668 <_strtod_l+0x1f0>
 8006676:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800667a:	2b08      	cmp	r3, #8
 800667c:	f200 84d9 	bhi.w	8007032 <_strtod_l+0xbba>
 8006680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006682:	9005      	str	r0, [sp, #20]
 8006684:	2000      	movs	r0, #0
 8006686:	9308      	str	r3, [sp, #32]
 8006688:	4605      	mov	r5, r0
 800668a:	3a30      	subs	r2, #48	; 0x30
 800668c:	f100 0301 	add.w	r3, r0, #1
 8006690:	d014      	beq.n	80066bc <_strtod_l+0x244>
 8006692:	9905      	ldr	r1, [sp, #20]
 8006694:	4419      	add	r1, r3
 8006696:	9105      	str	r1, [sp, #20]
 8006698:	462b      	mov	r3, r5
 800669a:	eb00 0e05 	add.w	lr, r0, r5
 800669e:	210a      	movs	r1, #10
 80066a0:	4573      	cmp	r3, lr
 80066a2:	d113      	bne.n	80066cc <_strtod_l+0x254>
 80066a4:	182b      	adds	r3, r5, r0
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	f105 0501 	add.w	r5, r5, #1
 80066ac:	4405      	add	r5, r0
 80066ae:	dc1c      	bgt.n	80066ea <_strtod_l+0x272>
 80066b0:	9907      	ldr	r1, [sp, #28]
 80066b2:	230a      	movs	r3, #10
 80066b4:	fb03 2301 	mla	r3, r3, r1, r2
 80066b8:	9307      	str	r3, [sp, #28]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066be:	1c51      	adds	r1, r2, #1
 80066c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80066c2:	7852      	ldrb	r2, [r2, #1]
 80066c4:	4618      	mov	r0, r3
 80066c6:	e7c9      	b.n	800665c <_strtod_l+0x1e4>
 80066c8:	4638      	mov	r0, r7
 80066ca:	e7d2      	b.n	8006672 <_strtod_l+0x1fa>
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	dc04      	bgt.n	80066da <_strtod_l+0x262>
 80066d0:	9e07      	ldr	r6, [sp, #28]
 80066d2:	434e      	muls	r6, r1
 80066d4:	9607      	str	r6, [sp, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	e7e2      	b.n	80066a0 <_strtod_l+0x228>
 80066da:	f103 0c01 	add.w	ip, r3, #1
 80066de:	f1bc 0f10 	cmp.w	ip, #16
 80066e2:	bfd8      	it	le
 80066e4:	fb01 f909 	mulle.w	r9, r1, r9
 80066e8:	e7f5      	b.n	80066d6 <_strtod_l+0x25e>
 80066ea:	2d10      	cmp	r5, #16
 80066ec:	bfdc      	itt	le
 80066ee:	230a      	movle	r3, #10
 80066f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80066f4:	e7e1      	b.n	80066ba <_strtod_l+0x242>
 80066f6:	2300      	movs	r3, #0
 80066f8:	9305      	str	r3, [sp, #20]
 80066fa:	2301      	movs	r3, #1
 80066fc:	e77c      	b.n	80065f8 <_strtod_l+0x180>
 80066fe:	f04f 0c00 	mov.w	ip, #0
 8006702:	f108 0202 	add.w	r2, r8, #2
 8006706:	9217      	str	r2, [sp, #92]	; 0x5c
 8006708:	f898 2002 	ldrb.w	r2, [r8, #2]
 800670c:	e785      	b.n	800661a <_strtod_l+0x1a2>
 800670e:	f04f 0c01 	mov.w	ip, #1
 8006712:	e7f6      	b.n	8006702 <_strtod_l+0x28a>
 8006714:	0800aad8 	.word	0x0800aad8
 8006718:	0800a890 	.word	0x0800a890
 800671c:	7ff00000 	.word	0x7ff00000
 8006720:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006722:	1c51      	adds	r1, r2, #1
 8006724:	9117      	str	r1, [sp, #92]	; 0x5c
 8006726:	7852      	ldrb	r2, [r2, #1]
 8006728:	2a30      	cmp	r2, #48	; 0x30
 800672a:	d0f9      	beq.n	8006720 <_strtod_l+0x2a8>
 800672c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006730:	2908      	cmp	r1, #8
 8006732:	f63f af79 	bhi.w	8006628 <_strtod_l+0x1b0>
 8006736:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800673a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800673c:	9206      	str	r2, [sp, #24]
 800673e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006740:	1c51      	adds	r1, r2, #1
 8006742:	9117      	str	r1, [sp, #92]	; 0x5c
 8006744:	7852      	ldrb	r2, [r2, #1]
 8006746:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800674a:	2e09      	cmp	r6, #9
 800674c:	d937      	bls.n	80067be <_strtod_l+0x346>
 800674e:	9e06      	ldr	r6, [sp, #24]
 8006750:	1b89      	subs	r1, r1, r6
 8006752:	2908      	cmp	r1, #8
 8006754:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006758:	dc02      	bgt.n	8006760 <_strtod_l+0x2e8>
 800675a:	4576      	cmp	r6, lr
 800675c:	bfa8      	it	ge
 800675e:	4676      	movge	r6, lr
 8006760:	f1bc 0f00 	cmp.w	ip, #0
 8006764:	d000      	beq.n	8006768 <_strtod_l+0x2f0>
 8006766:	4276      	negs	r6, r6
 8006768:	2d00      	cmp	r5, #0
 800676a:	d14d      	bne.n	8006808 <_strtod_l+0x390>
 800676c:	9904      	ldr	r1, [sp, #16]
 800676e:	4301      	orrs	r1, r0
 8006770:	f47f aec6 	bne.w	8006500 <_strtod_l+0x88>
 8006774:	2b00      	cmp	r3, #0
 8006776:	f47f aee1 	bne.w	800653c <_strtod_l+0xc4>
 800677a:	2a69      	cmp	r2, #105	; 0x69
 800677c:	d027      	beq.n	80067ce <_strtod_l+0x356>
 800677e:	dc24      	bgt.n	80067ca <_strtod_l+0x352>
 8006780:	2a49      	cmp	r2, #73	; 0x49
 8006782:	d024      	beq.n	80067ce <_strtod_l+0x356>
 8006784:	2a4e      	cmp	r2, #78	; 0x4e
 8006786:	f47f aed9 	bne.w	800653c <_strtod_l+0xc4>
 800678a:	499f      	ldr	r1, [pc, #636]	; (8006a08 <_strtod_l+0x590>)
 800678c:	a817      	add	r0, sp, #92	; 0x5c
 800678e:	f001 fe61 	bl	8008454 <__match>
 8006792:	2800      	cmp	r0, #0
 8006794:	f43f aed2 	beq.w	800653c <_strtod_l+0xc4>
 8006798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b28      	cmp	r3, #40	; 0x28
 800679e:	d12d      	bne.n	80067fc <_strtod_l+0x384>
 80067a0:	499a      	ldr	r1, [pc, #616]	; (8006a0c <_strtod_l+0x594>)
 80067a2:	aa1a      	add	r2, sp, #104	; 0x68
 80067a4:	a817      	add	r0, sp, #92	; 0x5c
 80067a6:	f001 fe69 	bl	800847c <__hexnan>
 80067aa:	2805      	cmp	r0, #5
 80067ac:	d126      	bne.n	80067fc <_strtod_l+0x384>
 80067ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80067b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80067b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80067bc:	e6a0      	b.n	8006500 <_strtod_l+0x88>
 80067be:	210a      	movs	r1, #10
 80067c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80067c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80067c8:	e7b9      	b.n	800673e <_strtod_l+0x2c6>
 80067ca:	2a6e      	cmp	r2, #110	; 0x6e
 80067cc:	e7db      	b.n	8006786 <_strtod_l+0x30e>
 80067ce:	4990      	ldr	r1, [pc, #576]	; (8006a10 <_strtod_l+0x598>)
 80067d0:	a817      	add	r0, sp, #92	; 0x5c
 80067d2:	f001 fe3f 	bl	8008454 <__match>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f43f aeb0 	beq.w	800653c <_strtod_l+0xc4>
 80067dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067de:	498d      	ldr	r1, [pc, #564]	; (8006a14 <_strtod_l+0x59c>)
 80067e0:	3b01      	subs	r3, #1
 80067e2:	a817      	add	r0, sp, #92	; 0x5c
 80067e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80067e6:	f001 fe35 	bl	8008454 <__match>
 80067ea:	b910      	cbnz	r0, 80067f2 <_strtod_l+0x37a>
 80067ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067ee:	3301      	adds	r3, #1
 80067f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80067f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006a24 <_strtod_l+0x5ac>
 80067f6:	f04f 0a00 	mov.w	sl, #0
 80067fa:	e681      	b.n	8006500 <_strtod_l+0x88>
 80067fc:	4886      	ldr	r0, [pc, #536]	; (8006a18 <_strtod_l+0x5a0>)
 80067fe:	f003 f963 	bl	8009ac8 <nan>
 8006802:	ec5b ab10 	vmov	sl, fp, d0
 8006806:	e67b      	b.n	8006500 <_strtod_l+0x88>
 8006808:	9b05      	ldr	r3, [sp, #20]
 800680a:	9807      	ldr	r0, [sp, #28]
 800680c:	1af3      	subs	r3, r6, r3
 800680e:	2f00      	cmp	r7, #0
 8006810:	bf08      	it	eq
 8006812:	462f      	moveq	r7, r5
 8006814:	2d10      	cmp	r5, #16
 8006816:	9306      	str	r3, [sp, #24]
 8006818:	46a8      	mov	r8, r5
 800681a:	bfa8      	it	ge
 800681c:	f04f 0810 	movge.w	r8, #16
 8006820:	f7f9 fe80 	bl	8000524 <__aeabi_ui2d>
 8006824:	2d09      	cmp	r5, #9
 8006826:	4682      	mov	sl, r0
 8006828:	468b      	mov	fp, r1
 800682a:	dd13      	ble.n	8006854 <_strtod_l+0x3dc>
 800682c:	4b7b      	ldr	r3, [pc, #492]	; (8006a1c <_strtod_l+0x5a4>)
 800682e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006832:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006836:	f7f9 feef 	bl	8000618 <__aeabi_dmul>
 800683a:	4682      	mov	sl, r0
 800683c:	4648      	mov	r0, r9
 800683e:	468b      	mov	fp, r1
 8006840:	f7f9 fe70 	bl	8000524 <__aeabi_ui2d>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4650      	mov	r0, sl
 800684a:	4659      	mov	r1, fp
 800684c:	f7f9 fd2e 	bl	80002ac <__adddf3>
 8006850:	4682      	mov	sl, r0
 8006852:	468b      	mov	fp, r1
 8006854:	2d0f      	cmp	r5, #15
 8006856:	dc38      	bgt.n	80068ca <_strtod_l+0x452>
 8006858:	9b06      	ldr	r3, [sp, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f43f ae50 	beq.w	8006500 <_strtod_l+0x88>
 8006860:	dd24      	ble.n	80068ac <_strtod_l+0x434>
 8006862:	2b16      	cmp	r3, #22
 8006864:	dc0b      	bgt.n	800687e <_strtod_l+0x406>
 8006866:	496d      	ldr	r1, [pc, #436]	; (8006a1c <_strtod_l+0x5a4>)
 8006868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800686c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006870:	4652      	mov	r2, sl
 8006872:	465b      	mov	r3, fp
 8006874:	f7f9 fed0 	bl	8000618 <__aeabi_dmul>
 8006878:	4682      	mov	sl, r0
 800687a:	468b      	mov	fp, r1
 800687c:	e640      	b.n	8006500 <_strtod_l+0x88>
 800687e:	9a06      	ldr	r2, [sp, #24]
 8006880:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006884:	4293      	cmp	r3, r2
 8006886:	db20      	blt.n	80068ca <_strtod_l+0x452>
 8006888:	4c64      	ldr	r4, [pc, #400]	; (8006a1c <_strtod_l+0x5a4>)
 800688a:	f1c5 050f 	rsb	r5, r5, #15
 800688e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006892:	4652      	mov	r2, sl
 8006894:	465b      	mov	r3, fp
 8006896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800689a:	f7f9 febd 	bl	8000618 <__aeabi_dmul>
 800689e:	9b06      	ldr	r3, [sp, #24]
 80068a0:	1b5d      	subs	r5, r3, r5
 80068a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80068a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80068aa:	e7e3      	b.n	8006874 <_strtod_l+0x3fc>
 80068ac:	9b06      	ldr	r3, [sp, #24]
 80068ae:	3316      	adds	r3, #22
 80068b0:	db0b      	blt.n	80068ca <_strtod_l+0x452>
 80068b2:	9b05      	ldr	r3, [sp, #20]
 80068b4:	1b9e      	subs	r6, r3, r6
 80068b6:	4b59      	ldr	r3, [pc, #356]	; (8006a1c <_strtod_l+0x5a4>)
 80068b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80068bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068c0:	4650      	mov	r0, sl
 80068c2:	4659      	mov	r1, fp
 80068c4:	f7f9 ffd2 	bl	800086c <__aeabi_ddiv>
 80068c8:	e7d6      	b.n	8006878 <_strtod_l+0x400>
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	eba5 0808 	sub.w	r8, r5, r8
 80068d0:	4498      	add	r8, r3
 80068d2:	f1b8 0f00 	cmp.w	r8, #0
 80068d6:	dd74      	ble.n	80069c2 <_strtod_l+0x54a>
 80068d8:	f018 030f 	ands.w	r3, r8, #15
 80068dc:	d00a      	beq.n	80068f4 <_strtod_l+0x47c>
 80068de:	494f      	ldr	r1, [pc, #316]	; (8006a1c <_strtod_l+0x5a4>)
 80068e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068e4:	4652      	mov	r2, sl
 80068e6:	465b      	mov	r3, fp
 80068e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ec:	f7f9 fe94 	bl	8000618 <__aeabi_dmul>
 80068f0:	4682      	mov	sl, r0
 80068f2:	468b      	mov	fp, r1
 80068f4:	f038 080f 	bics.w	r8, r8, #15
 80068f8:	d04f      	beq.n	800699a <_strtod_l+0x522>
 80068fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80068fe:	dd22      	ble.n	8006946 <_strtod_l+0x4ce>
 8006900:	2500      	movs	r5, #0
 8006902:	462e      	mov	r6, r5
 8006904:	9507      	str	r5, [sp, #28]
 8006906:	9505      	str	r5, [sp, #20]
 8006908:	2322      	movs	r3, #34	; 0x22
 800690a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006a24 <_strtod_l+0x5ac>
 800690e:	6023      	str	r3, [r4, #0]
 8006910:	f04f 0a00 	mov.w	sl, #0
 8006914:	9b07      	ldr	r3, [sp, #28]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f43f adf2 	beq.w	8006500 <_strtod_l+0x88>
 800691c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800691e:	4620      	mov	r0, r4
 8006920:	f001 fec6 	bl	80086b0 <_Bfree>
 8006924:	9905      	ldr	r1, [sp, #20]
 8006926:	4620      	mov	r0, r4
 8006928:	f001 fec2 	bl	80086b0 <_Bfree>
 800692c:	4631      	mov	r1, r6
 800692e:	4620      	mov	r0, r4
 8006930:	f001 febe 	bl	80086b0 <_Bfree>
 8006934:	9907      	ldr	r1, [sp, #28]
 8006936:	4620      	mov	r0, r4
 8006938:	f001 feba 	bl	80086b0 <_Bfree>
 800693c:	4629      	mov	r1, r5
 800693e:	4620      	mov	r0, r4
 8006940:	f001 feb6 	bl	80086b0 <_Bfree>
 8006944:	e5dc      	b.n	8006500 <_strtod_l+0x88>
 8006946:	4b36      	ldr	r3, [pc, #216]	; (8006a20 <_strtod_l+0x5a8>)
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	2300      	movs	r3, #0
 800694c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006950:	4650      	mov	r0, sl
 8006952:	4659      	mov	r1, fp
 8006954:	4699      	mov	r9, r3
 8006956:	f1b8 0f01 	cmp.w	r8, #1
 800695a:	dc21      	bgt.n	80069a0 <_strtod_l+0x528>
 800695c:	b10b      	cbz	r3, 8006962 <_strtod_l+0x4ea>
 800695e:	4682      	mov	sl, r0
 8006960:	468b      	mov	fp, r1
 8006962:	4b2f      	ldr	r3, [pc, #188]	; (8006a20 <_strtod_l+0x5a8>)
 8006964:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006968:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800696c:	4652      	mov	r2, sl
 800696e:	465b      	mov	r3, fp
 8006970:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006974:	f7f9 fe50 	bl	8000618 <__aeabi_dmul>
 8006978:	4b2a      	ldr	r3, [pc, #168]	; (8006a24 <_strtod_l+0x5ac>)
 800697a:	460a      	mov	r2, r1
 800697c:	400b      	ands	r3, r1
 800697e:	492a      	ldr	r1, [pc, #168]	; (8006a28 <_strtod_l+0x5b0>)
 8006980:	428b      	cmp	r3, r1
 8006982:	4682      	mov	sl, r0
 8006984:	d8bc      	bhi.n	8006900 <_strtod_l+0x488>
 8006986:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800698a:	428b      	cmp	r3, r1
 800698c:	bf86      	itte	hi
 800698e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006a2c <_strtod_l+0x5b4>
 8006992:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006996:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800699a:	2300      	movs	r3, #0
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	e084      	b.n	8006aaa <_strtod_l+0x632>
 80069a0:	f018 0f01 	tst.w	r8, #1
 80069a4:	d005      	beq.n	80069b2 <_strtod_l+0x53a>
 80069a6:	9b04      	ldr	r3, [sp, #16]
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f7f9 fe34 	bl	8000618 <__aeabi_dmul>
 80069b0:	2301      	movs	r3, #1
 80069b2:	9a04      	ldr	r2, [sp, #16]
 80069b4:	3208      	adds	r2, #8
 80069b6:	f109 0901 	add.w	r9, r9, #1
 80069ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069be:	9204      	str	r2, [sp, #16]
 80069c0:	e7c9      	b.n	8006956 <_strtod_l+0x4de>
 80069c2:	d0ea      	beq.n	800699a <_strtod_l+0x522>
 80069c4:	f1c8 0800 	rsb	r8, r8, #0
 80069c8:	f018 020f 	ands.w	r2, r8, #15
 80069cc:	d00a      	beq.n	80069e4 <_strtod_l+0x56c>
 80069ce:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <_strtod_l+0x5a4>)
 80069d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069d4:	4650      	mov	r0, sl
 80069d6:	4659      	mov	r1, fp
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f7f9 ff46 	bl	800086c <__aeabi_ddiv>
 80069e0:	4682      	mov	sl, r0
 80069e2:	468b      	mov	fp, r1
 80069e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80069e8:	d0d7      	beq.n	800699a <_strtod_l+0x522>
 80069ea:	f1b8 0f1f 	cmp.w	r8, #31
 80069ee:	dd1f      	ble.n	8006a30 <_strtod_l+0x5b8>
 80069f0:	2500      	movs	r5, #0
 80069f2:	462e      	mov	r6, r5
 80069f4:	9507      	str	r5, [sp, #28]
 80069f6:	9505      	str	r5, [sp, #20]
 80069f8:	2322      	movs	r3, #34	; 0x22
 80069fa:	f04f 0a00 	mov.w	sl, #0
 80069fe:	f04f 0b00 	mov.w	fp, #0
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	e786      	b.n	8006914 <_strtod_l+0x49c>
 8006a06:	bf00      	nop
 8006a08:	0800a865 	.word	0x0800a865
 8006a0c:	0800a8a4 	.word	0x0800a8a4
 8006a10:	0800a85d 	.word	0x0800a85d
 8006a14:	0800a9e4 	.word	0x0800a9e4
 8006a18:	0800acab 	.word	0x0800acab
 8006a1c:	0800ab70 	.word	0x0800ab70
 8006a20:	0800ab48 	.word	0x0800ab48
 8006a24:	7ff00000 	.word	0x7ff00000
 8006a28:	7ca00000 	.word	0x7ca00000
 8006a2c:	7fefffff 	.word	0x7fefffff
 8006a30:	f018 0310 	ands.w	r3, r8, #16
 8006a34:	bf18      	it	ne
 8006a36:	236a      	movne	r3, #106	; 0x6a
 8006a38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006de8 <_strtod_l+0x970>
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	4650      	mov	r0, sl
 8006a40:	4659      	mov	r1, fp
 8006a42:	2300      	movs	r3, #0
 8006a44:	f018 0f01 	tst.w	r8, #1
 8006a48:	d004      	beq.n	8006a54 <_strtod_l+0x5dc>
 8006a4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a4e:	f7f9 fde3 	bl	8000618 <__aeabi_dmul>
 8006a52:	2301      	movs	r3, #1
 8006a54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006a58:	f109 0908 	add.w	r9, r9, #8
 8006a5c:	d1f2      	bne.n	8006a44 <_strtod_l+0x5cc>
 8006a5e:	b10b      	cbz	r3, 8006a64 <_strtod_l+0x5ec>
 8006a60:	4682      	mov	sl, r0
 8006a62:	468b      	mov	fp, r1
 8006a64:	9b04      	ldr	r3, [sp, #16]
 8006a66:	b1c3      	cbz	r3, 8006a9a <_strtod_l+0x622>
 8006a68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	4659      	mov	r1, fp
 8006a74:	dd11      	ble.n	8006a9a <_strtod_l+0x622>
 8006a76:	2b1f      	cmp	r3, #31
 8006a78:	f340 8124 	ble.w	8006cc4 <_strtod_l+0x84c>
 8006a7c:	2b34      	cmp	r3, #52	; 0x34
 8006a7e:	bfde      	ittt	le
 8006a80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006a84:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006a88:	fa03 f202 	lslle.w	r2, r3, r2
 8006a8c:	f04f 0a00 	mov.w	sl, #0
 8006a90:	bfcc      	ite	gt
 8006a92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a96:	ea02 0b01 	andle.w	fp, r2, r1
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4650      	mov	r0, sl
 8006aa0:	4659      	mov	r1, fp
 8006aa2:	f7fa f821 	bl	8000ae8 <__aeabi_dcmpeq>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d1a2      	bne.n	80069f0 <_strtod_l+0x578>
 8006aaa:	9b07      	ldr	r3, [sp, #28]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	9908      	ldr	r1, [sp, #32]
 8006ab0:	462b      	mov	r3, r5
 8006ab2:	463a      	mov	r2, r7
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f001 fe63 	bl	8008780 <__s2b>
 8006aba:	9007      	str	r0, [sp, #28]
 8006abc:	2800      	cmp	r0, #0
 8006abe:	f43f af1f 	beq.w	8006900 <_strtod_l+0x488>
 8006ac2:	9b05      	ldr	r3, [sp, #20]
 8006ac4:	1b9e      	subs	r6, r3, r6
 8006ac6:	9b06      	ldr	r3, [sp, #24]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfb4      	ite	lt
 8006acc:	4633      	movlt	r3, r6
 8006ace:	2300      	movge	r3, #0
 8006ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ad2:	9b06      	ldr	r3, [sp, #24]
 8006ad4:	2500      	movs	r5, #0
 8006ad6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ada:	9312      	str	r3, [sp, #72]	; 0x48
 8006adc:	462e      	mov	r6, r5
 8006ade:	9b07      	ldr	r3, [sp, #28]
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	6859      	ldr	r1, [r3, #4]
 8006ae4:	f001 fda4 	bl	8008630 <_Balloc>
 8006ae8:	9005      	str	r0, [sp, #20]
 8006aea:	2800      	cmp	r0, #0
 8006aec:	f43f af0c 	beq.w	8006908 <_strtod_l+0x490>
 8006af0:	9b07      	ldr	r3, [sp, #28]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	3202      	adds	r2, #2
 8006af6:	f103 010c 	add.w	r1, r3, #12
 8006afa:	0092      	lsls	r2, r2, #2
 8006afc:	300c      	adds	r0, #12
 8006afe:	f001 fd89 	bl	8008614 <memcpy>
 8006b02:	ec4b ab10 	vmov	d0, sl, fp
 8006b06:	aa1a      	add	r2, sp, #104	; 0x68
 8006b08:	a919      	add	r1, sp, #100	; 0x64
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f002 f97e 	bl	8008e0c <__d2b>
 8006b10:	ec4b ab18 	vmov	d8, sl, fp
 8006b14:	9018      	str	r0, [sp, #96]	; 0x60
 8006b16:	2800      	cmp	r0, #0
 8006b18:	f43f aef6 	beq.w	8006908 <_strtod_l+0x490>
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f001 fec8 	bl	80088b4 <__i2b>
 8006b24:	4606      	mov	r6, r0
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f43f aeee 	beq.w	8006908 <_strtod_l+0x490>
 8006b2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b2e:	9904      	ldr	r1, [sp, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfab      	itete	ge
 8006b34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006b36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006b38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006b3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006b3e:	bfac      	ite	ge
 8006b40:	eb03 0902 	addge.w	r9, r3, r2
 8006b44:	1ad7      	sublt	r7, r2, r3
 8006b46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b48:	eba3 0801 	sub.w	r8, r3, r1
 8006b4c:	4490      	add	r8, r2
 8006b4e:	4ba1      	ldr	r3, [pc, #644]	; (8006dd4 <_strtod_l+0x95c>)
 8006b50:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006b54:	4598      	cmp	r8, r3
 8006b56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b5a:	f280 80c7 	bge.w	8006cec <_strtod_l+0x874>
 8006b5e:	eba3 0308 	sub.w	r3, r3, r8
 8006b62:	2b1f      	cmp	r3, #31
 8006b64:	eba2 0203 	sub.w	r2, r2, r3
 8006b68:	f04f 0101 	mov.w	r1, #1
 8006b6c:	f300 80b1 	bgt.w	8006cd2 <_strtod_l+0x85a>
 8006b70:	fa01 f303 	lsl.w	r3, r1, r3
 8006b74:	930d      	str	r3, [sp, #52]	; 0x34
 8006b76:	2300      	movs	r3, #0
 8006b78:	9308      	str	r3, [sp, #32]
 8006b7a:	eb09 0802 	add.w	r8, r9, r2
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	45c1      	cmp	r9, r8
 8006b82:	4417      	add	r7, r2
 8006b84:	441f      	add	r7, r3
 8006b86:	464b      	mov	r3, r9
 8006b88:	bfa8      	it	ge
 8006b8a:	4643      	movge	r3, r8
 8006b8c:	42bb      	cmp	r3, r7
 8006b8e:	bfa8      	it	ge
 8006b90:	463b      	movge	r3, r7
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bfc2      	ittt	gt
 8006b96:	eba8 0803 	subgt.w	r8, r8, r3
 8006b9a:	1aff      	subgt	r7, r7, r3
 8006b9c:	eba9 0903 	subgt.w	r9, r9, r3
 8006ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	dd17      	ble.n	8006bd6 <_strtod_l+0x75e>
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4620      	mov	r0, r4
 8006bac:	f001 ff42 	bl	8008a34 <__pow5mult>
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f43f aea8 	beq.w	8006908 <_strtod_l+0x490>
 8006bb8:	4601      	mov	r1, r0
 8006bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f001 fe8f 	bl	80088e0 <__multiply>
 8006bc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	f43f ae9f 	beq.w	8006908 <_strtod_l+0x490>
 8006bca:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f001 fd6f 	bl	80086b0 <_Bfree>
 8006bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bd4:	9318      	str	r3, [sp, #96]	; 0x60
 8006bd6:	f1b8 0f00 	cmp.w	r8, #0
 8006bda:	f300 808c 	bgt.w	8006cf6 <_strtod_l+0x87e>
 8006bde:	9b06      	ldr	r3, [sp, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dd08      	ble.n	8006bf6 <_strtod_l+0x77e>
 8006be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006be6:	9905      	ldr	r1, [sp, #20]
 8006be8:	4620      	mov	r0, r4
 8006bea:	f001 ff23 	bl	8008a34 <__pow5mult>
 8006bee:	9005      	str	r0, [sp, #20]
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f43f ae89 	beq.w	8006908 <_strtod_l+0x490>
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	dd08      	ble.n	8006c0c <_strtod_l+0x794>
 8006bfa:	9905      	ldr	r1, [sp, #20]
 8006bfc:	463a      	mov	r2, r7
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f001 ff72 	bl	8008ae8 <__lshift>
 8006c04:	9005      	str	r0, [sp, #20]
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f43f ae7e 	beq.w	8006908 <_strtod_l+0x490>
 8006c0c:	f1b9 0f00 	cmp.w	r9, #0
 8006c10:	dd08      	ble.n	8006c24 <_strtod_l+0x7ac>
 8006c12:	4631      	mov	r1, r6
 8006c14:	464a      	mov	r2, r9
 8006c16:	4620      	mov	r0, r4
 8006c18:	f001 ff66 	bl	8008ae8 <__lshift>
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f43f ae72 	beq.w	8006908 <_strtod_l+0x490>
 8006c24:	9a05      	ldr	r2, [sp, #20]
 8006c26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f001 ffe9 	bl	8008c00 <__mdiff>
 8006c2e:	4605      	mov	r5, r0
 8006c30:	2800      	cmp	r0, #0
 8006c32:	f43f ae69 	beq.w	8006908 <_strtod_l+0x490>
 8006c36:	68c3      	ldr	r3, [r0, #12]
 8006c38:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60c3      	str	r3, [r0, #12]
 8006c3e:	4631      	mov	r1, r6
 8006c40:	f001 ffc2 	bl	8008bc8 <__mcmp>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	da60      	bge.n	8006d0a <_strtod_l+0x892>
 8006c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4a:	ea53 030a 	orrs.w	r3, r3, sl
 8006c4e:	f040 8082 	bne.w	8006d56 <_strtod_l+0x8de>
 8006c52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d17d      	bne.n	8006d56 <_strtod_l+0x8de>
 8006c5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c5e:	0d1b      	lsrs	r3, r3, #20
 8006c60:	051b      	lsls	r3, r3, #20
 8006c62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c66:	d976      	bls.n	8006d56 <_strtod_l+0x8de>
 8006c68:	696b      	ldr	r3, [r5, #20]
 8006c6a:	b913      	cbnz	r3, 8006c72 <_strtod_l+0x7fa>
 8006c6c:	692b      	ldr	r3, [r5, #16]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	dd71      	ble.n	8006d56 <_strtod_l+0x8de>
 8006c72:	4629      	mov	r1, r5
 8006c74:	2201      	movs	r2, #1
 8006c76:	4620      	mov	r0, r4
 8006c78:	f001 ff36 	bl	8008ae8 <__lshift>
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4605      	mov	r5, r0
 8006c80:	f001 ffa2 	bl	8008bc8 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	dd66      	ble.n	8006d56 <_strtod_l+0x8de>
 8006c88:	9904      	ldr	r1, [sp, #16]
 8006c8a:	4a53      	ldr	r2, [pc, #332]	; (8006dd8 <_strtod_l+0x960>)
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	f000 8081 	beq.w	8006d96 <_strtod_l+0x91e>
 8006c94:	ea02 010b 	and.w	r1, r2, fp
 8006c98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c9c:	dc7b      	bgt.n	8006d96 <_strtod_l+0x91e>
 8006c9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006ca2:	f77f aea9 	ble.w	80069f8 <_strtod_l+0x580>
 8006ca6:	4b4d      	ldr	r3, [pc, #308]	; (8006ddc <_strtod_l+0x964>)
 8006ca8:	4650      	mov	r0, sl
 8006caa:	4659      	mov	r1, fp
 8006cac:	2200      	movs	r2, #0
 8006cae:	f7f9 fcb3 	bl	8000618 <__aeabi_dmul>
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4303      	orrs	r3, r0
 8006cb6:	bf08      	it	eq
 8006cb8:	2322      	moveq	r3, #34	; 0x22
 8006cba:	4682      	mov	sl, r0
 8006cbc:	468b      	mov	fp, r1
 8006cbe:	bf08      	it	eq
 8006cc0:	6023      	streq	r3, [r4, #0]
 8006cc2:	e62b      	b.n	800691c <_strtod_l+0x4a4>
 8006cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ccc:	ea03 0a0a 	and.w	sl, r3, sl
 8006cd0:	e6e3      	b.n	8006a9a <_strtod_l+0x622>
 8006cd2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006cd6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006cda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006cde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006ce2:	fa01 f308 	lsl.w	r3, r1, r8
 8006ce6:	9308      	str	r3, [sp, #32]
 8006ce8:	910d      	str	r1, [sp, #52]	; 0x34
 8006cea:	e746      	b.n	8006b7a <_strtod_l+0x702>
 8006cec:	2300      	movs	r3, #0
 8006cee:	9308      	str	r3, [sp, #32]
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8006cf4:	e741      	b.n	8006b7a <_strtod_l+0x702>
 8006cf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f001 fef4 	bl	8008ae8 <__lshift>
 8006d00:	9018      	str	r0, [sp, #96]	; 0x60
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f47f af6b 	bne.w	8006bde <_strtod_l+0x766>
 8006d08:	e5fe      	b.n	8006908 <_strtod_l+0x490>
 8006d0a:	465f      	mov	r7, fp
 8006d0c:	d16e      	bne.n	8006dec <_strtod_l+0x974>
 8006d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d14:	b342      	cbz	r2, 8006d68 <_strtod_l+0x8f0>
 8006d16:	4a32      	ldr	r2, [pc, #200]	; (8006de0 <_strtod_l+0x968>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d128      	bne.n	8006d6e <_strtod_l+0x8f6>
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	4651      	mov	r1, sl
 8006d20:	b1eb      	cbz	r3, 8006d5e <_strtod_l+0x8e6>
 8006d22:	4b2d      	ldr	r3, [pc, #180]	; (8006dd8 <_strtod_l+0x960>)
 8006d24:	403b      	ands	r3, r7
 8006d26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d2e:	d819      	bhi.n	8006d64 <_strtod_l+0x8ec>
 8006d30:	0d1b      	lsrs	r3, r3, #20
 8006d32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	4299      	cmp	r1, r3
 8006d3c:	d117      	bne.n	8006d6e <_strtod_l+0x8f6>
 8006d3e:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <_strtod_l+0x96c>)
 8006d40:	429f      	cmp	r7, r3
 8006d42:	d102      	bne.n	8006d4a <_strtod_l+0x8d2>
 8006d44:	3101      	adds	r1, #1
 8006d46:	f43f addf 	beq.w	8006908 <_strtod_l+0x490>
 8006d4a:	4b23      	ldr	r3, [pc, #140]	; (8006dd8 <_strtod_l+0x960>)
 8006d4c:	403b      	ands	r3, r7
 8006d4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006d52:	f04f 0a00 	mov.w	sl, #0
 8006d56:	9b04      	ldr	r3, [sp, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1a4      	bne.n	8006ca6 <_strtod_l+0x82e>
 8006d5c:	e5de      	b.n	800691c <_strtod_l+0x4a4>
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d62:	e7ea      	b.n	8006d3a <_strtod_l+0x8c2>
 8006d64:	4613      	mov	r3, r2
 8006d66:	e7e8      	b.n	8006d3a <_strtod_l+0x8c2>
 8006d68:	ea53 030a 	orrs.w	r3, r3, sl
 8006d6c:	d08c      	beq.n	8006c88 <_strtod_l+0x810>
 8006d6e:	9b08      	ldr	r3, [sp, #32]
 8006d70:	b1db      	cbz	r3, 8006daa <_strtod_l+0x932>
 8006d72:	423b      	tst	r3, r7
 8006d74:	d0ef      	beq.n	8006d56 <_strtod_l+0x8de>
 8006d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d78:	9a04      	ldr	r2, [sp, #16]
 8006d7a:	4650      	mov	r0, sl
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	b1c3      	cbz	r3, 8006db2 <_strtod_l+0x93a>
 8006d80:	f7ff fb5d 	bl	800643e <sulp>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	ec51 0b18 	vmov	r0, r1, d8
 8006d8c:	f7f9 fa8e 	bl	80002ac <__adddf3>
 8006d90:	4682      	mov	sl, r0
 8006d92:	468b      	mov	fp, r1
 8006d94:	e7df      	b.n	8006d56 <_strtod_l+0x8de>
 8006d96:	4013      	ands	r3, r2
 8006d98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006da0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006da4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006da8:	e7d5      	b.n	8006d56 <_strtod_l+0x8de>
 8006daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dac:	ea13 0f0a 	tst.w	r3, sl
 8006db0:	e7e0      	b.n	8006d74 <_strtod_l+0x8fc>
 8006db2:	f7ff fb44 	bl	800643e <sulp>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	ec51 0b18 	vmov	r0, r1, d8
 8006dbe:	f7f9 fa73 	bl	80002a8 <__aeabi_dsub>
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	468b      	mov	fp, r1
 8006dca:	f7f9 fe8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d0c1      	beq.n	8006d56 <_strtod_l+0x8de>
 8006dd2:	e611      	b.n	80069f8 <_strtod_l+0x580>
 8006dd4:	fffffc02 	.word	0xfffffc02
 8006dd8:	7ff00000 	.word	0x7ff00000
 8006ddc:	39500000 	.word	0x39500000
 8006de0:	000fffff 	.word	0x000fffff
 8006de4:	7fefffff 	.word	0x7fefffff
 8006de8:	0800a8b8 	.word	0x0800a8b8
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	f002 f868 	bl	8008ec4 <__ratio>
 8006df4:	ec59 8b10 	vmov	r8, r9, d0
 8006df8:	ee10 0a10 	vmov	r0, s0
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e02:	4649      	mov	r1, r9
 8006e04:	f7f9 fe84 	bl	8000b10 <__aeabi_dcmple>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d07a      	beq.n	8006f02 <_strtod_l+0xa8a>
 8006e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d04a      	beq.n	8006ea8 <_strtod_l+0xa30>
 8006e12:	4b95      	ldr	r3, [pc, #596]	; (8007068 <_strtod_l+0xbf0>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007068 <_strtod_l+0xbf0>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	4b92      	ldr	r3, [pc, #584]	; (800706c <_strtod_l+0xbf4>)
 8006e24:	403b      	ands	r3, r7
 8006e26:	930d      	str	r3, [sp, #52]	; 0x34
 8006e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e2a:	4b91      	ldr	r3, [pc, #580]	; (8007070 <_strtod_l+0xbf8>)
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	f040 80b0 	bne.w	8006f92 <_strtod_l+0xb1a>
 8006e32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006e3a:	ec4b ab10 	vmov	d0, sl, fp
 8006e3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e42:	f001 ff67 	bl	8008d14 <__ulp>
 8006e46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e4a:	ec53 2b10 	vmov	r2, r3, d0
 8006e4e:	f7f9 fbe3 	bl	8000618 <__aeabi_dmul>
 8006e52:	4652      	mov	r2, sl
 8006e54:	465b      	mov	r3, fp
 8006e56:	f7f9 fa29 	bl	80002ac <__adddf3>
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4983      	ldr	r1, [pc, #524]	; (800706c <_strtod_l+0xbf4>)
 8006e5e:	4a85      	ldr	r2, [pc, #532]	; (8007074 <_strtod_l+0xbfc>)
 8006e60:	4019      	ands	r1, r3
 8006e62:	4291      	cmp	r1, r2
 8006e64:	4682      	mov	sl, r0
 8006e66:	d960      	bls.n	8006f2a <_strtod_l+0xab2>
 8006e68:	ee18 3a90 	vmov	r3, s17
 8006e6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d104      	bne.n	8006e7e <_strtod_l+0xa06>
 8006e74:	ee18 3a10 	vmov	r3, s16
 8006e78:	3301      	adds	r3, #1
 8006e7a:	f43f ad45 	beq.w	8006908 <_strtod_l+0x490>
 8006e7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007080 <_strtod_l+0xc08>
 8006e82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006e86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 fc11 	bl	80086b0 <_Bfree>
 8006e8e:	9905      	ldr	r1, [sp, #20]
 8006e90:	4620      	mov	r0, r4
 8006e92:	f001 fc0d 	bl	80086b0 <_Bfree>
 8006e96:	4631      	mov	r1, r6
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f001 fc09 	bl	80086b0 <_Bfree>
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f001 fc05 	bl	80086b0 <_Bfree>
 8006ea6:	e61a      	b.n	8006ade <_strtod_l+0x666>
 8006ea8:	f1ba 0f00 	cmp.w	sl, #0
 8006eac:	d11b      	bne.n	8006ee6 <_strtod_l+0xa6e>
 8006eae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006eb2:	b9f3      	cbnz	r3, 8006ef2 <_strtod_l+0xa7a>
 8006eb4:	4b6c      	ldr	r3, [pc, #432]	; (8007068 <_strtod_l+0xbf0>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4649      	mov	r1, r9
 8006ebc:	f7f9 fe1e 	bl	8000afc <__aeabi_dcmplt>
 8006ec0:	b9d0      	cbnz	r0, 8006ef8 <_strtod_l+0xa80>
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	4b6c      	ldr	r3, [pc, #432]	; (8007078 <_strtod_l+0xc00>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f7f9 fba5 	bl	8000618 <__aeabi_dmul>
 8006ece:	4680      	mov	r8, r0
 8006ed0:	4689      	mov	r9, r1
 8006ed2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ed6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006eda:	9315      	str	r3, [sp, #84]	; 0x54
 8006edc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ee0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ee4:	e79d      	b.n	8006e22 <_strtod_l+0x9aa>
 8006ee6:	f1ba 0f01 	cmp.w	sl, #1
 8006eea:	d102      	bne.n	8006ef2 <_strtod_l+0xa7a>
 8006eec:	2f00      	cmp	r7, #0
 8006eee:	f43f ad83 	beq.w	80069f8 <_strtod_l+0x580>
 8006ef2:	4b62      	ldr	r3, [pc, #392]	; (800707c <_strtod_l+0xc04>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	e78e      	b.n	8006e16 <_strtod_l+0x99e>
 8006ef8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007078 <_strtod_l+0xc00>
 8006efc:	f04f 0800 	mov.w	r8, #0
 8006f00:	e7e7      	b.n	8006ed2 <_strtod_l+0xa5a>
 8006f02:	4b5d      	ldr	r3, [pc, #372]	; (8007078 <_strtod_l+0xc00>)
 8006f04:	4640      	mov	r0, r8
 8006f06:	4649      	mov	r1, r9
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f7f9 fb85 	bl	8000618 <__aeabi_dmul>
 8006f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f10:	4680      	mov	r8, r0
 8006f12:	4689      	mov	r9, r1
 8006f14:	b933      	cbnz	r3, 8006f24 <_strtod_l+0xaac>
 8006f16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f1a:	900e      	str	r0, [sp, #56]	; 0x38
 8006f1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f22:	e7dd      	b.n	8006ee0 <_strtod_l+0xa68>
 8006f24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006f28:	e7f9      	b.n	8006f1e <_strtod_l+0xaa6>
 8006f2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1a8      	bne.n	8006e86 <_strtod_l+0xa0e>
 8006f34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f3a:	0d1b      	lsrs	r3, r3, #20
 8006f3c:	051b      	lsls	r3, r3, #20
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d1a1      	bne.n	8006e86 <_strtod_l+0xa0e>
 8006f42:	4640      	mov	r0, r8
 8006f44:	4649      	mov	r1, r9
 8006f46:	f7f9 feaf 	bl	8000ca8 <__aeabi_d2lz>
 8006f4a:	f7f9 fb37 	bl	80005bc <__aeabi_l2d>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4640      	mov	r0, r8
 8006f54:	4649      	mov	r1, r9
 8006f56:	f7f9 f9a7 	bl	80002a8 <__aeabi_dsub>
 8006f5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f60:	ea43 030a 	orr.w	r3, r3, sl
 8006f64:	4313      	orrs	r3, r2
 8006f66:	4680      	mov	r8, r0
 8006f68:	4689      	mov	r9, r1
 8006f6a:	d055      	beq.n	8007018 <_strtod_l+0xba0>
 8006f6c:	a336      	add	r3, pc, #216	; (adr r3, 8007048 <_strtod_l+0xbd0>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 fdc3 	bl	8000afc <__aeabi_dcmplt>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f47f acd0 	bne.w	800691c <_strtod_l+0x4a4>
 8006f7c:	a334      	add	r3, pc, #208	; (adr r3, 8007050 <_strtod_l+0xbd8>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 fdd7 	bl	8000b38 <__aeabi_dcmpgt>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	f43f af7b 	beq.w	8006e86 <_strtod_l+0xa0e>
 8006f90:	e4c4      	b.n	800691c <_strtod_l+0x4a4>
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	b333      	cbz	r3, 8006fe4 <_strtod_l+0xb6c>
 8006f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f9c:	d822      	bhi.n	8006fe4 <_strtod_l+0xb6c>
 8006f9e:	a32e      	add	r3, pc, #184	; (adr r3, 8007058 <_strtod_l+0xbe0>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	f7f9 fdb2 	bl	8000b10 <__aeabi_dcmple>
 8006fac:	b1a0      	cbz	r0, 8006fd8 <_strtod_l+0xb60>
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f7f9 fe09 	bl	8000bc8 <__aeabi_d2uiz>
 8006fb6:	2801      	cmp	r0, #1
 8006fb8:	bf38      	it	cc
 8006fba:	2001      	movcc	r0, #1
 8006fbc:	f7f9 fab2 	bl	8000524 <__aeabi_ui2d>
 8006fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	4689      	mov	r9, r1
 8006fc6:	bb23      	cbnz	r3, 8007012 <_strtod_l+0xb9a>
 8006fc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fcc:	9010      	str	r0, [sp, #64]	; 0x40
 8006fce:	9311      	str	r3, [sp, #68]	; 0x44
 8006fd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fdc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fe8:	eeb0 0a48 	vmov.f32	s0, s16
 8006fec:	eef0 0a68 	vmov.f32	s1, s17
 8006ff0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ff4:	f001 fe8e 	bl	8008d14 <__ulp>
 8006ff8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ffc:	ec53 2b10 	vmov	r2, r3, d0
 8007000:	f7f9 fb0a 	bl	8000618 <__aeabi_dmul>
 8007004:	ec53 2b18 	vmov	r2, r3, d8
 8007008:	f7f9 f950 	bl	80002ac <__adddf3>
 800700c:	4682      	mov	sl, r0
 800700e:	468b      	mov	fp, r1
 8007010:	e78d      	b.n	8006f2e <_strtod_l+0xab6>
 8007012:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007016:	e7db      	b.n	8006fd0 <_strtod_l+0xb58>
 8007018:	a311      	add	r3, pc, #68	; (adr r3, 8007060 <_strtod_l+0xbe8>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 fd6d 	bl	8000afc <__aeabi_dcmplt>
 8007022:	e7b2      	b.n	8006f8a <_strtod_l+0xb12>
 8007024:	2300      	movs	r3, #0
 8007026:	930a      	str	r3, [sp, #40]	; 0x28
 8007028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800702a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	f7ff ba6b 	b.w	8006508 <_strtod_l+0x90>
 8007032:	2a65      	cmp	r2, #101	; 0x65
 8007034:	f43f ab5f 	beq.w	80066f6 <_strtod_l+0x27e>
 8007038:	2a45      	cmp	r2, #69	; 0x45
 800703a:	f43f ab5c 	beq.w	80066f6 <_strtod_l+0x27e>
 800703e:	2301      	movs	r3, #1
 8007040:	f7ff bb94 	b.w	800676c <_strtod_l+0x2f4>
 8007044:	f3af 8000 	nop.w
 8007048:	94a03595 	.word	0x94a03595
 800704c:	3fdfffff 	.word	0x3fdfffff
 8007050:	35afe535 	.word	0x35afe535
 8007054:	3fe00000 	.word	0x3fe00000
 8007058:	ffc00000 	.word	0xffc00000
 800705c:	41dfffff 	.word	0x41dfffff
 8007060:	94a03595 	.word	0x94a03595
 8007064:	3fcfffff 	.word	0x3fcfffff
 8007068:	3ff00000 	.word	0x3ff00000
 800706c:	7ff00000 	.word	0x7ff00000
 8007070:	7fe00000 	.word	0x7fe00000
 8007074:	7c9fffff 	.word	0x7c9fffff
 8007078:	3fe00000 	.word	0x3fe00000
 800707c:	bff00000 	.word	0xbff00000
 8007080:	7fefffff 	.word	0x7fefffff

08007084 <_strtod_r>:
 8007084:	4b01      	ldr	r3, [pc, #4]	; (800708c <_strtod_r+0x8>)
 8007086:	f7ff b9f7 	b.w	8006478 <_strtod_l>
 800708a:	bf00      	nop
 800708c:	2000007c 	.word	0x2000007c

08007090 <_strtol_l.constprop.0>:
 8007090:	2b01      	cmp	r3, #1
 8007092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007096:	d001      	beq.n	800709c <_strtol_l.constprop.0+0xc>
 8007098:	2b24      	cmp	r3, #36	; 0x24
 800709a:	d906      	bls.n	80070aa <_strtol_l.constprop.0+0x1a>
 800709c:	f7fe fa8c 	bl	80055b8 <__errno>
 80070a0:	2316      	movs	r3, #22
 80070a2:	6003      	str	r3, [r0, #0]
 80070a4:	2000      	movs	r0, #0
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007190 <_strtol_l.constprop.0+0x100>
 80070ae:	460d      	mov	r5, r1
 80070b0:	462e      	mov	r6, r5
 80070b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80070ba:	f017 0708 	ands.w	r7, r7, #8
 80070be:	d1f7      	bne.n	80070b0 <_strtol_l.constprop.0+0x20>
 80070c0:	2c2d      	cmp	r4, #45	; 0x2d
 80070c2:	d132      	bne.n	800712a <_strtol_l.constprop.0+0x9a>
 80070c4:	782c      	ldrb	r4, [r5, #0]
 80070c6:	2701      	movs	r7, #1
 80070c8:	1cb5      	adds	r5, r6, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d05b      	beq.n	8007186 <_strtol_l.constprop.0+0xf6>
 80070ce:	2b10      	cmp	r3, #16
 80070d0:	d109      	bne.n	80070e6 <_strtol_l.constprop.0+0x56>
 80070d2:	2c30      	cmp	r4, #48	; 0x30
 80070d4:	d107      	bne.n	80070e6 <_strtol_l.constprop.0+0x56>
 80070d6:	782c      	ldrb	r4, [r5, #0]
 80070d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80070dc:	2c58      	cmp	r4, #88	; 0x58
 80070de:	d14d      	bne.n	800717c <_strtol_l.constprop.0+0xec>
 80070e0:	786c      	ldrb	r4, [r5, #1]
 80070e2:	2310      	movs	r3, #16
 80070e4:	3502      	adds	r5, #2
 80070e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80070ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80070ee:	f04f 0c00 	mov.w	ip, #0
 80070f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80070f6:	4666      	mov	r6, ip
 80070f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80070fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007100:	f1be 0f09 	cmp.w	lr, #9
 8007104:	d816      	bhi.n	8007134 <_strtol_l.constprop.0+0xa4>
 8007106:	4674      	mov	r4, lr
 8007108:	42a3      	cmp	r3, r4
 800710a:	dd24      	ble.n	8007156 <_strtol_l.constprop.0+0xc6>
 800710c:	f1bc 0f00 	cmp.w	ip, #0
 8007110:	db1e      	blt.n	8007150 <_strtol_l.constprop.0+0xc0>
 8007112:	45b1      	cmp	r9, r6
 8007114:	d31c      	bcc.n	8007150 <_strtol_l.constprop.0+0xc0>
 8007116:	d101      	bne.n	800711c <_strtol_l.constprop.0+0x8c>
 8007118:	45a2      	cmp	sl, r4
 800711a:	db19      	blt.n	8007150 <_strtol_l.constprop.0+0xc0>
 800711c:	fb06 4603 	mla	r6, r6, r3, r4
 8007120:	f04f 0c01 	mov.w	ip, #1
 8007124:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007128:	e7e8      	b.n	80070fc <_strtol_l.constprop.0+0x6c>
 800712a:	2c2b      	cmp	r4, #43	; 0x2b
 800712c:	bf04      	itt	eq
 800712e:	782c      	ldrbeq	r4, [r5, #0]
 8007130:	1cb5      	addeq	r5, r6, #2
 8007132:	e7ca      	b.n	80070ca <_strtol_l.constprop.0+0x3a>
 8007134:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007138:	f1be 0f19 	cmp.w	lr, #25
 800713c:	d801      	bhi.n	8007142 <_strtol_l.constprop.0+0xb2>
 800713e:	3c37      	subs	r4, #55	; 0x37
 8007140:	e7e2      	b.n	8007108 <_strtol_l.constprop.0+0x78>
 8007142:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007146:	f1be 0f19 	cmp.w	lr, #25
 800714a:	d804      	bhi.n	8007156 <_strtol_l.constprop.0+0xc6>
 800714c:	3c57      	subs	r4, #87	; 0x57
 800714e:	e7db      	b.n	8007108 <_strtol_l.constprop.0+0x78>
 8007150:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007154:	e7e6      	b.n	8007124 <_strtol_l.constprop.0+0x94>
 8007156:	f1bc 0f00 	cmp.w	ip, #0
 800715a:	da05      	bge.n	8007168 <_strtol_l.constprop.0+0xd8>
 800715c:	2322      	movs	r3, #34	; 0x22
 800715e:	6003      	str	r3, [r0, #0]
 8007160:	4646      	mov	r6, r8
 8007162:	b942      	cbnz	r2, 8007176 <_strtol_l.constprop.0+0xe6>
 8007164:	4630      	mov	r0, r6
 8007166:	e79e      	b.n	80070a6 <_strtol_l.constprop.0+0x16>
 8007168:	b107      	cbz	r7, 800716c <_strtol_l.constprop.0+0xdc>
 800716a:	4276      	negs	r6, r6
 800716c:	2a00      	cmp	r2, #0
 800716e:	d0f9      	beq.n	8007164 <_strtol_l.constprop.0+0xd4>
 8007170:	f1bc 0f00 	cmp.w	ip, #0
 8007174:	d000      	beq.n	8007178 <_strtol_l.constprop.0+0xe8>
 8007176:	1e69      	subs	r1, r5, #1
 8007178:	6011      	str	r1, [r2, #0]
 800717a:	e7f3      	b.n	8007164 <_strtol_l.constprop.0+0xd4>
 800717c:	2430      	movs	r4, #48	; 0x30
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1b1      	bne.n	80070e6 <_strtol_l.constprop.0+0x56>
 8007182:	2308      	movs	r3, #8
 8007184:	e7af      	b.n	80070e6 <_strtol_l.constprop.0+0x56>
 8007186:	2c30      	cmp	r4, #48	; 0x30
 8007188:	d0a5      	beq.n	80070d6 <_strtol_l.constprop.0+0x46>
 800718a:	230a      	movs	r3, #10
 800718c:	e7ab      	b.n	80070e6 <_strtol_l.constprop.0+0x56>
 800718e:	bf00      	nop
 8007190:	0800a8e1 	.word	0x0800a8e1

08007194 <_strtol_r>:
 8007194:	f7ff bf7c 	b.w	8007090 <_strtol_l.constprop.0>

08007198 <_write_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4d07      	ldr	r5, [pc, #28]	; (80071b8 <_write_r+0x20>)
 800719c:	4604      	mov	r4, r0
 800719e:	4608      	mov	r0, r1
 80071a0:	4611      	mov	r1, r2
 80071a2:	2200      	movs	r2, #0
 80071a4:	602a      	str	r2, [r5, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	f7fa faa9 	bl	80016fe <_write>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d102      	bne.n	80071b6 <_write_r+0x1e>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	b103      	cbz	r3, 80071b6 <_write_r+0x1e>
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	2000033c 	.word	0x2000033c

080071bc <_close_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d06      	ldr	r5, [pc, #24]	; (80071d8 <_close_r+0x1c>)
 80071c0:	2300      	movs	r3, #0
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	602b      	str	r3, [r5, #0]
 80071c8:	f7fa fab5 	bl	8001736 <_close>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_close_r+0x1a>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_close_r+0x1a>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	2000033c 	.word	0x2000033c

080071dc <quorem>:
 80071dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e0:	6903      	ldr	r3, [r0, #16]
 80071e2:	690c      	ldr	r4, [r1, #16]
 80071e4:	42a3      	cmp	r3, r4
 80071e6:	4607      	mov	r7, r0
 80071e8:	f2c0 8081 	blt.w	80072ee <quorem+0x112>
 80071ec:	3c01      	subs	r4, #1
 80071ee:	f101 0814 	add.w	r8, r1, #20
 80071f2:	f100 0514 	add.w	r5, r0, #20
 80071f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071fa:	9301      	str	r3, [sp, #4]
 80071fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007204:	3301      	adds	r3, #1
 8007206:	429a      	cmp	r2, r3
 8007208:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800720c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007210:	fbb2 f6f3 	udiv	r6, r2, r3
 8007214:	d331      	bcc.n	800727a <quorem+0x9e>
 8007216:	f04f 0e00 	mov.w	lr, #0
 800721a:	4640      	mov	r0, r8
 800721c:	46ac      	mov	ip, r5
 800721e:	46f2      	mov	sl, lr
 8007220:	f850 2b04 	ldr.w	r2, [r0], #4
 8007224:	b293      	uxth	r3, r2
 8007226:	fb06 e303 	mla	r3, r6, r3, lr
 800722a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800722e:	b29b      	uxth	r3, r3
 8007230:	ebaa 0303 	sub.w	r3, sl, r3
 8007234:	f8dc a000 	ldr.w	sl, [ip]
 8007238:	0c12      	lsrs	r2, r2, #16
 800723a:	fa13 f38a 	uxtah	r3, r3, sl
 800723e:	fb06 e202 	mla	r2, r6, r2, lr
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	9b00      	ldr	r3, [sp, #0]
 8007246:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800724a:	b292      	uxth	r2, r2
 800724c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007250:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007254:	f8bd 3000 	ldrh.w	r3, [sp]
 8007258:	4581      	cmp	r9, r0
 800725a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800725e:	f84c 3b04 	str.w	r3, [ip], #4
 8007262:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007266:	d2db      	bcs.n	8007220 <quorem+0x44>
 8007268:	f855 300b 	ldr.w	r3, [r5, fp]
 800726c:	b92b      	cbnz	r3, 800727a <quorem+0x9e>
 800726e:	9b01      	ldr	r3, [sp, #4]
 8007270:	3b04      	subs	r3, #4
 8007272:	429d      	cmp	r5, r3
 8007274:	461a      	mov	r2, r3
 8007276:	d32e      	bcc.n	80072d6 <quorem+0xfa>
 8007278:	613c      	str	r4, [r7, #16]
 800727a:	4638      	mov	r0, r7
 800727c:	f001 fca4 	bl	8008bc8 <__mcmp>
 8007280:	2800      	cmp	r0, #0
 8007282:	db24      	blt.n	80072ce <quorem+0xf2>
 8007284:	3601      	adds	r6, #1
 8007286:	4628      	mov	r0, r5
 8007288:	f04f 0c00 	mov.w	ip, #0
 800728c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007290:	f8d0 e000 	ldr.w	lr, [r0]
 8007294:	b293      	uxth	r3, r2
 8007296:	ebac 0303 	sub.w	r3, ip, r3
 800729a:	0c12      	lsrs	r2, r2, #16
 800729c:	fa13 f38e 	uxtah	r3, r3, lr
 80072a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ae:	45c1      	cmp	r9, r8
 80072b0:	f840 3b04 	str.w	r3, [r0], #4
 80072b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072b8:	d2e8      	bcs.n	800728c <quorem+0xb0>
 80072ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072c2:	b922      	cbnz	r2, 80072ce <quorem+0xf2>
 80072c4:	3b04      	subs	r3, #4
 80072c6:	429d      	cmp	r5, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	d30a      	bcc.n	80072e2 <quorem+0x106>
 80072cc:	613c      	str	r4, [r7, #16]
 80072ce:	4630      	mov	r0, r6
 80072d0:	b003      	add	sp, #12
 80072d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	3b04      	subs	r3, #4
 80072da:	2a00      	cmp	r2, #0
 80072dc:	d1cc      	bne.n	8007278 <quorem+0x9c>
 80072de:	3c01      	subs	r4, #1
 80072e0:	e7c7      	b.n	8007272 <quorem+0x96>
 80072e2:	6812      	ldr	r2, [r2, #0]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	d1f0      	bne.n	80072cc <quorem+0xf0>
 80072ea:	3c01      	subs	r4, #1
 80072ec:	e7eb      	b.n	80072c6 <quorem+0xea>
 80072ee:	2000      	movs	r0, #0
 80072f0:	e7ee      	b.n	80072d0 <quorem+0xf4>
 80072f2:	0000      	movs	r0, r0
 80072f4:	0000      	movs	r0, r0
	...

080072f8 <_dtoa_r>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	ed2d 8b04 	vpush	{d8-d9}
 8007300:	ec57 6b10 	vmov	r6, r7, d0
 8007304:	b093      	sub	sp, #76	; 0x4c
 8007306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007308:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800730c:	9106      	str	r1, [sp, #24]
 800730e:	ee10 aa10 	vmov	sl, s0
 8007312:	4604      	mov	r4, r0
 8007314:	9209      	str	r2, [sp, #36]	; 0x24
 8007316:	930c      	str	r3, [sp, #48]	; 0x30
 8007318:	46bb      	mov	fp, r7
 800731a:	b975      	cbnz	r5, 800733a <_dtoa_r+0x42>
 800731c:	2010      	movs	r0, #16
 800731e:	f001 f95f 	bl	80085e0 <malloc>
 8007322:	4602      	mov	r2, r0
 8007324:	6260      	str	r0, [r4, #36]	; 0x24
 8007326:	b920      	cbnz	r0, 8007332 <_dtoa_r+0x3a>
 8007328:	4ba7      	ldr	r3, [pc, #668]	; (80075c8 <_dtoa_r+0x2d0>)
 800732a:	21ea      	movs	r1, #234	; 0xea
 800732c:	48a7      	ldr	r0, [pc, #668]	; (80075cc <_dtoa_r+0x2d4>)
 800732e:	f002 fceb 	bl	8009d08 <__assert_func>
 8007332:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007336:	6005      	str	r5, [r0, #0]
 8007338:	60c5      	str	r5, [r0, #12]
 800733a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800733c:	6819      	ldr	r1, [r3, #0]
 800733e:	b151      	cbz	r1, 8007356 <_dtoa_r+0x5e>
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	604a      	str	r2, [r1, #4]
 8007344:	2301      	movs	r3, #1
 8007346:	4093      	lsls	r3, r2
 8007348:	608b      	str	r3, [r1, #8]
 800734a:	4620      	mov	r0, r4
 800734c:	f001 f9b0 	bl	80086b0 <_Bfree>
 8007350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	1e3b      	subs	r3, r7, #0
 8007358:	bfaa      	itet	ge
 800735a:	2300      	movge	r3, #0
 800735c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007360:	f8c8 3000 	strge.w	r3, [r8]
 8007364:	4b9a      	ldr	r3, [pc, #616]	; (80075d0 <_dtoa_r+0x2d8>)
 8007366:	bfbc      	itt	lt
 8007368:	2201      	movlt	r2, #1
 800736a:	f8c8 2000 	strlt.w	r2, [r8]
 800736e:	ea33 030b 	bics.w	r3, r3, fp
 8007372:	d11b      	bne.n	80073ac <_dtoa_r+0xb4>
 8007374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007376:	f242 730f 	movw	r3, #9999	; 0x270f
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007380:	4333      	orrs	r3, r6
 8007382:	f000 8592 	beq.w	8007eaa <_dtoa_r+0xbb2>
 8007386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007388:	b963      	cbnz	r3, 80073a4 <_dtoa_r+0xac>
 800738a:	4b92      	ldr	r3, [pc, #584]	; (80075d4 <_dtoa_r+0x2dc>)
 800738c:	e022      	b.n	80073d4 <_dtoa_r+0xdc>
 800738e:	4b92      	ldr	r3, [pc, #584]	; (80075d8 <_dtoa_r+0x2e0>)
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	3308      	adds	r3, #8
 8007394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	9801      	ldr	r0, [sp, #4]
 800739a:	b013      	add	sp, #76	; 0x4c
 800739c:	ecbd 8b04 	vpop	{d8-d9}
 80073a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a4:	4b8b      	ldr	r3, [pc, #556]	; (80075d4 <_dtoa_r+0x2dc>)
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	3303      	adds	r3, #3
 80073aa:	e7f3      	b.n	8007394 <_dtoa_r+0x9c>
 80073ac:	2200      	movs	r2, #0
 80073ae:	2300      	movs	r3, #0
 80073b0:	4650      	mov	r0, sl
 80073b2:	4659      	mov	r1, fp
 80073b4:	f7f9 fb98 	bl	8000ae8 <__aeabi_dcmpeq>
 80073b8:	ec4b ab19 	vmov	d9, sl, fp
 80073bc:	4680      	mov	r8, r0
 80073be:	b158      	cbz	r0, 80073d8 <_dtoa_r+0xe0>
 80073c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073c2:	2301      	movs	r3, #1
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 856b 	beq.w	8007ea4 <_dtoa_r+0xbac>
 80073ce:	4883      	ldr	r0, [pc, #524]	; (80075dc <_dtoa_r+0x2e4>)
 80073d0:	6018      	str	r0, [r3, #0]
 80073d2:	1e43      	subs	r3, r0, #1
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	e7df      	b.n	8007398 <_dtoa_r+0xa0>
 80073d8:	ec4b ab10 	vmov	d0, sl, fp
 80073dc:	aa10      	add	r2, sp, #64	; 0x40
 80073de:	a911      	add	r1, sp, #68	; 0x44
 80073e0:	4620      	mov	r0, r4
 80073e2:	f001 fd13 	bl	8008e0c <__d2b>
 80073e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80073ea:	ee08 0a10 	vmov	s16, r0
 80073ee:	2d00      	cmp	r5, #0
 80073f0:	f000 8084 	beq.w	80074fc <_dtoa_r+0x204>
 80073f4:	ee19 3a90 	vmov	r3, s19
 80073f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007400:	4656      	mov	r6, sl
 8007402:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800740a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800740e:	4b74      	ldr	r3, [pc, #464]	; (80075e0 <_dtoa_r+0x2e8>)
 8007410:	2200      	movs	r2, #0
 8007412:	4630      	mov	r0, r6
 8007414:	4639      	mov	r1, r7
 8007416:	f7f8 ff47 	bl	80002a8 <__aeabi_dsub>
 800741a:	a365      	add	r3, pc, #404	; (adr r3, 80075b0 <_dtoa_r+0x2b8>)
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f7f9 f8fa 	bl	8000618 <__aeabi_dmul>
 8007424:	a364      	add	r3, pc, #400	; (adr r3, 80075b8 <_dtoa_r+0x2c0>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f7f8 ff3f 	bl	80002ac <__adddf3>
 800742e:	4606      	mov	r6, r0
 8007430:	4628      	mov	r0, r5
 8007432:	460f      	mov	r7, r1
 8007434:	f7f9 f886 	bl	8000544 <__aeabi_i2d>
 8007438:	a361      	add	r3, pc, #388	; (adr r3, 80075c0 <_dtoa_r+0x2c8>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 f8eb 	bl	8000618 <__aeabi_dmul>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4630      	mov	r0, r6
 8007448:	4639      	mov	r1, r7
 800744a:	f7f8 ff2f 	bl	80002ac <__adddf3>
 800744e:	4606      	mov	r6, r0
 8007450:	460f      	mov	r7, r1
 8007452:	f7f9 fb91 	bl	8000b78 <__aeabi_d2iz>
 8007456:	2200      	movs	r2, #0
 8007458:	9000      	str	r0, [sp, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	4630      	mov	r0, r6
 800745e:	4639      	mov	r1, r7
 8007460:	f7f9 fb4c 	bl	8000afc <__aeabi_dcmplt>
 8007464:	b150      	cbz	r0, 800747c <_dtoa_r+0x184>
 8007466:	9800      	ldr	r0, [sp, #0]
 8007468:	f7f9 f86c 	bl	8000544 <__aeabi_i2d>
 800746c:	4632      	mov	r2, r6
 800746e:	463b      	mov	r3, r7
 8007470:	f7f9 fb3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007474:	b910      	cbnz	r0, 800747c <_dtoa_r+0x184>
 8007476:	9b00      	ldr	r3, [sp, #0]
 8007478:	3b01      	subs	r3, #1
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	2b16      	cmp	r3, #22
 8007480:	d85a      	bhi.n	8007538 <_dtoa_r+0x240>
 8007482:	9a00      	ldr	r2, [sp, #0]
 8007484:	4b57      	ldr	r3, [pc, #348]	; (80075e4 <_dtoa_r+0x2ec>)
 8007486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	ec51 0b19 	vmov	r0, r1, d9
 8007492:	f7f9 fb33 	bl	8000afc <__aeabi_dcmplt>
 8007496:	2800      	cmp	r0, #0
 8007498:	d050      	beq.n	800753c <_dtoa_r+0x244>
 800749a:	9b00      	ldr	r3, [sp, #0]
 800749c:	3b01      	subs	r3, #1
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2300      	movs	r3, #0
 80074a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80074a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074a6:	1b5d      	subs	r5, r3, r5
 80074a8:	1e6b      	subs	r3, r5, #1
 80074aa:	9305      	str	r3, [sp, #20]
 80074ac:	bf45      	ittet	mi
 80074ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80074b2:	9304      	strmi	r3, [sp, #16]
 80074b4:	2300      	movpl	r3, #0
 80074b6:	2300      	movmi	r3, #0
 80074b8:	bf4c      	ite	mi
 80074ba:	9305      	strmi	r3, [sp, #20]
 80074bc:	9304      	strpl	r3, [sp, #16]
 80074be:	9b00      	ldr	r3, [sp, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	db3d      	blt.n	8007540 <_dtoa_r+0x248>
 80074c4:	9b05      	ldr	r3, [sp, #20]
 80074c6:	9a00      	ldr	r2, [sp, #0]
 80074c8:	920a      	str	r2, [sp, #40]	; 0x28
 80074ca:	4413      	add	r3, r2
 80074cc:	9305      	str	r3, [sp, #20]
 80074ce:	2300      	movs	r3, #0
 80074d0:	9307      	str	r3, [sp, #28]
 80074d2:	9b06      	ldr	r3, [sp, #24]
 80074d4:	2b09      	cmp	r3, #9
 80074d6:	f200 8089 	bhi.w	80075ec <_dtoa_r+0x2f4>
 80074da:	2b05      	cmp	r3, #5
 80074dc:	bfc4      	itt	gt
 80074de:	3b04      	subgt	r3, #4
 80074e0:	9306      	strgt	r3, [sp, #24]
 80074e2:	9b06      	ldr	r3, [sp, #24]
 80074e4:	f1a3 0302 	sub.w	r3, r3, #2
 80074e8:	bfcc      	ite	gt
 80074ea:	2500      	movgt	r5, #0
 80074ec:	2501      	movle	r5, #1
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	f200 8087 	bhi.w	8007602 <_dtoa_r+0x30a>
 80074f4:	e8df f003 	tbb	[pc, r3]
 80074f8:	59383a2d 	.word	0x59383a2d
 80074fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007500:	441d      	add	r5, r3
 8007502:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007506:	2b20      	cmp	r3, #32
 8007508:	bfc1      	itttt	gt
 800750a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800750e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007512:	fa0b f303 	lslgt.w	r3, fp, r3
 8007516:	fa26 f000 	lsrgt.w	r0, r6, r0
 800751a:	bfda      	itte	le
 800751c:	f1c3 0320 	rsble	r3, r3, #32
 8007520:	fa06 f003 	lslle.w	r0, r6, r3
 8007524:	4318      	orrgt	r0, r3
 8007526:	f7f8 fffd 	bl	8000524 <__aeabi_ui2d>
 800752a:	2301      	movs	r3, #1
 800752c:	4606      	mov	r6, r0
 800752e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007532:	3d01      	subs	r5, #1
 8007534:	930e      	str	r3, [sp, #56]	; 0x38
 8007536:	e76a      	b.n	800740e <_dtoa_r+0x116>
 8007538:	2301      	movs	r3, #1
 800753a:	e7b2      	b.n	80074a2 <_dtoa_r+0x1aa>
 800753c:	900b      	str	r0, [sp, #44]	; 0x2c
 800753e:	e7b1      	b.n	80074a4 <_dtoa_r+0x1ac>
 8007540:	9b04      	ldr	r3, [sp, #16]
 8007542:	9a00      	ldr	r2, [sp, #0]
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	4253      	negs	r3, r2
 800754a:	9307      	str	r3, [sp, #28]
 800754c:	2300      	movs	r3, #0
 800754e:	930a      	str	r3, [sp, #40]	; 0x28
 8007550:	e7bf      	b.n	80074d2 <_dtoa_r+0x1da>
 8007552:	2300      	movs	r3, #0
 8007554:	9308      	str	r3, [sp, #32]
 8007556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	dc55      	bgt.n	8007608 <_dtoa_r+0x310>
 800755c:	2301      	movs	r3, #1
 800755e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007562:	461a      	mov	r2, r3
 8007564:	9209      	str	r2, [sp, #36]	; 0x24
 8007566:	e00c      	b.n	8007582 <_dtoa_r+0x28a>
 8007568:	2301      	movs	r3, #1
 800756a:	e7f3      	b.n	8007554 <_dtoa_r+0x25c>
 800756c:	2300      	movs	r3, #0
 800756e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007570:	9308      	str	r3, [sp, #32]
 8007572:	9b00      	ldr	r3, [sp, #0]
 8007574:	4413      	add	r3, r2
 8007576:	9302      	str	r3, [sp, #8]
 8007578:	3301      	adds	r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	9303      	str	r3, [sp, #12]
 800757e:	bfb8      	it	lt
 8007580:	2301      	movlt	r3, #1
 8007582:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007584:	2200      	movs	r2, #0
 8007586:	6042      	str	r2, [r0, #4]
 8007588:	2204      	movs	r2, #4
 800758a:	f102 0614 	add.w	r6, r2, #20
 800758e:	429e      	cmp	r6, r3
 8007590:	6841      	ldr	r1, [r0, #4]
 8007592:	d93d      	bls.n	8007610 <_dtoa_r+0x318>
 8007594:	4620      	mov	r0, r4
 8007596:	f001 f84b 	bl	8008630 <_Balloc>
 800759a:	9001      	str	r0, [sp, #4]
 800759c:	2800      	cmp	r0, #0
 800759e:	d13b      	bne.n	8007618 <_dtoa_r+0x320>
 80075a0:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <_dtoa_r+0x2f0>)
 80075a2:	4602      	mov	r2, r0
 80075a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075a8:	e6c0      	b.n	800732c <_dtoa_r+0x34>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e7df      	b.n	800756e <_dtoa_r+0x276>
 80075ae:	bf00      	nop
 80075b0:	636f4361 	.word	0x636f4361
 80075b4:	3fd287a7 	.word	0x3fd287a7
 80075b8:	8b60c8b3 	.word	0x8b60c8b3
 80075bc:	3fc68a28 	.word	0x3fc68a28
 80075c0:	509f79fb 	.word	0x509f79fb
 80075c4:	3fd34413 	.word	0x3fd34413
 80075c8:	0800a9ee 	.word	0x0800a9ee
 80075cc:	0800aa05 	.word	0x0800aa05
 80075d0:	7ff00000 	.word	0x7ff00000
 80075d4:	0800a9ea 	.word	0x0800a9ea
 80075d8:	0800a9e1 	.word	0x0800a9e1
 80075dc:	0800ac5a 	.word	0x0800ac5a
 80075e0:	3ff80000 	.word	0x3ff80000
 80075e4:	0800ab70 	.word	0x0800ab70
 80075e8:	0800aa60 	.word	0x0800aa60
 80075ec:	2501      	movs	r5, #1
 80075ee:	2300      	movs	r3, #0
 80075f0:	9306      	str	r3, [sp, #24]
 80075f2:	9508      	str	r5, [sp, #32]
 80075f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2312      	movs	r3, #18
 8007600:	e7b0      	b.n	8007564 <_dtoa_r+0x26c>
 8007602:	2301      	movs	r3, #1
 8007604:	9308      	str	r3, [sp, #32]
 8007606:	e7f5      	b.n	80075f4 <_dtoa_r+0x2fc>
 8007608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800760e:	e7b8      	b.n	8007582 <_dtoa_r+0x28a>
 8007610:	3101      	adds	r1, #1
 8007612:	6041      	str	r1, [r0, #4]
 8007614:	0052      	lsls	r2, r2, #1
 8007616:	e7b8      	b.n	800758a <_dtoa_r+0x292>
 8007618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800761a:	9a01      	ldr	r2, [sp, #4]
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	2b0e      	cmp	r3, #14
 8007622:	f200 809d 	bhi.w	8007760 <_dtoa_r+0x468>
 8007626:	2d00      	cmp	r5, #0
 8007628:	f000 809a 	beq.w	8007760 <_dtoa_r+0x468>
 800762c:	9b00      	ldr	r3, [sp, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	dd32      	ble.n	8007698 <_dtoa_r+0x3a0>
 8007632:	4ab7      	ldr	r2, [pc, #732]	; (8007910 <_dtoa_r+0x618>)
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800763c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007640:	9b00      	ldr	r3, [sp, #0]
 8007642:	05d8      	lsls	r0, r3, #23
 8007644:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007648:	d516      	bpl.n	8007678 <_dtoa_r+0x380>
 800764a:	4bb2      	ldr	r3, [pc, #712]	; (8007914 <_dtoa_r+0x61c>)
 800764c:	ec51 0b19 	vmov	r0, r1, d9
 8007650:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007654:	f7f9 f90a 	bl	800086c <__aeabi_ddiv>
 8007658:	f007 070f 	and.w	r7, r7, #15
 800765c:	4682      	mov	sl, r0
 800765e:	468b      	mov	fp, r1
 8007660:	2503      	movs	r5, #3
 8007662:	4eac      	ldr	r6, [pc, #688]	; (8007914 <_dtoa_r+0x61c>)
 8007664:	b957      	cbnz	r7, 800767c <_dtoa_r+0x384>
 8007666:	4642      	mov	r2, r8
 8007668:	464b      	mov	r3, r9
 800766a:	4650      	mov	r0, sl
 800766c:	4659      	mov	r1, fp
 800766e:	f7f9 f8fd 	bl	800086c <__aeabi_ddiv>
 8007672:	4682      	mov	sl, r0
 8007674:	468b      	mov	fp, r1
 8007676:	e028      	b.n	80076ca <_dtoa_r+0x3d2>
 8007678:	2502      	movs	r5, #2
 800767a:	e7f2      	b.n	8007662 <_dtoa_r+0x36a>
 800767c:	07f9      	lsls	r1, r7, #31
 800767e:	d508      	bpl.n	8007692 <_dtoa_r+0x39a>
 8007680:	4640      	mov	r0, r8
 8007682:	4649      	mov	r1, r9
 8007684:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007688:	f7f8 ffc6 	bl	8000618 <__aeabi_dmul>
 800768c:	3501      	adds	r5, #1
 800768e:	4680      	mov	r8, r0
 8007690:	4689      	mov	r9, r1
 8007692:	107f      	asrs	r7, r7, #1
 8007694:	3608      	adds	r6, #8
 8007696:	e7e5      	b.n	8007664 <_dtoa_r+0x36c>
 8007698:	f000 809b 	beq.w	80077d2 <_dtoa_r+0x4da>
 800769c:	9b00      	ldr	r3, [sp, #0]
 800769e:	4f9d      	ldr	r7, [pc, #628]	; (8007914 <_dtoa_r+0x61c>)
 80076a0:	425e      	negs	r6, r3
 80076a2:	4b9b      	ldr	r3, [pc, #620]	; (8007910 <_dtoa_r+0x618>)
 80076a4:	f006 020f 	and.w	r2, r6, #15
 80076a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	ec51 0b19 	vmov	r0, r1, d9
 80076b4:	f7f8 ffb0 	bl	8000618 <__aeabi_dmul>
 80076b8:	1136      	asrs	r6, r6, #4
 80076ba:	4682      	mov	sl, r0
 80076bc:	468b      	mov	fp, r1
 80076be:	2300      	movs	r3, #0
 80076c0:	2502      	movs	r5, #2
 80076c2:	2e00      	cmp	r6, #0
 80076c4:	d17a      	bne.n	80077bc <_dtoa_r+0x4c4>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1d3      	bne.n	8007672 <_dtoa_r+0x37a>
 80076ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8082 	beq.w	80077d6 <_dtoa_r+0x4de>
 80076d2:	4b91      	ldr	r3, [pc, #580]	; (8007918 <_dtoa_r+0x620>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	4650      	mov	r0, sl
 80076d8:	4659      	mov	r1, fp
 80076da:	f7f9 fa0f 	bl	8000afc <__aeabi_dcmplt>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d079      	beq.n	80077d6 <_dtoa_r+0x4de>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d076      	beq.n	80077d6 <_dtoa_r+0x4de>
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dd36      	ble.n	800775c <_dtoa_r+0x464>
 80076ee:	9b00      	ldr	r3, [sp, #0]
 80076f0:	4650      	mov	r0, sl
 80076f2:	4659      	mov	r1, fp
 80076f4:	1e5f      	subs	r7, r3, #1
 80076f6:	2200      	movs	r2, #0
 80076f8:	4b88      	ldr	r3, [pc, #544]	; (800791c <_dtoa_r+0x624>)
 80076fa:	f7f8 ff8d 	bl	8000618 <__aeabi_dmul>
 80076fe:	9e02      	ldr	r6, [sp, #8]
 8007700:	4682      	mov	sl, r0
 8007702:	468b      	mov	fp, r1
 8007704:	3501      	adds	r5, #1
 8007706:	4628      	mov	r0, r5
 8007708:	f7f8 ff1c 	bl	8000544 <__aeabi_i2d>
 800770c:	4652      	mov	r2, sl
 800770e:	465b      	mov	r3, fp
 8007710:	f7f8 ff82 	bl	8000618 <__aeabi_dmul>
 8007714:	4b82      	ldr	r3, [pc, #520]	; (8007920 <_dtoa_r+0x628>)
 8007716:	2200      	movs	r2, #0
 8007718:	f7f8 fdc8 	bl	80002ac <__adddf3>
 800771c:	46d0      	mov	r8, sl
 800771e:	46d9      	mov	r9, fp
 8007720:	4682      	mov	sl, r0
 8007722:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007726:	2e00      	cmp	r6, #0
 8007728:	d158      	bne.n	80077dc <_dtoa_r+0x4e4>
 800772a:	4b7e      	ldr	r3, [pc, #504]	; (8007924 <_dtoa_r+0x62c>)
 800772c:	2200      	movs	r2, #0
 800772e:	4640      	mov	r0, r8
 8007730:	4649      	mov	r1, r9
 8007732:	f7f8 fdb9 	bl	80002a8 <__aeabi_dsub>
 8007736:	4652      	mov	r2, sl
 8007738:	465b      	mov	r3, fp
 800773a:	4680      	mov	r8, r0
 800773c:	4689      	mov	r9, r1
 800773e:	f7f9 f9fb 	bl	8000b38 <__aeabi_dcmpgt>
 8007742:	2800      	cmp	r0, #0
 8007744:	f040 8295 	bne.w	8007c72 <_dtoa_r+0x97a>
 8007748:	4652      	mov	r2, sl
 800774a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800774e:	4640      	mov	r0, r8
 8007750:	4649      	mov	r1, r9
 8007752:	f7f9 f9d3 	bl	8000afc <__aeabi_dcmplt>
 8007756:	2800      	cmp	r0, #0
 8007758:	f040 8289 	bne.w	8007c6e <_dtoa_r+0x976>
 800775c:	ec5b ab19 	vmov	sl, fp, d9
 8007760:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007762:	2b00      	cmp	r3, #0
 8007764:	f2c0 8148 	blt.w	80079f8 <_dtoa_r+0x700>
 8007768:	9a00      	ldr	r2, [sp, #0]
 800776a:	2a0e      	cmp	r2, #14
 800776c:	f300 8144 	bgt.w	80079f8 <_dtoa_r+0x700>
 8007770:	4b67      	ldr	r3, [pc, #412]	; (8007910 <_dtoa_r+0x618>)
 8007772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007776:	e9d3 8900 	ldrd	r8, r9, [r3]
 800777a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	f280 80d5 	bge.w	800792c <_dtoa_r+0x634>
 8007782:	9b03      	ldr	r3, [sp, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f300 80d1 	bgt.w	800792c <_dtoa_r+0x634>
 800778a:	f040 826f 	bne.w	8007c6c <_dtoa_r+0x974>
 800778e:	4b65      	ldr	r3, [pc, #404]	; (8007924 <_dtoa_r+0x62c>)
 8007790:	2200      	movs	r2, #0
 8007792:	4640      	mov	r0, r8
 8007794:	4649      	mov	r1, r9
 8007796:	f7f8 ff3f 	bl	8000618 <__aeabi_dmul>
 800779a:	4652      	mov	r2, sl
 800779c:	465b      	mov	r3, fp
 800779e:	f7f9 f9c1 	bl	8000b24 <__aeabi_dcmpge>
 80077a2:	9e03      	ldr	r6, [sp, #12]
 80077a4:	4637      	mov	r7, r6
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f040 8245 	bne.w	8007c36 <_dtoa_r+0x93e>
 80077ac:	9d01      	ldr	r5, [sp, #4]
 80077ae:	2331      	movs	r3, #49	; 0x31
 80077b0:	f805 3b01 	strb.w	r3, [r5], #1
 80077b4:	9b00      	ldr	r3, [sp, #0]
 80077b6:	3301      	adds	r3, #1
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	e240      	b.n	8007c3e <_dtoa_r+0x946>
 80077bc:	07f2      	lsls	r2, r6, #31
 80077be:	d505      	bpl.n	80077cc <_dtoa_r+0x4d4>
 80077c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c4:	f7f8 ff28 	bl	8000618 <__aeabi_dmul>
 80077c8:	3501      	adds	r5, #1
 80077ca:	2301      	movs	r3, #1
 80077cc:	1076      	asrs	r6, r6, #1
 80077ce:	3708      	adds	r7, #8
 80077d0:	e777      	b.n	80076c2 <_dtoa_r+0x3ca>
 80077d2:	2502      	movs	r5, #2
 80077d4:	e779      	b.n	80076ca <_dtoa_r+0x3d2>
 80077d6:	9f00      	ldr	r7, [sp, #0]
 80077d8:	9e03      	ldr	r6, [sp, #12]
 80077da:	e794      	b.n	8007706 <_dtoa_r+0x40e>
 80077dc:	9901      	ldr	r1, [sp, #4]
 80077de:	4b4c      	ldr	r3, [pc, #304]	; (8007910 <_dtoa_r+0x618>)
 80077e0:	4431      	add	r1, r6
 80077e2:	910d      	str	r1, [sp, #52]	; 0x34
 80077e4:	9908      	ldr	r1, [sp, #32]
 80077e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077ee:	2900      	cmp	r1, #0
 80077f0:	d043      	beq.n	800787a <_dtoa_r+0x582>
 80077f2:	494d      	ldr	r1, [pc, #308]	; (8007928 <_dtoa_r+0x630>)
 80077f4:	2000      	movs	r0, #0
 80077f6:	f7f9 f839 	bl	800086c <__aeabi_ddiv>
 80077fa:	4652      	mov	r2, sl
 80077fc:	465b      	mov	r3, fp
 80077fe:	f7f8 fd53 	bl	80002a8 <__aeabi_dsub>
 8007802:	9d01      	ldr	r5, [sp, #4]
 8007804:	4682      	mov	sl, r0
 8007806:	468b      	mov	fp, r1
 8007808:	4649      	mov	r1, r9
 800780a:	4640      	mov	r0, r8
 800780c:	f7f9 f9b4 	bl	8000b78 <__aeabi_d2iz>
 8007810:	4606      	mov	r6, r0
 8007812:	f7f8 fe97 	bl	8000544 <__aeabi_i2d>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	f7f8 fd43 	bl	80002a8 <__aeabi_dsub>
 8007822:	3630      	adds	r6, #48	; 0x30
 8007824:	f805 6b01 	strb.w	r6, [r5], #1
 8007828:	4652      	mov	r2, sl
 800782a:	465b      	mov	r3, fp
 800782c:	4680      	mov	r8, r0
 800782e:	4689      	mov	r9, r1
 8007830:	f7f9 f964 	bl	8000afc <__aeabi_dcmplt>
 8007834:	2800      	cmp	r0, #0
 8007836:	d163      	bne.n	8007900 <_dtoa_r+0x608>
 8007838:	4642      	mov	r2, r8
 800783a:	464b      	mov	r3, r9
 800783c:	4936      	ldr	r1, [pc, #216]	; (8007918 <_dtoa_r+0x620>)
 800783e:	2000      	movs	r0, #0
 8007840:	f7f8 fd32 	bl	80002a8 <__aeabi_dsub>
 8007844:	4652      	mov	r2, sl
 8007846:	465b      	mov	r3, fp
 8007848:	f7f9 f958 	bl	8000afc <__aeabi_dcmplt>
 800784c:	2800      	cmp	r0, #0
 800784e:	f040 80b5 	bne.w	80079bc <_dtoa_r+0x6c4>
 8007852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007854:	429d      	cmp	r5, r3
 8007856:	d081      	beq.n	800775c <_dtoa_r+0x464>
 8007858:	4b30      	ldr	r3, [pc, #192]	; (800791c <_dtoa_r+0x624>)
 800785a:	2200      	movs	r2, #0
 800785c:	4650      	mov	r0, sl
 800785e:	4659      	mov	r1, fp
 8007860:	f7f8 feda 	bl	8000618 <__aeabi_dmul>
 8007864:	4b2d      	ldr	r3, [pc, #180]	; (800791c <_dtoa_r+0x624>)
 8007866:	4682      	mov	sl, r0
 8007868:	468b      	mov	fp, r1
 800786a:	4640      	mov	r0, r8
 800786c:	4649      	mov	r1, r9
 800786e:	2200      	movs	r2, #0
 8007870:	f7f8 fed2 	bl	8000618 <__aeabi_dmul>
 8007874:	4680      	mov	r8, r0
 8007876:	4689      	mov	r9, r1
 8007878:	e7c6      	b.n	8007808 <_dtoa_r+0x510>
 800787a:	4650      	mov	r0, sl
 800787c:	4659      	mov	r1, fp
 800787e:	f7f8 fecb 	bl	8000618 <__aeabi_dmul>
 8007882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007884:	9d01      	ldr	r5, [sp, #4]
 8007886:	930f      	str	r3, [sp, #60]	; 0x3c
 8007888:	4682      	mov	sl, r0
 800788a:	468b      	mov	fp, r1
 800788c:	4649      	mov	r1, r9
 800788e:	4640      	mov	r0, r8
 8007890:	f7f9 f972 	bl	8000b78 <__aeabi_d2iz>
 8007894:	4606      	mov	r6, r0
 8007896:	f7f8 fe55 	bl	8000544 <__aeabi_i2d>
 800789a:	3630      	adds	r6, #48	; 0x30
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4640      	mov	r0, r8
 80078a2:	4649      	mov	r1, r9
 80078a4:	f7f8 fd00 	bl	80002a8 <__aeabi_dsub>
 80078a8:	f805 6b01 	strb.w	r6, [r5], #1
 80078ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ae:	429d      	cmp	r5, r3
 80078b0:	4680      	mov	r8, r0
 80078b2:	4689      	mov	r9, r1
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	d124      	bne.n	8007904 <_dtoa_r+0x60c>
 80078ba:	4b1b      	ldr	r3, [pc, #108]	; (8007928 <_dtoa_r+0x630>)
 80078bc:	4650      	mov	r0, sl
 80078be:	4659      	mov	r1, fp
 80078c0:	f7f8 fcf4 	bl	80002ac <__adddf3>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4640      	mov	r0, r8
 80078ca:	4649      	mov	r1, r9
 80078cc:	f7f9 f934 	bl	8000b38 <__aeabi_dcmpgt>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d173      	bne.n	80079bc <_dtoa_r+0x6c4>
 80078d4:	4652      	mov	r2, sl
 80078d6:	465b      	mov	r3, fp
 80078d8:	4913      	ldr	r1, [pc, #76]	; (8007928 <_dtoa_r+0x630>)
 80078da:	2000      	movs	r0, #0
 80078dc:	f7f8 fce4 	bl	80002a8 <__aeabi_dsub>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4640      	mov	r0, r8
 80078e6:	4649      	mov	r1, r9
 80078e8:	f7f9 f908 	bl	8000afc <__aeabi_dcmplt>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f43f af35 	beq.w	800775c <_dtoa_r+0x464>
 80078f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078f4:	1e6b      	subs	r3, r5, #1
 80078f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078fc:	2b30      	cmp	r3, #48	; 0x30
 80078fe:	d0f8      	beq.n	80078f2 <_dtoa_r+0x5fa>
 8007900:	9700      	str	r7, [sp, #0]
 8007902:	e049      	b.n	8007998 <_dtoa_r+0x6a0>
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <_dtoa_r+0x624>)
 8007906:	f7f8 fe87 	bl	8000618 <__aeabi_dmul>
 800790a:	4680      	mov	r8, r0
 800790c:	4689      	mov	r9, r1
 800790e:	e7bd      	b.n	800788c <_dtoa_r+0x594>
 8007910:	0800ab70 	.word	0x0800ab70
 8007914:	0800ab48 	.word	0x0800ab48
 8007918:	3ff00000 	.word	0x3ff00000
 800791c:	40240000 	.word	0x40240000
 8007920:	401c0000 	.word	0x401c0000
 8007924:	40140000 	.word	0x40140000
 8007928:	3fe00000 	.word	0x3fe00000
 800792c:	9d01      	ldr	r5, [sp, #4]
 800792e:	4656      	mov	r6, sl
 8007930:	465f      	mov	r7, fp
 8007932:	4642      	mov	r2, r8
 8007934:	464b      	mov	r3, r9
 8007936:	4630      	mov	r0, r6
 8007938:	4639      	mov	r1, r7
 800793a:	f7f8 ff97 	bl	800086c <__aeabi_ddiv>
 800793e:	f7f9 f91b 	bl	8000b78 <__aeabi_d2iz>
 8007942:	4682      	mov	sl, r0
 8007944:	f7f8 fdfe 	bl	8000544 <__aeabi_i2d>
 8007948:	4642      	mov	r2, r8
 800794a:	464b      	mov	r3, r9
 800794c:	f7f8 fe64 	bl	8000618 <__aeabi_dmul>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800795c:	f7f8 fca4 	bl	80002a8 <__aeabi_dsub>
 8007960:	f805 6b01 	strb.w	r6, [r5], #1
 8007964:	9e01      	ldr	r6, [sp, #4]
 8007966:	9f03      	ldr	r7, [sp, #12]
 8007968:	1bae      	subs	r6, r5, r6
 800796a:	42b7      	cmp	r7, r6
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	d135      	bne.n	80079de <_dtoa_r+0x6e6>
 8007972:	f7f8 fc9b 	bl	80002ac <__adddf3>
 8007976:	4642      	mov	r2, r8
 8007978:	464b      	mov	r3, r9
 800797a:	4606      	mov	r6, r0
 800797c:	460f      	mov	r7, r1
 800797e:	f7f9 f8db 	bl	8000b38 <__aeabi_dcmpgt>
 8007982:	b9d0      	cbnz	r0, 80079ba <_dtoa_r+0x6c2>
 8007984:	4642      	mov	r2, r8
 8007986:	464b      	mov	r3, r9
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f9 f8ac 	bl	8000ae8 <__aeabi_dcmpeq>
 8007990:	b110      	cbz	r0, 8007998 <_dtoa_r+0x6a0>
 8007992:	f01a 0f01 	tst.w	sl, #1
 8007996:	d110      	bne.n	80079ba <_dtoa_r+0x6c2>
 8007998:	4620      	mov	r0, r4
 800799a:	ee18 1a10 	vmov	r1, s16
 800799e:	f000 fe87 	bl	80086b0 <_Bfree>
 80079a2:	2300      	movs	r3, #0
 80079a4:	9800      	ldr	r0, [sp, #0]
 80079a6:	702b      	strb	r3, [r5, #0]
 80079a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079aa:	3001      	adds	r0, #1
 80079ac:	6018      	str	r0, [r3, #0]
 80079ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f43f acf1 	beq.w	8007398 <_dtoa_r+0xa0>
 80079b6:	601d      	str	r5, [r3, #0]
 80079b8:	e4ee      	b.n	8007398 <_dtoa_r+0xa0>
 80079ba:	9f00      	ldr	r7, [sp, #0]
 80079bc:	462b      	mov	r3, r5
 80079be:	461d      	mov	r5, r3
 80079c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079c4:	2a39      	cmp	r2, #57	; 0x39
 80079c6:	d106      	bne.n	80079d6 <_dtoa_r+0x6de>
 80079c8:	9a01      	ldr	r2, [sp, #4]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d1f7      	bne.n	80079be <_dtoa_r+0x6c6>
 80079ce:	9901      	ldr	r1, [sp, #4]
 80079d0:	2230      	movs	r2, #48	; 0x30
 80079d2:	3701      	adds	r7, #1
 80079d4:	700a      	strb	r2, [r1, #0]
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	3201      	adds	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e790      	b.n	8007900 <_dtoa_r+0x608>
 80079de:	4ba6      	ldr	r3, [pc, #664]	; (8007c78 <_dtoa_r+0x980>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	f7f8 fe19 	bl	8000618 <__aeabi_dmul>
 80079e6:	2200      	movs	r2, #0
 80079e8:	2300      	movs	r3, #0
 80079ea:	4606      	mov	r6, r0
 80079ec:	460f      	mov	r7, r1
 80079ee:	f7f9 f87b 	bl	8000ae8 <__aeabi_dcmpeq>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d09d      	beq.n	8007932 <_dtoa_r+0x63a>
 80079f6:	e7cf      	b.n	8007998 <_dtoa_r+0x6a0>
 80079f8:	9a08      	ldr	r2, [sp, #32]
 80079fa:	2a00      	cmp	r2, #0
 80079fc:	f000 80d7 	beq.w	8007bae <_dtoa_r+0x8b6>
 8007a00:	9a06      	ldr	r2, [sp, #24]
 8007a02:	2a01      	cmp	r2, #1
 8007a04:	f300 80ba 	bgt.w	8007b7c <_dtoa_r+0x884>
 8007a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	f000 80b2 	beq.w	8007b74 <_dtoa_r+0x87c>
 8007a10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a14:	9e07      	ldr	r6, [sp, #28]
 8007a16:	9d04      	ldr	r5, [sp, #16]
 8007a18:	9a04      	ldr	r2, [sp, #16]
 8007a1a:	441a      	add	r2, r3
 8007a1c:	9204      	str	r2, [sp, #16]
 8007a1e:	9a05      	ldr	r2, [sp, #20]
 8007a20:	2101      	movs	r1, #1
 8007a22:	441a      	add	r2, r3
 8007a24:	4620      	mov	r0, r4
 8007a26:	9205      	str	r2, [sp, #20]
 8007a28:	f000 ff44 	bl	80088b4 <__i2b>
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	2d00      	cmp	r5, #0
 8007a30:	dd0c      	ble.n	8007a4c <_dtoa_r+0x754>
 8007a32:	9b05      	ldr	r3, [sp, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dd09      	ble.n	8007a4c <_dtoa_r+0x754>
 8007a38:	42ab      	cmp	r3, r5
 8007a3a:	9a04      	ldr	r2, [sp, #16]
 8007a3c:	bfa8      	it	ge
 8007a3e:	462b      	movge	r3, r5
 8007a40:	1ad2      	subs	r2, r2, r3
 8007a42:	9204      	str	r2, [sp, #16]
 8007a44:	9a05      	ldr	r2, [sp, #20]
 8007a46:	1aed      	subs	r5, r5, r3
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	9305      	str	r3, [sp, #20]
 8007a4c:	9b07      	ldr	r3, [sp, #28]
 8007a4e:	b31b      	cbz	r3, 8007a98 <_dtoa_r+0x7a0>
 8007a50:	9b08      	ldr	r3, [sp, #32]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80af 	beq.w	8007bb6 <_dtoa_r+0x8be>
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	dd13      	ble.n	8007a84 <_dtoa_r+0x78c>
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4620      	mov	r0, r4
 8007a62:	f000 ffe7 	bl	8008a34 <__pow5mult>
 8007a66:	ee18 2a10 	vmov	r2, s16
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f000 ff36 	bl	80088e0 <__multiply>
 8007a74:	ee18 1a10 	vmov	r1, s16
 8007a78:	4680      	mov	r8, r0
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fe18 	bl	80086b0 <_Bfree>
 8007a80:	ee08 8a10 	vmov	s16, r8
 8007a84:	9b07      	ldr	r3, [sp, #28]
 8007a86:	1b9a      	subs	r2, r3, r6
 8007a88:	d006      	beq.n	8007a98 <_dtoa_r+0x7a0>
 8007a8a:	ee18 1a10 	vmov	r1, s16
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 ffd0 	bl	8008a34 <__pow5mult>
 8007a94:	ee08 0a10 	vmov	s16, r0
 8007a98:	2101      	movs	r1, #1
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 ff0a 	bl	80088b4 <__i2b>
 8007aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	f340 8088 	ble.w	8007bba <_dtoa_r+0x8c2>
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4601      	mov	r1, r0
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 ffc0 	bl	8008a34 <__pow5mult>
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	4606      	mov	r6, r0
 8007aba:	f340 8081 	ble.w	8007bc0 <_dtoa_r+0x8c8>
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	6933      	ldr	r3, [r6, #16]
 8007ac4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ac8:	6918      	ldr	r0, [r3, #16]
 8007aca:	f000 fea3 	bl	8008814 <__hi0bits>
 8007ace:	f1c0 0020 	rsb	r0, r0, #32
 8007ad2:	9b05      	ldr	r3, [sp, #20]
 8007ad4:	4418      	add	r0, r3
 8007ad6:	f010 001f 	ands.w	r0, r0, #31
 8007ada:	f000 8092 	beq.w	8007c02 <_dtoa_r+0x90a>
 8007ade:	f1c0 0320 	rsb	r3, r0, #32
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	f340 808a 	ble.w	8007bfc <_dtoa_r+0x904>
 8007ae8:	f1c0 001c 	rsb	r0, r0, #28
 8007aec:	9b04      	ldr	r3, [sp, #16]
 8007aee:	4403      	add	r3, r0
 8007af0:	9304      	str	r3, [sp, #16]
 8007af2:	9b05      	ldr	r3, [sp, #20]
 8007af4:	4403      	add	r3, r0
 8007af6:	4405      	add	r5, r0
 8007af8:	9305      	str	r3, [sp, #20]
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dd07      	ble.n	8007b10 <_dtoa_r+0x818>
 8007b00:	ee18 1a10 	vmov	r1, s16
 8007b04:	461a      	mov	r2, r3
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 ffee 	bl	8008ae8 <__lshift>
 8007b0c:	ee08 0a10 	vmov	s16, r0
 8007b10:	9b05      	ldr	r3, [sp, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dd05      	ble.n	8007b22 <_dtoa_r+0x82a>
 8007b16:	4631      	mov	r1, r6
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f000 ffe4 	bl	8008ae8 <__lshift>
 8007b20:	4606      	mov	r6, r0
 8007b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d06e      	beq.n	8007c06 <_dtoa_r+0x90e>
 8007b28:	ee18 0a10 	vmov	r0, s16
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	f001 f84b 	bl	8008bc8 <__mcmp>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	da67      	bge.n	8007c06 <_dtoa_r+0x90e>
 8007b36:	9b00      	ldr	r3, [sp, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	ee18 1a10 	vmov	r1, s16
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	220a      	movs	r2, #10
 8007b42:	2300      	movs	r3, #0
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 fdd5 	bl	80086f4 <__multadd>
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	ee08 0a10 	vmov	s16, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 81b1 	beq.w	8007eb8 <_dtoa_r+0xbc0>
 8007b56:	2300      	movs	r3, #0
 8007b58:	4639      	mov	r1, r7
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 fdc9 	bl	80086f4 <__multadd>
 8007b62:	9b02      	ldr	r3, [sp, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	4607      	mov	r7, r0
 8007b68:	f300 808e 	bgt.w	8007c88 <_dtoa_r+0x990>
 8007b6c:	9b06      	ldr	r3, [sp, #24]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	dc51      	bgt.n	8007c16 <_dtoa_r+0x91e>
 8007b72:	e089      	b.n	8007c88 <_dtoa_r+0x990>
 8007b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b7a:	e74b      	b.n	8007a14 <_dtoa_r+0x71c>
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	1e5e      	subs	r6, r3, #1
 8007b80:	9b07      	ldr	r3, [sp, #28]
 8007b82:	42b3      	cmp	r3, r6
 8007b84:	bfbf      	itttt	lt
 8007b86:	9b07      	ldrlt	r3, [sp, #28]
 8007b88:	9607      	strlt	r6, [sp, #28]
 8007b8a:	1af2      	sublt	r2, r6, r3
 8007b8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b8e:	bfb6      	itet	lt
 8007b90:	189b      	addlt	r3, r3, r2
 8007b92:	1b9e      	subge	r6, r3, r6
 8007b94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	bfb8      	it	lt
 8007b9a:	2600      	movlt	r6, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bfb7      	itett	lt
 8007ba0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ba4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ba8:	1a9d      	sublt	r5, r3, r2
 8007baa:	2300      	movlt	r3, #0
 8007bac:	e734      	b.n	8007a18 <_dtoa_r+0x720>
 8007bae:	9e07      	ldr	r6, [sp, #28]
 8007bb0:	9d04      	ldr	r5, [sp, #16]
 8007bb2:	9f08      	ldr	r7, [sp, #32]
 8007bb4:	e73b      	b.n	8007a2e <_dtoa_r+0x736>
 8007bb6:	9a07      	ldr	r2, [sp, #28]
 8007bb8:	e767      	b.n	8007a8a <_dtoa_r+0x792>
 8007bba:	9b06      	ldr	r3, [sp, #24]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	dc18      	bgt.n	8007bf2 <_dtoa_r+0x8fa>
 8007bc0:	f1ba 0f00 	cmp.w	sl, #0
 8007bc4:	d115      	bne.n	8007bf2 <_dtoa_r+0x8fa>
 8007bc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bca:	b993      	cbnz	r3, 8007bf2 <_dtoa_r+0x8fa>
 8007bcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bd0:	0d1b      	lsrs	r3, r3, #20
 8007bd2:	051b      	lsls	r3, r3, #20
 8007bd4:	b183      	cbz	r3, 8007bf8 <_dtoa_r+0x900>
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	9304      	str	r3, [sp, #16]
 8007bdc:	9b05      	ldr	r3, [sp, #20]
 8007bde:	3301      	adds	r3, #1
 8007be0:	9305      	str	r3, [sp, #20]
 8007be2:	f04f 0801 	mov.w	r8, #1
 8007be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f47f af6a 	bne.w	8007ac2 <_dtoa_r+0x7ca>
 8007bee:	2001      	movs	r0, #1
 8007bf0:	e76f      	b.n	8007ad2 <_dtoa_r+0x7da>
 8007bf2:	f04f 0800 	mov.w	r8, #0
 8007bf6:	e7f6      	b.n	8007be6 <_dtoa_r+0x8ee>
 8007bf8:	4698      	mov	r8, r3
 8007bfa:	e7f4      	b.n	8007be6 <_dtoa_r+0x8ee>
 8007bfc:	f43f af7d 	beq.w	8007afa <_dtoa_r+0x802>
 8007c00:	4618      	mov	r0, r3
 8007c02:	301c      	adds	r0, #28
 8007c04:	e772      	b.n	8007aec <_dtoa_r+0x7f4>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	dc37      	bgt.n	8007c7c <_dtoa_r+0x984>
 8007c0c:	9b06      	ldr	r3, [sp, #24]
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	dd34      	ble.n	8007c7c <_dtoa_r+0x984>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	9b02      	ldr	r3, [sp, #8]
 8007c18:	b96b      	cbnz	r3, 8007c36 <_dtoa_r+0x93e>
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	2205      	movs	r2, #5
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 fd68 	bl	80086f4 <__multadd>
 8007c24:	4601      	mov	r1, r0
 8007c26:	4606      	mov	r6, r0
 8007c28:	ee18 0a10 	vmov	r0, s16
 8007c2c:	f000 ffcc 	bl	8008bc8 <__mcmp>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f73f adbb 	bgt.w	80077ac <_dtoa_r+0x4b4>
 8007c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c38:	9d01      	ldr	r5, [sp, #4]
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	4631      	mov	r1, r6
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 fd33 	bl	80086b0 <_Bfree>
 8007c4a:	2f00      	cmp	r7, #0
 8007c4c:	f43f aea4 	beq.w	8007998 <_dtoa_r+0x6a0>
 8007c50:	f1b8 0f00 	cmp.w	r8, #0
 8007c54:	d005      	beq.n	8007c62 <_dtoa_r+0x96a>
 8007c56:	45b8      	cmp	r8, r7
 8007c58:	d003      	beq.n	8007c62 <_dtoa_r+0x96a>
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 fd27 	bl	80086b0 <_Bfree>
 8007c62:	4639      	mov	r1, r7
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fd23 	bl	80086b0 <_Bfree>
 8007c6a:	e695      	b.n	8007998 <_dtoa_r+0x6a0>
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	4637      	mov	r7, r6
 8007c70:	e7e1      	b.n	8007c36 <_dtoa_r+0x93e>
 8007c72:	9700      	str	r7, [sp, #0]
 8007c74:	4637      	mov	r7, r6
 8007c76:	e599      	b.n	80077ac <_dtoa_r+0x4b4>
 8007c78:	40240000 	.word	0x40240000
 8007c7c:	9b08      	ldr	r3, [sp, #32]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 80ca 	beq.w	8007e18 <_dtoa_r+0xb20>
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	9302      	str	r3, [sp, #8]
 8007c88:	2d00      	cmp	r5, #0
 8007c8a:	dd05      	ble.n	8007c98 <_dtoa_r+0x9a0>
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	462a      	mov	r2, r5
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 ff29 	bl	8008ae8 <__lshift>
 8007c96:	4607      	mov	r7, r0
 8007c98:	f1b8 0f00 	cmp.w	r8, #0
 8007c9c:	d05b      	beq.n	8007d56 <_dtoa_r+0xa5e>
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 fcc5 	bl	8008630 <_Balloc>
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	b928      	cbnz	r0, 8007cb6 <_dtoa_r+0x9be>
 8007caa:	4b87      	ldr	r3, [pc, #540]	; (8007ec8 <_dtoa_r+0xbd0>)
 8007cac:	4602      	mov	r2, r0
 8007cae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007cb2:	f7ff bb3b 	b.w	800732c <_dtoa_r+0x34>
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	3202      	adds	r2, #2
 8007cba:	0092      	lsls	r2, r2, #2
 8007cbc:	f107 010c 	add.w	r1, r7, #12
 8007cc0:	300c      	adds	r0, #12
 8007cc2:	f000 fca7 	bl	8008614 <memcpy>
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f000 ff0c 	bl	8008ae8 <__lshift>
 8007cd0:	9b01      	ldr	r3, [sp, #4]
 8007cd2:	f103 0901 	add.w	r9, r3, #1
 8007cd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007cda:	4413      	add	r3, r2
 8007cdc:	9305      	str	r3, [sp, #20]
 8007cde:	f00a 0301 	and.w	r3, sl, #1
 8007ce2:	46b8      	mov	r8, r7
 8007ce4:	9304      	str	r3, [sp, #16]
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	4631      	mov	r1, r6
 8007cea:	ee18 0a10 	vmov	r0, s16
 8007cee:	f7ff fa75 	bl	80071dc <quorem>
 8007cf2:	4641      	mov	r1, r8
 8007cf4:	9002      	str	r0, [sp, #8]
 8007cf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cfa:	ee18 0a10 	vmov	r0, s16
 8007cfe:	f000 ff63 	bl	8008bc8 <__mcmp>
 8007d02:	463a      	mov	r2, r7
 8007d04:	9003      	str	r0, [sp, #12]
 8007d06:	4631      	mov	r1, r6
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 ff79 	bl	8008c00 <__mdiff>
 8007d0e:	68c2      	ldr	r2, [r0, #12]
 8007d10:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007d14:	4605      	mov	r5, r0
 8007d16:	bb02      	cbnz	r2, 8007d5a <_dtoa_r+0xa62>
 8007d18:	4601      	mov	r1, r0
 8007d1a:	ee18 0a10 	vmov	r0, s16
 8007d1e:	f000 ff53 	bl	8008bc8 <__mcmp>
 8007d22:	4602      	mov	r2, r0
 8007d24:	4629      	mov	r1, r5
 8007d26:	4620      	mov	r0, r4
 8007d28:	9207      	str	r2, [sp, #28]
 8007d2a:	f000 fcc1 	bl	80086b0 <_Bfree>
 8007d2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007d32:	ea43 0102 	orr.w	r1, r3, r2
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	464d      	mov	r5, r9
 8007d3c:	d10f      	bne.n	8007d5e <_dtoa_r+0xa66>
 8007d3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d42:	d02a      	beq.n	8007d9a <_dtoa_r+0xaa2>
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	dd02      	ble.n	8007d50 <_dtoa_r+0xa58>
 8007d4a:	9b02      	ldr	r3, [sp, #8]
 8007d4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007d50:	f88b a000 	strb.w	sl, [fp]
 8007d54:	e775      	b.n	8007c42 <_dtoa_r+0x94a>
 8007d56:	4638      	mov	r0, r7
 8007d58:	e7ba      	b.n	8007cd0 <_dtoa_r+0x9d8>
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	e7e2      	b.n	8007d24 <_dtoa_r+0xa2c>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	db04      	blt.n	8007d6e <_dtoa_r+0xa76>
 8007d64:	9906      	ldr	r1, [sp, #24]
 8007d66:	430b      	orrs	r3, r1
 8007d68:	9904      	ldr	r1, [sp, #16]
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	d122      	bne.n	8007db4 <_dtoa_r+0xabc>
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	ddee      	ble.n	8007d50 <_dtoa_r+0xa58>
 8007d72:	ee18 1a10 	vmov	r1, s16
 8007d76:	2201      	movs	r2, #1
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 feb5 	bl	8008ae8 <__lshift>
 8007d7e:	4631      	mov	r1, r6
 8007d80:	ee08 0a10 	vmov	s16, r0
 8007d84:	f000 ff20 	bl	8008bc8 <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dc03      	bgt.n	8007d94 <_dtoa_r+0xa9c>
 8007d8c:	d1e0      	bne.n	8007d50 <_dtoa_r+0xa58>
 8007d8e:	f01a 0f01 	tst.w	sl, #1
 8007d92:	d0dd      	beq.n	8007d50 <_dtoa_r+0xa58>
 8007d94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d98:	d1d7      	bne.n	8007d4a <_dtoa_r+0xa52>
 8007d9a:	2339      	movs	r3, #57	; 0x39
 8007d9c:	f88b 3000 	strb.w	r3, [fp]
 8007da0:	462b      	mov	r3, r5
 8007da2:	461d      	mov	r5, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007daa:	2a39      	cmp	r2, #57	; 0x39
 8007dac:	d071      	beq.n	8007e92 <_dtoa_r+0xb9a>
 8007dae:	3201      	adds	r2, #1
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	e746      	b.n	8007c42 <_dtoa_r+0x94a>
 8007db4:	2a00      	cmp	r2, #0
 8007db6:	dd07      	ble.n	8007dc8 <_dtoa_r+0xad0>
 8007db8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007dbc:	d0ed      	beq.n	8007d9a <_dtoa_r+0xaa2>
 8007dbe:	f10a 0301 	add.w	r3, sl, #1
 8007dc2:	f88b 3000 	strb.w	r3, [fp]
 8007dc6:	e73c      	b.n	8007c42 <_dtoa_r+0x94a>
 8007dc8:	9b05      	ldr	r3, [sp, #20]
 8007dca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007dce:	4599      	cmp	r9, r3
 8007dd0:	d047      	beq.n	8007e62 <_dtoa_r+0xb6a>
 8007dd2:	ee18 1a10 	vmov	r1, s16
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	220a      	movs	r2, #10
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 fc8a 	bl	80086f4 <__multadd>
 8007de0:	45b8      	cmp	r8, r7
 8007de2:	ee08 0a10 	vmov	s16, r0
 8007de6:	f04f 0300 	mov.w	r3, #0
 8007dea:	f04f 020a 	mov.w	r2, #10
 8007dee:	4641      	mov	r1, r8
 8007df0:	4620      	mov	r0, r4
 8007df2:	d106      	bne.n	8007e02 <_dtoa_r+0xb0a>
 8007df4:	f000 fc7e 	bl	80086f4 <__multadd>
 8007df8:	4680      	mov	r8, r0
 8007dfa:	4607      	mov	r7, r0
 8007dfc:	f109 0901 	add.w	r9, r9, #1
 8007e00:	e772      	b.n	8007ce8 <_dtoa_r+0x9f0>
 8007e02:	f000 fc77 	bl	80086f4 <__multadd>
 8007e06:	4639      	mov	r1, r7
 8007e08:	4680      	mov	r8, r0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 fc70 	bl	80086f4 <__multadd>
 8007e14:	4607      	mov	r7, r0
 8007e16:	e7f1      	b.n	8007dfc <_dtoa_r+0xb04>
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	9d01      	ldr	r5, [sp, #4]
 8007e1e:	ee18 0a10 	vmov	r0, s16
 8007e22:	4631      	mov	r1, r6
 8007e24:	f7ff f9da 	bl	80071dc <quorem>
 8007e28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e2c:	9b01      	ldr	r3, [sp, #4]
 8007e2e:	f805 ab01 	strb.w	sl, [r5], #1
 8007e32:	1aea      	subs	r2, r5, r3
 8007e34:	9b02      	ldr	r3, [sp, #8]
 8007e36:	4293      	cmp	r3, r2
 8007e38:	dd09      	ble.n	8007e4e <_dtoa_r+0xb56>
 8007e3a:	ee18 1a10 	vmov	r1, s16
 8007e3e:	2300      	movs	r3, #0
 8007e40:	220a      	movs	r2, #10
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 fc56 	bl	80086f4 <__multadd>
 8007e48:	ee08 0a10 	vmov	s16, r0
 8007e4c:	e7e7      	b.n	8007e1e <_dtoa_r+0xb26>
 8007e4e:	9b02      	ldr	r3, [sp, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	bfc8      	it	gt
 8007e54:	461d      	movgt	r5, r3
 8007e56:	9b01      	ldr	r3, [sp, #4]
 8007e58:	bfd8      	it	le
 8007e5a:	2501      	movle	r5, #1
 8007e5c:	441d      	add	r5, r3
 8007e5e:	f04f 0800 	mov.w	r8, #0
 8007e62:	ee18 1a10 	vmov	r1, s16
 8007e66:	2201      	movs	r2, #1
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fe3d 	bl	8008ae8 <__lshift>
 8007e6e:	4631      	mov	r1, r6
 8007e70:	ee08 0a10 	vmov	s16, r0
 8007e74:	f000 fea8 	bl	8008bc8 <__mcmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	dc91      	bgt.n	8007da0 <_dtoa_r+0xaa8>
 8007e7c:	d102      	bne.n	8007e84 <_dtoa_r+0xb8c>
 8007e7e:	f01a 0f01 	tst.w	sl, #1
 8007e82:	d18d      	bne.n	8007da0 <_dtoa_r+0xaa8>
 8007e84:	462b      	mov	r3, r5
 8007e86:	461d      	mov	r5, r3
 8007e88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e8c:	2a30      	cmp	r2, #48	; 0x30
 8007e8e:	d0fa      	beq.n	8007e86 <_dtoa_r+0xb8e>
 8007e90:	e6d7      	b.n	8007c42 <_dtoa_r+0x94a>
 8007e92:	9a01      	ldr	r2, [sp, #4]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d184      	bne.n	8007da2 <_dtoa_r+0xaaa>
 8007e98:	9b00      	ldr	r3, [sp, #0]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	2331      	movs	r3, #49	; 0x31
 8007ea0:	7013      	strb	r3, [r2, #0]
 8007ea2:	e6ce      	b.n	8007c42 <_dtoa_r+0x94a>
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <_dtoa_r+0xbd4>)
 8007ea6:	f7ff ba95 	b.w	80073d4 <_dtoa_r+0xdc>
 8007eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f47f aa6e 	bne.w	800738e <_dtoa_r+0x96>
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <_dtoa_r+0xbd8>)
 8007eb4:	f7ff ba8e 	b.w	80073d4 <_dtoa_r+0xdc>
 8007eb8:	9b02      	ldr	r3, [sp, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dcae      	bgt.n	8007e1c <_dtoa_r+0xb24>
 8007ebe:	9b06      	ldr	r3, [sp, #24]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	f73f aea8 	bgt.w	8007c16 <_dtoa_r+0x91e>
 8007ec6:	e7a9      	b.n	8007e1c <_dtoa_r+0xb24>
 8007ec8:	0800aa60 	.word	0x0800aa60
 8007ecc:	0800ac59 	.word	0x0800ac59
 8007ed0:	0800a9e1 	.word	0x0800a9e1

08007ed4 <rshift>:
 8007ed4:	6903      	ldr	r3, [r0, #16]
 8007ed6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007eda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ede:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ee2:	f100 0414 	add.w	r4, r0, #20
 8007ee6:	dd45      	ble.n	8007f74 <rshift+0xa0>
 8007ee8:	f011 011f 	ands.w	r1, r1, #31
 8007eec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ef0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ef4:	d10c      	bne.n	8007f10 <rshift+0x3c>
 8007ef6:	f100 0710 	add.w	r7, r0, #16
 8007efa:	4629      	mov	r1, r5
 8007efc:	42b1      	cmp	r1, r6
 8007efe:	d334      	bcc.n	8007f6a <rshift+0x96>
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	1eea      	subs	r2, r5, #3
 8007f06:	4296      	cmp	r6, r2
 8007f08:	bf38      	it	cc
 8007f0a:	2300      	movcc	r3, #0
 8007f0c:	4423      	add	r3, r4
 8007f0e:	e015      	b.n	8007f3c <rshift+0x68>
 8007f10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f14:	f1c1 0820 	rsb	r8, r1, #32
 8007f18:	40cf      	lsrs	r7, r1
 8007f1a:	f105 0e04 	add.w	lr, r5, #4
 8007f1e:	46a1      	mov	r9, r4
 8007f20:	4576      	cmp	r6, lr
 8007f22:	46f4      	mov	ip, lr
 8007f24:	d815      	bhi.n	8007f52 <rshift+0x7e>
 8007f26:	1a9a      	subs	r2, r3, r2
 8007f28:	0092      	lsls	r2, r2, #2
 8007f2a:	3a04      	subs	r2, #4
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	42ae      	cmp	r6, r5
 8007f30:	bf38      	it	cc
 8007f32:	2200      	movcc	r2, #0
 8007f34:	18a3      	adds	r3, r4, r2
 8007f36:	50a7      	str	r7, [r4, r2]
 8007f38:	b107      	cbz	r7, 8007f3c <rshift+0x68>
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	1b1a      	subs	r2, r3, r4
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f44:	bf08      	it	eq
 8007f46:	2300      	moveq	r3, #0
 8007f48:	6102      	str	r2, [r0, #16]
 8007f4a:	bf08      	it	eq
 8007f4c:	6143      	streq	r3, [r0, #20]
 8007f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f52:	f8dc c000 	ldr.w	ip, [ip]
 8007f56:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f5a:	ea4c 0707 	orr.w	r7, ip, r7
 8007f5e:	f849 7b04 	str.w	r7, [r9], #4
 8007f62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f66:	40cf      	lsrs	r7, r1
 8007f68:	e7da      	b.n	8007f20 <rshift+0x4c>
 8007f6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f72:	e7c3      	b.n	8007efc <rshift+0x28>
 8007f74:	4623      	mov	r3, r4
 8007f76:	e7e1      	b.n	8007f3c <rshift+0x68>

08007f78 <__hexdig_fun>:
 8007f78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f7c:	2b09      	cmp	r3, #9
 8007f7e:	d802      	bhi.n	8007f86 <__hexdig_fun+0xe>
 8007f80:	3820      	subs	r0, #32
 8007f82:	b2c0      	uxtb	r0, r0
 8007f84:	4770      	bx	lr
 8007f86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	d801      	bhi.n	8007f92 <__hexdig_fun+0x1a>
 8007f8e:	3847      	subs	r0, #71	; 0x47
 8007f90:	e7f7      	b.n	8007f82 <__hexdig_fun+0xa>
 8007f92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d801      	bhi.n	8007f9e <__hexdig_fun+0x26>
 8007f9a:	3827      	subs	r0, #39	; 0x27
 8007f9c:	e7f1      	b.n	8007f82 <__hexdig_fun+0xa>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	4770      	bx	lr
	...

08007fa4 <__gethex>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	ed2d 8b02 	vpush	{d8}
 8007fac:	b089      	sub	sp, #36	; 0x24
 8007fae:	ee08 0a10 	vmov	s16, r0
 8007fb2:	9304      	str	r3, [sp, #16]
 8007fb4:	4bb4      	ldr	r3, [pc, #720]	; (8008288 <__gethex+0x2e4>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	468b      	mov	fp, r1
 8007fbe:	4690      	mov	r8, r2
 8007fc0:	f7f8 f910 	bl	80001e4 <strlen>
 8007fc4:	9b01      	ldr	r3, [sp, #4]
 8007fc6:	f8db 2000 	ldr.w	r2, [fp]
 8007fca:	4403      	add	r3, r0
 8007fcc:	4682      	mov	sl, r0
 8007fce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007fd2:	9305      	str	r3, [sp, #20]
 8007fd4:	1c93      	adds	r3, r2, #2
 8007fd6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007fda:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007fde:	32fe      	adds	r2, #254	; 0xfe
 8007fe0:	18d1      	adds	r1, r2, r3
 8007fe2:	461f      	mov	r7, r3
 8007fe4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007fe8:	9100      	str	r1, [sp, #0]
 8007fea:	2830      	cmp	r0, #48	; 0x30
 8007fec:	d0f8      	beq.n	8007fe0 <__gethex+0x3c>
 8007fee:	f7ff ffc3 	bl	8007f78 <__hexdig_fun>
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d13a      	bne.n	800806e <__gethex+0xca>
 8007ff8:	9901      	ldr	r1, [sp, #4]
 8007ffa:	4652      	mov	r2, sl
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	f001 fdb3 	bl	8009b68 <strncmp>
 8008002:	4605      	mov	r5, r0
 8008004:	2800      	cmp	r0, #0
 8008006:	d168      	bne.n	80080da <__gethex+0x136>
 8008008:	f817 000a 	ldrb.w	r0, [r7, sl]
 800800c:	eb07 060a 	add.w	r6, r7, sl
 8008010:	f7ff ffb2 	bl	8007f78 <__hexdig_fun>
 8008014:	2800      	cmp	r0, #0
 8008016:	d062      	beq.n	80080de <__gethex+0x13a>
 8008018:	4633      	mov	r3, r6
 800801a:	7818      	ldrb	r0, [r3, #0]
 800801c:	2830      	cmp	r0, #48	; 0x30
 800801e:	461f      	mov	r7, r3
 8008020:	f103 0301 	add.w	r3, r3, #1
 8008024:	d0f9      	beq.n	800801a <__gethex+0x76>
 8008026:	f7ff ffa7 	bl	8007f78 <__hexdig_fun>
 800802a:	2301      	movs	r3, #1
 800802c:	fab0 f480 	clz	r4, r0
 8008030:	0964      	lsrs	r4, r4, #5
 8008032:	4635      	mov	r5, r6
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	463a      	mov	r2, r7
 8008038:	4616      	mov	r6, r2
 800803a:	3201      	adds	r2, #1
 800803c:	7830      	ldrb	r0, [r6, #0]
 800803e:	f7ff ff9b 	bl	8007f78 <__hexdig_fun>
 8008042:	2800      	cmp	r0, #0
 8008044:	d1f8      	bne.n	8008038 <__gethex+0x94>
 8008046:	9901      	ldr	r1, [sp, #4]
 8008048:	4652      	mov	r2, sl
 800804a:	4630      	mov	r0, r6
 800804c:	f001 fd8c 	bl	8009b68 <strncmp>
 8008050:	b980      	cbnz	r0, 8008074 <__gethex+0xd0>
 8008052:	b94d      	cbnz	r5, 8008068 <__gethex+0xc4>
 8008054:	eb06 050a 	add.w	r5, r6, sl
 8008058:	462a      	mov	r2, r5
 800805a:	4616      	mov	r6, r2
 800805c:	3201      	adds	r2, #1
 800805e:	7830      	ldrb	r0, [r6, #0]
 8008060:	f7ff ff8a 	bl	8007f78 <__hexdig_fun>
 8008064:	2800      	cmp	r0, #0
 8008066:	d1f8      	bne.n	800805a <__gethex+0xb6>
 8008068:	1bad      	subs	r5, r5, r6
 800806a:	00ad      	lsls	r5, r5, #2
 800806c:	e004      	b.n	8008078 <__gethex+0xd4>
 800806e:	2400      	movs	r4, #0
 8008070:	4625      	mov	r5, r4
 8008072:	e7e0      	b.n	8008036 <__gethex+0x92>
 8008074:	2d00      	cmp	r5, #0
 8008076:	d1f7      	bne.n	8008068 <__gethex+0xc4>
 8008078:	7833      	ldrb	r3, [r6, #0]
 800807a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800807e:	2b50      	cmp	r3, #80	; 0x50
 8008080:	d13b      	bne.n	80080fa <__gethex+0x156>
 8008082:	7873      	ldrb	r3, [r6, #1]
 8008084:	2b2b      	cmp	r3, #43	; 0x2b
 8008086:	d02c      	beq.n	80080e2 <__gethex+0x13e>
 8008088:	2b2d      	cmp	r3, #45	; 0x2d
 800808a:	d02e      	beq.n	80080ea <__gethex+0x146>
 800808c:	1c71      	adds	r1, r6, #1
 800808e:	f04f 0900 	mov.w	r9, #0
 8008092:	7808      	ldrb	r0, [r1, #0]
 8008094:	f7ff ff70 	bl	8007f78 <__hexdig_fun>
 8008098:	1e43      	subs	r3, r0, #1
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b18      	cmp	r3, #24
 800809e:	d82c      	bhi.n	80080fa <__gethex+0x156>
 80080a0:	f1a0 0210 	sub.w	r2, r0, #16
 80080a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80080a8:	f7ff ff66 	bl	8007f78 <__hexdig_fun>
 80080ac:	1e43      	subs	r3, r0, #1
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b18      	cmp	r3, #24
 80080b2:	d91d      	bls.n	80080f0 <__gethex+0x14c>
 80080b4:	f1b9 0f00 	cmp.w	r9, #0
 80080b8:	d000      	beq.n	80080bc <__gethex+0x118>
 80080ba:	4252      	negs	r2, r2
 80080bc:	4415      	add	r5, r2
 80080be:	f8cb 1000 	str.w	r1, [fp]
 80080c2:	b1e4      	cbz	r4, 80080fe <__gethex+0x15a>
 80080c4:	9b00      	ldr	r3, [sp, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bf14      	ite	ne
 80080ca:	2700      	movne	r7, #0
 80080cc:	2706      	moveq	r7, #6
 80080ce:	4638      	mov	r0, r7
 80080d0:	b009      	add	sp, #36	; 0x24
 80080d2:	ecbd 8b02 	vpop	{d8}
 80080d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080da:	463e      	mov	r6, r7
 80080dc:	4625      	mov	r5, r4
 80080de:	2401      	movs	r4, #1
 80080e0:	e7ca      	b.n	8008078 <__gethex+0xd4>
 80080e2:	f04f 0900 	mov.w	r9, #0
 80080e6:	1cb1      	adds	r1, r6, #2
 80080e8:	e7d3      	b.n	8008092 <__gethex+0xee>
 80080ea:	f04f 0901 	mov.w	r9, #1
 80080ee:	e7fa      	b.n	80080e6 <__gethex+0x142>
 80080f0:	230a      	movs	r3, #10
 80080f2:	fb03 0202 	mla	r2, r3, r2, r0
 80080f6:	3a10      	subs	r2, #16
 80080f8:	e7d4      	b.n	80080a4 <__gethex+0x100>
 80080fa:	4631      	mov	r1, r6
 80080fc:	e7df      	b.n	80080be <__gethex+0x11a>
 80080fe:	1bf3      	subs	r3, r6, r7
 8008100:	3b01      	subs	r3, #1
 8008102:	4621      	mov	r1, r4
 8008104:	2b07      	cmp	r3, #7
 8008106:	dc0b      	bgt.n	8008120 <__gethex+0x17c>
 8008108:	ee18 0a10 	vmov	r0, s16
 800810c:	f000 fa90 	bl	8008630 <_Balloc>
 8008110:	4604      	mov	r4, r0
 8008112:	b940      	cbnz	r0, 8008126 <__gethex+0x182>
 8008114:	4b5d      	ldr	r3, [pc, #372]	; (800828c <__gethex+0x2e8>)
 8008116:	4602      	mov	r2, r0
 8008118:	21de      	movs	r1, #222	; 0xde
 800811a:	485d      	ldr	r0, [pc, #372]	; (8008290 <__gethex+0x2ec>)
 800811c:	f001 fdf4 	bl	8009d08 <__assert_func>
 8008120:	3101      	adds	r1, #1
 8008122:	105b      	asrs	r3, r3, #1
 8008124:	e7ee      	b.n	8008104 <__gethex+0x160>
 8008126:	f100 0914 	add.w	r9, r0, #20
 800812a:	f04f 0b00 	mov.w	fp, #0
 800812e:	f1ca 0301 	rsb	r3, sl, #1
 8008132:	f8cd 9008 	str.w	r9, [sp, #8]
 8008136:	f8cd b000 	str.w	fp, [sp]
 800813a:	9306      	str	r3, [sp, #24]
 800813c:	42b7      	cmp	r7, r6
 800813e:	d340      	bcc.n	80081c2 <__gethex+0x21e>
 8008140:	9802      	ldr	r0, [sp, #8]
 8008142:	9b00      	ldr	r3, [sp, #0]
 8008144:	f840 3b04 	str.w	r3, [r0], #4
 8008148:	eba0 0009 	sub.w	r0, r0, r9
 800814c:	1080      	asrs	r0, r0, #2
 800814e:	0146      	lsls	r6, r0, #5
 8008150:	6120      	str	r0, [r4, #16]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fb5e 	bl	8008814 <__hi0bits>
 8008158:	1a30      	subs	r0, r6, r0
 800815a:	f8d8 6000 	ldr.w	r6, [r8]
 800815e:	42b0      	cmp	r0, r6
 8008160:	dd63      	ble.n	800822a <__gethex+0x286>
 8008162:	1b87      	subs	r7, r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	4620      	mov	r0, r4
 8008168:	f000 ff02 	bl	8008f70 <__any_on>
 800816c:	4682      	mov	sl, r0
 800816e:	b1a8      	cbz	r0, 800819c <__gethex+0x1f8>
 8008170:	1e7b      	subs	r3, r7, #1
 8008172:	1159      	asrs	r1, r3, #5
 8008174:	f003 021f 	and.w	r2, r3, #31
 8008178:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800817c:	f04f 0a01 	mov.w	sl, #1
 8008180:	fa0a f202 	lsl.w	r2, sl, r2
 8008184:	420a      	tst	r2, r1
 8008186:	d009      	beq.n	800819c <__gethex+0x1f8>
 8008188:	4553      	cmp	r3, sl
 800818a:	dd05      	ble.n	8008198 <__gethex+0x1f4>
 800818c:	1eb9      	subs	r1, r7, #2
 800818e:	4620      	mov	r0, r4
 8008190:	f000 feee 	bl	8008f70 <__any_on>
 8008194:	2800      	cmp	r0, #0
 8008196:	d145      	bne.n	8008224 <__gethex+0x280>
 8008198:	f04f 0a02 	mov.w	sl, #2
 800819c:	4639      	mov	r1, r7
 800819e:	4620      	mov	r0, r4
 80081a0:	f7ff fe98 	bl	8007ed4 <rshift>
 80081a4:	443d      	add	r5, r7
 80081a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081aa:	42ab      	cmp	r3, r5
 80081ac:	da4c      	bge.n	8008248 <__gethex+0x2a4>
 80081ae:	ee18 0a10 	vmov	r0, s16
 80081b2:	4621      	mov	r1, r4
 80081b4:	f000 fa7c 	bl	80086b0 <_Bfree>
 80081b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081ba:	2300      	movs	r3, #0
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	27a3      	movs	r7, #163	; 0xa3
 80081c0:	e785      	b.n	80080ce <__gethex+0x12a>
 80081c2:	1e73      	subs	r3, r6, #1
 80081c4:	9a05      	ldr	r2, [sp, #20]
 80081c6:	9303      	str	r3, [sp, #12]
 80081c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d019      	beq.n	8008204 <__gethex+0x260>
 80081d0:	f1bb 0f20 	cmp.w	fp, #32
 80081d4:	d107      	bne.n	80081e6 <__gethex+0x242>
 80081d6:	9b02      	ldr	r3, [sp, #8]
 80081d8:	9a00      	ldr	r2, [sp, #0]
 80081da:	f843 2b04 	str.w	r2, [r3], #4
 80081de:	9302      	str	r3, [sp, #8]
 80081e0:	2300      	movs	r3, #0
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	469b      	mov	fp, r3
 80081e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80081ea:	f7ff fec5 	bl	8007f78 <__hexdig_fun>
 80081ee:	9b00      	ldr	r3, [sp, #0]
 80081f0:	f000 000f 	and.w	r0, r0, #15
 80081f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80081f8:	4303      	orrs	r3, r0
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	f10b 0b04 	add.w	fp, fp, #4
 8008200:	9b03      	ldr	r3, [sp, #12]
 8008202:	e00d      	b.n	8008220 <__gethex+0x27c>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	9a06      	ldr	r2, [sp, #24]
 8008208:	4413      	add	r3, r2
 800820a:	42bb      	cmp	r3, r7
 800820c:	d3e0      	bcc.n	80081d0 <__gethex+0x22c>
 800820e:	4618      	mov	r0, r3
 8008210:	9901      	ldr	r1, [sp, #4]
 8008212:	9307      	str	r3, [sp, #28]
 8008214:	4652      	mov	r2, sl
 8008216:	f001 fca7 	bl	8009b68 <strncmp>
 800821a:	9b07      	ldr	r3, [sp, #28]
 800821c:	2800      	cmp	r0, #0
 800821e:	d1d7      	bne.n	80081d0 <__gethex+0x22c>
 8008220:	461e      	mov	r6, r3
 8008222:	e78b      	b.n	800813c <__gethex+0x198>
 8008224:	f04f 0a03 	mov.w	sl, #3
 8008228:	e7b8      	b.n	800819c <__gethex+0x1f8>
 800822a:	da0a      	bge.n	8008242 <__gethex+0x29e>
 800822c:	1a37      	subs	r7, r6, r0
 800822e:	4621      	mov	r1, r4
 8008230:	ee18 0a10 	vmov	r0, s16
 8008234:	463a      	mov	r2, r7
 8008236:	f000 fc57 	bl	8008ae8 <__lshift>
 800823a:	1bed      	subs	r5, r5, r7
 800823c:	4604      	mov	r4, r0
 800823e:	f100 0914 	add.w	r9, r0, #20
 8008242:	f04f 0a00 	mov.w	sl, #0
 8008246:	e7ae      	b.n	80081a6 <__gethex+0x202>
 8008248:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800824c:	42a8      	cmp	r0, r5
 800824e:	dd72      	ble.n	8008336 <__gethex+0x392>
 8008250:	1b45      	subs	r5, r0, r5
 8008252:	42ae      	cmp	r6, r5
 8008254:	dc36      	bgt.n	80082c4 <__gethex+0x320>
 8008256:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d02a      	beq.n	80082b4 <__gethex+0x310>
 800825e:	2b03      	cmp	r3, #3
 8008260:	d02c      	beq.n	80082bc <__gethex+0x318>
 8008262:	2b01      	cmp	r3, #1
 8008264:	d11c      	bne.n	80082a0 <__gethex+0x2fc>
 8008266:	42ae      	cmp	r6, r5
 8008268:	d11a      	bne.n	80082a0 <__gethex+0x2fc>
 800826a:	2e01      	cmp	r6, #1
 800826c:	d112      	bne.n	8008294 <__gethex+0x2f0>
 800826e:	9a04      	ldr	r2, [sp, #16]
 8008270:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	2301      	movs	r3, #1
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	f8c9 3000 	str.w	r3, [r9]
 800827e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008280:	2762      	movs	r7, #98	; 0x62
 8008282:	601c      	str	r4, [r3, #0]
 8008284:	e723      	b.n	80080ce <__gethex+0x12a>
 8008286:	bf00      	nop
 8008288:	0800aad8 	.word	0x0800aad8
 800828c:	0800aa60 	.word	0x0800aa60
 8008290:	0800aa71 	.word	0x0800aa71
 8008294:	1e71      	subs	r1, r6, #1
 8008296:	4620      	mov	r0, r4
 8008298:	f000 fe6a 	bl	8008f70 <__any_on>
 800829c:	2800      	cmp	r0, #0
 800829e:	d1e6      	bne.n	800826e <__gethex+0x2ca>
 80082a0:	ee18 0a10 	vmov	r0, s16
 80082a4:	4621      	mov	r1, r4
 80082a6:	f000 fa03 	bl	80086b0 <_Bfree>
 80082aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082ac:	2300      	movs	r3, #0
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	2750      	movs	r7, #80	; 0x50
 80082b2:	e70c      	b.n	80080ce <__gethex+0x12a>
 80082b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1f2      	bne.n	80082a0 <__gethex+0x2fc>
 80082ba:	e7d8      	b.n	800826e <__gethex+0x2ca>
 80082bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1d5      	bne.n	800826e <__gethex+0x2ca>
 80082c2:	e7ed      	b.n	80082a0 <__gethex+0x2fc>
 80082c4:	1e6f      	subs	r7, r5, #1
 80082c6:	f1ba 0f00 	cmp.w	sl, #0
 80082ca:	d131      	bne.n	8008330 <__gethex+0x38c>
 80082cc:	b127      	cbz	r7, 80082d8 <__gethex+0x334>
 80082ce:	4639      	mov	r1, r7
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 fe4d 	bl	8008f70 <__any_on>
 80082d6:	4682      	mov	sl, r0
 80082d8:	117b      	asrs	r3, r7, #5
 80082da:	2101      	movs	r1, #1
 80082dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80082e0:	f007 071f 	and.w	r7, r7, #31
 80082e4:	fa01 f707 	lsl.w	r7, r1, r7
 80082e8:	421f      	tst	r7, r3
 80082ea:	4629      	mov	r1, r5
 80082ec:	4620      	mov	r0, r4
 80082ee:	bf18      	it	ne
 80082f0:	f04a 0a02 	orrne.w	sl, sl, #2
 80082f4:	1b76      	subs	r6, r6, r5
 80082f6:	f7ff fded 	bl	8007ed4 <rshift>
 80082fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80082fe:	2702      	movs	r7, #2
 8008300:	f1ba 0f00 	cmp.w	sl, #0
 8008304:	d048      	beq.n	8008398 <__gethex+0x3f4>
 8008306:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800830a:	2b02      	cmp	r3, #2
 800830c:	d015      	beq.n	800833a <__gethex+0x396>
 800830e:	2b03      	cmp	r3, #3
 8008310:	d017      	beq.n	8008342 <__gethex+0x39e>
 8008312:	2b01      	cmp	r3, #1
 8008314:	d109      	bne.n	800832a <__gethex+0x386>
 8008316:	f01a 0f02 	tst.w	sl, #2
 800831a:	d006      	beq.n	800832a <__gethex+0x386>
 800831c:	f8d9 0000 	ldr.w	r0, [r9]
 8008320:	ea4a 0a00 	orr.w	sl, sl, r0
 8008324:	f01a 0f01 	tst.w	sl, #1
 8008328:	d10e      	bne.n	8008348 <__gethex+0x3a4>
 800832a:	f047 0710 	orr.w	r7, r7, #16
 800832e:	e033      	b.n	8008398 <__gethex+0x3f4>
 8008330:	f04f 0a01 	mov.w	sl, #1
 8008334:	e7d0      	b.n	80082d8 <__gethex+0x334>
 8008336:	2701      	movs	r7, #1
 8008338:	e7e2      	b.n	8008300 <__gethex+0x35c>
 800833a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800833c:	f1c3 0301 	rsb	r3, r3, #1
 8008340:	9315      	str	r3, [sp, #84]	; 0x54
 8008342:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008344:	2b00      	cmp	r3, #0
 8008346:	d0f0      	beq.n	800832a <__gethex+0x386>
 8008348:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800834c:	f104 0314 	add.w	r3, r4, #20
 8008350:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008354:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008358:	f04f 0c00 	mov.w	ip, #0
 800835c:	4618      	mov	r0, r3
 800835e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008362:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008366:	d01c      	beq.n	80083a2 <__gethex+0x3fe>
 8008368:	3201      	adds	r2, #1
 800836a:	6002      	str	r2, [r0, #0]
 800836c:	2f02      	cmp	r7, #2
 800836e:	f104 0314 	add.w	r3, r4, #20
 8008372:	d13f      	bne.n	80083f4 <__gethex+0x450>
 8008374:	f8d8 2000 	ldr.w	r2, [r8]
 8008378:	3a01      	subs	r2, #1
 800837a:	42b2      	cmp	r2, r6
 800837c:	d10a      	bne.n	8008394 <__gethex+0x3f0>
 800837e:	1171      	asrs	r1, r6, #5
 8008380:	2201      	movs	r2, #1
 8008382:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008386:	f006 061f 	and.w	r6, r6, #31
 800838a:	fa02 f606 	lsl.w	r6, r2, r6
 800838e:	421e      	tst	r6, r3
 8008390:	bf18      	it	ne
 8008392:	4617      	movne	r7, r2
 8008394:	f047 0720 	orr.w	r7, r7, #32
 8008398:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800839a:	601c      	str	r4, [r3, #0]
 800839c:	9b04      	ldr	r3, [sp, #16]
 800839e:	601d      	str	r5, [r3, #0]
 80083a0:	e695      	b.n	80080ce <__gethex+0x12a>
 80083a2:	4299      	cmp	r1, r3
 80083a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80083a8:	d8d8      	bhi.n	800835c <__gethex+0x3b8>
 80083aa:	68a3      	ldr	r3, [r4, #8]
 80083ac:	459b      	cmp	fp, r3
 80083ae:	db19      	blt.n	80083e4 <__gethex+0x440>
 80083b0:	6861      	ldr	r1, [r4, #4]
 80083b2:	ee18 0a10 	vmov	r0, s16
 80083b6:	3101      	adds	r1, #1
 80083b8:	f000 f93a 	bl	8008630 <_Balloc>
 80083bc:	4681      	mov	r9, r0
 80083be:	b918      	cbnz	r0, 80083c8 <__gethex+0x424>
 80083c0:	4b1a      	ldr	r3, [pc, #104]	; (800842c <__gethex+0x488>)
 80083c2:	4602      	mov	r2, r0
 80083c4:	2184      	movs	r1, #132	; 0x84
 80083c6:	e6a8      	b.n	800811a <__gethex+0x176>
 80083c8:	6922      	ldr	r2, [r4, #16]
 80083ca:	3202      	adds	r2, #2
 80083cc:	f104 010c 	add.w	r1, r4, #12
 80083d0:	0092      	lsls	r2, r2, #2
 80083d2:	300c      	adds	r0, #12
 80083d4:	f000 f91e 	bl	8008614 <memcpy>
 80083d8:	4621      	mov	r1, r4
 80083da:	ee18 0a10 	vmov	r0, s16
 80083de:	f000 f967 	bl	80086b0 <_Bfree>
 80083e2:	464c      	mov	r4, r9
 80083e4:	6923      	ldr	r3, [r4, #16]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083ec:	6122      	str	r2, [r4, #16]
 80083ee:	2201      	movs	r2, #1
 80083f0:	615a      	str	r2, [r3, #20]
 80083f2:	e7bb      	b.n	800836c <__gethex+0x3c8>
 80083f4:	6922      	ldr	r2, [r4, #16]
 80083f6:	455a      	cmp	r2, fp
 80083f8:	dd0b      	ble.n	8008412 <__gethex+0x46e>
 80083fa:	2101      	movs	r1, #1
 80083fc:	4620      	mov	r0, r4
 80083fe:	f7ff fd69 	bl	8007ed4 <rshift>
 8008402:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008406:	3501      	adds	r5, #1
 8008408:	42ab      	cmp	r3, r5
 800840a:	f6ff aed0 	blt.w	80081ae <__gethex+0x20a>
 800840e:	2701      	movs	r7, #1
 8008410:	e7c0      	b.n	8008394 <__gethex+0x3f0>
 8008412:	f016 061f 	ands.w	r6, r6, #31
 8008416:	d0fa      	beq.n	800840e <__gethex+0x46a>
 8008418:	4453      	add	r3, sl
 800841a:	f1c6 0620 	rsb	r6, r6, #32
 800841e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008422:	f000 f9f7 	bl	8008814 <__hi0bits>
 8008426:	42b0      	cmp	r0, r6
 8008428:	dbe7      	blt.n	80083fa <__gethex+0x456>
 800842a:	e7f0      	b.n	800840e <__gethex+0x46a>
 800842c:	0800aa60 	.word	0x0800aa60

08008430 <L_shift>:
 8008430:	f1c2 0208 	rsb	r2, r2, #8
 8008434:	0092      	lsls	r2, r2, #2
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	f1c2 0620 	rsb	r6, r2, #32
 800843c:	6843      	ldr	r3, [r0, #4]
 800843e:	6804      	ldr	r4, [r0, #0]
 8008440:	fa03 f506 	lsl.w	r5, r3, r6
 8008444:	432c      	orrs	r4, r5
 8008446:	40d3      	lsrs	r3, r2
 8008448:	6004      	str	r4, [r0, #0]
 800844a:	f840 3f04 	str.w	r3, [r0, #4]!
 800844e:	4288      	cmp	r0, r1
 8008450:	d3f4      	bcc.n	800843c <L_shift+0xc>
 8008452:	bd70      	pop	{r4, r5, r6, pc}

08008454 <__match>:
 8008454:	b530      	push	{r4, r5, lr}
 8008456:	6803      	ldr	r3, [r0, #0]
 8008458:	3301      	adds	r3, #1
 800845a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800845e:	b914      	cbnz	r4, 8008466 <__match+0x12>
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	2001      	movs	r0, #1
 8008464:	bd30      	pop	{r4, r5, pc}
 8008466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800846a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800846e:	2d19      	cmp	r5, #25
 8008470:	bf98      	it	ls
 8008472:	3220      	addls	r2, #32
 8008474:	42a2      	cmp	r2, r4
 8008476:	d0f0      	beq.n	800845a <__match+0x6>
 8008478:	2000      	movs	r0, #0
 800847a:	e7f3      	b.n	8008464 <__match+0x10>

0800847c <__hexnan>:
 800847c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	680b      	ldr	r3, [r1, #0]
 8008482:	115e      	asrs	r6, r3, #5
 8008484:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008488:	f013 031f 	ands.w	r3, r3, #31
 800848c:	b087      	sub	sp, #28
 800848e:	bf18      	it	ne
 8008490:	3604      	addne	r6, #4
 8008492:	2500      	movs	r5, #0
 8008494:	1f37      	subs	r7, r6, #4
 8008496:	4690      	mov	r8, r2
 8008498:	6802      	ldr	r2, [r0, #0]
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	4682      	mov	sl, r0
 800849e:	f846 5c04 	str.w	r5, [r6, #-4]
 80084a2:	46b9      	mov	r9, r7
 80084a4:	463c      	mov	r4, r7
 80084a6:	9502      	str	r5, [sp, #8]
 80084a8:	46ab      	mov	fp, r5
 80084aa:	7851      	ldrb	r1, [r2, #1]
 80084ac:	1c53      	adds	r3, r2, #1
 80084ae:	9303      	str	r3, [sp, #12]
 80084b0:	b341      	cbz	r1, 8008504 <__hexnan+0x88>
 80084b2:	4608      	mov	r0, r1
 80084b4:	9205      	str	r2, [sp, #20]
 80084b6:	9104      	str	r1, [sp, #16]
 80084b8:	f7ff fd5e 	bl	8007f78 <__hexdig_fun>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d14f      	bne.n	8008560 <__hexnan+0xe4>
 80084c0:	9904      	ldr	r1, [sp, #16]
 80084c2:	9a05      	ldr	r2, [sp, #20]
 80084c4:	2920      	cmp	r1, #32
 80084c6:	d818      	bhi.n	80084fa <__hexnan+0x7e>
 80084c8:	9b02      	ldr	r3, [sp, #8]
 80084ca:	459b      	cmp	fp, r3
 80084cc:	dd13      	ble.n	80084f6 <__hexnan+0x7a>
 80084ce:	454c      	cmp	r4, r9
 80084d0:	d206      	bcs.n	80084e0 <__hexnan+0x64>
 80084d2:	2d07      	cmp	r5, #7
 80084d4:	dc04      	bgt.n	80084e0 <__hexnan+0x64>
 80084d6:	462a      	mov	r2, r5
 80084d8:	4649      	mov	r1, r9
 80084da:	4620      	mov	r0, r4
 80084dc:	f7ff ffa8 	bl	8008430 <L_shift>
 80084e0:	4544      	cmp	r4, r8
 80084e2:	d950      	bls.n	8008586 <__hexnan+0x10a>
 80084e4:	2300      	movs	r3, #0
 80084e6:	f1a4 0904 	sub.w	r9, r4, #4
 80084ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80084ee:	f8cd b008 	str.w	fp, [sp, #8]
 80084f2:	464c      	mov	r4, r9
 80084f4:	461d      	mov	r5, r3
 80084f6:	9a03      	ldr	r2, [sp, #12]
 80084f8:	e7d7      	b.n	80084aa <__hexnan+0x2e>
 80084fa:	2929      	cmp	r1, #41	; 0x29
 80084fc:	d156      	bne.n	80085ac <__hexnan+0x130>
 80084fe:	3202      	adds	r2, #2
 8008500:	f8ca 2000 	str.w	r2, [sl]
 8008504:	f1bb 0f00 	cmp.w	fp, #0
 8008508:	d050      	beq.n	80085ac <__hexnan+0x130>
 800850a:	454c      	cmp	r4, r9
 800850c:	d206      	bcs.n	800851c <__hexnan+0xa0>
 800850e:	2d07      	cmp	r5, #7
 8008510:	dc04      	bgt.n	800851c <__hexnan+0xa0>
 8008512:	462a      	mov	r2, r5
 8008514:	4649      	mov	r1, r9
 8008516:	4620      	mov	r0, r4
 8008518:	f7ff ff8a 	bl	8008430 <L_shift>
 800851c:	4544      	cmp	r4, r8
 800851e:	d934      	bls.n	800858a <__hexnan+0x10e>
 8008520:	f1a8 0204 	sub.w	r2, r8, #4
 8008524:	4623      	mov	r3, r4
 8008526:	f853 1b04 	ldr.w	r1, [r3], #4
 800852a:	f842 1f04 	str.w	r1, [r2, #4]!
 800852e:	429f      	cmp	r7, r3
 8008530:	d2f9      	bcs.n	8008526 <__hexnan+0xaa>
 8008532:	1b3b      	subs	r3, r7, r4
 8008534:	f023 0303 	bic.w	r3, r3, #3
 8008538:	3304      	adds	r3, #4
 800853a:	3401      	adds	r4, #1
 800853c:	3e03      	subs	r6, #3
 800853e:	42b4      	cmp	r4, r6
 8008540:	bf88      	it	hi
 8008542:	2304      	movhi	r3, #4
 8008544:	4443      	add	r3, r8
 8008546:	2200      	movs	r2, #0
 8008548:	f843 2b04 	str.w	r2, [r3], #4
 800854c:	429f      	cmp	r7, r3
 800854e:	d2fb      	bcs.n	8008548 <__hexnan+0xcc>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	b91b      	cbnz	r3, 800855c <__hexnan+0xe0>
 8008554:	4547      	cmp	r7, r8
 8008556:	d127      	bne.n	80085a8 <__hexnan+0x12c>
 8008558:	2301      	movs	r3, #1
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	2005      	movs	r0, #5
 800855e:	e026      	b.n	80085ae <__hexnan+0x132>
 8008560:	3501      	adds	r5, #1
 8008562:	2d08      	cmp	r5, #8
 8008564:	f10b 0b01 	add.w	fp, fp, #1
 8008568:	dd06      	ble.n	8008578 <__hexnan+0xfc>
 800856a:	4544      	cmp	r4, r8
 800856c:	d9c3      	bls.n	80084f6 <__hexnan+0x7a>
 800856e:	2300      	movs	r3, #0
 8008570:	f844 3c04 	str.w	r3, [r4, #-4]
 8008574:	2501      	movs	r5, #1
 8008576:	3c04      	subs	r4, #4
 8008578:	6822      	ldr	r2, [r4, #0]
 800857a:	f000 000f 	and.w	r0, r0, #15
 800857e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008582:	6022      	str	r2, [r4, #0]
 8008584:	e7b7      	b.n	80084f6 <__hexnan+0x7a>
 8008586:	2508      	movs	r5, #8
 8008588:	e7b5      	b.n	80084f6 <__hexnan+0x7a>
 800858a:	9b01      	ldr	r3, [sp, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0df      	beq.n	8008550 <__hexnan+0xd4>
 8008590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008594:	f1c3 0320 	rsb	r3, r3, #32
 8008598:	fa22 f303 	lsr.w	r3, r2, r3
 800859c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085a0:	401a      	ands	r2, r3
 80085a2:	f846 2c04 	str.w	r2, [r6, #-4]
 80085a6:	e7d3      	b.n	8008550 <__hexnan+0xd4>
 80085a8:	3f04      	subs	r7, #4
 80085aa:	e7d1      	b.n	8008550 <__hexnan+0xd4>
 80085ac:	2004      	movs	r0, #4
 80085ae:	b007      	add	sp, #28
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080085b4 <_localeconv_r>:
 80085b4:	4800      	ldr	r0, [pc, #0]	; (80085b8 <_localeconv_r+0x4>)
 80085b6:	4770      	bx	lr
 80085b8:	2000016c 	.word	0x2000016c

080085bc <_lseek_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4d07      	ldr	r5, [pc, #28]	; (80085dc <_lseek_r+0x20>)
 80085c0:	4604      	mov	r4, r0
 80085c2:	4608      	mov	r0, r1
 80085c4:	4611      	mov	r1, r2
 80085c6:	2200      	movs	r2, #0
 80085c8:	602a      	str	r2, [r5, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	f7f9 f8da 	bl	8001784 <_lseek>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d102      	bne.n	80085da <_lseek_r+0x1e>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	b103      	cbz	r3, 80085da <_lseek_r+0x1e>
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	2000033c 	.word	0x2000033c

080085e0 <malloc>:
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <malloc+0xc>)
 80085e2:	4601      	mov	r1, r0
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	f000 bd67 	b.w	80090b8 <_malloc_r>
 80085ea:	bf00      	nop
 80085ec:	20000014 	.word	0x20000014

080085f0 <__ascii_mbtowc>:
 80085f0:	b082      	sub	sp, #8
 80085f2:	b901      	cbnz	r1, 80085f6 <__ascii_mbtowc+0x6>
 80085f4:	a901      	add	r1, sp, #4
 80085f6:	b142      	cbz	r2, 800860a <__ascii_mbtowc+0x1a>
 80085f8:	b14b      	cbz	r3, 800860e <__ascii_mbtowc+0x1e>
 80085fa:	7813      	ldrb	r3, [r2, #0]
 80085fc:	600b      	str	r3, [r1, #0]
 80085fe:	7812      	ldrb	r2, [r2, #0]
 8008600:	1e10      	subs	r0, r2, #0
 8008602:	bf18      	it	ne
 8008604:	2001      	movne	r0, #1
 8008606:	b002      	add	sp, #8
 8008608:	4770      	bx	lr
 800860a:	4610      	mov	r0, r2
 800860c:	e7fb      	b.n	8008606 <__ascii_mbtowc+0x16>
 800860e:	f06f 0001 	mvn.w	r0, #1
 8008612:	e7f8      	b.n	8008606 <__ascii_mbtowc+0x16>

08008614 <memcpy>:
 8008614:	440a      	add	r2, r1
 8008616:	4291      	cmp	r1, r2
 8008618:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800861c:	d100      	bne.n	8008620 <memcpy+0xc>
 800861e:	4770      	bx	lr
 8008620:	b510      	push	{r4, lr}
 8008622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800862a:	4291      	cmp	r1, r2
 800862c:	d1f9      	bne.n	8008622 <memcpy+0xe>
 800862e:	bd10      	pop	{r4, pc}

08008630 <_Balloc>:
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008634:	4604      	mov	r4, r0
 8008636:	460d      	mov	r5, r1
 8008638:	b976      	cbnz	r6, 8008658 <_Balloc+0x28>
 800863a:	2010      	movs	r0, #16
 800863c:	f7ff ffd0 	bl	80085e0 <malloc>
 8008640:	4602      	mov	r2, r0
 8008642:	6260      	str	r0, [r4, #36]	; 0x24
 8008644:	b920      	cbnz	r0, 8008650 <_Balloc+0x20>
 8008646:	4b18      	ldr	r3, [pc, #96]	; (80086a8 <_Balloc+0x78>)
 8008648:	4818      	ldr	r0, [pc, #96]	; (80086ac <_Balloc+0x7c>)
 800864a:	2166      	movs	r1, #102	; 0x66
 800864c:	f001 fb5c 	bl	8009d08 <__assert_func>
 8008650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008654:	6006      	str	r6, [r0, #0]
 8008656:	60c6      	str	r6, [r0, #12]
 8008658:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800865a:	68f3      	ldr	r3, [r6, #12]
 800865c:	b183      	cbz	r3, 8008680 <_Balloc+0x50>
 800865e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008666:	b9b8      	cbnz	r0, 8008698 <_Balloc+0x68>
 8008668:	2101      	movs	r1, #1
 800866a:	fa01 f605 	lsl.w	r6, r1, r5
 800866e:	1d72      	adds	r2, r6, #5
 8008670:	0092      	lsls	r2, r2, #2
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fc9d 	bl	8008fb2 <_calloc_r>
 8008678:	b160      	cbz	r0, 8008694 <_Balloc+0x64>
 800867a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800867e:	e00e      	b.n	800869e <_Balloc+0x6e>
 8008680:	2221      	movs	r2, #33	; 0x21
 8008682:	2104      	movs	r1, #4
 8008684:	4620      	mov	r0, r4
 8008686:	f000 fc94 	bl	8008fb2 <_calloc_r>
 800868a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800868c:	60f0      	str	r0, [r6, #12]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e4      	bne.n	800865e <_Balloc+0x2e>
 8008694:	2000      	movs	r0, #0
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	6802      	ldr	r2, [r0, #0]
 800869a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800869e:	2300      	movs	r3, #0
 80086a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086a4:	e7f7      	b.n	8008696 <_Balloc+0x66>
 80086a6:	bf00      	nop
 80086a8:	0800a9ee 	.word	0x0800a9ee
 80086ac:	0800aaec 	.word	0x0800aaec

080086b0 <_Bfree>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086b4:	4605      	mov	r5, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	b976      	cbnz	r6, 80086d8 <_Bfree+0x28>
 80086ba:	2010      	movs	r0, #16
 80086bc:	f7ff ff90 	bl	80085e0 <malloc>
 80086c0:	4602      	mov	r2, r0
 80086c2:	6268      	str	r0, [r5, #36]	; 0x24
 80086c4:	b920      	cbnz	r0, 80086d0 <_Bfree+0x20>
 80086c6:	4b09      	ldr	r3, [pc, #36]	; (80086ec <_Bfree+0x3c>)
 80086c8:	4809      	ldr	r0, [pc, #36]	; (80086f0 <_Bfree+0x40>)
 80086ca:	218a      	movs	r1, #138	; 0x8a
 80086cc:	f001 fb1c 	bl	8009d08 <__assert_func>
 80086d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d4:	6006      	str	r6, [r0, #0]
 80086d6:	60c6      	str	r6, [r0, #12]
 80086d8:	b13c      	cbz	r4, 80086ea <_Bfree+0x3a>
 80086da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086dc:	6862      	ldr	r2, [r4, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086e4:	6021      	str	r1, [r4, #0]
 80086e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	0800a9ee 	.word	0x0800a9ee
 80086f0:	0800aaec 	.word	0x0800aaec

080086f4 <__multadd>:
 80086f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f8:	690d      	ldr	r5, [r1, #16]
 80086fa:	4607      	mov	r7, r0
 80086fc:	460c      	mov	r4, r1
 80086fe:	461e      	mov	r6, r3
 8008700:	f101 0c14 	add.w	ip, r1, #20
 8008704:	2000      	movs	r0, #0
 8008706:	f8dc 3000 	ldr.w	r3, [ip]
 800870a:	b299      	uxth	r1, r3
 800870c:	fb02 6101 	mla	r1, r2, r1, r6
 8008710:	0c1e      	lsrs	r6, r3, #16
 8008712:	0c0b      	lsrs	r3, r1, #16
 8008714:	fb02 3306 	mla	r3, r2, r6, r3
 8008718:	b289      	uxth	r1, r1
 800871a:	3001      	adds	r0, #1
 800871c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008720:	4285      	cmp	r5, r0
 8008722:	f84c 1b04 	str.w	r1, [ip], #4
 8008726:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800872a:	dcec      	bgt.n	8008706 <__multadd+0x12>
 800872c:	b30e      	cbz	r6, 8008772 <__multadd+0x7e>
 800872e:	68a3      	ldr	r3, [r4, #8]
 8008730:	42ab      	cmp	r3, r5
 8008732:	dc19      	bgt.n	8008768 <__multadd+0x74>
 8008734:	6861      	ldr	r1, [r4, #4]
 8008736:	4638      	mov	r0, r7
 8008738:	3101      	adds	r1, #1
 800873a:	f7ff ff79 	bl	8008630 <_Balloc>
 800873e:	4680      	mov	r8, r0
 8008740:	b928      	cbnz	r0, 800874e <__multadd+0x5a>
 8008742:	4602      	mov	r2, r0
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <__multadd+0x84>)
 8008746:	480d      	ldr	r0, [pc, #52]	; (800877c <__multadd+0x88>)
 8008748:	21b5      	movs	r1, #181	; 0xb5
 800874a:	f001 fadd 	bl	8009d08 <__assert_func>
 800874e:	6922      	ldr	r2, [r4, #16]
 8008750:	3202      	adds	r2, #2
 8008752:	f104 010c 	add.w	r1, r4, #12
 8008756:	0092      	lsls	r2, r2, #2
 8008758:	300c      	adds	r0, #12
 800875a:	f7ff ff5b 	bl	8008614 <memcpy>
 800875e:	4621      	mov	r1, r4
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff ffa5 	bl	80086b0 <_Bfree>
 8008766:	4644      	mov	r4, r8
 8008768:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800876c:	3501      	adds	r5, #1
 800876e:	615e      	str	r6, [r3, #20]
 8008770:	6125      	str	r5, [r4, #16]
 8008772:	4620      	mov	r0, r4
 8008774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008778:	0800aa60 	.word	0x0800aa60
 800877c:	0800aaec 	.word	0x0800aaec

08008780 <__s2b>:
 8008780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008784:	460c      	mov	r4, r1
 8008786:	4615      	mov	r5, r2
 8008788:	461f      	mov	r7, r3
 800878a:	2209      	movs	r2, #9
 800878c:	3308      	adds	r3, #8
 800878e:	4606      	mov	r6, r0
 8008790:	fb93 f3f2 	sdiv	r3, r3, r2
 8008794:	2100      	movs	r1, #0
 8008796:	2201      	movs	r2, #1
 8008798:	429a      	cmp	r2, r3
 800879a:	db09      	blt.n	80087b0 <__s2b+0x30>
 800879c:	4630      	mov	r0, r6
 800879e:	f7ff ff47 	bl	8008630 <_Balloc>
 80087a2:	b940      	cbnz	r0, 80087b6 <__s2b+0x36>
 80087a4:	4602      	mov	r2, r0
 80087a6:	4b19      	ldr	r3, [pc, #100]	; (800880c <__s2b+0x8c>)
 80087a8:	4819      	ldr	r0, [pc, #100]	; (8008810 <__s2b+0x90>)
 80087aa:	21ce      	movs	r1, #206	; 0xce
 80087ac:	f001 faac 	bl	8009d08 <__assert_func>
 80087b0:	0052      	lsls	r2, r2, #1
 80087b2:	3101      	adds	r1, #1
 80087b4:	e7f0      	b.n	8008798 <__s2b+0x18>
 80087b6:	9b08      	ldr	r3, [sp, #32]
 80087b8:	6143      	str	r3, [r0, #20]
 80087ba:	2d09      	cmp	r5, #9
 80087bc:	f04f 0301 	mov.w	r3, #1
 80087c0:	6103      	str	r3, [r0, #16]
 80087c2:	dd16      	ble.n	80087f2 <__s2b+0x72>
 80087c4:	f104 0909 	add.w	r9, r4, #9
 80087c8:	46c8      	mov	r8, r9
 80087ca:	442c      	add	r4, r5
 80087cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087d0:	4601      	mov	r1, r0
 80087d2:	3b30      	subs	r3, #48	; 0x30
 80087d4:	220a      	movs	r2, #10
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff ff8c 	bl	80086f4 <__multadd>
 80087dc:	45a0      	cmp	r8, r4
 80087de:	d1f5      	bne.n	80087cc <__s2b+0x4c>
 80087e0:	f1a5 0408 	sub.w	r4, r5, #8
 80087e4:	444c      	add	r4, r9
 80087e6:	1b2d      	subs	r5, r5, r4
 80087e8:	1963      	adds	r3, r4, r5
 80087ea:	42bb      	cmp	r3, r7
 80087ec:	db04      	blt.n	80087f8 <__s2b+0x78>
 80087ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f2:	340a      	adds	r4, #10
 80087f4:	2509      	movs	r5, #9
 80087f6:	e7f6      	b.n	80087e6 <__s2b+0x66>
 80087f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087fc:	4601      	mov	r1, r0
 80087fe:	3b30      	subs	r3, #48	; 0x30
 8008800:	220a      	movs	r2, #10
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff ff76 	bl	80086f4 <__multadd>
 8008808:	e7ee      	b.n	80087e8 <__s2b+0x68>
 800880a:	bf00      	nop
 800880c:	0800aa60 	.word	0x0800aa60
 8008810:	0800aaec 	.word	0x0800aaec

08008814 <__hi0bits>:
 8008814:	0c03      	lsrs	r3, r0, #16
 8008816:	041b      	lsls	r3, r3, #16
 8008818:	b9d3      	cbnz	r3, 8008850 <__hi0bits+0x3c>
 800881a:	0400      	lsls	r0, r0, #16
 800881c:	2310      	movs	r3, #16
 800881e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008822:	bf04      	itt	eq
 8008824:	0200      	lsleq	r0, r0, #8
 8008826:	3308      	addeq	r3, #8
 8008828:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800882c:	bf04      	itt	eq
 800882e:	0100      	lsleq	r0, r0, #4
 8008830:	3304      	addeq	r3, #4
 8008832:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008836:	bf04      	itt	eq
 8008838:	0080      	lsleq	r0, r0, #2
 800883a:	3302      	addeq	r3, #2
 800883c:	2800      	cmp	r0, #0
 800883e:	db05      	blt.n	800884c <__hi0bits+0x38>
 8008840:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008844:	f103 0301 	add.w	r3, r3, #1
 8008848:	bf08      	it	eq
 800884a:	2320      	moveq	r3, #32
 800884c:	4618      	mov	r0, r3
 800884e:	4770      	bx	lr
 8008850:	2300      	movs	r3, #0
 8008852:	e7e4      	b.n	800881e <__hi0bits+0xa>

08008854 <__lo0bits>:
 8008854:	6803      	ldr	r3, [r0, #0]
 8008856:	f013 0207 	ands.w	r2, r3, #7
 800885a:	4601      	mov	r1, r0
 800885c:	d00b      	beq.n	8008876 <__lo0bits+0x22>
 800885e:	07da      	lsls	r2, r3, #31
 8008860:	d423      	bmi.n	80088aa <__lo0bits+0x56>
 8008862:	0798      	lsls	r0, r3, #30
 8008864:	bf49      	itett	mi
 8008866:	085b      	lsrmi	r3, r3, #1
 8008868:	089b      	lsrpl	r3, r3, #2
 800886a:	2001      	movmi	r0, #1
 800886c:	600b      	strmi	r3, [r1, #0]
 800886e:	bf5c      	itt	pl
 8008870:	600b      	strpl	r3, [r1, #0]
 8008872:	2002      	movpl	r0, #2
 8008874:	4770      	bx	lr
 8008876:	b298      	uxth	r0, r3
 8008878:	b9a8      	cbnz	r0, 80088a6 <__lo0bits+0x52>
 800887a:	0c1b      	lsrs	r3, r3, #16
 800887c:	2010      	movs	r0, #16
 800887e:	b2da      	uxtb	r2, r3
 8008880:	b90a      	cbnz	r2, 8008886 <__lo0bits+0x32>
 8008882:	3008      	adds	r0, #8
 8008884:	0a1b      	lsrs	r3, r3, #8
 8008886:	071a      	lsls	r2, r3, #28
 8008888:	bf04      	itt	eq
 800888a:	091b      	lsreq	r3, r3, #4
 800888c:	3004      	addeq	r0, #4
 800888e:	079a      	lsls	r2, r3, #30
 8008890:	bf04      	itt	eq
 8008892:	089b      	lsreq	r3, r3, #2
 8008894:	3002      	addeq	r0, #2
 8008896:	07da      	lsls	r2, r3, #31
 8008898:	d403      	bmi.n	80088a2 <__lo0bits+0x4e>
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	f100 0001 	add.w	r0, r0, #1
 80088a0:	d005      	beq.n	80088ae <__lo0bits+0x5a>
 80088a2:	600b      	str	r3, [r1, #0]
 80088a4:	4770      	bx	lr
 80088a6:	4610      	mov	r0, r2
 80088a8:	e7e9      	b.n	800887e <__lo0bits+0x2a>
 80088aa:	2000      	movs	r0, #0
 80088ac:	4770      	bx	lr
 80088ae:	2020      	movs	r0, #32
 80088b0:	4770      	bx	lr
	...

080088b4 <__i2b>:
 80088b4:	b510      	push	{r4, lr}
 80088b6:	460c      	mov	r4, r1
 80088b8:	2101      	movs	r1, #1
 80088ba:	f7ff feb9 	bl	8008630 <_Balloc>
 80088be:	4602      	mov	r2, r0
 80088c0:	b928      	cbnz	r0, 80088ce <__i2b+0x1a>
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <__i2b+0x24>)
 80088c4:	4805      	ldr	r0, [pc, #20]	; (80088dc <__i2b+0x28>)
 80088c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088ca:	f001 fa1d 	bl	8009d08 <__assert_func>
 80088ce:	2301      	movs	r3, #1
 80088d0:	6144      	str	r4, [r0, #20]
 80088d2:	6103      	str	r3, [r0, #16]
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	bf00      	nop
 80088d8:	0800aa60 	.word	0x0800aa60
 80088dc:	0800aaec 	.word	0x0800aaec

080088e0 <__multiply>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	4691      	mov	r9, r2
 80088e6:	690a      	ldr	r2, [r1, #16]
 80088e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	bfb8      	it	lt
 80088f0:	460b      	movlt	r3, r1
 80088f2:	460c      	mov	r4, r1
 80088f4:	bfbc      	itt	lt
 80088f6:	464c      	movlt	r4, r9
 80088f8:	4699      	movlt	r9, r3
 80088fa:	6927      	ldr	r7, [r4, #16]
 80088fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008900:	68a3      	ldr	r3, [r4, #8]
 8008902:	6861      	ldr	r1, [r4, #4]
 8008904:	eb07 060a 	add.w	r6, r7, sl
 8008908:	42b3      	cmp	r3, r6
 800890a:	b085      	sub	sp, #20
 800890c:	bfb8      	it	lt
 800890e:	3101      	addlt	r1, #1
 8008910:	f7ff fe8e 	bl	8008630 <_Balloc>
 8008914:	b930      	cbnz	r0, 8008924 <__multiply+0x44>
 8008916:	4602      	mov	r2, r0
 8008918:	4b44      	ldr	r3, [pc, #272]	; (8008a2c <__multiply+0x14c>)
 800891a:	4845      	ldr	r0, [pc, #276]	; (8008a30 <__multiply+0x150>)
 800891c:	f240 115d 	movw	r1, #349	; 0x15d
 8008920:	f001 f9f2 	bl	8009d08 <__assert_func>
 8008924:	f100 0514 	add.w	r5, r0, #20
 8008928:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800892c:	462b      	mov	r3, r5
 800892e:	2200      	movs	r2, #0
 8008930:	4543      	cmp	r3, r8
 8008932:	d321      	bcc.n	8008978 <__multiply+0x98>
 8008934:	f104 0314 	add.w	r3, r4, #20
 8008938:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800893c:	f109 0314 	add.w	r3, r9, #20
 8008940:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008944:	9202      	str	r2, [sp, #8]
 8008946:	1b3a      	subs	r2, r7, r4
 8008948:	3a15      	subs	r2, #21
 800894a:	f022 0203 	bic.w	r2, r2, #3
 800894e:	3204      	adds	r2, #4
 8008950:	f104 0115 	add.w	r1, r4, #21
 8008954:	428f      	cmp	r7, r1
 8008956:	bf38      	it	cc
 8008958:	2204      	movcc	r2, #4
 800895a:	9201      	str	r2, [sp, #4]
 800895c:	9a02      	ldr	r2, [sp, #8]
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	d80c      	bhi.n	800897e <__multiply+0x9e>
 8008964:	2e00      	cmp	r6, #0
 8008966:	dd03      	ble.n	8008970 <__multiply+0x90>
 8008968:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800896c:	2b00      	cmp	r3, #0
 800896e:	d05a      	beq.n	8008a26 <__multiply+0x146>
 8008970:	6106      	str	r6, [r0, #16]
 8008972:	b005      	add	sp, #20
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	f843 2b04 	str.w	r2, [r3], #4
 800897c:	e7d8      	b.n	8008930 <__multiply+0x50>
 800897e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008982:	f1ba 0f00 	cmp.w	sl, #0
 8008986:	d024      	beq.n	80089d2 <__multiply+0xf2>
 8008988:	f104 0e14 	add.w	lr, r4, #20
 800898c:	46a9      	mov	r9, r5
 800898e:	f04f 0c00 	mov.w	ip, #0
 8008992:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008996:	f8d9 1000 	ldr.w	r1, [r9]
 800899a:	fa1f fb82 	uxth.w	fp, r2
 800899e:	b289      	uxth	r1, r1
 80089a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80089a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089a8:	f8d9 2000 	ldr.w	r2, [r9]
 80089ac:	4461      	add	r1, ip
 80089ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80089b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089ba:	b289      	uxth	r1, r1
 80089bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089c0:	4577      	cmp	r7, lr
 80089c2:	f849 1b04 	str.w	r1, [r9], #4
 80089c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089ca:	d8e2      	bhi.n	8008992 <__multiply+0xb2>
 80089cc:	9a01      	ldr	r2, [sp, #4]
 80089ce:	f845 c002 	str.w	ip, [r5, r2]
 80089d2:	9a03      	ldr	r2, [sp, #12]
 80089d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089d8:	3304      	adds	r3, #4
 80089da:	f1b9 0f00 	cmp.w	r9, #0
 80089de:	d020      	beq.n	8008a22 <__multiply+0x142>
 80089e0:	6829      	ldr	r1, [r5, #0]
 80089e2:	f104 0c14 	add.w	ip, r4, #20
 80089e6:	46ae      	mov	lr, r5
 80089e8:	f04f 0a00 	mov.w	sl, #0
 80089ec:	f8bc b000 	ldrh.w	fp, [ip]
 80089f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089f4:	fb09 220b 	mla	r2, r9, fp, r2
 80089f8:	4492      	add	sl, r2
 80089fa:	b289      	uxth	r1, r1
 80089fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a00:	f84e 1b04 	str.w	r1, [lr], #4
 8008a04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a08:	f8be 1000 	ldrh.w	r1, [lr]
 8008a0c:	0c12      	lsrs	r2, r2, #16
 8008a0e:	fb09 1102 	mla	r1, r9, r2, r1
 8008a12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a16:	4567      	cmp	r7, ip
 8008a18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a1c:	d8e6      	bhi.n	80089ec <__multiply+0x10c>
 8008a1e:	9a01      	ldr	r2, [sp, #4]
 8008a20:	50a9      	str	r1, [r5, r2]
 8008a22:	3504      	adds	r5, #4
 8008a24:	e79a      	b.n	800895c <__multiply+0x7c>
 8008a26:	3e01      	subs	r6, #1
 8008a28:	e79c      	b.n	8008964 <__multiply+0x84>
 8008a2a:	bf00      	nop
 8008a2c:	0800aa60 	.word	0x0800aa60
 8008a30:	0800aaec 	.word	0x0800aaec

08008a34 <__pow5mult>:
 8008a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	4615      	mov	r5, r2
 8008a3a:	f012 0203 	ands.w	r2, r2, #3
 8008a3e:	4606      	mov	r6, r0
 8008a40:	460f      	mov	r7, r1
 8008a42:	d007      	beq.n	8008a54 <__pow5mult+0x20>
 8008a44:	4c25      	ldr	r4, [pc, #148]	; (8008adc <__pow5mult+0xa8>)
 8008a46:	3a01      	subs	r2, #1
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a4e:	f7ff fe51 	bl	80086f4 <__multadd>
 8008a52:	4607      	mov	r7, r0
 8008a54:	10ad      	asrs	r5, r5, #2
 8008a56:	d03d      	beq.n	8008ad4 <__pow5mult+0xa0>
 8008a58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a5a:	b97c      	cbnz	r4, 8008a7c <__pow5mult+0x48>
 8008a5c:	2010      	movs	r0, #16
 8008a5e:	f7ff fdbf 	bl	80085e0 <malloc>
 8008a62:	4602      	mov	r2, r0
 8008a64:	6270      	str	r0, [r6, #36]	; 0x24
 8008a66:	b928      	cbnz	r0, 8008a74 <__pow5mult+0x40>
 8008a68:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <__pow5mult+0xac>)
 8008a6a:	481e      	ldr	r0, [pc, #120]	; (8008ae4 <__pow5mult+0xb0>)
 8008a6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a70:	f001 f94a 	bl	8009d08 <__assert_func>
 8008a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a78:	6004      	str	r4, [r0, #0]
 8008a7a:	60c4      	str	r4, [r0, #12]
 8008a7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a84:	b94c      	cbnz	r4, 8008a9a <__pow5mult+0x66>
 8008a86:	f240 2171 	movw	r1, #625	; 0x271
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ff12 	bl	80088b4 <__i2b>
 8008a90:	2300      	movs	r3, #0
 8008a92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a96:	4604      	mov	r4, r0
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	f04f 0900 	mov.w	r9, #0
 8008a9e:	07eb      	lsls	r3, r5, #31
 8008aa0:	d50a      	bpl.n	8008ab8 <__pow5mult+0x84>
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7ff ff1a 	bl	80088e0 <__multiply>
 8008aac:	4639      	mov	r1, r7
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f7ff fdfd 	bl	80086b0 <_Bfree>
 8008ab6:	4647      	mov	r7, r8
 8008ab8:	106d      	asrs	r5, r5, #1
 8008aba:	d00b      	beq.n	8008ad4 <__pow5mult+0xa0>
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	b938      	cbnz	r0, 8008ad0 <__pow5mult+0x9c>
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff ff0b 	bl	80088e0 <__multiply>
 8008aca:	6020      	str	r0, [r4, #0]
 8008acc:	f8c0 9000 	str.w	r9, [r0]
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	e7e4      	b.n	8008a9e <__pow5mult+0x6a>
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ada:	bf00      	nop
 8008adc:	0800ac38 	.word	0x0800ac38
 8008ae0:	0800a9ee 	.word	0x0800a9ee
 8008ae4:	0800aaec 	.word	0x0800aaec

08008ae8 <__lshift>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	460c      	mov	r4, r1
 8008aee:	6849      	ldr	r1, [r1, #4]
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008af6:	68a3      	ldr	r3, [r4, #8]
 8008af8:	4607      	mov	r7, r0
 8008afa:	4691      	mov	r9, r2
 8008afc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b00:	f108 0601 	add.w	r6, r8, #1
 8008b04:	42b3      	cmp	r3, r6
 8008b06:	db0b      	blt.n	8008b20 <__lshift+0x38>
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7ff fd91 	bl	8008630 <_Balloc>
 8008b0e:	4605      	mov	r5, r0
 8008b10:	b948      	cbnz	r0, 8008b26 <__lshift+0x3e>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b2a      	ldr	r3, [pc, #168]	; (8008bc0 <__lshift+0xd8>)
 8008b16:	482b      	ldr	r0, [pc, #172]	; (8008bc4 <__lshift+0xdc>)
 8008b18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b1c:	f001 f8f4 	bl	8009d08 <__assert_func>
 8008b20:	3101      	adds	r1, #1
 8008b22:	005b      	lsls	r3, r3, #1
 8008b24:	e7ee      	b.n	8008b04 <__lshift+0x1c>
 8008b26:	2300      	movs	r3, #0
 8008b28:	f100 0114 	add.w	r1, r0, #20
 8008b2c:	f100 0210 	add.w	r2, r0, #16
 8008b30:	4618      	mov	r0, r3
 8008b32:	4553      	cmp	r3, sl
 8008b34:	db37      	blt.n	8008ba6 <__lshift+0xbe>
 8008b36:	6920      	ldr	r0, [r4, #16]
 8008b38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b3c:	f104 0314 	add.w	r3, r4, #20
 8008b40:	f019 091f 	ands.w	r9, r9, #31
 8008b44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b4c:	d02f      	beq.n	8008bae <__lshift+0xc6>
 8008b4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b52:	468a      	mov	sl, r1
 8008b54:	f04f 0c00 	mov.w	ip, #0
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	fa02 f209 	lsl.w	r2, r2, r9
 8008b5e:	ea42 020c 	orr.w	r2, r2, ip
 8008b62:	f84a 2b04 	str.w	r2, [sl], #4
 8008b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b6a:	4298      	cmp	r0, r3
 8008b6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b70:	d8f2      	bhi.n	8008b58 <__lshift+0x70>
 8008b72:	1b03      	subs	r3, r0, r4
 8008b74:	3b15      	subs	r3, #21
 8008b76:	f023 0303 	bic.w	r3, r3, #3
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	f104 0215 	add.w	r2, r4, #21
 8008b80:	4290      	cmp	r0, r2
 8008b82:	bf38      	it	cc
 8008b84:	2304      	movcc	r3, #4
 8008b86:	f841 c003 	str.w	ip, [r1, r3]
 8008b8a:	f1bc 0f00 	cmp.w	ip, #0
 8008b8e:	d001      	beq.n	8008b94 <__lshift+0xac>
 8008b90:	f108 0602 	add.w	r6, r8, #2
 8008b94:	3e01      	subs	r6, #1
 8008b96:	4638      	mov	r0, r7
 8008b98:	612e      	str	r6, [r5, #16]
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	f7ff fd88 	bl	80086b0 <_Bfree>
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008baa:	3301      	adds	r3, #1
 8008bac:	e7c1      	b.n	8008b32 <__lshift+0x4a>
 8008bae:	3904      	subs	r1, #4
 8008bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bb8:	4298      	cmp	r0, r3
 8008bba:	d8f9      	bhi.n	8008bb0 <__lshift+0xc8>
 8008bbc:	e7ea      	b.n	8008b94 <__lshift+0xac>
 8008bbe:	bf00      	nop
 8008bc0:	0800aa60 	.word	0x0800aa60
 8008bc4:	0800aaec 	.word	0x0800aaec

08008bc8 <__mcmp>:
 8008bc8:	b530      	push	{r4, r5, lr}
 8008bca:	6902      	ldr	r2, [r0, #16]
 8008bcc:	690c      	ldr	r4, [r1, #16]
 8008bce:	1b12      	subs	r2, r2, r4
 8008bd0:	d10e      	bne.n	8008bf0 <__mcmp+0x28>
 8008bd2:	f100 0314 	add.w	r3, r0, #20
 8008bd6:	3114      	adds	r1, #20
 8008bd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bdc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008be0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008be4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008be8:	42a5      	cmp	r5, r4
 8008bea:	d003      	beq.n	8008bf4 <__mcmp+0x2c>
 8008bec:	d305      	bcc.n	8008bfa <__mcmp+0x32>
 8008bee:	2201      	movs	r2, #1
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	bd30      	pop	{r4, r5, pc}
 8008bf4:	4283      	cmp	r3, r0
 8008bf6:	d3f3      	bcc.n	8008be0 <__mcmp+0x18>
 8008bf8:	e7fa      	b.n	8008bf0 <__mcmp+0x28>
 8008bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bfe:	e7f7      	b.n	8008bf0 <__mcmp+0x28>

08008c00 <__mdiff>:
 8008c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	460c      	mov	r4, r1
 8008c06:	4606      	mov	r6, r0
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4690      	mov	r8, r2
 8008c0e:	f7ff ffdb 	bl	8008bc8 <__mcmp>
 8008c12:	1e05      	subs	r5, r0, #0
 8008c14:	d110      	bne.n	8008c38 <__mdiff+0x38>
 8008c16:	4629      	mov	r1, r5
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7ff fd09 	bl	8008630 <_Balloc>
 8008c1e:	b930      	cbnz	r0, 8008c2e <__mdiff+0x2e>
 8008c20:	4b3a      	ldr	r3, [pc, #232]	; (8008d0c <__mdiff+0x10c>)
 8008c22:	4602      	mov	r2, r0
 8008c24:	f240 2132 	movw	r1, #562	; 0x232
 8008c28:	4839      	ldr	r0, [pc, #228]	; (8008d10 <__mdiff+0x110>)
 8008c2a:	f001 f86d 	bl	8009d08 <__assert_func>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c38:	bfa4      	itt	ge
 8008c3a:	4643      	movge	r3, r8
 8008c3c:	46a0      	movge	r8, r4
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c44:	bfa6      	itte	ge
 8008c46:	461c      	movge	r4, r3
 8008c48:	2500      	movge	r5, #0
 8008c4a:	2501      	movlt	r5, #1
 8008c4c:	f7ff fcf0 	bl	8008630 <_Balloc>
 8008c50:	b920      	cbnz	r0, 8008c5c <__mdiff+0x5c>
 8008c52:	4b2e      	ldr	r3, [pc, #184]	; (8008d0c <__mdiff+0x10c>)
 8008c54:	4602      	mov	r2, r0
 8008c56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c5a:	e7e5      	b.n	8008c28 <__mdiff+0x28>
 8008c5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c60:	6926      	ldr	r6, [r4, #16]
 8008c62:	60c5      	str	r5, [r0, #12]
 8008c64:	f104 0914 	add.w	r9, r4, #20
 8008c68:	f108 0514 	add.w	r5, r8, #20
 8008c6c:	f100 0e14 	add.w	lr, r0, #20
 8008c70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c78:	f108 0210 	add.w	r2, r8, #16
 8008c7c:	46f2      	mov	sl, lr
 8008c7e:	2100      	movs	r1, #0
 8008c80:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c88:	fa1f f883 	uxth.w	r8, r3
 8008c8c:	fa11 f18b 	uxtah	r1, r1, fp
 8008c90:	0c1b      	lsrs	r3, r3, #16
 8008c92:	eba1 0808 	sub.w	r8, r1, r8
 8008c96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c9e:	fa1f f888 	uxth.w	r8, r8
 8008ca2:	1419      	asrs	r1, r3, #16
 8008ca4:	454e      	cmp	r6, r9
 8008ca6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008caa:	f84a 3b04 	str.w	r3, [sl], #4
 8008cae:	d8e7      	bhi.n	8008c80 <__mdiff+0x80>
 8008cb0:	1b33      	subs	r3, r6, r4
 8008cb2:	3b15      	subs	r3, #21
 8008cb4:	f023 0303 	bic.w	r3, r3, #3
 8008cb8:	3304      	adds	r3, #4
 8008cba:	3415      	adds	r4, #21
 8008cbc:	42a6      	cmp	r6, r4
 8008cbe:	bf38      	it	cc
 8008cc0:	2304      	movcc	r3, #4
 8008cc2:	441d      	add	r5, r3
 8008cc4:	4473      	add	r3, lr
 8008cc6:	469e      	mov	lr, r3
 8008cc8:	462e      	mov	r6, r5
 8008cca:	4566      	cmp	r6, ip
 8008ccc:	d30e      	bcc.n	8008cec <__mdiff+0xec>
 8008cce:	f10c 0203 	add.w	r2, ip, #3
 8008cd2:	1b52      	subs	r2, r2, r5
 8008cd4:	f022 0203 	bic.w	r2, r2, #3
 8008cd8:	3d03      	subs	r5, #3
 8008cda:	45ac      	cmp	ip, r5
 8008cdc:	bf38      	it	cc
 8008cde:	2200      	movcc	r2, #0
 8008ce0:	441a      	add	r2, r3
 8008ce2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ce6:	b17b      	cbz	r3, 8008d08 <__mdiff+0x108>
 8008ce8:	6107      	str	r7, [r0, #16]
 8008cea:	e7a3      	b.n	8008c34 <__mdiff+0x34>
 8008cec:	f856 8b04 	ldr.w	r8, [r6], #4
 8008cf0:	fa11 f288 	uxtah	r2, r1, r8
 8008cf4:	1414      	asrs	r4, r2, #16
 8008cf6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cfa:	b292      	uxth	r2, r2
 8008cfc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d00:	f84e 2b04 	str.w	r2, [lr], #4
 8008d04:	1421      	asrs	r1, r4, #16
 8008d06:	e7e0      	b.n	8008cca <__mdiff+0xca>
 8008d08:	3f01      	subs	r7, #1
 8008d0a:	e7ea      	b.n	8008ce2 <__mdiff+0xe2>
 8008d0c:	0800aa60 	.word	0x0800aa60
 8008d10:	0800aaec 	.word	0x0800aaec

08008d14 <__ulp>:
 8008d14:	b082      	sub	sp, #8
 8008d16:	ed8d 0b00 	vstr	d0, [sp]
 8008d1a:	9b01      	ldr	r3, [sp, #4]
 8008d1c:	4912      	ldr	r1, [pc, #72]	; (8008d68 <__ulp+0x54>)
 8008d1e:	4019      	ands	r1, r3
 8008d20:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008d24:	2900      	cmp	r1, #0
 8008d26:	dd05      	ble.n	8008d34 <__ulp+0x20>
 8008d28:	2200      	movs	r2, #0
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	ec43 2b10 	vmov	d0, r2, r3
 8008d30:	b002      	add	sp, #8
 8008d32:	4770      	bx	lr
 8008d34:	4249      	negs	r1, r1
 8008d36:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008d3a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008d3e:	f04f 0200 	mov.w	r2, #0
 8008d42:	f04f 0300 	mov.w	r3, #0
 8008d46:	da04      	bge.n	8008d52 <__ulp+0x3e>
 8008d48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008d4c:	fa41 f300 	asr.w	r3, r1, r0
 8008d50:	e7ec      	b.n	8008d2c <__ulp+0x18>
 8008d52:	f1a0 0114 	sub.w	r1, r0, #20
 8008d56:	291e      	cmp	r1, #30
 8008d58:	bfda      	itte	le
 8008d5a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008d5e:	fa20 f101 	lsrle.w	r1, r0, r1
 8008d62:	2101      	movgt	r1, #1
 8008d64:	460a      	mov	r2, r1
 8008d66:	e7e1      	b.n	8008d2c <__ulp+0x18>
 8008d68:	7ff00000 	.word	0x7ff00000

08008d6c <__b2d>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	6905      	ldr	r5, [r0, #16]
 8008d70:	f100 0714 	add.w	r7, r0, #20
 8008d74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008d78:	1f2e      	subs	r6, r5, #4
 8008d7a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7ff fd48 	bl	8008814 <__hi0bits>
 8008d84:	f1c0 0320 	rsb	r3, r0, #32
 8008d88:	280a      	cmp	r0, #10
 8008d8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008e08 <__b2d+0x9c>
 8008d8e:	600b      	str	r3, [r1, #0]
 8008d90:	dc14      	bgt.n	8008dbc <__b2d+0x50>
 8008d92:	f1c0 0e0b 	rsb	lr, r0, #11
 8008d96:	fa24 f10e 	lsr.w	r1, r4, lr
 8008d9a:	42b7      	cmp	r7, r6
 8008d9c:	ea41 030c 	orr.w	r3, r1, ip
 8008da0:	bf34      	ite	cc
 8008da2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008da6:	2100      	movcs	r1, #0
 8008da8:	3015      	adds	r0, #21
 8008daa:	fa04 f000 	lsl.w	r0, r4, r0
 8008dae:	fa21 f10e 	lsr.w	r1, r1, lr
 8008db2:	ea40 0201 	orr.w	r2, r0, r1
 8008db6:	ec43 2b10 	vmov	d0, r2, r3
 8008dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbc:	42b7      	cmp	r7, r6
 8008dbe:	bf3a      	itte	cc
 8008dc0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008dc4:	f1a5 0608 	subcc.w	r6, r5, #8
 8008dc8:	2100      	movcs	r1, #0
 8008dca:	380b      	subs	r0, #11
 8008dcc:	d017      	beq.n	8008dfe <__b2d+0x92>
 8008dce:	f1c0 0c20 	rsb	ip, r0, #32
 8008dd2:	fa04 f500 	lsl.w	r5, r4, r0
 8008dd6:	42be      	cmp	r6, r7
 8008dd8:	fa21 f40c 	lsr.w	r4, r1, ip
 8008ddc:	ea45 0504 	orr.w	r5, r5, r4
 8008de0:	bf8c      	ite	hi
 8008de2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008de6:	2400      	movls	r4, #0
 8008de8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008dec:	fa01 f000 	lsl.w	r0, r1, r0
 8008df0:	fa24 f40c 	lsr.w	r4, r4, ip
 8008df4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008df8:	ea40 0204 	orr.w	r2, r0, r4
 8008dfc:	e7db      	b.n	8008db6 <__b2d+0x4a>
 8008dfe:	ea44 030c 	orr.w	r3, r4, ip
 8008e02:	460a      	mov	r2, r1
 8008e04:	e7d7      	b.n	8008db6 <__b2d+0x4a>
 8008e06:	bf00      	nop
 8008e08:	3ff00000 	.word	0x3ff00000

08008e0c <__d2b>:
 8008e0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e10:	4689      	mov	r9, r1
 8008e12:	2101      	movs	r1, #1
 8008e14:	ec57 6b10 	vmov	r6, r7, d0
 8008e18:	4690      	mov	r8, r2
 8008e1a:	f7ff fc09 	bl	8008630 <_Balloc>
 8008e1e:	4604      	mov	r4, r0
 8008e20:	b930      	cbnz	r0, 8008e30 <__d2b+0x24>
 8008e22:	4602      	mov	r2, r0
 8008e24:	4b25      	ldr	r3, [pc, #148]	; (8008ebc <__d2b+0xb0>)
 8008e26:	4826      	ldr	r0, [pc, #152]	; (8008ec0 <__d2b+0xb4>)
 8008e28:	f240 310a 	movw	r1, #778	; 0x30a
 8008e2c:	f000 ff6c 	bl	8009d08 <__assert_func>
 8008e30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e38:	bb35      	cbnz	r5, 8008e88 <__d2b+0x7c>
 8008e3a:	2e00      	cmp	r6, #0
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	d028      	beq.n	8008e92 <__d2b+0x86>
 8008e40:	4668      	mov	r0, sp
 8008e42:	9600      	str	r6, [sp, #0]
 8008e44:	f7ff fd06 	bl	8008854 <__lo0bits>
 8008e48:	9900      	ldr	r1, [sp, #0]
 8008e4a:	b300      	cbz	r0, 8008e8e <__d2b+0x82>
 8008e4c:	9a01      	ldr	r2, [sp, #4]
 8008e4e:	f1c0 0320 	rsb	r3, r0, #32
 8008e52:	fa02 f303 	lsl.w	r3, r2, r3
 8008e56:	430b      	orrs	r3, r1
 8008e58:	40c2      	lsrs	r2, r0
 8008e5a:	6163      	str	r3, [r4, #20]
 8008e5c:	9201      	str	r2, [sp, #4]
 8008e5e:	9b01      	ldr	r3, [sp, #4]
 8008e60:	61a3      	str	r3, [r4, #24]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bf14      	ite	ne
 8008e66:	2202      	movne	r2, #2
 8008e68:	2201      	moveq	r2, #1
 8008e6a:	6122      	str	r2, [r4, #16]
 8008e6c:	b1d5      	cbz	r5, 8008ea4 <__d2b+0x98>
 8008e6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e72:	4405      	add	r5, r0
 8008e74:	f8c9 5000 	str.w	r5, [r9]
 8008e78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e7c:	f8c8 0000 	str.w	r0, [r8]
 8008e80:	4620      	mov	r0, r4
 8008e82:	b003      	add	sp, #12
 8008e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e8c:	e7d5      	b.n	8008e3a <__d2b+0x2e>
 8008e8e:	6161      	str	r1, [r4, #20]
 8008e90:	e7e5      	b.n	8008e5e <__d2b+0x52>
 8008e92:	a801      	add	r0, sp, #4
 8008e94:	f7ff fcde 	bl	8008854 <__lo0bits>
 8008e98:	9b01      	ldr	r3, [sp, #4]
 8008e9a:	6163      	str	r3, [r4, #20]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	6122      	str	r2, [r4, #16]
 8008ea0:	3020      	adds	r0, #32
 8008ea2:	e7e3      	b.n	8008e6c <__d2b+0x60>
 8008ea4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ea8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008eac:	f8c9 0000 	str.w	r0, [r9]
 8008eb0:	6918      	ldr	r0, [r3, #16]
 8008eb2:	f7ff fcaf 	bl	8008814 <__hi0bits>
 8008eb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008eba:	e7df      	b.n	8008e7c <__d2b+0x70>
 8008ebc:	0800aa60 	.word	0x0800aa60
 8008ec0:	0800aaec 	.word	0x0800aaec

08008ec4 <__ratio>:
 8008ec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec8:	4688      	mov	r8, r1
 8008eca:	4669      	mov	r1, sp
 8008ecc:	4681      	mov	r9, r0
 8008ece:	f7ff ff4d 	bl	8008d6c <__b2d>
 8008ed2:	a901      	add	r1, sp, #4
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	ec55 4b10 	vmov	r4, r5, d0
 8008eda:	f7ff ff47 	bl	8008d6c <__b2d>
 8008ede:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ee2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ee6:	eba3 0c02 	sub.w	ip, r3, r2
 8008eea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ef4:	ec51 0b10 	vmov	r0, r1, d0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	bfd6      	itet	le
 8008efc:	460a      	movle	r2, r1
 8008efe:	462a      	movgt	r2, r5
 8008f00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f04:	468b      	mov	fp, r1
 8008f06:	462f      	mov	r7, r5
 8008f08:	bfd4      	ite	le
 8008f0a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f12:	4620      	mov	r0, r4
 8008f14:	ee10 2a10 	vmov	r2, s0
 8008f18:	465b      	mov	r3, fp
 8008f1a:	4639      	mov	r1, r7
 8008f1c:	f7f7 fca6 	bl	800086c <__aeabi_ddiv>
 8008f20:	ec41 0b10 	vmov	d0, r0, r1
 8008f24:	b003      	add	sp, #12
 8008f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f2a <__copybits>:
 8008f2a:	3901      	subs	r1, #1
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	1149      	asrs	r1, r1, #5
 8008f30:	6914      	ldr	r4, [r2, #16]
 8008f32:	3101      	adds	r1, #1
 8008f34:	f102 0314 	add.w	r3, r2, #20
 8008f38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f40:	1f05      	subs	r5, r0, #4
 8008f42:	42a3      	cmp	r3, r4
 8008f44:	d30c      	bcc.n	8008f60 <__copybits+0x36>
 8008f46:	1aa3      	subs	r3, r4, r2
 8008f48:	3b11      	subs	r3, #17
 8008f4a:	f023 0303 	bic.w	r3, r3, #3
 8008f4e:	3211      	adds	r2, #17
 8008f50:	42a2      	cmp	r2, r4
 8008f52:	bf88      	it	hi
 8008f54:	2300      	movhi	r3, #0
 8008f56:	4418      	add	r0, r3
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4288      	cmp	r0, r1
 8008f5c:	d305      	bcc.n	8008f6a <__copybits+0x40>
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f64:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f68:	e7eb      	b.n	8008f42 <__copybits+0x18>
 8008f6a:	f840 3b04 	str.w	r3, [r0], #4
 8008f6e:	e7f4      	b.n	8008f5a <__copybits+0x30>

08008f70 <__any_on>:
 8008f70:	f100 0214 	add.w	r2, r0, #20
 8008f74:	6900      	ldr	r0, [r0, #16]
 8008f76:	114b      	asrs	r3, r1, #5
 8008f78:	4298      	cmp	r0, r3
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	db11      	blt.n	8008fa2 <__any_on+0x32>
 8008f7e:	dd0a      	ble.n	8008f96 <__any_on+0x26>
 8008f80:	f011 011f 	ands.w	r1, r1, #31
 8008f84:	d007      	beq.n	8008f96 <__any_on+0x26>
 8008f86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f8a:	fa24 f001 	lsr.w	r0, r4, r1
 8008f8e:	fa00 f101 	lsl.w	r1, r0, r1
 8008f92:	428c      	cmp	r4, r1
 8008f94:	d10b      	bne.n	8008fae <__any_on+0x3e>
 8008f96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d803      	bhi.n	8008fa6 <__any_on+0x36>
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	bd10      	pop	{r4, pc}
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	e7f7      	b.n	8008f96 <__any_on+0x26>
 8008fa6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008faa:	2900      	cmp	r1, #0
 8008fac:	d0f5      	beq.n	8008f9a <__any_on+0x2a>
 8008fae:	2001      	movs	r0, #1
 8008fb0:	e7f6      	b.n	8008fa0 <__any_on+0x30>

08008fb2 <_calloc_r>:
 8008fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fb4:	fba1 2402 	umull	r2, r4, r1, r2
 8008fb8:	b94c      	cbnz	r4, 8008fce <_calloc_r+0x1c>
 8008fba:	4611      	mov	r1, r2
 8008fbc:	9201      	str	r2, [sp, #4]
 8008fbe:	f000 f87b 	bl	80090b8 <_malloc_r>
 8008fc2:	9a01      	ldr	r2, [sp, #4]
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	b930      	cbnz	r0, 8008fd6 <_calloc_r+0x24>
 8008fc8:	4628      	mov	r0, r5
 8008fca:	b003      	add	sp, #12
 8008fcc:	bd30      	pop	{r4, r5, pc}
 8008fce:	220c      	movs	r2, #12
 8008fd0:	6002      	str	r2, [r0, #0]
 8008fd2:	2500      	movs	r5, #0
 8008fd4:	e7f8      	b.n	8008fc8 <_calloc_r+0x16>
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	f7fc fb18 	bl	800560c <memset>
 8008fdc:	e7f4      	b.n	8008fc8 <_calloc_r+0x16>
	...

08008fe0 <_free_r>:
 8008fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fe2:	2900      	cmp	r1, #0
 8008fe4:	d044      	beq.n	8009070 <_free_r+0x90>
 8008fe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fea:	9001      	str	r0, [sp, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f1a1 0404 	sub.w	r4, r1, #4
 8008ff2:	bfb8      	it	lt
 8008ff4:	18e4      	addlt	r4, r4, r3
 8008ff6:	f001 f88b 	bl	800a110 <__malloc_lock>
 8008ffa:	4a1e      	ldr	r2, [pc, #120]	; (8009074 <_free_r+0x94>)
 8008ffc:	9801      	ldr	r0, [sp, #4]
 8008ffe:	6813      	ldr	r3, [r2, #0]
 8009000:	b933      	cbnz	r3, 8009010 <_free_r+0x30>
 8009002:	6063      	str	r3, [r4, #4]
 8009004:	6014      	str	r4, [r2, #0]
 8009006:	b003      	add	sp, #12
 8009008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800900c:	f001 b886 	b.w	800a11c <__malloc_unlock>
 8009010:	42a3      	cmp	r3, r4
 8009012:	d908      	bls.n	8009026 <_free_r+0x46>
 8009014:	6825      	ldr	r5, [r4, #0]
 8009016:	1961      	adds	r1, r4, r5
 8009018:	428b      	cmp	r3, r1
 800901a:	bf01      	itttt	eq
 800901c:	6819      	ldreq	r1, [r3, #0]
 800901e:	685b      	ldreq	r3, [r3, #4]
 8009020:	1949      	addeq	r1, r1, r5
 8009022:	6021      	streq	r1, [r4, #0]
 8009024:	e7ed      	b.n	8009002 <_free_r+0x22>
 8009026:	461a      	mov	r2, r3
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	b10b      	cbz	r3, 8009030 <_free_r+0x50>
 800902c:	42a3      	cmp	r3, r4
 800902e:	d9fa      	bls.n	8009026 <_free_r+0x46>
 8009030:	6811      	ldr	r1, [r2, #0]
 8009032:	1855      	adds	r5, r2, r1
 8009034:	42a5      	cmp	r5, r4
 8009036:	d10b      	bne.n	8009050 <_free_r+0x70>
 8009038:	6824      	ldr	r4, [r4, #0]
 800903a:	4421      	add	r1, r4
 800903c:	1854      	adds	r4, r2, r1
 800903e:	42a3      	cmp	r3, r4
 8009040:	6011      	str	r1, [r2, #0]
 8009042:	d1e0      	bne.n	8009006 <_free_r+0x26>
 8009044:	681c      	ldr	r4, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	6053      	str	r3, [r2, #4]
 800904a:	4421      	add	r1, r4
 800904c:	6011      	str	r1, [r2, #0]
 800904e:	e7da      	b.n	8009006 <_free_r+0x26>
 8009050:	d902      	bls.n	8009058 <_free_r+0x78>
 8009052:	230c      	movs	r3, #12
 8009054:	6003      	str	r3, [r0, #0]
 8009056:	e7d6      	b.n	8009006 <_free_r+0x26>
 8009058:	6825      	ldr	r5, [r4, #0]
 800905a:	1961      	adds	r1, r4, r5
 800905c:	428b      	cmp	r3, r1
 800905e:	bf04      	itt	eq
 8009060:	6819      	ldreq	r1, [r3, #0]
 8009062:	685b      	ldreq	r3, [r3, #4]
 8009064:	6063      	str	r3, [r4, #4]
 8009066:	bf04      	itt	eq
 8009068:	1949      	addeq	r1, r1, r5
 800906a:	6021      	streq	r1, [r4, #0]
 800906c:	6054      	str	r4, [r2, #4]
 800906e:	e7ca      	b.n	8009006 <_free_r+0x26>
 8009070:	b003      	add	sp, #12
 8009072:	bd30      	pop	{r4, r5, pc}
 8009074:	20000334 	.word	0x20000334

08009078 <sbrk_aligned>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	4e0e      	ldr	r6, [pc, #56]	; (80090b4 <sbrk_aligned+0x3c>)
 800907c:	460c      	mov	r4, r1
 800907e:	6831      	ldr	r1, [r6, #0]
 8009080:	4605      	mov	r5, r0
 8009082:	b911      	cbnz	r1, 800908a <sbrk_aligned+0x12>
 8009084:	f000 fd28 	bl	8009ad8 <_sbrk_r>
 8009088:	6030      	str	r0, [r6, #0]
 800908a:	4621      	mov	r1, r4
 800908c:	4628      	mov	r0, r5
 800908e:	f000 fd23 	bl	8009ad8 <_sbrk_r>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	d00a      	beq.n	80090ac <sbrk_aligned+0x34>
 8009096:	1cc4      	adds	r4, r0, #3
 8009098:	f024 0403 	bic.w	r4, r4, #3
 800909c:	42a0      	cmp	r0, r4
 800909e:	d007      	beq.n	80090b0 <sbrk_aligned+0x38>
 80090a0:	1a21      	subs	r1, r4, r0
 80090a2:	4628      	mov	r0, r5
 80090a4:	f000 fd18 	bl	8009ad8 <_sbrk_r>
 80090a8:	3001      	adds	r0, #1
 80090aa:	d101      	bne.n	80090b0 <sbrk_aligned+0x38>
 80090ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80090b0:	4620      	mov	r0, r4
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	20000338 	.word	0x20000338

080090b8 <_malloc_r>:
 80090b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090bc:	1ccd      	adds	r5, r1, #3
 80090be:	f025 0503 	bic.w	r5, r5, #3
 80090c2:	3508      	adds	r5, #8
 80090c4:	2d0c      	cmp	r5, #12
 80090c6:	bf38      	it	cc
 80090c8:	250c      	movcc	r5, #12
 80090ca:	2d00      	cmp	r5, #0
 80090cc:	4607      	mov	r7, r0
 80090ce:	db01      	blt.n	80090d4 <_malloc_r+0x1c>
 80090d0:	42a9      	cmp	r1, r5
 80090d2:	d905      	bls.n	80090e0 <_malloc_r+0x28>
 80090d4:	230c      	movs	r3, #12
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	2600      	movs	r6, #0
 80090da:	4630      	mov	r0, r6
 80090dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e0:	4e2e      	ldr	r6, [pc, #184]	; (800919c <_malloc_r+0xe4>)
 80090e2:	f001 f815 	bl	800a110 <__malloc_lock>
 80090e6:	6833      	ldr	r3, [r6, #0]
 80090e8:	461c      	mov	r4, r3
 80090ea:	bb34      	cbnz	r4, 800913a <_malloc_r+0x82>
 80090ec:	4629      	mov	r1, r5
 80090ee:	4638      	mov	r0, r7
 80090f0:	f7ff ffc2 	bl	8009078 <sbrk_aligned>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	4604      	mov	r4, r0
 80090f8:	d14d      	bne.n	8009196 <_malloc_r+0xde>
 80090fa:	6834      	ldr	r4, [r6, #0]
 80090fc:	4626      	mov	r6, r4
 80090fe:	2e00      	cmp	r6, #0
 8009100:	d140      	bne.n	8009184 <_malloc_r+0xcc>
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	4631      	mov	r1, r6
 8009106:	4638      	mov	r0, r7
 8009108:	eb04 0803 	add.w	r8, r4, r3
 800910c:	f000 fce4 	bl	8009ad8 <_sbrk_r>
 8009110:	4580      	cmp	r8, r0
 8009112:	d13a      	bne.n	800918a <_malloc_r+0xd2>
 8009114:	6821      	ldr	r1, [r4, #0]
 8009116:	3503      	adds	r5, #3
 8009118:	1a6d      	subs	r5, r5, r1
 800911a:	f025 0503 	bic.w	r5, r5, #3
 800911e:	3508      	adds	r5, #8
 8009120:	2d0c      	cmp	r5, #12
 8009122:	bf38      	it	cc
 8009124:	250c      	movcc	r5, #12
 8009126:	4629      	mov	r1, r5
 8009128:	4638      	mov	r0, r7
 800912a:	f7ff ffa5 	bl	8009078 <sbrk_aligned>
 800912e:	3001      	adds	r0, #1
 8009130:	d02b      	beq.n	800918a <_malloc_r+0xd2>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	442b      	add	r3, r5
 8009136:	6023      	str	r3, [r4, #0]
 8009138:	e00e      	b.n	8009158 <_malloc_r+0xa0>
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	1b52      	subs	r2, r2, r5
 800913e:	d41e      	bmi.n	800917e <_malloc_r+0xc6>
 8009140:	2a0b      	cmp	r2, #11
 8009142:	d916      	bls.n	8009172 <_malloc_r+0xba>
 8009144:	1961      	adds	r1, r4, r5
 8009146:	42a3      	cmp	r3, r4
 8009148:	6025      	str	r5, [r4, #0]
 800914a:	bf18      	it	ne
 800914c:	6059      	strne	r1, [r3, #4]
 800914e:	6863      	ldr	r3, [r4, #4]
 8009150:	bf08      	it	eq
 8009152:	6031      	streq	r1, [r6, #0]
 8009154:	5162      	str	r2, [r4, r5]
 8009156:	604b      	str	r3, [r1, #4]
 8009158:	4638      	mov	r0, r7
 800915a:	f104 060b 	add.w	r6, r4, #11
 800915e:	f000 ffdd 	bl	800a11c <__malloc_unlock>
 8009162:	f026 0607 	bic.w	r6, r6, #7
 8009166:	1d23      	adds	r3, r4, #4
 8009168:	1af2      	subs	r2, r6, r3
 800916a:	d0b6      	beq.n	80090da <_malloc_r+0x22>
 800916c:	1b9b      	subs	r3, r3, r6
 800916e:	50a3      	str	r3, [r4, r2]
 8009170:	e7b3      	b.n	80090da <_malloc_r+0x22>
 8009172:	6862      	ldr	r2, [r4, #4]
 8009174:	42a3      	cmp	r3, r4
 8009176:	bf0c      	ite	eq
 8009178:	6032      	streq	r2, [r6, #0]
 800917a:	605a      	strne	r2, [r3, #4]
 800917c:	e7ec      	b.n	8009158 <_malloc_r+0xa0>
 800917e:	4623      	mov	r3, r4
 8009180:	6864      	ldr	r4, [r4, #4]
 8009182:	e7b2      	b.n	80090ea <_malloc_r+0x32>
 8009184:	4634      	mov	r4, r6
 8009186:	6876      	ldr	r6, [r6, #4]
 8009188:	e7b9      	b.n	80090fe <_malloc_r+0x46>
 800918a:	230c      	movs	r3, #12
 800918c:	603b      	str	r3, [r7, #0]
 800918e:	4638      	mov	r0, r7
 8009190:	f000 ffc4 	bl	800a11c <__malloc_unlock>
 8009194:	e7a1      	b.n	80090da <_malloc_r+0x22>
 8009196:	6025      	str	r5, [r4, #0]
 8009198:	e7de      	b.n	8009158 <_malloc_r+0xa0>
 800919a:	bf00      	nop
 800919c:	20000334 	.word	0x20000334

080091a0 <__ssputs_r>:
 80091a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a4:	688e      	ldr	r6, [r1, #8]
 80091a6:	429e      	cmp	r6, r3
 80091a8:	4682      	mov	sl, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	4690      	mov	r8, r2
 80091ae:	461f      	mov	r7, r3
 80091b0:	d838      	bhi.n	8009224 <__ssputs_r+0x84>
 80091b2:	898a      	ldrh	r2, [r1, #12]
 80091b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091b8:	d032      	beq.n	8009220 <__ssputs_r+0x80>
 80091ba:	6825      	ldr	r5, [r4, #0]
 80091bc:	6909      	ldr	r1, [r1, #16]
 80091be:	eba5 0901 	sub.w	r9, r5, r1
 80091c2:	6965      	ldr	r5, [r4, #20]
 80091c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091cc:	3301      	adds	r3, #1
 80091ce:	444b      	add	r3, r9
 80091d0:	106d      	asrs	r5, r5, #1
 80091d2:	429d      	cmp	r5, r3
 80091d4:	bf38      	it	cc
 80091d6:	461d      	movcc	r5, r3
 80091d8:	0553      	lsls	r3, r2, #21
 80091da:	d531      	bpl.n	8009240 <__ssputs_r+0xa0>
 80091dc:	4629      	mov	r1, r5
 80091de:	f7ff ff6b 	bl	80090b8 <_malloc_r>
 80091e2:	4606      	mov	r6, r0
 80091e4:	b950      	cbnz	r0, 80091fc <__ssputs_r+0x5c>
 80091e6:	230c      	movs	r3, #12
 80091e8:	f8ca 3000 	str.w	r3, [sl]
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f2:	81a3      	strh	r3, [r4, #12]
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fc:	6921      	ldr	r1, [r4, #16]
 80091fe:	464a      	mov	r2, r9
 8009200:	f7ff fa08 	bl	8008614 <memcpy>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800920a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920e:	81a3      	strh	r3, [r4, #12]
 8009210:	6126      	str	r6, [r4, #16]
 8009212:	6165      	str	r5, [r4, #20]
 8009214:	444e      	add	r6, r9
 8009216:	eba5 0509 	sub.w	r5, r5, r9
 800921a:	6026      	str	r6, [r4, #0]
 800921c:	60a5      	str	r5, [r4, #8]
 800921e:	463e      	mov	r6, r7
 8009220:	42be      	cmp	r6, r7
 8009222:	d900      	bls.n	8009226 <__ssputs_r+0x86>
 8009224:	463e      	mov	r6, r7
 8009226:	6820      	ldr	r0, [r4, #0]
 8009228:	4632      	mov	r2, r6
 800922a:	4641      	mov	r1, r8
 800922c:	f000 ff56 	bl	800a0dc <memmove>
 8009230:	68a3      	ldr	r3, [r4, #8]
 8009232:	1b9b      	subs	r3, r3, r6
 8009234:	60a3      	str	r3, [r4, #8]
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	4433      	add	r3, r6
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	2000      	movs	r0, #0
 800923e:	e7db      	b.n	80091f8 <__ssputs_r+0x58>
 8009240:	462a      	mov	r2, r5
 8009242:	f000 ff71 	bl	800a128 <_realloc_r>
 8009246:	4606      	mov	r6, r0
 8009248:	2800      	cmp	r0, #0
 800924a:	d1e1      	bne.n	8009210 <__ssputs_r+0x70>
 800924c:	6921      	ldr	r1, [r4, #16]
 800924e:	4650      	mov	r0, sl
 8009250:	f7ff fec6 	bl	8008fe0 <_free_r>
 8009254:	e7c7      	b.n	80091e6 <__ssputs_r+0x46>
	...

08009258 <_svfiprintf_r>:
 8009258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	4698      	mov	r8, r3
 800925e:	898b      	ldrh	r3, [r1, #12]
 8009260:	061b      	lsls	r3, r3, #24
 8009262:	b09d      	sub	sp, #116	; 0x74
 8009264:	4607      	mov	r7, r0
 8009266:	460d      	mov	r5, r1
 8009268:	4614      	mov	r4, r2
 800926a:	d50e      	bpl.n	800928a <_svfiprintf_r+0x32>
 800926c:	690b      	ldr	r3, [r1, #16]
 800926e:	b963      	cbnz	r3, 800928a <_svfiprintf_r+0x32>
 8009270:	2140      	movs	r1, #64	; 0x40
 8009272:	f7ff ff21 	bl	80090b8 <_malloc_r>
 8009276:	6028      	str	r0, [r5, #0]
 8009278:	6128      	str	r0, [r5, #16]
 800927a:	b920      	cbnz	r0, 8009286 <_svfiprintf_r+0x2e>
 800927c:	230c      	movs	r3, #12
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009284:	e0d1      	b.n	800942a <_svfiprintf_r+0x1d2>
 8009286:	2340      	movs	r3, #64	; 0x40
 8009288:	616b      	str	r3, [r5, #20]
 800928a:	2300      	movs	r3, #0
 800928c:	9309      	str	r3, [sp, #36]	; 0x24
 800928e:	2320      	movs	r3, #32
 8009290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009294:	f8cd 800c 	str.w	r8, [sp, #12]
 8009298:	2330      	movs	r3, #48	; 0x30
 800929a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009444 <_svfiprintf_r+0x1ec>
 800929e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092a2:	f04f 0901 	mov.w	r9, #1
 80092a6:	4623      	mov	r3, r4
 80092a8:	469a      	mov	sl, r3
 80092aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ae:	b10a      	cbz	r2, 80092b4 <_svfiprintf_r+0x5c>
 80092b0:	2a25      	cmp	r2, #37	; 0x25
 80092b2:	d1f9      	bne.n	80092a8 <_svfiprintf_r+0x50>
 80092b4:	ebba 0b04 	subs.w	fp, sl, r4
 80092b8:	d00b      	beq.n	80092d2 <_svfiprintf_r+0x7a>
 80092ba:	465b      	mov	r3, fp
 80092bc:	4622      	mov	r2, r4
 80092be:	4629      	mov	r1, r5
 80092c0:	4638      	mov	r0, r7
 80092c2:	f7ff ff6d 	bl	80091a0 <__ssputs_r>
 80092c6:	3001      	adds	r0, #1
 80092c8:	f000 80aa 	beq.w	8009420 <_svfiprintf_r+0x1c8>
 80092cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ce:	445a      	add	r2, fp
 80092d0:	9209      	str	r2, [sp, #36]	; 0x24
 80092d2:	f89a 3000 	ldrb.w	r3, [sl]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 80a2 	beq.w	8009420 <_svfiprintf_r+0x1c8>
 80092dc:	2300      	movs	r3, #0
 80092de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e6:	f10a 0a01 	add.w	sl, sl, #1
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	9307      	str	r3, [sp, #28]
 80092ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092f2:	931a      	str	r3, [sp, #104]	; 0x68
 80092f4:	4654      	mov	r4, sl
 80092f6:	2205      	movs	r2, #5
 80092f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fc:	4851      	ldr	r0, [pc, #324]	; (8009444 <_svfiprintf_r+0x1ec>)
 80092fe:	f7f6 ff7f 	bl	8000200 <memchr>
 8009302:	9a04      	ldr	r2, [sp, #16]
 8009304:	b9d8      	cbnz	r0, 800933e <_svfiprintf_r+0xe6>
 8009306:	06d0      	lsls	r0, r2, #27
 8009308:	bf44      	itt	mi
 800930a:	2320      	movmi	r3, #32
 800930c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009310:	0711      	lsls	r1, r2, #28
 8009312:	bf44      	itt	mi
 8009314:	232b      	movmi	r3, #43	; 0x2b
 8009316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800931a:	f89a 3000 	ldrb.w	r3, [sl]
 800931e:	2b2a      	cmp	r3, #42	; 0x2a
 8009320:	d015      	beq.n	800934e <_svfiprintf_r+0xf6>
 8009322:	9a07      	ldr	r2, [sp, #28]
 8009324:	4654      	mov	r4, sl
 8009326:	2000      	movs	r0, #0
 8009328:	f04f 0c0a 	mov.w	ip, #10
 800932c:	4621      	mov	r1, r4
 800932e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009332:	3b30      	subs	r3, #48	; 0x30
 8009334:	2b09      	cmp	r3, #9
 8009336:	d94e      	bls.n	80093d6 <_svfiprintf_r+0x17e>
 8009338:	b1b0      	cbz	r0, 8009368 <_svfiprintf_r+0x110>
 800933a:	9207      	str	r2, [sp, #28]
 800933c:	e014      	b.n	8009368 <_svfiprintf_r+0x110>
 800933e:	eba0 0308 	sub.w	r3, r0, r8
 8009342:	fa09 f303 	lsl.w	r3, r9, r3
 8009346:	4313      	orrs	r3, r2
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	46a2      	mov	sl, r4
 800934c:	e7d2      	b.n	80092f4 <_svfiprintf_r+0x9c>
 800934e:	9b03      	ldr	r3, [sp, #12]
 8009350:	1d19      	adds	r1, r3, #4
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	9103      	str	r1, [sp, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	bfbb      	ittet	lt
 800935a:	425b      	neglt	r3, r3
 800935c:	f042 0202 	orrlt.w	r2, r2, #2
 8009360:	9307      	strge	r3, [sp, #28]
 8009362:	9307      	strlt	r3, [sp, #28]
 8009364:	bfb8      	it	lt
 8009366:	9204      	strlt	r2, [sp, #16]
 8009368:	7823      	ldrb	r3, [r4, #0]
 800936a:	2b2e      	cmp	r3, #46	; 0x2e
 800936c:	d10c      	bne.n	8009388 <_svfiprintf_r+0x130>
 800936e:	7863      	ldrb	r3, [r4, #1]
 8009370:	2b2a      	cmp	r3, #42	; 0x2a
 8009372:	d135      	bne.n	80093e0 <_svfiprintf_r+0x188>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	1d1a      	adds	r2, r3, #4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	9203      	str	r2, [sp, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	bfb8      	it	lt
 8009380:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009384:	3402      	adds	r4, #2
 8009386:	9305      	str	r3, [sp, #20]
 8009388:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009454 <_svfiprintf_r+0x1fc>
 800938c:	7821      	ldrb	r1, [r4, #0]
 800938e:	2203      	movs	r2, #3
 8009390:	4650      	mov	r0, sl
 8009392:	f7f6 ff35 	bl	8000200 <memchr>
 8009396:	b140      	cbz	r0, 80093aa <_svfiprintf_r+0x152>
 8009398:	2340      	movs	r3, #64	; 0x40
 800939a:	eba0 000a 	sub.w	r0, r0, sl
 800939e:	fa03 f000 	lsl.w	r0, r3, r0
 80093a2:	9b04      	ldr	r3, [sp, #16]
 80093a4:	4303      	orrs	r3, r0
 80093a6:	3401      	adds	r4, #1
 80093a8:	9304      	str	r3, [sp, #16]
 80093aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ae:	4826      	ldr	r0, [pc, #152]	; (8009448 <_svfiprintf_r+0x1f0>)
 80093b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093b4:	2206      	movs	r2, #6
 80093b6:	f7f6 ff23 	bl	8000200 <memchr>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d038      	beq.n	8009430 <_svfiprintf_r+0x1d8>
 80093be:	4b23      	ldr	r3, [pc, #140]	; (800944c <_svfiprintf_r+0x1f4>)
 80093c0:	bb1b      	cbnz	r3, 800940a <_svfiprintf_r+0x1b2>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	3307      	adds	r3, #7
 80093c6:	f023 0307 	bic.w	r3, r3, #7
 80093ca:	3308      	adds	r3, #8
 80093cc:	9303      	str	r3, [sp, #12]
 80093ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d0:	4433      	add	r3, r6
 80093d2:	9309      	str	r3, [sp, #36]	; 0x24
 80093d4:	e767      	b.n	80092a6 <_svfiprintf_r+0x4e>
 80093d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093da:	460c      	mov	r4, r1
 80093dc:	2001      	movs	r0, #1
 80093de:	e7a5      	b.n	800932c <_svfiprintf_r+0xd4>
 80093e0:	2300      	movs	r3, #0
 80093e2:	3401      	adds	r4, #1
 80093e4:	9305      	str	r3, [sp, #20]
 80093e6:	4619      	mov	r1, r3
 80093e8:	f04f 0c0a 	mov.w	ip, #10
 80093ec:	4620      	mov	r0, r4
 80093ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f2:	3a30      	subs	r2, #48	; 0x30
 80093f4:	2a09      	cmp	r2, #9
 80093f6:	d903      	bls.n	8009400 <_svfiprintf_r+0x1a8>
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0c5      	beq.n	8009388 <_svfiprintf_r+0x130>
 80093fc:	9105      	str	r1, [sp, #20]
 80093fe:	e7c3      	b.n	8009388 <_svfiprintf_r+0x130>
 8009400:	fb0c 2101 	mla	r1, ip, r1, r2
 8009404:	4604      	mov	r4, r0
 8009406:	2301      	movs	r3, #1
 8009408:	e7f0      	b.n	80093ec <_svfiprintf_r+0x194>
 800940a:	ab03      	add	r3, sp, #12
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	462a      	mov	r2, r5
 8009410:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <_svfiprintf_r+0x1f8>)
 8009412:	a904      	add	r1, sp, #16
 8009414:	4638      	mov	r0, r7
 8009416:	f7fc f9a1 	bl	800575c <_printf_float>
 800941a:	1c42      	adds	r2, r0, #1
 800941c:	4606      	mov	r6, r0
 800941e:	d1d6      	bne.n	80093ce <_svfiprintf_r+0x176>
 8009420:	89ab      	ldrh	r3, [r5, #12]
 8009422:	065b      	lsls	r3, r3, #25
 8009424:	f53f af2c 	bmi.w	8009280 <_svfiprintf_r+0x28>
 8009428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800942a:	b01d      	add	sp, #116	; 0x74
 800942c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009430:	ab03      	add	r3, sp, #12
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	462a      	mov	r2, r5
 8009436:	4b06      	ldr	r3, [pc, #24]	; (8009450 <_svfiprintf_r+0x1f8>)
 8009438:	a904      	add	r1, sp, #16
 800943a:	4638      	mov	r0, r7
 800943c:	f7fc fc32 	bl	8005ca4 <_printf_i>
 8009440:	e7eb      	b.n	800941a <_svfiprintf_r+0x1c2>
 8009442:	bf00      	nop
 8009444:	0800ac44 	.word	0x0800ac44
 8009448:	0800ac4e 	.word	0x0800ac4e
 800944c:	0800575d 	.word	0x0800575d
 8009450:	080091a1 	.word	0x080091a1
 8009454:	0800ac4a 	.word	0x0800ac4a

08009458 <_sungetc_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	1c4b      	adds	r3, r1, #1
 800945c:	4614      	mov	r4, r2
 800945e:	d103      	bne.n	8009468 <_sungetc_r+0x10>
 8009460:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009464:	4628      	mov	r0, r5
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	8993      	ldrh	r3, [r2, #12]
 800946a:	f023 0320 	bic.w	r3, r3, #32
 800946e:	8193      	strh	r3, [r2, #12]
 8009470:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009472:	6852      	ldr	r2, [r2, #4]
 8009474:	b2cd      	uxtb	r5, r1
 8009476:	b18b      	cbz	r3, 800949c <_sungetc_r+0x44>
 8009478:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800947a:	4293      	cmp	r3, r2
 800947c:	dd08      	ble.n	8009490 <_sungetc_r+0x38>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	1e5a      	subs	r2, r3, #1
 8009482:	6022      	str	r2, [r4, #0]
 8009484:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	3301      	adds	r3, #1
 800948c:	6063      	str	r3, [r4, #4]
 800948e:	e7e9      	b.n	8009464 <_sungetc_r+0xc>
 8009490:	4621      	mov	r1, r4
 8009492:	f000 fbf1 	bl	8009c78 <__submore>
 8009496:	2800      	cmp	r0, #0
 8009498:	d0f1      	beq.n	800947e <_sungetc_r+0x26>
 800949a:	e7e1      	b.n	8009460 <_sungetc_r+0x8>
 800949c:	6921      	ldr	r1, [r4, #16]
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	b151      	cbz	r1, 80094b8 <_sungetc_r+0x60>
 80094a2:	4299      	cmp	r1, r3
 80094a4:	d208      	bcs.n	80094b8 <_sungetc_r+0x60>
 80094a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80094aa:	42a9      	cmp	r1, r5
 80094ac:	d104      	bne.n	80094b8 <_sungetc_r+0x60>
 80094ae:	3b01      	subs	r3, #1
 80094b0:	3201      	adds	r2, #1
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	6062      	str	r2, [r4, #4]
 80094b6:	e7d5      	b.n	8009464 <_sungetc_r+0xc>
 80094b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80094bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094c0:	6363      	str	r3, [r4, #52]	; 0x34
 80094c2:	2303      	movs	r3, #3
 80094c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80094c6:	4623      	mov	r3, r4
 80094c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	2301      	movs	r3, #1
 80094d0:	e7dc      	b.n	800948c <_sungetc_r+0x34>

080094d2 <__ssrefill_r>:
 80094d2:	b510      	push	{r4, lr}
 80094d4:	460c      	mov	r4, r1
 80094d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80094d8:	b169      	cbz	r1, 80094f6 <__ssrefill_r+0x24>
 80094da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094de:	4299      	cmp	r1, r3
 80094e0:	d001      	beq.n	80094e6 <__ssrefill_r+0x14>
 80094e2:	f7ff fd7d 	bl	8008fe0 <_free_r>
 80094e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094e8:	6063      	str	r3, [r4, #4]
 80094ea:	2000      	movs	r0, #0
 80094ec:	6360      	str	r0, [r4, #52]	; 0x34
 80094ee:	b113      	cbz	r3, 80094f6 <__ssrefill_r+0x24>
 80094f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	6023      	str	r3, [r4, #0]
 80094fa:	2300      	movs	r3, #0
 80094fc:	6063      	str	r3, [r4, #4]
 80094fe:	89a3      	ldrh	r3, [r4, #12]
 8009500:	f043 0320 	orr.w	r3, r3, #32
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800950a:	e7f3      	b.n	80094f4 <__ssrefill_r+0x22>

0800950c <__ssvfiscanf_r>:
 800950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	460c      	mov	r4, r1
 8009512:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009516:	2100      	movs	r1, #0
 8009518:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800951c:	49a6      	ldr	r1, [pc, #664]	; (80097b8 <__ssvfiscanf_r+0x2ac>)
 800951e:	91a0      	str	r1, [sp, #640]	; 0x280
 8009520:	f10d 0804 	add.w	r8, sp, #4
 8009524:	49a5      	ldr	r1, [pc, #660]	; (80097bc <__ssvfiscanf_r+0x2b0>)
 8009526:	4fa6      	ldr	r7, [pc, #664]	; (80097c0 <__ssvfiscanf_r+0x2b4>)
 8009528:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80097c4 <__ssvfiscanf_r+0x2b8>
 800952c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009530:	4606      	mov	r6, r0
 8009532:	91a1      	str	r1, [sp, #644]	; 0x284
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	7813      	ldrb	r3, [r2, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 815a 	beq.w	80097f2 <__ssvfiscanf_r+0x2e6>
 800953e:	5dd9      	ldrb	r1, [r3, r7]
 8009540:	f011 0108 	ands.w	r1, r1, #8
 8009544:	f102 0501 	add.w	r5, r2, #1
 8009548:	d019      	beq.n	800957e <__ssvfiscanf_r+0x72>
 800954a:	6863      	ldr	r3, [r4, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dd0f      	ble.n	8009570 <__ssvfiscanf_r+0x64>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	5cba      	ldrb	r2, [r7, r2]
 8009556:	0712      	lsls	r2, r2, #28
 8009558:	d401      	bmi.n	800955e <__ssvfiscanf_r+0x52>
 800955a:	462a      	mov	r2, r5
 800955c:	e7eb      	b.n	8009536 <__ssvfiscanf_r+0x2a>
 800955e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009560:	3201      	adds	r2, #1
 8009562:	9245      	str	r2, [sp, #276]	; 0x114
 8009564:	6862      	ldr	r2, [r4, #4]
 8009566:	3301      	adds	r3, #1
 8009568:	3a01      	subs	r2, #1
 800956a:	6062      	str	r2, [r4, #4]
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	e7ec      	b.n	800954a <__ssvfiscanf_r+0x3e>
 8009570:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009572:	4621      	mov	r1, r4
 8009574:	4630      	mov	r0, r6
 8009576:	4798      	blx	r3
 8009578:	2800      	cmp	r0, #0
 800957a:	d0e9      	beq.n	8009550 <__ssvfiscanf_r+0x44>
 800957c:	e7ed      	b.n	800955a <__ssvfiscanf_r+0x4e>
 800957e:	2b25      	cmp	r3, #37	; 0x25
 8009580:	d012      	beq.n	80095a8 <__ssvfiscanf_r+0x9c>
 8009582:	469a      	mov	sl, r3
 8009584:	6863      	ldr	r3, [r4, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f340 8091 	ble.w	80096ae <__ssvfiscanf_r+0x1a2>
 800958c:	6822      	ldr	r2, [r4, #0]
 800958e:	7813      	ldrb	r3, [r2, #0]
 8009590:	4553      	cmp	r3, sl
 8009592:	f040 812e 	bne.w	80097f2 <__ssvfiscanf_r+0x2e6>
 8009596:	6863      	ldr	r3, [r4, #4]
 8009598:	3b01      	subs	r3, #1
 800959a:	6063      	str	r3, [r4, #4]
 800959c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800959e:	3201      	adds	r2, #1
 80095a0:	3301      	adds	r3, #1
 80095a2:	6022      	str	r2, [r4, #0]
 80095a4:	9345      	str	r3, [sp, #276]	; 0x114
 80095a6:	e7d8      	b.n	800955a <__ssvfiscanf_r+0x4e>
 80095a8:	9141      	str	r1, [sp, #260]	; 0x104
 80095aa:	9143      	str	r1, [sp, #268]	; 0x10c
 80095ac:	7853      	ldrb	r3, [r2, #1]
 80095ae:	2b2a      	cmp	r3, #42	; 0x2a
 80095b0:	bf02      	ittt	eq
 80095b2:	2310      	moveq	r3, #16
 80095b4:	1c95      	addeq	r5, r2, #2
 80095b6:	9341      	streq	r3, [sp, #260]	; 0x104
 80095b8:	220a      	movs	r2, #10
 80095ba:	46aa      	mov	sl, r5
 80095bc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80095c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80095c4:	2b09      	cmp	r3, #9
 80095c6:	d91d      	bls.n	8009604 <__ssvfiscanf_r+0xf8>
 80095c8:	487e      	ldr	r0, [pc, #504]	; (80097c4 <__ssvfiscanf_r+0x2b8>)
 80095ca:	2203      	movs	r2, #3
 80095cc:	f7f6 fe18 	bl	8000200 <memchr>
 80095d0:	b140      	cbz	r0, 80095e4 <__ssvfiscanf_r+0xd8>
 80095d2:	2301      	movs	r3, #1
 80095d4:	eba0 0009 	sub.w	r0, r0, r9
 80095d8:	fa03 f000 	lsl.w	r0, r3, r0
 80095dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80095de:	4318      	orrs	r0, r3
 80095e0:	9041      	str	r0, [sp, #260]	; 0x104
 80095e2:	4655      	mov	r5, sl
 80095e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095e8:	2b78      	cmp	r3, #120	; 0x78
 80095ea:	d806      	bhi.n	80095fa <__ssvfiscanf_r+0xee>
 80095ec:	2b57      	cmp	r3, #87	; 0x57
 80095ee:	d810      	bhi.n	8009612 <__ssvfiscanf_r+0x106>
 80095f0:	2b25      	cmp	r3, #37	; 0x25
 80095f2:	d0c6      	beq.n	8009582 <__ssvfiscanf_r+0x76>
 80095f4:	d856      	bhi.n	80096a4 <__ssvfiscanf_r+0x198>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d064      	beq.n	80096c4 <__ssvfiscanf_r+0x1b8>
 80095fa:	2303      	movs	r3, #3
 80095fc:	9347      	str	r3, [sp, #284]	; 0x11c
 80095fe:	230a      	movs	r3, #10
 8009600:	9342      	str	r3, [sp, #264]	; 0x108
 8009602:	e071      	b.n	80096e8 <__ssvfiscanf_r+0x1dc>
 8009604:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009606:	fb02 1103 	mla	r1, r2, r3, r1
 800960a:	3930      	subs	r1, #48	; 0x30
 800960c:	9143      	str	r1, [sp, #268]	; 0x10c
 800960e:	4655      	mov	r5, sl
 8009610:	e7d3      	b.n	80095ba <__ssvfiscanf_r+0xae>
 8009612:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009616:	2a20      	cmp	r2, #32
 8009618:	d8ef      	bhi.n	80095fa <__ssvfiscanf_r+0xee>
 800961a:	a101      	add	r1, pc, #4	; (adr r1, 8009620 <__ssvfiscanf_r+0x114>)
 800961c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009620:	080096d3 	.word	0x080096d3
 8009624:	080095fb 	.word	0x080095fb
 8009628:	080095fb 	.word	0x080095fb
 800962c:	08009731 	.word	0x08009731
 8009630:	080095fb 	.word	0x080095fb
 8009634:	080095fb 	.word	0x080095fb
 8009638:	080095fb 	.word	0x080095fb
 800963c:	080095fb 	.word	0x080095fb
 8009640:	080095fb 	.word	0x080095fb
 8009644:	080095fb 	.word	0x080095fb
 8009648:	080095fb 	.word	0x080095fb
 800964c:	08009747 	.word	0x08009747
 8009650:	0800971d 	.word	0x0800971d
 8009654:	080096ab 	.word	0x080096ab
 8009658:	080096ab 	.word	0x080096ab
 800965c:	080096ab 	.word	0x080096ab
 8009660:	080095fb 	.word	0x080095fb
 8009664:	08009721 	.word	0x08009721
 8009668:	080095fb 	.word	0x080095fb
 800966c:	080095fb 	.word	0x080095fb
 8009670:	080095fb 	.word	0x080095fb
 8009674:	080095fb 	.word	0x080095fb
 8009678:	08009757 	.word	0x08009757
 800967c:	08009729 	.word	0x08009729
 8009680:	080096cb 	.word	0x080096cb
 8009684:	080095fb 	.word	0x080095fb
 8009688:	080095fb 	.word	0x080095fb
 800968c:	08009753 	.word	0x08009753
 8009690:	080095fb 	.word	0x080095fb
 8009694:	0800971d 	.word	0x0800971d
 8009698:	080095fb 	.word	0x080095fb
 800969c:	080095fb 	.word	0x080095fb
 80096a0:	080096d3 	.word	0x080096d3
 80096a4:	3b45      	subs	r3, #69	; 0x45
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d8a7      	bhi.n	80095fa <__ssvfiscanf_r+0xee>
 80096aa:	2305      	movs	r3, #5
 80096ac:	e01b      	b.n	80096e6 <__ssvfiscanf_r+0x1da>
 80096ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80096b0:	4621      	mov	r1, r4
 80096b2:	4630      	mov	r0, r6
 80096b4:	4798      	blx	r3
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f af68 	beq.w	800958c <__ssvfiscanf_r+0x80>
 80096bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80096be:	2800      	cmp	r0, #0
 80096c0:	f040 808d 	bne.w	80097de <__ssvfiscanf_r+0x2d2>
 80096c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c8:	e08f      	b.n	80097ea <__ssvfiscanf_r+0x2de>
 80096ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80096cc:	f042 0220 	orr.w	r2, r2, #32
 80096d0:	9241      	str	r2, [sp, #260]	; 0x104
 80096d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80096d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096d8:	9241      	str	r2, [sp, #260]	; 0x104
 80096da:	2210      	movs	r2, #16
 80096dc:	2b6f      	cmp	r3, #111	; 0x6f
 80096de:	9242      	str	r2, [sp, #264]	; 0x108
 80096e0:	bf34      	ite	cc
 80096e2:	2303      	movcc	r3, #3
 80096e4:	2304      	movcs	r3, #4
 80096e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dd42      	ble.n	8009774 <__ssvfiscanf_r+0x268>
 80096ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80096f0:	0659      	lsls	r1, r3, #25
 80096f2:	d404      	bmi.n	80096fe <__ssvfiscanf_r+0x1f2>
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	781a      	ldrb	r2, [r3, #0]
 80096f8:	5cba      	ldrb	r2, [r7, r2]
 80096fa:	0712      	lsls	r2, r2, #28
 80096fc:	d441      	bmi.n	8009782 <__ssvfiscanf_r+0x276>
 80096fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009700:	2b02      	cmp	r3, #2
 8009702:	dc50      	bgt.n	80097a6 <__ssvfiscanf_r+0x29a>
 8009704:	466b      	mov	r3, sp
 8009706:	4622      	mov	r2, r4
 8009708:	a941      	add	r1, sp, #260	; 0x104
 800970a:	4630      	mov	r0, r6
 800970c:	f000 f876 	bl	80097fc <_scanf_chars>
 8009710:	2801      	cmp	r0, #1
 8009712:	d06e      	beq.n	80097f2 <__ssvfiscanf_r+0x2e6>
 8009714:	2802      	cmp	r0, #2
 8009716:	f47f af20 	bne.w	800955a <__ssvfiscanf_r+0x4e>
 800971a:	e7cf      	b.n	80096bc <__ssvfiscanf_r+0x1b0>
 800971c:	220a      	movs	r2, #10
 800971e:	e7dd      	b.n	80096dc <__ssvfiscanf_r+0x1d0>
 8009720:	2300      	movs	r3, #0
 8009722:	9342      	str	r3, [sp, #264]	; 0x108
 8009724:	2303      	movs	r3, #3
 8009726:	e7de      	b.n	80096e6 <__ssvfiscanf_r+0x1da>
 8009728:	2308      	movs	r3, #8
 800972a:	9342      	str	r3, [sp, #264]	; 0x108
 800972c:	2304      	movs	r3, #4
 800972e:	e7da      	b.n	80096e6 <__ssvfiscanf_r+0x1da>
 8009730:	4629      	mov	r1, r5
 8009732:	4640      	mov	r0, r8
 8009734:	f000 f9e0 	bl	8009af8 <__sccl>
 8009738:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800973a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800973e:	9341      	str	r3, [sp, #260]	; 0x104
 8009740:	4605      	mov	r5, r0
 8009742:	2301      	movs	r3, #1
 8009744:	e7cf      	b.n	80096e6 <__ssvfiscanf_r+0x1da>
 8009746:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974c:	9341      	str	r3, [sp, #260]	; 0x104
 800974e:	2300      	movs	r3, #0
 8009750:	e7c9      	b.n	80096e6 <__ssvfiscanf_r+0x1da>
 8009752:	2302      	movs	r3, #2
 8009754:	e7c7      	b.n	80096e6 <__ssvfiscanf_r+0x1da>
 8009756:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009758:	06c3      	lsls	r3, r0, #27
 800975a:	f53f aefe 	bmi.w	800955a <__ssvfiscanf_r+0x4e>
 800975e:	9b00      	ldr	r3, [sp, #0]
 8009760:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009762:	1d19      	adds	r1, r3, #4
 8009764:	9100      	str	r1, [sp, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f010 0f01 	tst.w	r0, #1
 800976c:	bf14      	ite	ne
 800976e:	801a      	strhne	r2, [r3, #0]
 8009770:	601a      	streq	r2, [r3, #0]
 8009772:	e6f2      	b.n	800955a <__ssvfiscanf_r+0x4e>
 8009774:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009776:	4621      	mov	r1, r4
 8009778:	4630      	mov	r0, r6
 800977a:	4798      	blx	r3
 800977c:	2800      	cmp	r0, #0
 800977e:	d0b6      	beq.n	80096ee <__ssvfiscanf_r+0x1e2>
 8009780:	e79c      	b.n	80096bc <__ssvfiscanf_r+0x1b0>
 8009782:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009784:	3201      	adds	r2, #1
 8009786:	9245      	str	r2, [sp, #276]	; 0x114
 8009788:	6862      	ldr	r2, [r4, #4]
 800978a:	3a01      	subs	r2, #1
 800978c:	2a00      	cmp	r2, #0
 800978e:	6062      	str	r2, [r4, #4]
 8009790:	dd02      	ble.n	8009798 <__ssvfiscanf_r+0x28c>
 8009792:	3301      	adds	r3, #1
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	e7ad      	b.n	80096f4 <__ssvfiscanf_r+0x1e8>
 8009798:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800979a:	4621      	mov	r1, r4
 800979c:	4630      	mov	r0, r6
 800979e:	4798      	blx	r3
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d0a7      	beq.n	80096f4 <__ssvfiscanf_r+0x1e8>
 80097a4:	e78a      	b.n	80096bc <__ssvfiscanf_r+0x1b0>
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	dc0e      	bgt.n	80097c8 <__ssvfiscanf_r+0x2bc>
 80097aa:	466b      	mov	r3, sp
 80097ac:	4622      	mov	r2, r4
 80097ae:	a941      	add	r1, sp, #260	; 0x104
 80097b0:	4630      	mov	r0, r6
 80097b2:	f000 f87d 	bl	80098b0 <_scanf_i>
 80097b6:	e7ab      	b.n	8009710 <__ssvfiscanf_r+0x204>
 80097b8:	08009459 	.word	0x08009459
 80097bc:	080094d3 	.word	0x080094d3
 80097c0:	0800a8e1 	.word	0x0800a8e1
 80097c4:	0800ac4a 	.word	0x0800ac4a
 80097c8:	4b0b      	ldr	r3, [pc, #44]	; (80097f8 <__ssvfiscanf_r+0x2ec>)
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f43f aec5 	beq.w	800955a <__ssvfiscanf_r+0x4e>
 80097d0:	466b      	mov	r3, sp
 80097d2:	4622      	mov	r2, r4
 80097d4:	a941      	add	r1, sp, #260	; 0x104
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7fc fb8a 	bl	8005ef0 <_scanf_float>
 80097dc:	e798      	b.n	8009710 <__ssvfiscanf_r+0x204>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80097e4:	bf18      	it	ne
 80097e6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80097ea:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80097f4:	e7f9      	b.n	80097ea <__ssvfiscanf_r+0x2de>
 80097f6:	bf00      	nop
 80097f8:	08005ef1 	.word	0x08005ef1

080097fc <_scanf_chars>:
 80097fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009800:	4615      	mov	r5, r2
 8009802:	688a      	ldr	r2, [r1, #8]
 8009804:	4680      	mov	r8, r0
 8009806:	460c      	mov	r4, r1
 8009808:	b932      	cbnz	r2, 8009818 <_scanf_chars+0x1c>
 800980a:	698a      	ldr	r2, [r1, #24]
 800980c:	2a00      	cmp	r2, #0
 800980e:	bf0c      	ite	eq
 8009810:	2201      	moveq	r2, #1
 8009812:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009816:	608a      	str	r2, [r1, #8]
 8009818:	6822      	ldr	r2, [r4, #0]
 800981a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80098ac <_scanf_chars+0xb0>
 800981e:	06d1      	lsls	r1, r2, #27
 8009820:	bf5f      	itttt	pl
 8009822:	681a      	ldrpl	r2, [r3, #0]
 8009824:	1d11      	addpl	r1, r2, #4
 8009826:	6019      	strpl	r1, [r3, #0]
 8009828:	6816      	ldrpl	r6, [r2, #0]
 800982a:	2700      	movs	r7, #0
 800982c:	69a0      	ldr	r0, [r4, #24]
 800982e:	b188      	cbz	r0, 8009854 <_scanf_chars+0x58>
 8009830:	2801      	cmp	r0, #1
 8009832:	d107      	bne.n	8009844 <_scanf_chars+0x48>
 8009834:	682a      	ldr	r2, [r5, #0]
 8009836:	7811      	ldrb	r1, [r2, #0]
 8009838:	6962      	ldr	r2, [r4, #20]
 800983a:	5c52      	ldrb	r2, [r2, r1]
 800983c:	b952      	cbnz	r2, 8009854 <_scanf_chars+0x58>
 800983e:	2f00      	cmp	r7, #0
 8009840:	d031      	beq.n	80098a6 <_scanf_chars+0xaa>
 8009842:	e022      	b.n	800988a <_scanf_chars+0x8e>
 8009844:	2802      	cmp	r0, #2
 8009846:	d120      	bne.n	800988a <_scanf_chars+0x8e>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009850:	071b      	lsls	r3, r3, #28
 8009852:	d41a      	bmi.n	800988a <_scanf_chars+0x8e>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	06da      	lsls	r2, r3, #27
 8009858:	bf5e      	ittt	pl
 800985a:	682b      	ldrpl	r3, [r5, #0]
 800985c:	781b      	ldrbpl	r3, [r3, #0]
 800985e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009862:	682a      	ldr	r2, [r5, #0]
 8009864:	686b      	ldr	r3, [r5, #4]
 8009866:	3201      	adds	r2, #1
 8009868:	602a      	str	r2, [r5, #0]
 800986a:	68a2      	ldr	r2, [r4, #8]
 800986c:	3b01      	subs	r3, #1
 800986e:	3a01      	subs	r2, #1
 8009870:	606b      	str	r3, [r5, #4]
 8009872:	3701      	adds	r7, #1
 8009874:	60a2      	str	r2, [r4, #8]
 8009876:	b142      	cbz	r2, 800988a <_scanf_chars+0x8e>
 8009878:	2b00      	cmp	r3, #0
 800987a:	dcd7      	bgt.n	800982c <_scanf_chars+0x30>
 800987c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009880:	4629      	mov	r1, r5
 8009882:	4640      	mov	r0, r8
 8009884:	4798      	blx	r3
 8009886:	2800      	cmp	r0, #0
 8009888:	d0d0      	beq.n	800982c <_scanf_chars+0x30>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	f013 0310 	ands.w	r3, r3, #16
 8009890:	d105      	bne.n	800989e <_scanf_chars+0xa2>
 8009892:	68e2      	ldr	r2, [r4, #12]
 8009894:	3201      	adds	r2, #1
 8009896:	60e2      	str	r2, [r4, #12]
 8009898:	69a2      	ldr	r2, [r4, #24]
 800989a:	b102      	cbz	r2, 800989e <_scanf_chars+0xa2>
 800989c:	7033      	strb	r3, [r6, #0]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	443b      	add	r3, r7
 80098a2:	6123      	str	r3, [r4, #16]
 80098a4:	2000      	movs	r0, #0
 80098a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098aa:	bf00      	nop
 80098ac:	0800a8e1 	.word	0x0800a8e1

080098b0 <_scanf_i>:
 80098b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b4:	4698      	mov	r8, r3
 80098b6:	4b76      	ldr	r3, [pc, #472]	; (8009a90 <_scanf_i+0x1e0>)
 80098b8:	460c      	mov	r4, r1
 80098ba:	4682      	mov	sl, r0
 80098bc:	4616      	mov	r6, r2
 80098be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098c2:	b087      	sub	sp, #28
 80098c4:	ab03      	add	r3, sp, #12
 80098c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80098ca:	4b72      	ldr	r3, [pc, #456]	; (8009a94 <_scanf_i+0x1e4>)
 80098cc:	69a1      	ldr	r1, [r4, #24]
 80098ce:	4a72      	ldr	r2, [pc, #456]	; (8009a98 <_scanf_i+0x1e8>)
 80098d0:	2903      	cmp	r1, #3
 80098d2:	bf18      	it	ne
 80098d4:	461a      	movne	r2, r3
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	9201      	str	r2, [sp, #4]
 80098da:	1e5a      	subs	r2, r3, #1
 80098dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80098e0:	bf88      	it	hi
 80098e2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80098e6:	4627      	mov	r7, r4
 80098e8:	bf82      	ittt	hi
 80098ea:	eb03 0905 	addhi.w	r9, r3, r5
 80098ee:	f240 135d 	movwhi	r3, #349	; 0x15d
 80098f2:	60a3      	strhi	r3, [r4, #8]
 80098f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80098f8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80098fc:	bf98      	it	ls
 80098fe:	f04f 0900 	movls.w	r9, #0
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	463d      	mov	r5, r7
 8009906:	f04f 0b00 	mov.w	fp, #0
 800990a:	6831      	ldr	r1, [r6, #0]
 800990c:	ab03      	add	r3, sp, #12
 800990e:	7809      	ldrb	r1, [r1, #0]
 8009910:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009914:	2202      	movs	r2, #2
 8009916:	f7f6 fc73 	bl	8000200 <memchr>
 800991a:	b328      	cbz	r0, 8009968 <_scanf_i+0xb8>
 800991c:	f1bb 0f01 	cmp.w	fp, #1
 8009920:	d159      	bne.n	80099d6 <_scanf_i+0x126>
 8009922:	6862      	ldr	r2, [r4, #4]
 8009924:	b92a      	cbnz	r2, 8009932 <_scanf_i+0x82>
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	2308      	movs	r3, #8
 800992a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800992e:	6063      	str	r3, [r4, #4]
 8009930:	6022      	str	r2, [r4, #0]
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009938:	6022      	str	r2, [r4, #0]
 800993a:	68a2      	ldr	r2, [r4, #8]
 800993c:	1e51      	subs	r1, r2, #1
 800993e:	60a1      	str	r1, [r4, #8]
 8009940:	b192      	cbz	r2, 8009968 <_scanf_i+0xb8>
 8009942:	6832      	ldr	r2, [r6, #0]
 8009944:	1c51      	adds	r1, r2, #1
 8009946:	6031      	str	r1, [r6, #0]
 8009948:	7812      	ldrb	r2, [r2, #0]
 800994a:	f805 2b01 	strb.w	r2, [r5], #1
 800994e:	6872      	ldr	r2, [r6, #4]
 8009950:	3a01      	subs	r2, #1
 8009952:	2a00      	cmp	r2, #0
 8009954:	6072      	str	r2, [r6, #4]
 8009956:	dc07      	bgt.n	8009968 <_scanf_i+0xb8>
 8009958:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800995c:	4631      	mov	r1, r6
 800995e:	4650      	mov	r0, sl
 8009960:	4790      	blx	r2
 8009962:	2800      	cmp	r0, #0
 8009964:	f040 8085 	bne.w	8009a72 <_scanf_i+0x1c2>
 8009968:	f10b 0b01 	add.w	fp, fp, #1
 800996c:	f1bb 0f03 	cmp.w	fp, #3
 8009970:	d1cb      	bne.n	800990a <_scanf_i+0x5a>
 8009972:	6863      	ldr	r3, [r4, #4]
 8009974:	b90b      	cbnz	r3, 800997a <_scanf_i+0xca>
 8009976:	230a      	movs	r3, #10
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	6863      	ldr	r3, [r4, #4]
 800997c:	4947      	ldr	r1, [pc, #284]	; (8009a9c <_scanf_i+0x1ec>)
 800997e:	6960      	ldr	r0, [r4, #20]
 8009980:	1ac9      	subs	r1, r1, r3
 8009982:	f000 f8b9 	bl	8009af8 <__sccl>
 8009986:	f04f 0b00 	mov.w	fp, #0
 800998a:	68a3      	ldr	r3, [r4, #8]
 800998c:	6822      	ldr	r2, [r4, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d03d      	beq.n	8009a0e <_scanf_i+0x15e>
 8009992:	6831      	ldr	r1, [r6, #0]
 8009994:	6960      	ldr	r0, [r4, #20]
 8009996:	f891 c000 	ldrb.w	ip, [r1]
 800999a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800999e:	2800      	cmp	r0, #0
 80099a0:	d035      	beq.n	8009a0e <_scanf_i+0x15e>
 80099a2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80099a6:	d124      	bne.n	80099f2 <_scanf_i+0x142>
 80099a8:	0510      	lsls	r0, r2, #20
 80099aa:	d522      	bpl.n	80099f2 <_scanf_i+0x142>
 80099ac:	f10b 0b01 	add.w	fp, fp, #1
 80099b0:	f1b9 0f00 	cmp.w	r9, #0
 80099b4:	d003      	beq.n	80099be <_scanf_i+0x10e>
 80099b6:	3301      	adds	r3, #1
 80099b8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80099bc:	60a3      	str	r3, [r4, #8]
 80099be:	6873      	ldr	r3, [r6, #4]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	6073      	str	r3, [r6, #4]
 80099c6:	dd1b      	ble.n	8009a00 <_scanf_i+0x150>
 80099c8:	6833      	ldr	r3, [r6, #0]
 80099ca:	3301      	adds	r3, #1
 80099cc:	6033      	str	r3, [r6, #0]
 80099ce:	68a3      	ldr	r3, [r4, #8]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	60a3      	str	r3, [r4, #8]
 80099d4:	e7d9      	b.n	800998a <_scanf_i+0xda>
 80099d6:	f1bb 0f02 	cmp.w	fp, #2
 80099da:	d1ae      	bne.n	800993a <_scanf_i+0x8a>
 80099dc:	6822      	ldr	r2, [r4, #0]
 80099de:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80099e2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80099e6:	d1bf      	bne.n	8009968 <_scanf_i+0xb8>
 80099e8:	2310      	movs	r3, #16
 80099ea:	6063      	str	r3, [r4, #4]
 80099ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099f0:	e7a2      	b.n	8009938 <_scanf_i+0x88>
 80099f2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80099f6:	6022      	str	r2, [r4, #0]
 80099f8:	780b      	ldrb	r3, [r1, #0]
 80099fa:	f805 3b01 	strb.w	r3, [r5], #1
 80099fe:	e7de      	b.n	80099be <_scanf_i+0x10e>
 8009a00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a04:	4631      	mov	r1, r6
 8009a06:	4650      	mov	r0, sl
 8009a08:	4798      	blx	r3
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d0df      	beq.n	80099ce <_scanf_i+0x11e>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	05db      	lsls	r3, r3, #23
 8009a12:	d50d      	bpl.n	8009a30 <_scanf_i+0x180>
 8009a14:	42bd      	cmp	r5, r7
 8009a16:	d909      	bls.n	8009a2c <_scanf_i+0x17c>
 8009a18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009a1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a20:	4632      	mov	r2, r6
 8009a22:	4650      	mov	r0, sl
 8009a24:	4798      	blx	r3
 8009a26:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009a2a:	464d      	mov	r5, r9
 8009a2c:	42bd      	cmp	r5, r7
 8009a2e:	d02d      	beq.n	8009a8c <_scanf_i+0x1dc>
 8009a30:	6822      	ldr	r2, [r4, #0]
 8009a32:	f012 0210 	ands.w	r2, r2, #16
 8009a36:	d113      	bne.n	8009a60 <_scanf_i+0x1b0>
 8009a38:	702a      	strb	r2, [r5, #0]
 8009a3a:	6863      	ldr	r3, [r4, #4]
 8009a3c:	9e01      	ldr	r6, [sp, #4]
 8009a3e:	4639      	mov	r1, r7
 8009a40:	4650      	mov	r0, sl
 8009a42:	47b0      	blx	r6
 8009a44:	6821      	ldr	r1, [r4, #0]
 8009a46:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4a:	f011 0f20 	tst.w	r1, #32
 8009a4e:	d013      	beq.n	8009a78 <_scanf_i+0x1c8>
 8009a50:	1d1a      	adds	r2, r3, #4
 8009a52:	f8c8 2000 	str.w	r2, [r8]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6018      	str	r0, [r3, #0]
 8009a5a:	68e3      	ldr	r3, [r4, #12]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	60e3      	str	r3, [r4, #12]
 8009a60:	1bed      	subs	r5, r5, r7
 8009a62:	44ab      	add	fp, r5
 8009a64:	6925      	ldr	r5, [r4, #16]
 8009a66:	445d      	add	r5, fp
 8009a68:	6125      	str	r5, [r4, #16]
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	b007      	add	sp, #28
 8009a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a72:	f04f 0b00 	mov.w	fp, #0
 8009a76:	e7ca      	b.n	8009a0e <_scanf_i+0x15e>
 8009a78:	1d1a      	adds	r2, r3, #4
 8009a7a:	f8c8 2000 	str.w	r2, [r8]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f011 0f01 	tst.w	r1, #1
 8009a84:	bf14      	ite	ne
 8009a86:	8018      	strhne	r0, [r3, #0]
 8009a88:	6018      	streq	r0, [r3, #0]
 8009a8a:	e7e6      	b.n	8009a5a <_scanf_i+0x1aa>
 8009a8c:	2001      	movs	r0, #1
 8009a8e:	e7ed      	b.n	8009a6c <_scanf_i+0x1bc>
 8009a90:	0800a810 	.word	0x0800a810
 8009a94:	08009c75 	.word	0x08009c75
 8009a98:	08007195 	.word	0x08007195
 8009a9c:	0800ac6e 	.word	0x0800ac6e

08009aa0 <_read_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d07      	ldr	r5, [pc, #28]	; (8009ac0 <_read_r+0x20>)
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	602a      	str	r2, [r5, #0]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f7f7 fe08 	bl	80016c4 <_read>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_read_r+0x1e>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_read_r+0x1e>
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	2000033c 	.word	0x2000033c
 8009ac4:	00000000 	.word	0x00000000

08009ac8 <nan>:
 8009ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ad0 <nan+0x8>
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	00000000 	.word	0x00000000
 8009ad4:	7ff80000 	.word	0x7ff80000

08009ad8 <_sbrk_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4d06      	ldr	r5, [pc, #24]	; (8009af4 <_sbrk_r+0x1c>)
 8009adc:	2300      	movs	r3, #0
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	602b      	str	r3, [r5, #0]
 8009ae4:	f7f7 fe5c 	bl	80017a0 <_sbrk>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_sbrk_r+0x1a>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_sbrk_r+0x1a>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	2000033c 	.word	0x2000033c

08009af8 <__sccl>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	780b      	ldrb	r3, [r1, #0]
 8009afc:	4604      	mov	r4, r0
 8009afe:	2b5e      	cmp	r3, #94	; 0x5e
 8009b00:	bf0b      	itete	eq
 8009b02:	784b      	ldrbeq	r3, [r1, #1]
 8009b04:	1c48      	addne	r0, r1, #1
 8009b06:	1c88      	addeq	r0, r1, #2
 8009b08:	2200      	movne	r2, #0
 8009b0a:	bf08      	it	eq
 8009b0c:	2201      	moveq	r2, #1
 8009b0e:	1e61      	subs	r1, r4, #1
 8009b10:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009b14:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009b18:	42a9      	cmp	r1, r5
 8009b1a:	d1fb      	bne.n	8009b14 <__sccl+0x1c>
 8009b1c:	b90b      	cbnz	r3, 8009b22 <__sccl+0x2a>
 8009b1e:	3801      	subs	r0, #1
 8009b20:	bd70      	pop	{r4, r5, r6, pc}
 8009b22:	f082 0201 	eor.w	r2, r2, #1
 8009b26:	54e2      	strb	r2, [r4, r3]
 8009b28:	4605      	mov	r5, r0
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009b30:	292d      	cmp	r1, #45	; 0x2d
 8009b32:	d006      	beq.n	8009b42 <__sccl+0x4a>
 8009b34:	295d      	cmp	r1, #93	; 0x5d
 8009b36:	d0f3      	beq.n	8009b20 <__sccl+0x28>
 8009b38:	b909      	cbnz	r1, 8009b3e <__sccl+0x46>
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	e7f0      	b.n	8009b20 <__sccl+0x28>
 8009b3e:	460b      	mov	r3, r1
 8009b40:	e7f1      	b.n	8009b26 <__sccl+0x2e>
 8009b42:	786e      	ldrb	r6, [r5, #1]
 8009b44:	2e5d      	cmp	r6, #93	; 0x5d
 8009b46:	d0fa      	beq.n	8009b3e <__sccl+0x46>
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	dcf8      	bgt.n	8009b3e <__sccl+0x46>
 8009b4c:	3502      	adds	r5, #2
 8009b4e:	4619      	mov	r1, r3
 8009b50:	3101      	adds	r1, #1
 8009b52:	428e      	cmp	r6, r1
 8009b54:	5462      	strb	r2, [r4, r1]
 8009b56:	dcfb      	bgt.n	8009b50 <__sccl+0x58>
 8009b58:	1af1      	subs	r1, r6, r3
 8009b5a:	3901      	subs	r1, #1
 8009b5c:	1c58      	adds	r0, r3, #1
 8009b5e:	42b3      	cmp	r3, r6
 8009b60:	bfa8      	it	ge
 8009b62:	2100      	movge	r1, #0
 8009b64:	1843      	adds	r3, r0, r1
 8009b66:	e7e0      	b.n	8009b2a <__sccl+0x32>

08009b68 <strncmp>:
 8009b68:	b510      	push	{r4, lr}
 8009b6a:	b17a      	cbz	r2, 8009b8c <strncmp+0x24>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	3901      	subs	r1, #1
 8009b70:	1884      	adds	r4, r0, r2
 8009b72:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b7a:	4290      	cmp	r0, r2
 8009b7c:	d101      	bne.n	8009b82 <strncmp+0x1a>
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	d101      	bne.n	8009b86 <strncmp+0x1e>
 8009b82:	1a80      	subs	r0, r0, r2
 8009b84:	bd10      	pop	{r4, pc}
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d1f3      	bne.n	8009b72 <strncmp+0xa>
 8009b8a:	e7fa      	b.n	8009b82 <strncmp+0x1a>
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	e7f9      	b.n	8009b84 <strncmp+0x1c>

08009b90 <_strtoul_l.constprop.0>:
 8009b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b94:	4f36      	ldr	r7, [pc, #216]	; (8009c70 <_strtoul_l.constprop.0+0xe0>)
 8009b96:	4686      	mov	lr, r0
 8009b98:	460d      	mov	r5, r1
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ba0:	5de6      	ldrb	r6, [r4, r7]
 8009ba2:	f016 0608 	ands.w	r6, r6, #8
 8009ba6:	d1f8      	bne.n	8009b9a <_strtoul_l.constprop.0+0xa>
 8009ba8:	2c2d      	cmp	r4, #45	; 0x2d
 8009baa:	d12f      	bne.n	8009c0c <_strtoul_l.constprop.0+0x7c>
 8009bac:	782c      	ldrb	r4, [r5, #0]
 8009bae:	2601      	movs	r6, #1
 8009bb0:	1c85      	adds	r5, r0, #2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d057      	beq.n	8009c66 <_strtoul_l.constprop.0+0xd6>
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	d109      	bne.n	8009bce <_strtoul_l.constprop.0+0x3e>
 8009bba:	2c30      	cmp	r4, #48	; 0x30
 8009bbc:	d107      	bne.n	8009bce <_strtoul_l.constprop.0+0x3e>
 8009bbe:	7828      	ldrb	r0, [r5, #0]
 8009bc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009bc4:	2858      	cmp	r0, #88	; 0x58
 8009bc6:	d149      	bne.n	8009c5c <_strtoul_l.constprop.0+0xcc>
 8009bc8:	786c      	ldrb	r4, [r5, #1]
 8009bca:	2310      	movs	r3, #16
 8009bcc:	3502      	adds	r5, #2
 8009bce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009bd2:	2700      	movs	r7, #0
 8009bd4:	fbb8 f8f3 	udiv	r8, r8, r3
 8009bd8:	fb03 f908 	mul.w	r9, r3, r8
 8009bdc:	ea6f 0909 	mvn.w	r9, r9
 8009be0:	4638      	mov	r0, r7
 8009be2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009be6:	f1bc 0f09 	cmp.w	ip, #9
 8009bea:	d814      	bhi.n	8009c16 <_strtoul_l.constprop.0+0x86>
 8009bec:	4664      	mov	r4, ip
 8009bee:	42a3      	cmp	r3, r4
 8009bf0:	dd22      	ble.n	8009c38 <_strtoul_l.constprop.0+0xa8>
 8009bf2:	2f00      	cmp	r7, #0
 8009bf4:	db1d      	blt.n	8009c32 <_strtoul_l.constprop.0+0xa2>
 8009bf6:	4580      	cmp	r8, r0
 8009bf8:	d31b      	bcc.n	8009c32 <_strtoul_l.constprop.0+0xa2>
 8009bfa:	d101      	bne.n	8009c00 <_strtoul_l.constprop.0+0x70>
 8009bfc:	45a1      	cmp	r9, r4
 8009bfe:	db18      	blt.n	8009c32 <_strtoul_l.constprop.0+0xa2>
 8009c00:	fb00 4003 	mla	r0, r0, r3, r4
 8009c04:	2701      	movs	r7, #1
 8009c06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c0a:	e7ea      	b.n	8009be2 <_strtoul_l.constprop.0+0x52>
 8009c0c:	2c2b      	cmp	r4, #43	; 0x2b
 8009c0e:	bf04      	itt	eq
 8009c10:	782c      	ldrbeq	r4, [r5, #0]
 8009c12:	1c85      	addeq	r5, r0, #2
 8009c14:	e7cd      	b.n	8009bb2 <_strtoul_l.constprop.0+0x22>
 8009c16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c1a:	f1bc 0f19 	cmp.w	ip, #25
 8009c1e:	d801      	bhi.n	8009c24 <_strtoul_l.constprop.0+0x94>
 8009c20:	3c37      	subs	r4, #55	; 0x37
 8009c22:	e7e4      	b.n	8009bee <_strtoul_l.constprop.0+0x5e>
 8009c24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009c28:	f1bc 0f19 	cmp.w	ip, #25
 8009c2c:	d804      	bhi.n	8009c38 <_strtoul_l.constprop.0+0xa8>
 8009c2e:	3c57      	subs	r4, #87	; 0x57
 8009c30:	e7dd      	b.n	8009bee <_strtoul_l.constprop.0+0x5e>
 8009c32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c36:	e7e6      	b.n	8009c06 <_strtoul_l.constprop.0+0x76>
 8009c38:	2f00      	cmp	r7, #0
 8009c3a:	da07      	bge.n	8009c4c <_strtoul_l.constprop.0+0xbc>
 8009c3c:	2322      	movs	r3, #34	; 0x22
 8009c3e:	f8ce 3000 	str.w	r3, [lr]
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c46:	b932      	cbnz	r2, 8009c56 <_strtoul_l.constprop.0+0xc6>
 8009c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c4c:	b106      	cbz	r6, 8009c50 <_strtoul_l.constprop.0+0xc0>
 8009c4e:	4240      	negs	r0, r0
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	d0f9      	beq.n	8009c48 <_strtoul_l.constprop.0+0xb8>
 8009c54:	b107      	cbz	r7, 8009c58 <_strtoul_l.constprop.0+0xc8>
 8009c56:	1e69      	subs	r1, r5, #1
 8009c58:	6011      	str	r1, [r2, #0]
 8009c5a:	e7f5      	b.n	8009c48 <_strtoul_l.constprop.0+0xb8>
 8009c5c:	2430      	movs	r4, #48	; 0x30
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1b5      	bne.n	8009bce <_strtoul_l.constprop.0+0x3e>
 8009c62:	2308      	movs	r3, #8
 8009c64:	e7b3      	b.n	8009bce <_strtoul_l.constprop.0+0x3e>
 8009c66:	2c30      	cmp	r4, #48	; 0x30
 8009c68:	d0a9      	beq.n	8009bbe <_strtoul_l.constprop.0+0x2e>
 8009c6a:	230a      	movs	r3, #10
 8009c6c:	e7af      	b.n	8009bce <_strtoul_l.constprop.0+0x3e>
 8009c6e:	bf00      	nop
 8009c70:	0800a8e1 	.word	0x0800a8e1

08009c74 <_strtoul_r>:
 8009c74:	f7ff bf8c 	b.w	8009b90 <_strtoul_l.constprop.0>

08009c78 <__submore>:
 8009c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c84:	4299      	cmp	r1, r3
 8009c86:	d11d      	bne.n	8009cc4 <__submore+0x4c>
 8009c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c8c:	f7ff fa14 	bl	80090b8 <_malloc_r>
 8009c90:	b918      	cbnz	r0, 8009c9a <__submore+0x22>
 8009c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009ca0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ca6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009caa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009cae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009cb2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009cb6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009cba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009cbe:	6020      	str	r0, [r4, #0]
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	e7e8      	b.n	8009c96 <__submore+0x1e>
 8009cc4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009cc6:	0077      	lsls	r7, r6, #1
 8009cc8:	463a      	mov	r2, r7
 8009cca:	f000 fa2d 	bl	800a128 <_realloc_r>
 8009cce:	4605      	mov	r5, r0
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d0de      	beq.n	8009c92 <__submore+0x1a>
 8009cd4:	eb00 0806 	add.w	r8, r0, r6
 8009cd8:	4601      	mov	r1, r0
 8009cda:	4632      	mov	r2, r6
 8009cdc:	4640      	mov	r0, r8
 8009cde:	f7fe fc99 	bl	8008614 <memcpy>
 8009ce2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009ce6:	f8c4 8000 	str.w	r8, [r4]
 8009cea:	e7e9      	b.n	8009cc0 <__submore+0x48>

08009cec <__ascii_wctomb>:
 8009cec:	b149      	cbz	r1, 8009d02 <__ascii_wctomb+0x16>
 8009cee:	2aff      	cmp	r2, #255	; 0xff
 8009cf0:	bf85      	ittet	hi
 8009cf2:	238a      	movhi	r3, #138	; 0x8a
 8009cf4:	6003      	strhi	r3, [r0, #0]
 8009cf6:	700a      	strbls	r2, [r1, #0]
 8009cf8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009cfc:	bf98      	it	ls
 8009cfe:	2001      	movls	r0, #1
 8009d00:	4770      	bx	lr
 8009d02:	4608      	mov	r0, r1
 8009d04:	4770      	bx	lr
	...

08009d08 <__assert_func>:
 8009d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d0a:	4614      	mov	r4, r2
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	4b09      	ldr	r3, [pc, #36]	; (8009d34 <__assert_func+0x2c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4605      	mov	r5, r0
 8009d14:	68d8      	ldr	r0, [r3, #12]
 8009d16:	b14c      	cbz	r4, 8009d2c <__assert_func+0x24>
 8009d18:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <__assert_func+0x30>)
 8009d1a:	9100      	str	r1, [sp, #0]
 8009d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d20:	4906      	ldr	r1, [pc, #24]	; (8009d3c <__assert_func+0x34>)
 8009d22:	462b      	mov	r3, r5
 8009d24:	f000 f9a6 	bl	800a074 <fiprintf>
 8009d28:	f000 fc46 	bl	800a5b8 <abort>
 8009d2c:	4b04      	ldr	r3, [pc, #16]	; (8009d40 <__assert_func+0x38>)
 8009d2e:	461c      	mov	r4, r3
 8009d30:	e7f3      	b.n	8009d1a <__assert_func+0x12>
 8009d32:	bf00      	nop
 8009d34:	20000014 	.word	0x20000014
 8009d38:	0800ac70 	.word	0x0800ac70
 8009d3c:	0800ac7d 	.word	0x0800ac7d
 8009d40:	0800acab 	.word	0x0800acab

08009d44 <__sflush_r>:
 8009d44:	898a      	ldrh	r2, [r1, #12]
 8009d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	0710      	lsls	r0, r2, #28
 8009d4e:	460c      	mov	r4, r1
 8009d50:	d458      	bmi.n	8009e04 <__sflush_r+0xc0>
 8009d52:	684b      	ldr	r3, [r1, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	dc05      	bgt.n	8009d64 <__sflush_r+0x20>
 8009d58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	dc02      	bgt.n	8009d64 <__sflush_r+0x20>
 8009d5e:	2000      	movs	r0, #0
 8009d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	d0f9      	beq.n	8009d5e <__sflush_r+0x1a>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d70:	682f      	ldr	r7, [r5, #0]
 8009d72:	602b      	str	r3, [r5, #0]
 8009d74:	d032      	beq.n	8009ddc <__sflush_r+0x98>
 8009d76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d78:	89a3      	ldrh	r3, [r4, #12]
 8009d7a:	075a      	lsls	r2, r3, #29
 8009d7c:	d505      	bpl.n	8009d8a <__sflush_r+0x46>
 8009d7e:	6863      	ldr	r3, [r4, #4]
 8009d80:	1ac0      	subs	r0, r0, r3
 8009d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d84:	b10b      	cbz	r3, 8009d8a <__sflush_r+0x46>
 8009d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d88:	1ac0      	subs	r0, r0, r3
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d90:	6a21      	ldr	r1, [r4, #32]
 8009d92:	4628      	mov	r0, r5
 8009d94:	47b0      	blx	r6
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	d106      	bne.n	8009daa <__sflush_r+0x66>
 8009d9c:	6829      	ldr	r1, [r5, #0]
 8009d9e:	291d      	cmp	r1, #29
 8009da0:	d82c      	bhi.n	8009dfc <__sflush_r+0xb8>
 8009da2:	4a2a      	ldr	r2, [pc, #168]	; (8009e4c <__sflush_r+0x108>)
 8009da4:	40ca      	lsrs	r2, r1
 8009da6:	07d6      	lsls	r6, r2, #31
 8009da8:	d528      	bpl.n	8009dfc <__sflush_r+0xb8>
 8009daa:	2200      	movs	r2, #0
 8009dac:	6062      	str	r2, [r4, #4]
 8009dae:	04d9      	lsls	r1, r3, #19
 8009db0:	6922      	ldr	r2, [r4, #16]
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	d504      	bpl.n	8009dc0 <__sflush_r+0x7c>
 8009db6:	1c42      	adds	r2, r0, #1
 8009db8:	d101      	bne.n	8009dbe <__sflush_r+0x7a>
 8009dba:	682b      	ldr	r3, [r5, #0]
 8009dbc:	b903      	cbnz	r3, 8009dc0 <__sflush_r+0x7c>
 8009dbe:	6560      	str	r0, [r4, #84]	; 0x54
 8009dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc2:	602f      	str	r7, [r5, #0]
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	d0ca      	beq.n	8009d5e <__sflush_r+0x1a>
 8009dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dcc:	4299      	cmp	r1, r3
 8009dce:	d002      	beq.n	8009dd6 <__sflush_r+0x92>
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f7ff f905 	bl	8008fe0 <_free_r>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	6360      	str	r0, [r4, #52]	; 0x34
 8009dda:	e7c1      	b.n	8009d60 <__sflush_r+0x1c>
 8009ddc:	6a21      	ldr	r1, [r4, #32]
 8009dde:	2301      	movs	r3, #1
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b0      	blx	r6
 8009de4:	1c41      	adds	r1, r0, #1
 8009de6:	d1c7      	bne.n	8009d78 <__sflush_r+0x34>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0c4      	beq.n	8009d78 <__sflush_r+0x34>
 8009dee:	2b1d      	cmp	r3, #29
 8009df0:	d001      	beq.n	8009df6 <__sflush_r+0xb2>
 8009df2:	2b16      	cmp	r3, #22
 8009df4:	d101      	bne.n	8009dfa <__sflush_r+0xb6>
 8009df6:	602f      	str	r7, [r5, #0]
 8009df8:	e7b1      	b.n	8009d5e <__sflush_r+0x1a>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e00:	81a3      	strh	r3, [r4, #12]
 8009e02:	e7ad      	b.n	8009d60 <__sflush_r+0x1c>
 8009e04:	690f      	ldr	r7, [r1, #16]
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	d0a9      	beq.n	8009d5e <__sflush_r+0x1a>
 8009e0a:	0793      	lsls	r3, r2, #30
 8009e0c:	680e      	ldr	r6, [r1, #0]
 8009e0e:	bf08      	it	eq
 8009e10:	694b      	ldreq	r3, [r1, #20]
 8009e12:	600f      	str	r7, [r1, #0]
 8009e14:	bf18      	it	ne
 8009e16:	2300      	movne	r3, #0
 8009e18:	eba6 0807 	sub.w	r8, r6, r7
 8009e1c:	608b      	str	r3, [r1, #8]
 8009e1e:	f1b8 0f00 	cmp.w	r8, #0
 8009e22:	dd9c      	ble.n	8009d5e <__sflush_r+0x1a>
 8009e24:	6a21      	ldr	r1, [r4, #32]
 8009e26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e28:	4643      	mov	r3, r8
 8009e2a:	463a      	mov	r2, r7
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b0      	blx	r6
 8009e30:	2800      	cmp	r0, #0
 8009e32:	dc06      	bgt.n	8009e42 <__sflush_r+0xfe>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e40:	e78e      	b.n	8009d60 <__sflush_r+0x1c>
 8009e42:	4407      	add	r7, r0
 8009e44:	eba8 0800 	sub.w	r8, r8, r0
 8009e48:	e7e9      	b.n	8009e1e <__sflush_r+0xda>
 8009e4a:	bf00      	nop
 8009e4c:	20400001 	.word	0x20400001

08009e50 <_fflush_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	690b      	ldr	r3, [r1, #16]
 8009e54:	4605      	mov	r5, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	b913      	cbnz	r3, 8009e60 <_fflush_r+0x10>
 8009e5a:	2500      	movs	r5, #0
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	b118      	cbz	r0, 8009e6a <_fflush_r+0x1a>
 8009e62:	6983      	ldr	r3, [r0, #24]
 8009e64:	b90b      	cbnz	r3, 8009e6a <_fflush_r+0x1a>
 8009e66:	f000 f887 	bl	8009f78 <__sinit>
 8009e6a:	4b14      	ldr	r3, [pc, #80]	; (8009ebc <_fflush_r+0x6c>)
 8009e6c:	429c      	cmp	r4, r3
 8009e6e:	d11b      	bne.n	8009ea8 <_fflush_r+0x58>
 8009e70:	686c      	ldr	r4, [r5, #4]
 8009e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0ef      	beq.n	8009e5a <_fflush_r+0xa>
 8009e7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e7c:	07d0      	lsls	r0, r2, #31
 8009e7e:	d404      	bmi.n	8009e8a <_fflush_r+0x3a>
 8009e80:	0599      	lsls	r1, r3, #22
 8009e82:	d402      	bmi.n	8009e8a <_fflush_r+0x3a>
 8009e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e86:	f000 f927 	bl	800a0d8 <__retarget_lock_acquire_recursive>
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	f7ff ff59 	bl	8009d44 <__sflush_r>
 8009e92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e94:	07da      	lsls	r2, r3, #31
 8009e96:	4605      	mov	r5, r0
 8009e98:	d4e0      	bmi.n	8009e5c <_fflush_r+0xc>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	059b      	lsls	r3, r3, #22
 8009e9e:	d4dd      	bmi.n	8009e5c <_fflush_r+0xc>
 8009ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea2:	f000 f91a 	bl	800a0da <__retarget_lock_release_recursive>
 8009ea6:	e7d9      	b.n	8009e5c <_fflush_r+0xc>
 8009ea8:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <_fflush_r+0x70>)
 8009eaa:	429c      	cmp	r4, r3
 8009eac:	d101      	bne.n	8009eb2 <_fflush_r+0x62>
 8009eae:	68ac      	ldr	r4, [r5, #8]
 8009eb0:	e7df      	b.n	8009e72 <_fflush_r+0x22>
 8009eb2:	4b04      	ldr	r3, [pc, #16]	; (8009ec4 <_fflush_r+0x74>)
 8009eb4:	429c      	cmp	r4, r3
 8009eb6:	bf08      	it	eq
 8009eb8:	68ec      	ldreq	r4, [r5, #12]
 8009eba:	e7da      	b.n	8009e72 <_fflush_r+0x22>
 8009ebc:	0800accc 	.word	0x0800accc
 8009ec0:	0800acec 	.word	0x0800acec
 8009ec4:	0800acac 	.word	0x0800acac

08009ec8 <std>:
 8009ec8:	2300      	movs	r3, #0
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	4604      	mov	r4, r0
 8009ece:	e9c0 3300 	strd	r3, r3, [r0]
 8009ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ed6:	6083      	str	r3, [r0, #8]
 8009ed8:	8181      	strh	r1, [r0, #12]
 8009eda:	6643      	str	r3, [r0, #100]	; 0x64
 8009edc:	81c2      	strh	r2, [r0, #14]
 8009ede:	6183      	str	r3, [r0, #24]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	2208      	movs	r2, #8
 8009ee4:	305c      	adds	r0, #92	; 0x5c
 8009ee6:	f7fb fb91 	bl	800560c <memset>
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <std+0x38>)
 8009eec:	6263      	str	r3, [r4, #36]	; 0x24
 8009eee:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <std+0x3c>)
 8009ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ef2:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <std+0x40>)
 8009ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ef6:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <std+0x44>)
 8009ef8:	6224      	str	r4, [r4, #32]
 8009efa:	6323      	str	r3, [r4, #48]	; 0x30
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	bf00      	nop
 8009f00:	080063b5 	.word	0x080063b5
 8009f04:	080063db 	.word	0x080063db
 8009f08:	08006413 	.word	0x08006413
 8009f0c:	08006437 	.word	0x08006437

08009f10 <_cleanup_r>:
 8009f10:	4901      	ldr	r1, [pc, #4]	; (8009f18 <_cleanup_r+0x8>)
 8009f12:	f000 b8c1 	b.w	800a098 <_fwalk_reent>
 8009f16:	bf00      	nop
 8009f18:	08009e51 	.word	0x08009e51

08009f1c <__sfmoreglue>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	2268      	movs	r2, #104	; 0x68
 8009f20:	1e4d      	subs	r5, r1, #1
 8009f22:	4355      	muls	r5, r2
 8009f24:	460e      	mov	r6, r1
 8009f26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f2a:	f7ff f8c5 	bl	80090b8 <_malloc_r>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	b140      	cbz	r0, 8009f44 <__sfmoreglue+0x28>
 8009f32:	2100      	movs	r1, #0
 8009f34:	e9c0 1600 	strd	r1, r6, [r0]
 8009f38:	300c      	adds	r0, #12
 8009f3a:	60a0      	str	r0, [r4, #8]
 8009f3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f40:	f7fb fb64 	bl	800560c <memset>
 8009f44:	4620      	mov	r0, r4
 8009f46:	bd70      	pop	{r4, r5, r6, pc}

08009f48 <__sfp_lock_acquire>:
 8009f48:	4801      	ldr	r0, [pc, #4]	; (8009f50 <__sfp_lock_acquire+0x8>)
 8009f4a:	f000 b8c5 	b.w	800a0d8 <__retarget_lock_acquire_recursive>
 8009f4e:	bf00      	nop
 8009f50:	20000341 	.word	0x20000341

08009f54 <__sfp_lock_release>:
 8009f54:	4801      	ldr	r0, [pc, #4]	; (8009f5c <__sfp_lock_release+0x8>)
 8009f56:	f000 b8c0 	b.w	800a0da <__retarget_lock_release_recursive>
 8009f5a:	bf00      	nop
 8009f5c:	20000341 	.word	0x20000341

08009f60 <__sinit_lock_acquire>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__sinit_lock_acquire+0x8>)
 8009f62:	f000 b8b9 	b.w	800a0d8 <__retarget_lock_acquire_recursive>
 8009f66:	bf00      	nop
 8009f68:	20000342 	.word	0x20000342

08009f6c <__sinit_lock_release>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	; (8009f74 <__sinit_lock_release+0x8>)
 8009f6e:	f000 b8b4 	b.w	800a0da <__retarget_lock_release_recursive>
 8009f72:	bf00      	nop
 8009f74:	20000342 	.word	0x20000342

08009f78 <__sinit>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	f7ff fff0 	bl	8009f60 <__sinit_lock_acquire>
 8009f80:	69a3      	ldr	r3, [r4, #24]
 8009f82:	b11b      	cbz	r3, 8009f8c <__sinit+0x14>
 8009f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f88:	f7ff bff0 	b.w	8009f6c <__sinit_lock_release>
 8009f8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f90:	6523      	str	r3, [r4, #80]	; 0x50
 8009f92:	4b13      	ldr	r3, [pc, #76]	; (8009fe0 <__sinit+0x68>)
 8009f94:	4a13      	ldr	r2, [pc, #76]	; (8009fe4 <__sinit+0x6c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f9a:	42a3      	cmp	r3, r4
 8009f9c:	bf04      	itt	eq
 8009f9e:	2301      	moveq	r3, #1
 8009fa0:	61a3      	streq	r3, [r4, #24]
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 f820 	bl	8009fe8 <__sfp>
 8009fa8:	6060      	str	r0, [r4, #4]
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 f81c 	bl	8009fe8 <__sfp>
 8009fb0:	60a0      	str	r0, [r4, #8]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 f818 	bl	8009fe8 <__sfp>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	60e0      	str	r0, [r4, #12]
 8009fbc:	2104      	movs	r1, #4
 8009fbe:	6860      	ldr	r0, [r4, #4]
 8009fc0:	f7ff ff82 	bl	8009ec8 <std>
 8009fc4:	68a0      	ldr	r0, [r4, #8]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	2109      	movs	r1, #9
 8009fca:	f7ff ff7d 	bl	8009ec8 <std>
 8009fce:	68e0      	ldr	r0, [r4, #12]
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	2112      	movs	r1, #18
 8009fd4:	f7ff ff78 	bl	8009ec8 <std>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	61a3      	str	r3, [r4, #24]
 8009fdc:	e7d2      	b.n	8009f84 <__sinit+0xc>
 8009fde:	bf00      	nop
 8009fe0:	0800a854 	.word	0x0800a854
 8009fe4:	08009f11 	.word	0x08009f11

08009fe8 <__sfp>:
 8009fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fea:	4607      	mov	r7, r0
 8009fec:	f7ff ffac 	bl	8009f48 <__sfp_lock_acquire>
 8009ff0:	4b1e      	ldr	r3, [pc, #120]	; (800a06c <__sfp+0x84>)
 8009ff2:	681e      	ldr	r6, [r3, #0]
 8009ff4:	69b3      	ldr	r3, [r6, #24]
 8009ff6:	b913      	cbnz	r3, 8009ffe <__sfp+0x16>
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f7ff ffbd 	bl	8009f78 <__sinit>
 8009ffe:	3648      	adds	r6, #72	; 0x48
 800a000:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a004:	3b01      	subs	r3, #1
 800a006:	d503      	bpl.n	800a010 <__sfp+0x28>
 800a008:	6833      	ldr	r3, [r6, #0]
 800a00a:	b30b      	cbz	r3, 800a050 <__sfp+0x68>
 800a00c:	6836      	ldr	r6, [r6, #0]
 800a00e:	e7f7      	b.n	800a000 <__sfp+0x18>
 800a010:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a014:	b9d5      	cbnz	r5, 800a04c <__sfp+0x64>
 800a016:	4b16      	ldr	r3, [pc, #88]	; (800a070 <__sfp+0x88>)
 800a018:	60e3      	str	r3, [r4, #12]
 800a01a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a01e:	6665      	str	r5, [r4, #100]	; 0x64
 800a020:	f000 f859 	bl	800a0d6 <__retarget_lock_init_recursive>
 800a024:	f7ff ff96 	bl	8009f54 <__sfp_lock_release>
 800a028:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a02c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a030:	6025      	str	r5, [r4, #0]
 800a032:	61a5      	str	r5, [r4, #24]
 800a034:	2208      	movs	r2, #8
 800a036:	4629      	mov	r1, r5
 800a038:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a03c:	f7fb fae6 	bl	800560c <memset>
 800a040:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a044:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a048:	4620      	mov	r0, r4
 800a04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a04c:	3468      	adds	r4, #104	; 0x68
 800a04e:	e7d9      	b.n	800a004 <__sfp+0x1c>
 800a050:	2104      	movs	r1, #4
 800a052:	4638      	mov	r0, r7
 800a054:	f7ff ff62 	bl	8009f1c <__sfmoreglue>
 800a058:	4604      	mov	r4, r0
 800a05a:	6030      	str	r0, [r6, #0]
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d1d5      	bne.n	800a00c <__sfp+0x24>
 800a060:	f7ff ff78 	bl	8009f54 <__sfp_lock_release>
 800a064:	230c      	movs	r3, #12
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	e7ee      	b.n	800a048 <__sfp+0x60>
 800a06a:	bf00      	nop
 800a06c:	0800a854 	.word	0x0800a854
 800a070:	ffff0001 	.word	0xffff0001

0800a074 <fiprintf>:
 800a074:	b40e      	push	{r1, r2, r3}
 800a076:	b503      	push	{r0, r1, lr}
 800a078:	4601      	mov	r1, r0
 800a07a:	ab03      	add	r3, sp, #12
 800a07c:	4805      	ldr	r0, [pc, #20]	; (800a094 <fiprintf+0x20>)
 800a07e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a082:	6800      	ldr	r0, [r0, #0]
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	f000 f8a7 	bl	800a1d8 <_vfiprintf_r>
 800a08a:	b002      	add	sp, #8
 800a08c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a090:	b003      	add	sp, #12
 800a092:	4770      	bx	lr
 800a094:	20000014 	.word	0x20000014

0800a098 <_fwalk_reent>:
 800a098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a09c:	4606      	mov	r6, r0
 800a09e:	4688      	mov	r8, r1
 800a0a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0a4:	2700      	movs	r7, #0
 800a0a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0aa:	f1b9 0901 	subs.w	r9, r9, #1
 800a0ae:	d505      	bpl.n	800a0bc <_fwalk_reent+0x24>
 800a0b0:	6824      	ldr	r4, [r4, #0]
 800a0b2:	2c00      	cmp	r4, #0
 800a0b4:	d1f7      	bne.n	800a0a6 <_fwalk_reent+0xe>
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0bc:	89ab      	ldrh	r3, [r5, #12]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d907      	bls.n	800a0d2 <_fwalk_reent+0x3a>
 800a0c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	d003      	beq.n	800a0d2 <_fwalk_reent+0x3a>
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	47c0      	blx	r8
 800a0d0:	4307      	orrs	r7, r0
 800a0d2:	3568      	adds	r5, #104	; 0x68
 800a0d4:	e7e9      	b.n	800a0aa <_fwalk_reent+0x12>

0800a0d6 <__retarget_lock_init_recursive>:
 800a0d6:	4770      	bx	lr

0800a0d8 <__retarget_lock_acquire_recursive>:
 800a0d8:	4770      	bx	lr

0800a0da <__retarget_lock_release_recursive>:
 800a0da:	4770      	bx	lr

0800a0dc <memmove>:
 800a0dc:	4288      	cmp	r0, r1
 800a0de:	b510      	push	{r4, lr}
 800a0e0:	eb01 0402 	add.w	r4, r1, r2
 800a0e4:	d902      	bls.n	800a0ec <memmove+0x10>
 800a0e6:	4284      	cmp	r4, r0
 800a0e8:	4623      	mov	r3, r4
 800a0ea:	d807      	bhi.n	800a0fc <memmove+0x20>
 800a0ec:	1e43      	subs	r3, r0, #1
 800a0ee:	42a1      	cmp	r1, r4
 800a0f0:	d008      	beq.n	800a104 <memmove+0x28>
 800a0f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0fa:	e7f8      	b.n	800a0ee <memmove+0x12>
 800a0fc:	4402      	add	r2, r0
 800a0fe:	4601      	mov	r1, r0
 800a100:	428a      	cmp	r2, r1
 800a102:	d100      	bne.n	800a106 <memmove+0x2a>
 800a104:	bd10      	pop	{r4, pc}
 800a106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a10a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a10e:	e7f7      	b.n	800a100 <memmove+0x24>

0800a110 <__malloc_lock>:
 800a110:	4801      	ldr	r0, [pc, #4]	; (800a118 <__malloc_lock+0x8>)
 800a112:	f7ff bfe1 	b.w	800a0d8 <__retarget_lock_acquire_recursive>
 800a116:	bf00      	nop
 800a118:	20000340 	.word	0x20000340

0800a11c <__malloc_unlock>:
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__malloc_unlock+0x8>)
 800a11e:	f7ff bfdc 	b.w	800a0da <__retarget_lock_release_recursive>
 800a122:	bf00      	nop
 800a124:	20000340 	.word	0x20000340

0800a128 <_realloc_r>:
 800a128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12c:	4680      	mov	r8, r0
 800a12e:	4614      	mov	r4, r2
 800a130:	460e      	mov	r6, r1
 800a132:	b921      	cbnz	r1, 800a13e <_realloc_r+0x16>
 800a134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a138:	4611      	mov	r1, r2
 800a13a:	f7fe bfbd 	b.w	80090b8 <_malloc_r>
 800a13e:	b92a      	cbnz	r2, 800a14c <_realloc_r+0x24>
 800a140:	f7fe ff4e 	bl	8008fe0 <_free_r>
 800a144:	4625      	mov	r5, r4
 800a146:	4628      	mov	r0, r5
 800a148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a14c:	f000 faa0 	bl	800a690 <_malloc_usable_size_r>
 800a150:	4284      	cmp	r4, r0
 800a152:	4607      	mov	r7, r0
 800a154:	d802      	bhi.n	800a15c <_realloc_r+0x34>
 800a156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a15a:	d812      	bhi.n	800a182 <_realloc_r+0x5a>
 800a15c:	4621      	mov	r1, r4
 800a15e:	4640      	mov	r0, r8
 800a160:	f7fe ffaa 	bl	80090b8 <_malloc_r>
 800a164:	4605      	mov	r5, r0
 800a166:	2800      	cmp	r0, #0
 800a168:	d0ed      	beq.n	800a146 <_realloc_r+0x1e>
 800a16a:	42bc      	cmp	r4, r7
 800a16c:	4622      	mov	r2, r4
 800a16e:	4631      	mov	r1, r6
 800a170:	bf28      	it	cs
 800a172:	463a      	movcs	r2, r7
 800a174:	f7fe fa4e 	bl	8008614 <memcpy>
 800a178:	4631      	mov	r1, r6
 800a17a:	4640      	mov	r0, r8
 800a17c:	f7fe ff30 	bl	8008fe0 <_free_r>
 800a180:	e7e1      	b.n	800a146 <_realloc_r+0x1e>
 800a182:	4635      	mov	r5, r6
 800a184:	e7df      	b.n	800a146 <_realloc_r+0x1e>

0800a186 <__sfputc_r>:
 800a186:	6893      	ldr	r3, [r2, #8]
 800a188:	3b01      	subs	r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	b410      	push	{r4}
 800a18e:	6093      	str	r3, [r2, #8]
 800a190:	da08      	bge.n	800a1a4 <__sfputc_r+0x1e>
 800a192:	6994      	ldr	r4, [r2, #24]
 800a194:	42a3      	cmp	r3, r4
 800a196:	db01      	blt.n	800a19c <__sfputc_r+0x16>
 800a198:	290a      	cmp	r1, #10
 800a19a:	d103      	bne.n	800a1a4 <__sfputc_r+0x1e>
 800a19c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1a0:	f000 b94a 	b.w	800a438 <__swbuf_r>
 800a1a4:	6813      	ldr	r3, [r2, #0]
 800a1a6:	1c58      	adds	r0, r3, #1
 800a1a8:	6010      	str	r0, [r2, #0]
 800a1aa:	7019      	strb	r1, [r3, #0]
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <__sfputs_r>:
 800a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	460f      	mov	r7, r1
 800a1ba:	4614      	mov	r4, r2
 800a1bc:	18d5      	adds	r5, r2, r3
 800a1be:	42ac      	cmp	r4, r5
 800a1c0:	d101      	bne.n	800a1c6 <__sfputs_r+0x12>
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	e007      	b.n	800a1d6 <__sfputs_r+0x22>
 800a1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ca:	463a      	mov	r2, r7
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f7ff ffda 	bl	800a186 <__sfputc_r>
 800a1d2:	1c43      	adds	r3, r0, #1
 800a1d4:	d1f3      	bne.n	800a1be <__sfputs_r+0xa>
 800a1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1d8 <_vfiprintf_r>:
 800a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	460d      	mov	r5, r1
 800a1de:	b09d      	sub	sp, #116	; 0x74
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	4698      	mov	r8, r3
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	b118      	cbz	r0, 800a1f0 <_vfiprintf_r+0x18>
 800a1e8:	6983      	ldr	r3, [r0, #24]
 800a1ea:	b90b      	cbnz	r3, 800a1f0 <_vfiprintf_r+0x18>
 800a1ec:	f7ff fec4 	bl	8009f78 <__sinit>
 800a1f0:	4b89      	ldr	r3, [pc, #548]	; (800a418 <_vfiprintf_r+0x240>)
 800a1f2:	429d      	cmp	r5, r3
 800a1f4:	d11b      	bne.n	800a22e <_vfiprintf_r+0x56>
 800a1f6:	6875      	ldr	r5, [r6, #4]
 800a1f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1fa:	07d9      	lsls	r1, r3, #31
 800a1fc:	d405      	bmi.n	800a20a <_vfiprintf_r+0x32>
 800a1fe:	89ab      	ldrh	r3, [r5, #12]
 800a200:	059a      	lsls	r2, r3, #22
 800a202:	d402      	bmi.n	800a20a <_vfiprintf_r+0x32>
 800a204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a206:	f7ff ff67 	bl	800a0d8 <__retarget_lock_acquire_recursive>
 800a20a:	89ab      	ldrh	r3, [r5, #12]
 800a20c:	071b      	lsls	r3, r3, #28
 800a20e:	d501      	bpl.n	800a214 <_vfiprintf_r+0x3c>
 800a210:	692b      	ldr	r3, [r5, #16]
 800a212:	b9eb      	cbnz	r3, 800a250 <_vfiprintf_r+0x78>
 800a214:	4629      	mov	r1, r5
 800a216:	4630      	mov	r0, r6
 800a218:	f000 f960 	bl	800a4dc <__swsetup_r>
 800a21c:	b1c0      	cbz	r0, 800a250 <_vfiprintf_r+0x78>
 800a21e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a220:	07dc      	lsls	r4, r3, #31
 800a222:	d50e      	bpl.n	800a242 <_vfiprintf_r+0x6a>
 800a224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a228:	b01d      	add	sp, #116	; 0x74
 800a22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22e:	4b7b      	ldr	r3, [pc, #492]	; (800a41c <_vfiprintf_r+0x244>)
 800a230:	429d      	cmp	r5, r3
 800a232:	d101      	bne.n	800a238 <_vfiprintf_r+0x60>
 800a234:	68b5      	ldr	r5, [r6, #8]
 800a236:	e7df      	b.n	800a1f8 <_vfiprintf_r+0x20>
 800a238:	4b79      	ldr	r3, [pc, #484]	; (800a420 <_vfiprintf_r+0x248>)
 800a23a:	429d      	cmp	r5, r3
 800a23c:	bf08      	it	eq
 800a23e:	68f5      	ldreq	r5, [r6, #12]
 800a240:	e7da      	b.n	800a1f8 <_vfiprintf_r+0x20>
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	0598      	lsls	r0, r3, #22
 800a246:	d4ed      	bmi.n	800a224 <_vfiprintf_r+0x4c>
 800a248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a24a:	f7ff ff46 	bl	800a0da <__retarget_lock_release_recursive>
 800a24e:	e7e9      	b.n	800a224 <_vfiprintf_r+0x4c>
 800a250:	2300      	movs	r3, #0
 800a252:	9309      	str	r3, [sp, #36]	; 0x24
 800a254:	2320      	movs	r3, #32
 800a256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a25a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a25e:	2330      	movs	r3, #48	; 0x30
 800a260:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a424 <_vfiprintf_r+0x24c>
 800a264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a268:	f04f 0901 	mov.w	r9, #1
 800a26c:	4623      	mov	r3, r4
 800a26e:	469a      	mov	sl, r3
 800a270:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a274:	b10a      	cbz	r2, 800a27a <_vfiprintf_r+0xa2>
 800a276:	2a25      	cmp	r2, #37	; 0x25
 800a278:	d1f9      	bne.n	800a26e <_vfiprintf_r+0x96>
 800a27a:	ebba 0b04 	subs.w	fp, sl, r4
 800a27e:	d00b      	beq.n	800a298 <_vfiprintf_r+0xc0>
 800a280:	465b      	mov	r3, fp
 800a282:	4622      	mov	r2, r4
 800a284:	4629      	mov	r1, r5
 800a286:	4630      	mov	r0, r6
 800a288:	f7ff ff94 	bl	800a1b4 <__sfputs_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	f000 80aa 	beq.w	800a3e6 <_vfiprintf_r+0x20e>
 800a292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a294:	445a      	add	r2, fp
 800a296:	9209      	str	r2, [sp, #36]	; 0x24
 800a298:	f89a 3000 	ldrb.w	r3, [sl]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 80a2 	beq.w	800a3e6 <_vfiprintf_r+0x20e>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ac:	f10a 0a01 	add.w	sl, sl, #1
 800a2b0:	9304      	str	r3, [sp, #16]
 800a2b2:	9307      	str	r3, [sp, #28]
 800a2b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ba:	4654      	mov	r4, sl
 800a2bc:	2205      	movs	r2, #5
 800a2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c2:	4858      	ldr	r0, [pc, #352]	; (800a424 <_vfiprintf_r+0x24c>)
 800a2c4:	f7f5 ff9c 	bl	8000200 <memchr>
 800a2c8:	9a04      	ldr	r2, [sp, #16]
 800a2ca:	b9d8      	cbnz	r0, 800a304 <_vfiprintf_r+0x12c>
 800a2cc:	06d1      	lsls	r1, r2, #27
 800a2ce:	bf44      	itt	mi
 800a2d0:	2320      	movmi	r3, #32
 800a2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d6:	0713      	lsls	r3, r2, #28
 800a2d8:	bf44      	itt	mi
 800a2da:	232b      	movmi	r3, #43	; 0x2b
 800a2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e6:	d015      	beq.n	800a314 <_vfiprintf_r+0x13c>
 800a2e8:	9a07      	ldr	r2, [sp, #28]
 800a2ea:	4654      	mov	r4, sl
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	f04f 0c0a 	mov.w	ip, #10
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f8:	3b30      	subs	r3, #48	; 0x30
 800a2fa:	2b09      	cmp	r3, #9
 800a2fc:	d94e      	bls.n	800a39c <_vfiprintf_r+0x1c4>
 800a2fe:	b1b0      	cbz	r0, 800a32e <_vfiprintf_r+0x156>
 800a300:	9207      	str	r2, [sp, #28]
 800a302:	e014      	b.n	800a32e <_vfiprintf_r+0x156>
 800a304:	eba0 0308 	sub.w	r3, r0, r8
 800a308:	fa09 f303 	lsl.w	r3, r9, r3
 800a30c:	4313      	orrs	r3, r2
 800a30e:	9304      	str	r3, [sp, #16]
 800a310:	46a2      	mov	sl, r4
 800a312:	e7d2      	b.n	800a2ba <_vfiprintf_r+0xe2>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	1d19      	adds	r1, r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	9103      	str	r1, [sp, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	bfbb      	ittet	lt
 800a320:	425b      	neglt	r3, r3
 800a322:	f042 0202 	orrlt.w	r2, r2, #2
 800a326:	9307      	strge	r3, [sp, #28]
 800a328:	9307      	strlt	r3, [sp, #28]
 800a32a:	bfb8      	it	lt
 800a32c:	9204      	strlt	r2, [sp, #16]
 800a32e:	7823      	ldrb	r3, [r4, #0]
 800a330:	2b2e      	cmp	r3, #46	; 0x2e
 800a332:	d10c      	bne.n	800a34e <_vfiprintf_r+0x176>
 800a334:	7863      	ldrb	r3, [r4, #1]
 800a336:	2b2a      	cmp	r3, #42	; 0x2a
 800a338:	d135      	bne.n	800a3a6 <_vfiprintf_r+0x1ce>
 800a33a:	9b03      	ldr	r3, [sp, #12]
 800a33c:	1d1a      	adds	r2, r3, #4
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	9203      	str	r2, [sp, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	bfb8      	it	lt
 800a346:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a34a:	3402      	adds	r4, #2
 800a34c:	9305      	str	r3, [sp, #20]
 800a34e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a434 <_vfiprintf_r+0x25c>
 800a352:	7821      	ldrb	r1, [r4, #0]
 800a354:	2203      	movs	r2, #3
 800a356:	4650      	mov	r0, sl
 800a358:	f7f5 ff52 	bl	8000200 <memchr>
 800a35c:	b140      	cbz	r0, 800a370 <_vfiprintf_r+0x198>
 800a35e:	2340      	movs	r3, #64	; 0x40
 800a360:	eba0 000a 	sub.w	r0, r0, sl
 800a364:	fa03 f000 	lsl.w	r0, r3, r0
 800a368:	9b04      	ldr	r3, [sp, #16]
 800a36a:	4303      	orrs	r3, r0
 800a36c:	3401      	adds	r4, #1
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a374:	482c      	ldr	r0, [pc, #176]	; (800a428 <_vfiprintf_r+0x250>)
 800a376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a37a:	2206      	movs	r2, #6
 800a37c:	f7f5 ff40 	bl	8000200 <memchr>
 800a380:	2800      	cmp	r0, #0
 800a382:	d03f      	beq.n	800a404 <_vfiprintf_r+0x22c>
 800a384:	4b29      	ldr	r3, [pc, #164]	; (800a42c <_vfiprintf_r+0x254>)
 800a386:	bb1b      	cbnz	r3, 800a3d0 <_vfiprintf_r+0x1f8>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	3307      	adds	r3, #7
 800a38c:	f023 0307 	bic.w	r3, r3, #7
 800a390:	3308      	adds	r3, #8
 800a392:	9303      	str	r3, [sp, #12]
 800a394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a396:	443b      	add	r3, r7
 800a398:	9309      	str	r3, [sp, #36]	; 0x24
 800a39a:	e767      	b.n	800a26c <_vfiprintf_r+0x94>
 800a39c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	e7a5      	b.n	800a2f2 <_vfiprintf_r+0x11a>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	3401      	adds	r4, #1
 800a3aa:	9305      	str	r3, [sp, #20]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	f04f 0c0a 	mov.w	ip, #10
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3b8:	3a30      	subs	r2, #48	; 0x30
 800a3ba:	2a09      	cmp	r2, #9
 800a3bc:	d903      	bls.n	800a3c6 <_vfiprintf_r+0x1ee>
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0c5      	beq.n	800a34e <_vfiprintf_r+0x176>
 800a3c2:	9105      	str	r1, [sp, #20]
 800a3c4:	e7c3      	b.n	800a34e <_vfiprintf_r+0x176>
 800a3c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e7f0      	b.n	800a3b2 <_vfiprintf_r+0x1da>
 800a3d0:	ab03      	add	r3, sp, #12
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	462a      	mov	r2, r5
 800a3d6:	4b16      	ldr	r3, [pc, #88]	; (800a430 <_vfiprintf_r+0x258>)
 800a3d8:	a904      	add	r1, sp, #16
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7fb f9be 	bl	800575c <_printf_float>
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	1c78      	adds	r0, r7, #1
 800a3e4:	d1d6      	bne.n	800a394 <_vfiprintf_r+0x1bc>
 800a3e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3e8:	07d9      	lsls	r1, r3, #31
 800a3ea:	d405      	bmi.n	800a3f8 <_vfiprintf_r+0x220>
 800a3ec:	89ab      	ldrh	r3, [r5, #12]
 800a3ee:	059a      	lsls	r2, r3, #22
 800a3f0:	d402      	bmi.n	800a3f8 <_vfiprintf_r+0x220>
 800a3f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3f4:	f7ff fe71 	bl	800a0da <__retarget_lock_release_recursive>
 800a3f8:	89ab      	ldrh	r3, [r5, #12]
 800a3fa:	065b      	lsls	r3, r3, #25
 800a3fc:	f53f af12 	bmi.w	800a224 <_vfiprintf_r+0x4c>
 800a400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a402:	e711      	b.n	800a228 <_vfiprintf_r+0x50>
 800a404:	ab03      	add	r3, sp, #12
 800a406:	9300      	str	r3, [sp, #0]
 800a408:	462a      	mov	r2, r5
 800a40a:	4b09      	ldr	r3, [pc, #36]	; (800a430 <_vfiprintf_r+0x258>)
 800a40c:	a904      	add	r1, sp, #16
 800a40e:	4630      	mov	r0, r6
 800a410:	f7fb fc48 	bl	8005ca4 <_printf_i>
 800a414:	e7e4      	b.n	800a3e0 <_vfiprintf_r+0x208>
 800a416:	bf00      	nop
 800a418:	0800accc 	.word	0x0800accc
 800a41c:	0800acec 	.word	0x0800acec
 800a420:	0800acac 	.word	0x0800acac
 800a424:	0800ac44 	.word	0x0800ac44
 800a428:	0800ac4e 	.word	0x0800ac4e
 800a42c:	0800575d 	.word	0x0800575d
 800a430:	0800a1b5 	.word	0x0800a1b5
 800a434:	0800ac4a 	.word	0x0800ac4a

0800a438 <__swbuf_r>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	460e      	mov	r6, r1
 800a43c:	4614      	mov	r4, r2
 800a43e:	4605      	mov	r5, r0
 800a440:	b118      	cbz	r0, 800a44a <__swbuf_r+0x12>
 800a442:	6983      	ldr	r3, [r0, #24]
 800a444:	b90b      	cbnz	r3, 800a44a <__swbuf_r+0x12>
 800a446:	f7ff fd97 	bl	8009f78 <__sinit>
 800a44a:	4b21      	ldr	r3, [pc, #132]	; (800a4d0 <__swbuf_r+0x98>)
 800a44c:	429c      	cmp	r4, r3
 800a44e:	d12b      	bne.n	800a4a8 <__swbuf_r+0x70>
 800a450:	686c      	ldr	r4, [r5, #4]
 800a452:	69a3      	ldr	r3, [r4, #24]
 800a454:	60a3      	str	r3, [r4, #8]
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	071a      	lsls	r2, r3, #28
 800a45a:	d52f      	bpl.n	800a4bc <__swbuf_r+0x84>
 800a45c:	6923      	ldr	r3, [r4, #16]
 800a45e:	b36b      	cbz	r3, 800a4bc <__swbuf_r+0x84>
 800a460:	6923      	ldr	r3, [r4, #16]
 800a462:	6820      	ldr	r0, [r4, #0]
 800a464:	1ac0      	subs	r0, r0, r3
 800a466:	6963      	ldr	r3, [r4, #20]
 800a468:	b2f6      	uxtb	r6, r6
 800a46a:	4283      	cmp	r3, r0
 800a46c:	4637      	mov	r7, r6
 800a46e:	dc04      	bgt.n	800a47a <__swbuf_r+0x42>
 800a470:	4621      	mov	r1, r4
 800a472:	4628      	mov	r0, r5
 800a474:	f7ff fcec 	bl	8009e50 <_fflush_r>
 800a478:	bb30      	cbnz	r0, 800a4c8 <__swbuf_r+0x90>
 800a47a:	68a3      	ldr	r3, [r4, #8]
 800a47c:	3b01      	subs	r3, #1
 800a47e:	60a3      	str	r3, [r4, #8]
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	6022      	str	r2, [r4, #0]
 800a486:	701e      	strb	r6, [r3, #0]
 800a488:	6963      	ldr	r3, [r4, #20]
 800a48a:	3001      	adds	r0, #1
 800a48c:	4283      	cmp	r3, r0
 800a48e:	d004      	beq.n	800a49a <__swbuf_r+0x62>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	07db      	lsls	r3, r3, #31
 800a494:	d506      	bpl.n	800a4a4 <__swbuf_r+0x6c>
 800a496:	2e0a      	cmp	r6, #10
 800a498:	d104      	bne.n	800a4a4 <__swbuf_r+0x6c>
 800a49a:	4621      	mov	r1, r4
 800a49c:	4628      	mov	r0, r5
 800a49e:	f7ff fcd7 	bl	8009e50 <_fflush_r>
 800a4a2:	b988      	cbnz	r0, 800a4c8 <__swbuf_r+0x90>
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a8:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <__swbuf_r+0x9c>)
 800a4aa:	429c      	cmp	r4, r3
 800a4ac:	d101      	bne.n	800a4b2 <__swbuf_r+0x7a>
 800a4ae:	68ac      	ldr	r4, [r5, #8]
 800a4b0:	e7cf      	b.n	800a452 <__swbuf_r+0x1a>
 800a4b2:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <__swbuf_r+0xa0>)
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	bf08      	it	eq
 800a4b8:	68ec      	ldreq	r4, [r5, #12]
 800a4ba:	e7ca      	b.n	800a452 <__swbuf_r+0x1a>
 800a4bc:	4621      	mov	r1, r4
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f000 f80c 	bl	800a4dc <__swsetup_r>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d0cb      	beq.n	800a460 <__swbuf_r+0x28>
 800a4c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a4cc:	e7ea      	b.n	800a4a4 <__swbuf_r+0x6c>
 800a4ce:	bf00      	nop
 800a4d0:	0800accc 	.word	0x0800accc
 800a4d4:	0800acec 	.word	0x0800acec
 800a4d8:	0800acac 	.word	0x0800acac

0800a4dc <__swsetup_r>:
 800a4dc:	4b32      	ldr	r3, [pc, #200]	; (800a5a8 <__swsetup_r+0xcc>)
 800a4de:	b570      	push	{r4, r5, r6, lr}
 800a4e0:	681d      	ldr	r5, [r3, #0]
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	b125      	cbz	r5, 800a4f2 <__swsetup_r+0x16>
 800a4e8:	69ab      	ldr	r3, [r5, #24]
 800a4ea:	b913      	cbnz	r3, 800a4f2 <__swsetup_r+0x16>
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f7ff fd43 	bl	8009f78 <__sinit>
 800a4f2:	4b2e      	ldr	r3, [pc, #184]	; (800a5ac <__swsetup_r+0xd0>)
 800a4f4:	429c      	cmp	r4, r3
 800a4f6:	d10f      	bne.n	800a518 <__swsetup_r+0x3c>
 800a4f8:	686c      	ldr	r4, [r5, #4]
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a500:	0719      	lsls	r1, r3, #28
 800a502:	d42c      	bmi.n	800a55e <__swsetup_r+0x82>
 800a504:	06dd      	lsls	r5, r3, #27
 800a506:	d411      	bmi.n	800a52c <__swsetup_r+0x50>
 800a508:	2309      	movs	r3, #9
 800a50a:	6033      	str	r3, [r6, #0]
 800a50c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a510:	81a3      	strh	r3, [r4, #12]
 800a512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a516:	e03e      	b.n	800a596 <__swsetup_r+0xba>
 800a518:	4b25      	ldr	r3, [pc, #148]	; (800a5b0 <__swsetup_r+0xd4>)
 800a51a:	429c      	cmp	r4, r3
 800a51c:	d101      	bne.n	800a522 <__swsetup_r+0x46>
 800a51e:	68ac      	ldr	r4, [r5, #8]
 800a520:	e7eb      	b.n	800a4fa <__swsetup_r+0x1e>
 800a522:	4b24      	ldr	r3, [pc, #144]	; (800a5b4 <__swsetup_r+0xd8>)
 800a524:	429c      	cmp	r4, r3
 800a526:	bf08      	it	eq
 800a528:	68ec      	ldreq	r4, [r5, #12]
 800a52a:	e7e6      	b.n	800a4fa <__swsetup_r+0x1e>
 800a52c:	0758      	lsls	r0, r3, #29
 800a52e:	d512      	bpl.n	800a556 <__swsetup_r+0x7a>
 800a530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a532:	b141      	cbz	r1, 800a546 <__swsetup_r+0x6a>
 800a534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a538:	4299      	cmp	r1, r3
 800a53a:	d002      	beq.n	800a542 <__swsetup_r+0x66>
 800a53c:	4630      	mov	r0, r6
 800a53e:	f7fe fd4f 	bl	8008fe0 <_free_r>
 800a542:	2300      	movs	r3, #0
 800a544:	6363      	str	r3, [r4, #52]	; 0x34
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a54c:	81a3      	strh	r3, [r4, #12]
 800a54e:	2300      	movs	r3, #0
 800a550:	6063      	str	r3, [r4, #4]
 800a552:	6923      	ldr	r3, [r4, #16]
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	f043 0308 	orr.w	r3, r3, #8
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	6923      	ldr	r3, [r4, #16]
 800a560:	b94b      	cbnz	r3, 800a576 <__swsetup_r+0x9a>
 800a562:	89a3      	ldrh	r3, [r4, #12]
 800a564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a56c:	d003      	beq.n	800a576 <__swsetup_r+0x9a>
 800a56e:	4621      	mov	r1, r4
 800a570:	4630      	mov	r0, r6
 800a572:	f000 f84d 	bl	800a610 <__smakebuf_r>
 800a576:	89a0      	ldrh	r0, [r4, #12]
 800a578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a57c:	f010 0301 	ands.w	r3, r0, #1
 800a580:	d00a      	beq.n	800a598 <__swsetup_r+0xbc>
 800a582:	2300      	movs	r3, #0
 800a584:	60a3      	str	r3, [r4, #8]
 800a586:	6963      	ldr	r3, [r4, #20]
 800a588:	425b      	negs	r3, r3
 800a58a:	61a3      	str	r3, [r4, #24]
 800a58c:	6923      	ldr	r3, [r4, #16]
 800a58e:	b943      	cbnz	r3, 800a5a2 <__swsetup_r+0xc6>
 800a590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a594:	d1ba      	bne.n	800a50c <__swsetup_r+0x30>
 800a596:	bd70      	pop	{r4, r5, r6, pc}
 800a598:	0781      	lsls	r1, r0, #30
 800a59a:	bf58      	it	pl
 800a59c:	6963      	ldrpl	r3, [r4, #20]
 800a59e:	60a3      	str	r3, [r4, #8]
 800a5a0:	e7f4      	b.n	800a58c <__swsetup_r+0xb0>
 800a5a2:	2000      	movs	r0, #0
 800a5a4:	e7f7      	b.n	800a596 <__swsetup_r+0xba>
 800a5a6:	bf00      	nop
 800a5a8:	20000014 	.word	0x20000014
 800a5ac:	0800accc 	.word	0x0800accc
 800a5b0:	0800acec 	.word	0x0800acec
 800a5b4:	0800acac 	.word	0x0800acac

0800a5b8 <abort>:
 800a5b8:	b508      	push	{r3, lr}
 800a5ba:	2006      	movs	r0, #6
 800a5bc:	f000 f898 	bl	800a6f0 <raise>
 800a5c0:	2001      	movs	r0, #1
 800a5c2:	f7f7 f875 	bl	80016b0 <_exit>

0800a5c6 <__swhatbuf_r>:
 800a5c6:	b570      	push	{r4, r5, r6, lr}
 800a5c8:	460e      	mov	r6, r1
 800a5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ce:	2900      	cmp	r1, #0
 800a5d0:	b096      	sub	sp, #88	; 0x58
 800a5d2:	4614      	mov	r4, r2
 800a5d4:	461d      	mov	r5, r3
 800a5d6:	da08      	bge.n	800a5ea <__swhatbuf_r+0x24>
 800a5d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	602a      	str	r2, [r5, #0]
 800a5e0:	061a      	lsls	r2, r3, #24
 800a5e2:	d410      	bmi.n	800a606 <__swhatbuf_r+0x40>
 800a5e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5e8:	e00e      	b.n	800a608 <__swhatbuf_r+0x42>
 800a5ea:	466a      	mov	r2, sp
 800a5ec:	f000 f89c 	bl	800a728 <_fstat_r>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	dbf1      	blt.n	800a5d8 <__swhatbuf_r+0x12>
 800a5f4:	9a01      	ldr	r2, [sp, #4]
 800a5f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5fe:	425a      	negs	r2, r3
 800a600:	415a      	adcs	r2, r3
 800a602:	602a      	str	r2, [r5, #0]
 800a604:	e7ee      	b.n	800a5e4 <__swhatbuf_r+0x1e>
 800a606:	2340      	movs	r3, #64	; 0x40
 800a608:	2000      	movs	r0, #0
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	b016      	add	sp, #88	; 0x58
 800a60e:	bd70      	pop	{r4, r5, r6, pc}

0800a610 <__smakebuf_r>:
 800a610:	898b      	ldrh	r3, [r1, #12]
 800a612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a614:	079d      	lsls	r5, r3, #30
 800a616:	4606      	mov	r6, r0
 800a618:	460c      	mov	r4, r1
 800a61a:	d507      	bpl.n	800a62c <__smakebuf_r+0x1c>
 800a61c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	6123      	str	r3, [r4, #16]
 800a624:	2301      	movs	r3, #1
 800a626:	6163      	str	r3, [r4, #20]
 800a628:	b002      	add	sp, #8
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	ab01      	add	r3, sp, #4
 800a62e:	466a      	mov	r2, sp
 800a630:	f7ff ffc9 	bl	800a5c6 <__swhatbuf_r>
 800a634:	9900      	ldr	r1, [sp, #0]
 800a636:	4605      	mov	r5, r0
 800a638:	4630      	mov	r0, r6
 800a63a:	f7fe fd3d 	bl	80090b8 <_malloc_r>
 800a63e:	b948      	cbnz	r0, 800a654 <__smakebuf_r+0x44>
 800a640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a644:	059a      	lsls	r2, r3, #22
 800a646:	d4ef      	bmi.n	800a628 <__smakebuf_r+0x18>
 800a648:	f023 0303 	bic.w	r3, r3, #3
 800a64c:	f043 0302 	orr.w	r3, r3, #2
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	e7e3      	b.n	800a61c <__smakebuf_r+0xc>
 800a654:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <__smakebuf_r+0x7c>)
 800a656:	62b3      	str	r3, [r6, #40]	; 0x28
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	6020      	str	r0, [r4, #0]
 800a65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a660:	81a3      	strh	r3, [r4, #12]
 800a662:	9b00      	ldr	r3, [sp, #0]
 800a664:	6163      	str	r3, [r4, #20]
 800a666:	9b01      	ldr	r3, [sp, #4]
 800a668:	6120      	str	r0, [r4, #16]
 800a66a:	b15b      	cbz	r3, 800a684 <__smakebuf_r+0x74>
 800a66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a670:	4630      	mov	r0, r6
 800a672:	f000 f86b 	bl	800a74c <_isatty_r>
 800a676:	b128      	cbz	r0, 800a684 <__smakebuf_r+0x74>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	f023 0303 	bic.w	r3, r3, #3
 800a67e:	f043 0301 	orr.w	r3, r3, #1
 800a682:	81a3      	strh	r3, [r4, #12]
 800a684:	89a0      	ldrh	r0, [r4, #12]
 800a686:	4305      	orrs	r5, r0
 800a688:	81a5      	strh	r5, [r4, #12]
 800a68a:	e7cd      	b.n	800a628 <__smakebuf_r+0x18>
 800a68c:	08009f11 	.word	0x08009f11

0800a690 <_malloc_usable_size_r>:
 800a690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a694:	1f18      	subs	r0, r3, #4
 800a696:	2b00      	cmp	r3, #0
 800a698:	bfbc      	itt	lt
 800a69a:	580b      	ldrlt	r3, [r1, r0]
 800a69c:	18c0      	addlt	r0, r0, r3
 800a69e:	4770      	bx	lr

0800a6a0 <_raise_r>:
 800a6a0:	291f      	cmp	r1, #31
 800a6a2:	b538      	push	{r3, r4, r5, lr}
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	d904      	bls.n	800a6b4 <_raise_r+0x14>
 800a6aa:	2316      	movs	r3, #22
 800a6ac:	6003      	str	r3, [r0, #0]
 800a6ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6b6:	b112      	cbz	r2, 800a6be <_raise_r+0x1e>
 800a6b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6bc:	b94b      	cbnz	r3, 800a6d2 <_raise_r+0x32>
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f000 f830 	bl	800a724 <_getpid_r>
 800a6c4:	462a      	mov	r2, r5
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ce:	f000 b817 	b.w	800a700 <_kill_r>
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d00a      	beq.n	800a6ec <_raise_r+0x4c>
 800a6d6:	1c59      	adds	r1, r3, #1
 800a6d8:	d103      	bne.n	800a6e2 <_raise_r+0x42>
 800a6da:	2316      	movs	r3, #22
 800a6dc:	6003      	str	r3, [r0, #0]
 800a6de:	2001      	movs	r0, #1
 800a6e0:	e7e7      	b.n	800a6b2 <_raise_r+0x12>
 800a6e2:	2400      	movs	r4, #0
 800a6e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	4798      	blx	r3
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e7e0      	b.n	800a6b2 <_raise_r+0x12>

0800a6f0 <raise>:
 800a6f0:	4b02      	ldr	r3, [pc, #8]	; (800a6fc <raise+0xc>)
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f7ff bfd3 	b.w	800a6a0 <_raise_r>
 800a6fa:	bf00      	nop
 800a6fc:	20000014 	.word	0x20000014

0800a700 <_kill_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d07      	ldr	r5, [pc, #28]	; (800a720 <_kill_r+0x20>)
 800a704:	2300      	movs	r3, #0
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	4611      	mov	r1, r2
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	f7f6 ffbf 	bl	8001690 <_kill>
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	d102      	bne.n	800a71c <_kill_r+0x1c>
 800a716:	682b      	ldr	r3, [r5, #0]
 800a718:	b103      	cbz	r3, 800a71c <_kill_r+0x1c>
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	bf00      	nop
 800a720:	2000033c 	.word	0x2000033c

0800a724 <_getpid_r>:
 800a724:	f7f6 bfac 	b.w	8001680 <_getpid>

0800a728 <_fstat_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4d07      	ldr	r5, [pc, #28]	; (800a748 <_fstat_r+0x20>)
 800a72c:	2300      	movs	r3, #0
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	4611      	mov	r1, r2
 800a734:	602b      	str	r3, [r5, #0]
 800a736:	f7f7 f80a 	bl	800174e <_fstat>
 800a73a:	1c43      	adds	r3, r0, #1
 800a73c:	d102      	bne.n	800a744 <_fstat_r+0x1c>
 800a73e:	682b      	ldr	r3, [r5, #0]
 800a740:	b103      	cbz	r3, 800a744 <_fstat_r+0x1c>
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	bd38      	pop	{r3, r4, r5, pc}
 800a746:	bf00      	nop
 800a748:	2000033c 	.word	0x2000033c

0800a74c <_isatty_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_isatty_r+0x1c>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	f7f7 f809 	bl	800176e <_isatty>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_isatty_r+0x1a>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_isatty_r+0x1a>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	2000033c 	.word	0x2000033c

0800a76c <_init>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr

0800a778 <_fini>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	bf00      	nop
 800a77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77e:	bc08      	pop	{r3}
 800a780:	469e      	mov	lr, r3
 800a782:	4770      	bx	lr
